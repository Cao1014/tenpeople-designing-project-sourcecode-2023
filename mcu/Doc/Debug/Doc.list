
Doc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a14  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08009bf8  08009bf8  00019bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a11c  0800a11c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a11c  0800a11c  0001a11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a124  0800a124  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a124  0800a124  0001a124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a12c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  200001e8  0800a310  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0800a310  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001415c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002651  00000000  00000000  00034370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  000369c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00037b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027408  00000000  00000000  00038b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137c1  00000000  00000000  0005ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd5cc  00000000  00000000  00073759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170d25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ad4  00000000  00000000  00170d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009bdc 	.word	0x08009bdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08009bdc 	.word	0x08009bdc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b974 	b.w	8000f38 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468e      	mov	lr, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4694      	mov	ip, r2
 8000c7a:	d969      	bls.n	8000d50 <__udivmoddi4+0xe8>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b152      	cbz	r2, 8000c98 <__udivmoddi4+0x30>
 8000c82:	fa01 f302 	lsl.w	r3, r1, r2
 8000c86:	f1c2 0120 	rsb	r1, r2, #32
 8000c8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c92:	ea41 0e03 	orr.w	lr, r1, r3
 8000c96:	4094      	lsls	r4, r2
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	0c21      	lsrs	r1, r4, #16
 8000c9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca2:	fa1f f78c 	uxth.w	r7, ip
 8000ca6:	fb08 e316 	mls	r3, r8, r6, lr
 8000caa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cae:	fb06 f107 	mul.w	r1, r6, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cbe:	f080 811f 	bcs.w	8000f00 <__udivmoddi4+0x298>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 811c 	bls.w	8000f00 <__udivmoddi4+0x298>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 f707 	mul.w	r7, r0, r7
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x92>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	f080 810a 	bcs.w	8000f04 <__udivmoddi4+0x29c>
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	f240 8107 	bls.w	8000f04 <__udivmoddi4+0x29c>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	1be4      	subs	r4, r4, r7
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa4>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xc2>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80ef 	beq.w	8000efa <__udivmoddi4+0x292>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x160>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd4>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80f9 	bhi.w	8000f2e <__udivmoddi4+0x2c6>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	469e      	mov	lr, r3
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa4>
 8000d4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xec>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 8092 	bne.w	8000e82 <__udivmoddi4+0x21a>
 8000d5e:	eba1 010c 	sub.w	r1, r1, ip
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0c20      	lsrs	r0, r4, #16
 8000d6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d72:	fb07 1113 	mls	r1, r7, r3, r1
 8000d76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7a:	fb0e f003 	mul.w	r0, lr, r3
 8000d7e:	4288      	cmp	r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x12c>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x12a>
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	f200 80cb 	bhi.w	8000f28 <__udivmoddi4+0x2c0>
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000da0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da4:	fb0e fe00 	mul.w	lr, lr, r0
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x156>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x154>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f200 80bb 	bhi.w	8000f32 <__udivmoddi4+0x2ca>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dc6:	e79c      	b.n	8000d02 <__udivmoddi4+0x9a>
 8000dc8:	f1c6 0720 	rsb	r7, r6, #32
 8000dcc:	40b3      	lsls	r3, r6
 8000dce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	431c      	orrs	r4, r3
 8000de0:	40f9      	lsrs	r1, r7
 8000de2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fb09 1118 	mls	r1, r9, r8, r1
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	fb08 f00e 	mul.w	r0, r8, lr
 8000e00:	4288      	cmp	r0, r1
 8000e02:	fa02 f206 	lsl.w	r2, r2, r6
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b8>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2bc>
 8000e14:	4288      	cmp	r0, r1
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2bc>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e28:	fb09 1110 	mls	r1, r9, r0, r1
 8000e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	458e      	cmp	lr, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1e2>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e40:	d26c      	bcs.n	8000f1c <__udivmoddi4+0x2b4>
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d96a      	bls.n	8000f1c <__udivmoddi4+0x2b4>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e52:	eba1 010e 	sub.w	r1, r1, lr
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	46c8      	mov	r8, r9
 8000e5a:	46a6      	mov	lr, r4
 8000e5c:	d356      	bcc.n	8000f0c <__udivmoddi4+0x2a4>
 8000e5e:	d053      	beq.n	8000f08 <__udivmoddi4+0x2a0>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x212>
 8000e62:	ebb3 0208 	subs.w	r2, r3, r8
 8000e66:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e72:	40f1      	lsrs	r1, r6
 8000e74:	431f      	orrs	r7, r3
 8000e76:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e90:	4091      	lsls	r1, r2
 8000e92:	4301      	orrs	r1, r0
 8000e94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e98:	fa1f fe8c 	uxth.w	lr, ip
 8000e9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea4:	0c0b      	lsrs	r3, r1, #16
 8000ea6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x260>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebe:	d22f      	bcs.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d92d      	bls.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	b289      	uxth	r1, r1
 8000ecc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb06 f30e 	mul.w	r3, r6, lr
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x28a>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee8:	d216      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d914      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000eee:	3e02      	subs	r6, #2
 8000ef0:	4461      	add	r1, ip
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef8:	e738      	b.n	8000d6c <__udivmoddi4+0x104>
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e705      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e3      	b.n	8000ccc <__udivmoddi4+0x64>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6f8      	b.n	8000cfa <__udivmoddi4+0x92>
 8000f08:	454b      	cmp	r3, r9
 8000f0a:	d2a9      	bcs.n	8000e60 <__udivmoddi4+0x1f8>
 8000f0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7a3      	b.n	8000e60 <__udivmoddi4+0x1f8>
 8000f18:	4646      	mov	r6, r8
 8000f1a:	e7ea      	b.n	8000ef2 <__udivmoddi4+0x28a>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	e794      	b.n	8000e4a <__udivmoddi4+0x1e2>
 8000f20:	4640      	mov	r0, r8
 8000f22:	e7d1      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f24:	46d0      	mov	r8, sl
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b8>
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e732      	b.n	8000d94 <__udivmoddi4+0x12c>
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e709      	b.n	8000d46 <__udivmoddi4+0xde>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e742      	b.n	8000dbe <__udivmoddi4+0x156>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <toggleLD2>:
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
//Redirect printf to UART
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
//define a function to toggle the LD2 LED in a certain pattern
void toggleLD2(int delay) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2120      	movs	r1, #32
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f002 f9ea 	bl	8003324 <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 ff32 	bl	8002dbc <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f002 f9e0 	bl	8003324 <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 ff28 	bl	8002dbc <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2120      	movs	r1, #32
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f002 f9d6 	bl	8003324 <HAL_GPIO_WritePin>
  HAL_Delay(2*delay);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 ff1d 	bl	8002dbc <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2120      	movs	r1, #32
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f002 f9cb 	bl	8003324 <HAL_GPIO_WritePin>
  HAL_Delay(2*delay);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 ff12 	bl	8002dbc <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f002 f9c0 	bl	8003324 <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 ff08 	bl	8002dbc <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2120      	movs	r1, #32
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f002 f9b6 	bl	8003324 <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fefe 	bl	8002dbc <HAL_Delay>

  //printf("Working\r\n");
  
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_TIM_IC_CaptureCallback>:

//interrupt handler for the timer
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fcc:	b0a0      	sub	sp, #128	; 0x80
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	67f8      	str	r0, [r7, #124]	; 0x7c
  if (htim->Instance == TIM5) {
 8000fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4bb4      	ldr	r3, [pc, #720]	; (80012a8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 81bf 	bne.w	800135c <HAL_TIM_IC_CaptureCallback+0x394>
      switch (htim->Channel) {
 8000fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fe0:	7f1b      	ldrb	r3, [r3, #28]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <HAL_TIM_IC_CaptureCallback+0x26>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	f000 80c5 	beq.w	8001176 <HAL_TIM_IC_CaptureCallback+0x1ae>
 8000fec:	e1b2      	b.n	8001354 <HAL_TIM_IC_CaptureCallback+0x38c>
        case HAL_TIM_ACTIVE_CHANNEL_1://right sensor 
          if(timer_flag==0)
 8000fee:	4baf      	ldr	r3, [pc, #700]	; (80012ac <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d131      	bne.n	800105a <HAL_TIM_IC_CaptureCallback+0x92>
          {
            timer_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000ffa:	f004 f9c7 	bl	800538c <HAL_TIM_ReadCapturedValue>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2200      	movs	r2, #0
 8001002:	461c      	mov	r4, r3
 8001004:	4615      	mov	r5, r2
 8001006:	4baa      	ldr	r3, [pc, #680]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8001008:	e9c3 4500 	strd	r4, r5, [r3]
            printf("Echo right: tr1= %d us\r",timer_1*10);
 800100c:	4ba8      	ldr	r3, [pc, #672]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 800100e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001012:	4622      	mov	r2, r4
 8001014:	462b      	mov	r3, r5
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	f04f 0100 	mov.w	r1, #0
 800101e:	0099      	lsls	r1, r3, #2
 8001020:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001024:	0090      	lsls	r0, r2, #2
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	eb12 0804 	adds.w	r8, r2, r4
 800102e:	eb43 0905 	adc.w	r9, r3, r5
 8001032:	eb18 0308 	adds.w	r3, r8, r8
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
 8001038:	eb49 0309 	adc.w	r3, r9, r9
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800103e:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001042:	4642      	mov	r2, r8
 8001044:	464b      	mov	r3, r9
 8001046:	489b      	ldr	r0, [pc, #620]	; (80012b4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8001048:	f006 fc8e 	bl	8007968 <iprintf>
            timer_flag=1;
 800104c:	4b97      	ldr	r3, [pc, #604]	; (80012ac <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
            timer_fin=0;
 8001052:	4b99      	ldr	r3, [pc, #612]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	e082      	b.n	8001160 <HAL_TIM_IC_CaptureCallback+0x198>
          }
          else
          {
            timer_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800105a:	2100      	movs	r1, #0
 800105c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800105e:	f004 f995 	bl	800538c <HAL_TIM_ReadCapturedValue>
 8001062:	4603      	mov	r3, r0
 8001064:	2200      	movs	r2, #0
 8001066:	673b      	str	r3, [r7, #112]	; 0x70
 8001068:	677a      	str	r2, [r7, #116]	; 0x74
 800106a:	4b94      	ldr	r3, [pc, #592]	; (80012bc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800106c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8001070:	e9c3 1200 	strd	r1, r2, [r3]
            printf("Echo right: tr2= %d us\r",timer_2*10);
 8001074:	4b91      	ldr	r3, [pc, #580]	; (80012bc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001076:	e9d3 4500 	ldrd	r4, r5, [r3]
 800107a:	4622      	mov	r2, r4
 800107c:	462b      	mov	r3, r5
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	f04f 0100 	mov.w	r1, #0
 8001086:	0099      	lsls	r1, r3, #2
 8001088:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800108c:	0090      	lsls	r0, r2, #2
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	1911      	adds	r1, r2, r4
 8001094:	6239      	str	r1, [r7, #32]
 8001096:	416b      	adcs	r3, r5
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
 800109a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800109e:	460b      	mov	r3, r1
 80010a0:	18db      	adds	r3, r3, r3
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	4613      	mov	r3, r2
 80010a6:	eb42 0303 	adc.w	r3, r2, r3
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4623      	mov	r3, r4
 80010b4:	4882      	ldr	r0, [pc, #520]	; (80012c0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80010b6:	f006 fc57 	bl	8007968 <iprintf>
            timer_flag=0;
 80010ba:	4b7c      	ldr	r3, [pc, #496]	; (80012ac <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
            timer_fin=1;
 80010c0:	4b7d      	ldr	r3, [pc, #500]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
            if(timer_1<timer_2)//if the timer is not overflowed
 80010c6:	4b7a      	ldr	r3, [pc, #488]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80010c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010cc:	4b7b      	ldr	r3, [pc, #492]	; (80012bc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	4290      	cmp	r0, r2
 80010d4:	eb71 0303 	sbcs.w	r3, r1, r3
 80010d8:	d219      	bcs.n	800110e <HAL_TIM_IC_CaptureCallback+0x146>
            {
              cmr = (double)(timer_2 - timer_1) * 0.017;//340*100/1e6/2
 80010da:	4b78      	ldr	r3, [pc, #480]	; (80012bc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80010dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e0:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	1a84      	subs	r4, r0, r2
 80010e8:	66bc      	str	r4, [r7, #104]	; 0x68
 80010ea:	eb61 0303 	sbc.w	r3, r1, r3
 80010ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80010f4:	f7ff fa72 	bl	80005dc <__aeabi_ul2d>
 80010f8:	a369      	add	r3, pc, #420	; (adr r3, 80012a0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff faa3 	bl	8000648 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	496f      	ldr	r1, [pc, #444]	; (80012c4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8001108:	e9c1 2300 	strd	r2, r3, [r1]
 800110c:	e021      	b.n	8001152 <HAL_TIM_IC_CaptureCallback+0x18a>
            }
            else
            {
              cmr = (double)(timer_2 + 0xffffffff - timer_1) * 0.017;//340*100/1e6/2
 800110e:	4b6b      	ldr	r3, [pc, #428]	; (80012bc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	1a84      	subs	r4, r0, r2
 800111c:	663c      	str	r4, [r7, #96]	; 0x60
 800111e:	eb61 0303 	sbc.w	r3, r1, r3
 8001122:	667b      	str	r3, [r7, #100]	; 0x64
 8001124:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8001128:	460b      	mov	r3, r1
 800112a:	3b01      	subs	r3, #1
 800112c:	65bb      	str	r3, [r7, #88]	; 0x58
 800112e:	4613      	mov	r3, r2
 8001130:	f143 0300 	adc.w	r3, r3, #0
 8001134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001136:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800113a:	f7ff fa4f 	bl	80005dc <__aeabi_ul2d>
 800113e:	a358      	add	r3, pc, #352	; (adr r3, 80012a0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	f7ff fa80 	bl	8000648 <__aeabi_dmul>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	495d      	ldr	r1, [pc, #372]	; (80012c4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 800114e:	e9c1 2300 	strd	r2, r3, [r1]
            }
            timer_1=0;
 8001152:	4957      	ldr	r1, [pc, #348]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	e9c1 2300 	strd	r2, r3, [r1]
          }
          //printf("Echo right: t1= %.3f us,  t2= %.3f us\r",timer_1*10, timer_2*10);
          printf("Distance right = %.3f cm. \r\n",  cmr);
 8001160:	4b58      	ldr	r3, [pc, #352]	; (80012c4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	4858      	ldr	r0, [pc, #352]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001168:	f006 fbfe 	bl	8007968 <iprintf>
          HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800116c:	2100      	movs	r1, #0
 800116e:	4857      	ldr	r0, [pc, #348]	; (80012cc <HAL_TIM_IC_CaptureCallback+0x304>)
 8001170:	f003 fb76 	bl	8004860 <HAL_TIM_IC_Start_IT>
          break;
 8001174:	e0f3      	b.n	800135e <HAL_TIM_IC_CaptureCallback+0x396>

        case HAL_TIM_ACTIVE_CHANNEL_2://left sensor
          if(timel_flag==0)
 8001176:	4b56      	ldr	r3, [pc, #344]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d133      	bne.n	80011e6 <HAL_TIM_IC_CaptureCallback+0x21e>
          {
            timel_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800117e:	2104      	movs	r1, #4
 8001180:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001182:	f004 f903 	bl	800538c <HAL_TIM_ReadCapturedValue>
 8001186:	4603      	mov	r3, r0
 8001188:	2200      	movs	r2, #0
 800118a:	653b      	str	r3, [r7, #80]	; 0x50
 800118c:	657a      	str	r2, [r7, #84]	; 0x54
 800118e:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001190:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8001194:	e9c3 1200 	strd	r1, r2, [r3]
            printf("Echo left: tl1= %d us\r",timel_1*10);
 8001198:	4b4e      	ldr	r3, [pc, #312]	; (80012d4 <HAL_TIM_IC_CaptureCallback+0x30c>)
 800119a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800119e:	4622      	mov	r2, r4
 80011a0:	462b      	mov	r3, r5
 80011a2:	f04f 0000 	mov.w	r0, #0
 80011a6:	f04f 0100 	mov.w	r1, #0
 80011aa:	0099      	lsls	r1, r3, #2
 80011ac:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80011b0:	0090      	lsls	r0, r2, #2
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	eb12 0a04 	adds.w	sl, r2, r4
 80011ba:	eb43 0b05 	adc.w	fp, r3, r5
 80011be:	eb1a 030a 	adds.w	r3, sl, sl
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	eb4b 030b 	adc.w	r3, fp, fp
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80011ce:	4652      	mov	r2, sl
 80011d0:	465b      	mov	r3, fp
 80011d2:	4841      	ldr	r0, [pc, #260]	; (80012d8 <HAL_TIM_IC_CaptureCallback+0x310>)
 80011d4:	f006 fbc8 	bl	8007968 <iprintf>
            timel_flag=1;
 80011d8:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x308>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
            timel_fin=0;
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <HAL_TIM_IC_CaptureCallback+0x314>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e0ab      	b.n	800133e <HAL_TIM_IC_CaptureCallback+0x376>
          }
          else
          {
            timel_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80011e6:	2104      	movs	r1, #4
 80011e8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80011ea:	f004 f8cf 	bl	800538c <HAL_TIM_ReadCapturedValue>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2200      	movs	r2, #0
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80011f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x318>)
 80011f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80011fc:	e9c3 1200 	strd	r1, r2, [r3]
            printf("Echo left: tl2= %d us\r",timel_2*10);
 8001200:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001202:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001206:	4622      	mov	r2, r4
 8001208:	462b      	mov	r3, r5
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	f04f 0100 	mov.w	r1, #0
 8001212:	0099      	lsls	r1, r3, #2
 8001214:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001218:	0090      	lsls	r0, r2, #2
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	1911      	adds	r1, r2, r4
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	416b      	adcs	r3, r5
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800122a:	460b      	mov	r3, r1
 800122c:	18db      	adds	r3, r3, r3
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	4613      	mov	r3, r2
 8001232:	eb42 0303 	adc.w	r3, r2, r3
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	e9d7 3400 	ldrd	r3, r4, [r7]
 800123c:	461a      	mov	r2, r3
 800123e:	4623      	mov	r3, r4
 8001240:	4828      	ldr	r0, [pc, #160]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001242:	f006 fb91 	bl	8007968 <iprintf>
            timel_flag=0;
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
            timel_fin=1;
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_TIM_IC_CaptureCallback+0x314>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
            if(timel_1<timel_2)//if the timer is not overflowed
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x318>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	4290      	cmp	r0, r2
 8001260:	eb71 0303 	sbcs.w	r3, r1, r3
 8001264:	d242      	bcs.n	80012ec <HAL_TIM_IC_CaptureCallback+0x324>
            {
              cml = (double)(timel_2 - timel_1) * 0.017;//340*100/1e6/2
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001268:	e9d3 0100 	ldrd	r0, r1, [r3]
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_TIM_IC_CaptureCallback+0x30c>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	1a84      	subs	r4, r0, r2
 8001274:	643c      	str	r4, [r7, #64]	; 0x40
 8001276:	eb61 0303 	sbc.w	r3, r1, r3
 800127a:	647b      	str	r3, [r7, #68]	; 0x44
 800127c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001280:	f7ff f9ac 	bl	80005dc <__aeabi_ul2d>
 8001284:	a306      	add	r3, pc, #24	; (adr r3, 80012a0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9dd 	bl	8000648 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4915      	ldr	r1, [pc, #84]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001294:	e9c1 2300 	strd	r2, r3, [r1]
 8001298:	e04a      	b.n	8001330 <HAL_TIM_IC_CaptureCallback+0x368>
 800129a:	bf00      	nop
 800129c:	f3af 8000 	nop.w
 80012a0:	b020c49c 	.word	0xb020c49c
 80012a4:	3f916872 	.word	0x3f916872
 80012a8:	40000c00 	.word	0x40000c00
 80012ac:	20000428 	.word	0x20000428
 80012b0:	20000430 	.word	0x20000430
 80012b4:	08009bf8 	.word	0x08009bf8
 80012b8:	20000429 	.word	0x20000429
 80012bc:	20000438 	.word	0x20000438
 80012c0:	08009c10 	.word	0x08009c10
 80012c4:	20000440 	.word	0x20000440
 80012c8:	08009c28 	.word	0x08009c28
 80012cc:	200003bc 	.word	0x200003bc
 80012d0:	20000408 	.word	0x20000408
 80012d4:	20000410 	.word	0x20000410
 80012d8:	08009c48 	.word	0x08009c48
 80012dc:	20000409 	.word	0x20000409
 80012e0:	20000418 	.word	0x20000418
 80012e4:	08009c60 	.word	0x08009c60
 80012e8:	20000420 	.word	0x20000420
            }
            else
            {
              cml = (double)(timel_2 + 0xffffffff - timel_1) * 0.017;//340*100/1e6/2
 80012ec:	4b54      	ldr	r3, [pc, #336]	; (8001440 <HAL_TIM_IC_CaptureCallback+0x478>)
 80012ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <HAL_TIM_IC_CaptureCallback+0x47c>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	1a84      	subs	r4, r0, r2
 80012fa:	63bc      	str	r4, [r7, #56]	; 0x38
 80012fc:	eb61 0303 	sbc.w	r3, r1, r3
 8001300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001302:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001306:	460b      	mov	r3, r1
 8001308:	3b01      	subs	r3, #1
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
 800130c:	4613      	mov	r3, r2
 800130e:	f143 0300 	adc.w	r3, r3, #0
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
 8001314:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001318:	f7ff f960 	bl	80005dc <__aeabi_ul2d>
 800131c:	a344      	add	r3, pc, #272	; (adr r3, 8001430 <HAL_TIM_IC_CaptureCallback+0x468>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff f991 	bl	8000648 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4947      	ldr	r1, [pc, #284]	; (8001448 <HAL_TIM_IC_CaptureCallback+0x480>)
 800132c:	e9c1 2300 	strd	r2, r3, [r1]
            }
            timel_1=0;
 8001330:	4944      	ldr	r1, [pc, #272]	; (8001444 <HAL_TIM_IC_CaptureCallback+0x47c>)
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	e9c1 2300 	strd	r2, r3, [r1]
          }
          //printf("Echo left: t1= %.3f us,  t2= %.3f us\r",timel_1*10, timel_2*10);
          printf("Distance left = %.3f cm. \r\n",  cml);
 800133e:	4b42      	ldr	r3, [pc, #264]	; (8001448 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	4841      	ldr	r0, [pc, #260]	; (800144c <HAL_TIM_IC_CaptureCallback+0x484>)
 8001346:	f006 fb0f 	bl	8007968 <iprintf>
          HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 800134a:	2104      	movs	r1, #4
 800134c:	4840      	ldr	r0, [pc, #256]	; (8001450 <HAL_TIM_IC_CaptureCallback+0x488>)
 800134e:	f003 fa87 	bl	8004860 <HAL_TIM_IC_Start_IT>
          break;
 8001352:	e004      	b.n	800135e <HAL_TIM_IC_CaptureCallback+0x396>
        default:
          printf("Error timer channel.\r\n");
 8001354:	483f      	ldr	r0, [pc, #252]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x48c>)
 8001356:	f006 fb8d 	bl	8007a74 <puts>
          break;
 800135a:	e000      	b.n	800135e <HAL_TIM_IC_CaptureCallback+0x396>
      }
    }
 800135c:	bf00      	nop
  if (htim->Instance == TIM4) {
 800135e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a3d      	ldr	r2, [pc, #244]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x490>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d15c      	bne.n	8001422 <HAL_TIM_IC_CaptureCallback+0x45a>
    switch (htim->Channel) {
 8001368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800136a:	7f1b      	ldrb	r3, [r3, #28]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d154      	bne.n	800141a <HAL_TIM_IC_CaptureCallback+0x452>
        case HAL_TIM_ACTIVE_CHANNEL_1://right sensor 
          if(timef_flag==0)
 8001370:	4b3a      	ldr	r3, [pc, #232]	; (800145c <HAL_TIM_IC_CaptureCallback+0x494>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10d      	bne.n	8001394 <HAL_TIM_IC_CaptureCallback+0x3cc>
          {
            timef_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001378:	2100      	movs	r1, #0
 800137a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800137c:	f004 f806 	bl	800538c <HAL_TIM_ReadCapturedValue>
 8001380:	4603      	mov	r3, r0
 8001382:	4a37      	ldr	r2, [pc, #220]	; (8001460 <HAL_TIM_IC_CaptureCallback+0x498>)
 8001384:	6013      	str	r3, [r2, #0]
            //printf("Echo front: tf1= %d us\r",timef_1*10);
            timef_flag=1;
 8001386:	4b35      	ldr	r3, [pc, #212]	; (800145c <HAL_TIM_IC_CaptureCallback+0x494>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
            timef_fin=0;
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <HAL_TIM_IC_CaptureCallback+0x49c>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e03d      	b.n	8001410 <HAL_TIM_IC_CaptureCallback+0x448>
          }
          else
          {
            timef_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001394:	2100      	movs	r1, #0
 8001396:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001398:	f003 fff8 	bl	800538c <HAL_TIM_ReadCapturedValue>
 800139c:	4603      	mov	r3, r0
 800139e:	4a32      	ldr	r2, [pc, #200]	; (8001468 <HAL_TIM_IC_CaptureCallback+0x4a0>)
 80013a0:	6013      	str	r3, [r2, #0]
            timef_flag=0;
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <HAL_TIM_IC_CaptureCallback+0x494>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
            timef_fin=1;
 80013a8:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <HAL_TIM_IC_CaptureCallback+0x49c>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
            if(timef_1<timef_2)//if the timer is not overflowed
 80013ae:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <HAL_TIM_IC_CaptureCallback+0x498>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_TIM_IC_CaptureCallback+0x4a0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d212      	bcs.n	80013e0 <HAL_TIM_IC_CaptureCallback+0x418>
            {
              cmf = (double)(timef_2 - timef_1) * 3.4;//340*100/5e3/2
 80013ba:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <HAL_TIM_IC_CaptureCallback+0x4a0>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_TIM_IC_CaptureCallback+0x498>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8c5 	bl	8000554 <__aeabi_ui2d>
 80013ca:	a31b      	add	r3, pc, #108	; (adr r3, 8001438 <HAL_TIM_IC_CaptureCallback+0x470>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff f93a 	bl	8000648 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4924      	ldr	r1, [pc, #144]	; (800146c <HAL_TIM_IC_CaptureCallback+0x4a4>)
 80013da:	e9c1 2300 	strd	r2, r3, [r1]
 80013de:	e014      	b.n	800140a <HAL_TIM_IC_CaptureCallback+0x442>
            }
            else
            {
              cmf = (double)(timef_2 + 0xffff - timef_1) * 3.4;//340*100/5e3/2
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_TIM_IC_CaptureCallback+0x4a0>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_TIM_IC_CaptureCallback+0x498>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80013ee:	33ff      	adds	r3, #255	; 0xff
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f8af 	bl	8000554 <__aeabi_ui2d>
 80013f6:	a310      	add	r3, pc, #64	; (adr r3, 8001438 <HAL_TIM_IC_CaptureCallback+0x470>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f924 	bl	8000648 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4919      	ldr	r1, [pc, #100]	; (800146c <HAL_TIM_IC_CaptureCallback+0x4a4>)
 8001406:	e9c1 2300 	strd	r2, r3, [r1]
            }
            timef_1=0;
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_TIM_IC_CaptureCallback+0x498>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
          }
          //printf("Echo front: t= %.3f us\r\n",timel_1*10, timer_2*10);
          //printf("Distance front = %.3f cm. \r\n",  cmf);
          HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001410:	2100      	movs	r1, #0
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <HAL_TIM_IC_CaptureCallback+0x4a8>)
 8001414:	f003 fa24 	bl	8004860 <HAL_TIM_IC_Start_IT>
          break;
 8001418:	e004      	b.n	8001424 <HAL_TIM_IC_CaptureCallback+0x45c>
        default:
          printf("Error timer channel.\r\n");
 800141a:	480e      	ldr	r0, [pc, #56]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x48c>)
 800141c:	f006 fb2a 	bl	8007a74 <puts>
          break;
 8001420:	e000      	b.n	8001424 <HAL_TIM_IC_CaptureCallback+0x45c>
    }
  } 
 8001422:	bf00      	nop
}
 8001424:	bf00      	nop
 8001426:	3780      	adds	r7, #128	; 0x80
 8001428:	46bd      	mov	sp, r7
 800142a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800142e:	bf00      	nop
 8001430:	b020c49c 	.word	0xb020c49c
 8001434:	3f916872 	.word	0x3f916872
 8001438:	33333333 	.word	0x33333333
 800143c:	400b3333 	.word	0x400b3333
 8001440:	20000418 	.word	0x20000418
 8001444:	20000410 	.word	0x20000410
 8001448:	20000420 	.word	0x20000420
 800144c:	08009c78 	.word	0x08009c78
 8001450:	200003bc 	.word	0x200003bc
 8001454:	08009c94 	.word	0x08009c94
 8001458:	40000800 	.word	0x40000800
 800145c:	20000448 	.word	0x20000448
 8001460:	2000044c 	.word	0x2000044c
 8001464:	20000449 	.word	0x20000449
 8001468:	20000450 	.word	0x20000450
 800146c:	20000458 	.word	0x20000458
 8001470:	20000370 	.word	0x20000370

08001474 <drive>:

void drive ()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
  //Transfer int to char for output
    char outputstr [11];
    outputstr [0] = 0x90;
 800147a:	2390      	movs	r3, #144	; 0x90
 800147c:	713b      	strb	r3, [r7, #4]
    outputstr [1] = xflag;
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <drive+0xd0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	717b      	strb	r3, [r7, #5]
    outputstr [2] = xspeed / 10;
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <drive+0xd4>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4a30      	ldr	r2, [pc, #192]	; (800154c <drive+0xd8>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	08db      	lsrs	r3, r3, #3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	71bb      	strb	r3, [r7, #6]
    outputstr [3] = xspeed % 10;
 8001494:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <drive+0xd4>)
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	4b2c      	ldr	r3, [pc, #176]	; (800154c <drive+0xd8>)
 800149a:	fba3 1302 	umull	r1, r3, r3, r2
 800149e:	08d9      	lsrs	r1, r3, #3
 80014a0:	460b      	mov	r3, r1
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	71fb      	strb	r3, [r7, #7]
    outputstr [4] = yflag;
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <drive+0xdc>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	723b      	strb	r3, [r7, #8]
    outputstr [5] = yspeed / 10;
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <drive+0xe0>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4a24      	ldr	r2, [pc, #144]	; (800154c <drive+0xd8>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	08db      	lsrs	r3, r3, #3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	727b      	strb	r3, [r7, #9]
    outputstr [6] = yspeed % 10;
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <drive+0xe0>)
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <drive+0xd8>)
 80014ca:	fba3 1302 	umull	r1, r3, r3, r2
 80014ce:	08d9      	lsrs	r1, r3, #3
 80014d0:	460b      	mov	r3, r1
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	72bb      	strb	r3, [r7, #10]
    outputstr [7] = wflag;
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <drive+0xe4>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	72fb      	strb	r3, [r7, #11]
    outputstr [8] = wspeed / 100;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <drive+0xe8>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <drive+0xec>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	733b      	strb	r3, [r7, #12]
    outputstr [9] = wspeed % 100 / 10;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <drive+0xe8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <drive+0xec>)
 80014fa:	fba2 1203 	umull	r1, r2, r2, r3
 80014fe:	0952      	lsrs	r2, r2, #5
 8001500:	2164      	movs	r1, #100	; 0x64
 8001502:	fb01 f202 	mul.w	r2, r1, r2
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <drive+0xd8>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	737b      	strb	r3, [r7, #13]
    outputstr [10] = wspeed % 10;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <drive+0xe8>)
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <drive+0xd8>)
 800151c:	fba3 1302 	umull	r1, r3, r3, r2
 8001520:	08d9      	lsrs	r1, r3, #3
 8001522:	460b      	mov	r3, r1
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	73bb      	strb	r3, [r7, #14]
    //Transmit the instruction to the motor driver
    HAL_UART_Transmit(&huart4, (uint8_t*)outputstr, 11, 100);
 8001530:	1d39      	adds	r1, r7, #4
 8001532:	2364      	movs	r3, #100	; 0x64
 8001534:	220b      	movs	r2, #11
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <drive+0xf0>)
 8001538:	f004 ff30 	bl	800639c <HAL_UART_Transmit>
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000569 	.word	0x20000569
 8001548:	20000568 	.word	0x20000568
 800154c:	cccccccd 	.word	0xcccccccd
 8001550:	2000056b 	.word	0x2000056b
 8001554:	2000056a 	.word	0x2000056a
 8001558:	2000056d 	.word	0x2000056d
 800155c:	2000056c 	.word	0x2000056c
 8001560:	51eb851f 	.word	0x51eb851f
 8001564:	20000294 	.word	0x20000294

08001568 <print>:
//Redirect arduino print to UART
void print(double c)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	ed87 0b00 	vstr	d0, [r7]
  printf("%.3f", c);
 8001572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <print+0x1c>)
 8001578:	f006 f9f6 	bl	8007968 <iprintf>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	08009cac 	.word	0x08009cac

08001588 <println>:
//Redirect arduino println to UART
void println(double str)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	ed87 0b00 	vstr	d0, [r7]
  printf("%.3f\r\n", str);
 8001592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <println+0x1c>)
 8001598:	f006 f9e6 	bl	8007968 <iprintf>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	08009cb4 	.word	0x08009cb4

080015a8 <Right>:
//Redifine output functions

void Right(uint8_t speed)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  yspeed=speed;
 80015b2:	4a06      	ldr	r2, [pc, #24]	; (80015cc <Right+0x24>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	7013      	strb	r3, [r2, #0]
  yflag=2;
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <Right+0x28>)
 80015ba:	2202      	movs	r2, #2
 80015bc:	701a      	strb	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000056a 	.word	0x2000056a
 80015d0:	2000056b 	.word	0x2000056b

080015d4 <Left>:

void Left(uint8_t speed)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  yspeed=speed;
 80015de:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <Left+0x24>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	7013      	strb	r3, [r2, #0]
  yflag=1;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <Left+0x28>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	2000056a 	.word	0x2000056a
 80015fc:	2000056b 	.word	0x2000056b

08001600 <Forward>:

void Forward(uint8_t speed)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  xspeed=speed;
 800160a:	4a06      	ldr	r2, [pc, #24]	; (8001624 <Forward+0x24>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	7013      	strb	r3, [r2, #0]
  xflag=2;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <Forward+0x28>)
 8001612:	2202      	movs	r2, #2
 8001614:	701a      	strb	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000568 	.word	0x20000568
 8001628:	20000569 	.word	0x20000569

0800162c <Turn_Left>:
  xspeed=speed;
  xflag=1;
}

void Turn_Left(uint8_t speed)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  wspeed=speed;
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <Turn_Left+0x24>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	7013      	strb	r3, [r2, #0]
  wflag=2;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <Turn_Left+0x28>)
 800163e:	2202      	movs	r2, #2
 8001640:	701a      	strb	r2, [r3, #0]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000056c 	.word	0x2000056c
 8001654:	2000056d 	.word	0x2000056d

08001658 <Turn_Right>:

void Turn_Right(uint8_t speed)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  wspeed=speed;
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <Turn_Right+0x24>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	7013      	strb	r3, [r2, #0]
  wflag=1;
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <Turn_Right+0x28>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2000056c 	.word	0x2000056c
 8001680:	2000056d 	.word	0x2000056d

08001684 <Alignment>:

void Alignment(double cmleft, double cmright)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af02      	add	r7, sp, #8
 800168a:	ed87 0b02 	vstr	d0, [r7, #8]
 800168e:	ed87 1b00 	vstr	d1, [r7]
  Inputultra = cml-cmr;
 8001692:	4b90      	ldr	r3, [pc, #576]	; (80018d4 <Alignment+0x250>)
 8001694:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001698:	4b8f      	ldr	r3, [pc, #572]	; (80018d8 <Alignment+0x254>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe fe1b 	bl	80002d8 <__aeabi_dsub>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	498d      	ldr	r1, [pc, #564]	; (80018dc <Alignment+0x258>)
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]
  Inputdistance = (cmleft + cmright) / 2;
 80016ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016b4:	f7fe fe12 	bl	80002dc <__adddf3>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c8:	f7ff f8e8 	bl	800089c <__aeabi_ddiv>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4983      	ldr	r1, [pc, #524]	; (80018e0 <Alignment+0x25c>)
 80016d2:	e9c1 2300 	strd	r2, r3, [r1]

  PID_Compute(&myPIDdistance);
 80016d6:	4883      	ldr	r0, [pc, #524]	; (80018e4 <Alignment+0x260>)
 80016d8:	f000 fd92 	bl	8002200 <PID_Compute>
  //myPIDdistance.Compute();

  if(Outputdistance < 0)
 80016dc:	4b82      	ldr	r3, [pc, #520]	; (80018e8 <Alignment+0x264>)
 80016de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	f7ff fa1f 	bl	8000b2c <__aeabi_dcmplt>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d03e      	beq.n	8001772 <Alignment+0xee>
  {
    if(Inputdistance < 11)
 80016f4:	4b7a      	ldr	r3, [pc, #488]	; (80018e0 <Alignment+0x25c>)
 80016f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b7b      	ldr	r3, [pc, #492]	; (80018ec <Alignment+0x268>)
 8001700:	f7ff fa14 	bl	8000b2c <__aeabi_dcmplt>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d012      	beq.n	8001730 <Alignment+0xac>
    {
      println(Inputdistance);
 800170a:	4b75      	ldr	r3, [pc, #468]	; (80018e0 <Alignment+0x25c>)
 800170c:	ed93 7b00 	vldr	d7, [r3]
 8001710:	eeb0 0a47 	vmov.f32	s0, s14
 8001714:	eef0 0a67 	vmov.f32	s1, s15
 8001718:	f7ff ff36 	bl	8001588 <println>
      println(Outputdistance);
 800171c:	4b72      	ldr	r3, [pc, #456]	; (80018e8 <Alignment+0x264>)
 800171e:	ed93 7b00 	vldr	d7, [r3]
 8001722:	eeb0 0a47 	vmov.f32	s0, s14
 8001726:	eef0 0a67 	vmov.f32	s1, s15
 800172a:	f7ff ff2d 	bl	8001588 <println>
 800172e:	e05c      	b.n	80017ea <Alignment+0x166>
      //allstop();?
    }
    else
    {
      Right(-(uint8_t)Outputdistance);
 8001730:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <Alignment+0x264>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff fa5d 	bl	8000bf8 <__aeabi_d2uiz>
 800173e:	4603      	mov	r3, r0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	425b      	negs	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff2e 	bl	80015a8 <Right>
      println(Inputdistance);
 800174c:	4b64      	ldr	r3, [pc, #400]	; (80018e0 <Alignment+0x25c>)
 800174e:	ed93 7b00 	vldr	d7, [r3]
 8001752:	eeb0 0a47 	vmov.f32	s0, s14
 8001756:	eef0 0a67 	vmov.f32	s1, s15
 800175a:	f7ff ff15 	bl	8001588 <println>
      println(Outputdistance);
 800175e:	4b62      	ldr	r3, [pc, #392]	; (80018e8 <Alignment+0x264>)
 8001760:	ed93 7b00 	vldr	d7, [r3]
 8001764:	eeb0 0a47 	vmov.f32	s0, s14
 8001768:	eef0 0a67 	vmov.f32	s1, s15
 800176c:	f7ff ff0c 	bl	8001588 <println>
 8001770:	e03b      	b.n	80017ea <Alignment+0x166>
    }
  }
  else
  {
    if(Inputdistance > 9)
 8001772:	4b5b      	ldr	r3, [pc, #364]	; (80018e0 <Alignment+0x25c>)
 8001774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <Alignment+0x26c>)
 800177e:	f7ff f9f3 	bl	8000b68 <__aeabi_dcmpgt>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d012      	beq.n	80017ae <Alignment+0x12a>
    {
      println(Inputdistance);
 8001788:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <Alignment+0x25c>)
 800178a:	ed93 7b00 	vldr	d7, [r3]
 800178e:	eeb0 0a47 	vmov.f32	s0, s14
 8001792:	eef0 0a67 	vmov.f32	s1, s15
 8001796:	f7ff fef7 	bl	8001588 <println>
      println(Outputdistance);
 800179a:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <Alignment+0x264>)
 800179c:	ed93 7b00 	vldr	d7, [r3]
 80017a0:	eeb0 0a47 	vmov.f32	s0, s14
 80017a4:	eef0 0a67 	vmov.f32	s1, s15
 80017a8:	f7ff feee 	bl	8001588 <println>
 80017ac:	e01d      	b.n	80017ea <Alignment+0x166>
      //allstop();
    }
    else
    {
      Left((uint8_t)Outputdistance);
 80017ae:	4b4e      	ldr	r3, [pc, #312]	; (80018e8 <Alignment+0x264>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff fa1e 	bl	8000bf8 <__aeabi_d2uiz>
 80017bc:	4603      	mov	r3, r0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff07 	bl	80015d4 <Left>
      println(Inputdistance);
 80017c6:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <Alignment+0x25c>)
 80017c8:	ed93 7b00 	vldr	d7, [r3]
 80017cc:	eeb0 0a47 	vmov.f32	s0, s14
 80017d0:	eef0 0a67 	vmov.f32	s1, s15
 80017d4:	f7ff fed8 	bl	8001588 <println>
      println(Outputdistance);
 80017d8:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <Alignment+0x264>)
 80017da:	ed93 7b00 	vldr	d7, [r3]
 80017de:	eeb0 0a47 	vmov.f32	s0, s14
 80017e2:	eef0 0a67 	vmov.f32	s1, s15
 80017e6:	f7ff fecf 	bl	8001588 <println>
    }
  }

  PID_Compute(&myPIDultra);
 80017ea:	4842      	ldr	r0, [pc, #264]	; (80018f4 <Alignment+0x270>)
 80017ec:	f000 fd08 	bl	8002200 <PID_Compute>
  //myPIDultra.Compute();

  if (Outputultra >= 0)
 80017f0:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <Alignment+0x274>)
 80017f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	f7ff f9a9 	bl	8000b54 <__aeabi_dcmpge>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d02b      	beq.n	8001860 <Alignment+0x1dc>
  {
    if(Inputultra < 2)
 8001808:	4b34      	ldr	r3, [pc, #208]	; (80018dc <Alignment+0x258>)
 800180a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001816:	f7ff f989 	bl	8000b2c <__aeabi_dcmplt>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d009      	beq.n	8001834 <Alignment+0x1b0>
    {
      print(Inputultra);
 8001820:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <Alignment+0x258>)
 8001822:	ed93 7b00 	vldr	d7, [r3]
 8001826:	eeb0 0a47 	vmov.f32	s0, s14
 800182a:	eef0 0a67 	vmov.f32	s1, s15
 800182e:	f7ff fe9b 	bl	8001568 <print>
 8001832:	e042      	b.n	80018ba <Alignment+0x236>
    }
    else
    {
      Turn_Left((int)Outputultra);
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <Alignment+0x274>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f9b3 	bl	8000ba8 <__aeabi_d2iz>
 8001842:	4603      	mov	r3, r0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fef0 	bl	800162c <Turn_Left>
      print(Inputultra);
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <Alignment+0x258>)
 800184e:	ed93 7b00 	vldr	d7, [r3]
 8001852:	eeb0 0a47 	vmov.f32	s0, s14
 8001856:	eef0 0a67 	vmov.f32	s1, s15
 800185a:	f7ff fe85 	bl	8001568 <print>
 800185e:	e02c      	b.n	80018ba <Alignment+0x236>
    }
  }
  else
  {
    if(Inputultra > -2)
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <Alignment+0x258>)
 8001862:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800186e:	f7ff f97b 	bl	8000b68 <__aeabi_dcmpgt>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <Alignment+0x208>
    {
      print(Inputultra);
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <Alignment+0x258>)
 800187a:	ed93 7b00 	vldr	d7, [r3]
 800187e:	eeb0 0a47 	vmov.f32	s0, s14
 8001882:	eef0 0a67 	vmov.f32	s1, s15
 8001886:	f7ff fe6f 	bl	8001568 <print>
 800188a:	e016      	b.n	80018ba <Alignment+0x236>
    }
    else
    {
      Turn_Right(-(int)Outputultra);
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <Alignment+0x274>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff f987 	bl	8000ba8 <__aeabi_d2iz>
 800189a:	4603      	mov	r3, r0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	425b      	negs	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fed8 	bl	8001658 <Turn_Right>
      print(Inputultra);
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <Alignment+0x258>)
 80018aa:	ed93 7b00 	vldr	d7, [r3]
 80018ae:	eeb0 0a47 	vmov.f32	s0, s14
 80018b2:	eef0 0a67 	vmov.f32	s1, s15
 80018b6:	f7ff fe57 	bl	8001568 <print>
  // Serial.print(" | | Distanceleft,right = ");
  // Serial.print(cmleft);//串口输出距离换算成cm的结�?
  // Serial.print(",");
  // Serial.print(cmright);
  // Serial.println("cm");
  printf("Distance left = %.3f cm, Distance right = %.3f cm.\r\n", cmleft, cmright);
 80018ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018be:	e9cd 2300 	strd	r2, r3, [sp]
 80018c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c6:	480d      	ldr	r0, [pc, #52]	; (80018fc <Alignment+0x278>)
 80018c8:	f006 f84e 	bl	8007968 <iprintf>
  

}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000420 	.word	0x20000420
 80018d8:	20000440 	.word	0x20000440
 80018dc:	20000460 	.word	0x20000460
 80018e0:	20000478 	.word	0x20000478
 80018e4:	200004f8 	.word	0x200004f8
 80018e8:	20000480 	.word	0x20000480
 80018ec:	40260000 	.word	0x40260000
 80018f0:	40220000 	.word	0x40220000
 80018f4:	20000488 	.word	0x20000488
 80018f8:	20000468 	.word	0x20000468
 80018fc:	08009cbc 	.word	0x08009cbc

08001900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001906:	f001 f9e8 	bl	8002cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800190a:	f000 f8e9 	bl	8001ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800190e:	f000 fb69 	bl	8001fe4 <MX_GPIO_Init>
  MX_TIM5_Init();
 8001912:	f000 faeb 	bl	8001eec <MX_TIM5_Init>
  MX_TIM1_Init();
 8001916:	f000 f9c5 	bl	8001ca4 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 800191a:	f000 f92d 	bl	8001b78 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 800191e:	f000 f975 	bl	8001c0c <MX_UART4_Init>
  MX_TIM4_Init();
 8001922:	f000 fa71 	bl	8001e08 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //Load parameters to PID
  PID(&myPIDultra, &Inputultra, &Outputultra, &Setpointultra,  1, 80, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 8001926:	2300      	movs	r3, #0
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	2301      	movs	r3, #1
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	ed9f 2b4a 	vldr	d2, [pc, #296]	; 8001a58 <main+0x158>
 8001932:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8001a60 <main+0x160>
 8001936:	ed9f 0b48 	vldr	d0, [pc, #288]	; 8001a58 <main+0x158>
 800193a:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <main+0x198>)
 800193c:	4a57      	ldr	r2, [pc, #348]	; (8001a9c <main+0x19c>)
 800193e:	4958      	ldr	r1, [pc, #352]	; (8001aa0 <main+0x1a0>)
 8001940:	4858      	ldr	r0, [pc, #352]	; (8001aa4 <main+0x1a4>)
 8001942:	f000 fc11 	bl	8002168 <PID>
  PID_SetMode(&myPIDultra, _PID_MODE_AUTOMATIC);
 8001946:	2101      	movs	r1, #1
 8001948:	4856      	ldr	r0, [pc, #344]	; (8001aa4 <main+0x1a4>)
 800194a:	f000 fd43 	bl	80023d4 <PID_SetMode>
  PID_SetSampleTime(&myPIDultra, 50);
 800194e:	2132      	movs	r1, #50	; 0x32
 8001950:	4854      	ldr	r0, [pc, #336]	; (8001aa4 <main+0x1a4>)
 8001952:	f000 feb3 	bl	80026bc <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDultra, -255,255);
 8001956:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8001a68 <main+0x168>
 800195a:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001a70 <main+0x170>
 800195e:	4851      	ldr	r0, [pc, #324]	; (8001aa4 <main+0x1a4>)
 8001960:	f000 fd56 	bl	8002410 <PID_SetOutputLimits>

  PID(&myPIDdistance, &Inputdistance, &Outputdistance, &Setpointdistance,  0.1, 8, 0.1, _PID_P_ON_E, _PID_CD_DIRECT);
 8001964:	2300      	movs	r3, #0
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	2301      	movs	r3, #1
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	ed9f 2b42 	vldr	d2, [pc, #264]	; 8001a78 <main+0x178>
 8001970:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001a80 <main+0x180>
 8001974:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8001a78 <main+0x178>
 8001978:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <main+0x1a8>)
 800197a:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <main+0x1ac>)
 800197c:	494c      	ldr	r1, [pc, #304]	; (8001ab0 <main+0x1b0>)
 800197e:	484d      	ldr	r0, [pc, #308]	; (8001ab4 <main+0x1b4>)
 8001980:	f000 fbf2 	bl	8002168 <PID>
  PID_SetMode(&myPIDdistance, _PID_MODE_AUTOMATIC);
 8001984:	2101      	movs	r1, #1
 8001986:	484b      	ldr	r0, [pc, #300]	; (8001ab4 <main+0x1b4>)
 8001988:	f000 fd24 	bl	80023d4 <PID_SetMode>
  PID_SetSampleTime(&myPIDdistance, 50);
 800198c:	2132      	movs	r1, #50	; 0x32
 800198e:	4849      	ldr	r0, [pc, #292]	; (8001ab4 <main+0x1b4>)
 8001990:	f000 fe94 	bl	80026bc <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDdistance, -30, 30);
 8001994:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8001a88 <main+0x188>
 8001998:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 8001a90 <main+0x190>
 800199c:	4845      	ldr	r0, [pc, #276]	; (8001ab4 <main+0x1b4>)
 800199e:	f000 fd37 	bl	8002410 <PID_SetOutputLimits>

  //start TIM1 PWM generator
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019a2:	2100      	movs	r1, #0
 80019a4:	4844      	ldr	r0, [pc, #272]	; (8001ab8 <main+0x1b8>)
 80019a6:	f002 fde7 	bl	8004578 <HAL_TIM_PWM_Start>
  //start TIM5 IT left and right sensor
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80019aa:	2100      	movs	r1, #0
 80019ac:	4843      	ldr	r0, [pc, #268]	; (8001abc <main+0x1bc>)
 80019ae:	f002 ff57 	bl	8004860 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 80019b2:	2104      	movs	r1, #4
 80019b4:	4841      	ldr	r0, [pc, #260]	; (8001abc <main+0x1bc>)
 80019b6:	f002 ff53 	bl	8004860 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80019ba:	2100      	movs	r1, #0
 80019bc:	4840      	ldr	r0, [pc, #256]	; (8001ac0 <main+0x1c0>)
 80019be:	f002 ff4f 	bl	8004860 <HAL_TIM_IC_Start_IT>

  printf("Initialized. \r\n");
 80019c2:	4840      	ldr	r0, [pc, #256]	; (8001ac4 <main+0x1c4>)
 80019c4:	f006 f856 	bl	8007a74 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(cmf<=5)
 80019c8:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <main+0x1c8>)
 80019ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <main+0x1cc>)
 80019d4:	f7ff f8b4 	bl	8000b40 <__aeabi_dcmple>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d01a      	beq.n	8001a14 <main+0x114>
    {
      while(1)
      {
        Forward(0);
 80019de:	2000      	movs	r0, #0
 80019e0:	f7ff fe0e 	bl	8001600 <Forward>
        Left(0);
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fdf5 	bl	80015d4 <Left>
        Turn_Left(0);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fe1e 	bl	800162c <Turn_Left>
        drive();
 80019f0:	f7ff fd40 	bl	8001474 <drive>
        toggleLD2(200);
 80019f4:	20c8      	movs	r0, #200	; 0xc8
 80019f6:	f7ff faa1 	bl	8000f3c <toggleLD2>
        if (cmf>5)
 80019fa:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <main+0x1c8>)
 80019fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b31      	ldr	r3, [pc, #196]	; (8001acc <main+0x1cc>)
 8001a06:	f7ff f8af 	bl	8000b68 <__aeabi_dcmpgt>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d100      	bne.n	8001a12 <main+0x112>
        Forward(0);
 8001a10:	e7e5      	b.n	80019de <main+0xde>
        {
          break;
 8001a12:	bf00      	nop
        }
      }
    }

    if(timel_fin==1 && timer_fin ==1)//if two counting is finished
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <main+0x1d0>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d1d5      	bne.n	80019c8 <main+0xc8>
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <main+0x1d4>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d1d1      	bne.n	80019c8 <main+0xc8>
    {
    Alignment(cml, cmr);
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <main+0x1d8>)
 8001a26:	ed93 7b00 	vldr	d7, [r3]
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <main+0x1dc>)
 8001a2c:	ed93 6b00 	vldr	d6, [r3]
 8001a30:	eeb0 1a46 	vmov.f32	s2, s12
 8001a34:	eef0 1a66 	vmov.f32	s3, s13
 8001a38:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3c:	eef0 0a67 	vmov.f32	s1, s15
 8001a40:	f7ff fe20 	bl	8001684 <Alignment>
    //   timel_fin=0;
    //   timer_fin=0;
    // }
    Forward(20);
 8001a44:	2014      	movs	r0, #20
 8001a46:	f7ff fddb 	bl	8001600 <Forward>
    drive();
 8001a4a:	f7ff fd13 	bl	8001474 <drive>
    toggleLD2(200);
 8001a4e:	20c8      	movs	r0, #200	; 0xc8
 8001a50:	f7ff fa74 	bl	8000f3c <toggleLD2>
    if(cmf<=5)
 8001a54:	e7b8      	b.n	80019c8 <main+0xc8>
 8001a56:	bf00      	nop
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	3ff00000 	.word	0x3ff00000
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40540000 	.word	0x40540000
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	406fe000 	.word	0x406fe000
 8001a70:	00000000 	.word	0x00000000
 8001a74:	c06fe000 	.word	0xc06fe000
 8001a78:	9999999a 	.word	0x9999999a
 8001a7c:	3fb99999 	.word	0x3fb99999
 8001a80:	00000000 	.word	0x00000000
 8001a84:	40200000 	.word	0x40200000
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	403e0000 	.word	0x403e0000
 8001a90:	00000000 	.word	0x00000000
 8001a94:	c03e0000 	.word	0xc03e0000
 8001a98:	20000470 	.word	0x20000470
 8001a9c:	20000468 	.word	0x20000468
 8001aa0:	20000460 	.word	0x20000460
 8001aa4:	20000488 	.word	0x20000488
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000480 	.word	0x20000480
 8001ab0:	20000478 	.word	0x20000478
 8001ab4:	200004f8 	.word	0x200004f8
 8001ab8:	20000324 	.word	0x20000324
 8001abc:	200003bc 	.word	0x200003bc
 8001ac0:	20000370 	.word	0x20000370
 8001ac4:	08009cf4 	.word	0x08009cf4
 8001ac8:	20000458 	.word	0x20000458
 8001acc:	40140000 	.word	0x40140000
 8001ad0:	20000409 	.word	0x20000409
 8001ad4:	20000429 	.word	0x20000429
 8001ad8:	20000420 	.word	0x20000420
 8001adc:	20000440 	.word	0x20000440

08001ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b094      	sub	sp, #80	; 0x50
 8001ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	2238      	movs	r2, #56	; 0x38
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f005 fac8 	bl	8007084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f001 fc4a 	bl	800339c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b12:	2340      	movs	r3, #64	; 0x40
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b16:	2302      	movs	r3, #2
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b22:	2355      	movs	r3, #85	; 0x55
 8001b24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 fce4 	bl	8003504 <HAL_RCC_OscConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b42:	f000 fad1 	bl	80020e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b46:	230f      	movs	r3, #15
 8001b48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f001 ffe8 	bl	8003b34 <HAL_RCC_ClockConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b6a:	f000 fabd 	bl	80020e8 <Error_Handler>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3750      	adds	r7, #80	; 0x50
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b7e:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <MX_LPUART1_UART_Init+0x90>)
 8001b80:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b88:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001bba:	4812      	ldr	r0, [pc, #72]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001bbc:	f004 fb9e 	bl	80062fc <HAL_UART_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bc6:	f000 fa8f 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001bce:	f005 f965 	bl	8006e9c <HAL_UARTEx_SetTxFifoThreshold>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001bd8:	f000 fa86 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001be0:	f005 f99a 	bl	8006f18 <HAL_UARTEx_SetRxFifoThreshold>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001bea:	f000 fa7d 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001bf0:	f005 f91b 	bl	8006e2a <HAL_UARTEx_DisableFifoMode>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001bfa:	f000 fa75 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000204 	.word	0x20000204
 8001c08:	40008000 	.word	0x40008000

08001c0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c12:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <MX_UART4_Init+0x94>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c54:	4811      	ldr	r0, [pc, #68]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c56:	f004 fb51 	bl	80062fc <HAL_UART_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001c60:	f000 fa42 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c64:	2100      	movs	r1, #0
 8001c66:	480d      	ldr	r0, [pc, #52]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c68:	f005 f918 	bl	8006e9c <HAL_UARTEx_SetTxFifoThreshold>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001c72:	f000 fa39 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c76:	2100      	movs	r1, #0
 8001c78:	4808      	ldr	r0, [pc, #32]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c7a:	f005 f94d 	bl	8006f18 <HAL_UARTEx_SetRxFifoThreshold>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001c84:	f000 fa30 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c8a:	f005 f8ce 	bl	8006e2a <HAL_UARTEx_DisableFifoMode>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001c94:	f000 fa28 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000294 	.word	0x20000294
 8001ca0:	40004c00 	.word	0x40004c00

08001ca4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b09c      	sub	sp, #112	; 0x70
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001caa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	615a      	str	r2, [r3, #20]
 8001cd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2234      	movs	r2, #52	; 0x34
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f005 f9d0 	bl	8007084 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ce4:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001ce6:	4a47      	ldr	r2, [pc, #284]	; (8001e04 <MX_TIM1_Init+0x160>)
 8001ce8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1699;
 8001cea:	4b45      	ldr	r3, [pc, #276]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001cec:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001cf0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf2:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3499;
 8001cf8:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001cfa:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001cfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d00:	4b3f      	ldr	r3, [pc, #252]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d06:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0c:	4b3c      	ldr	r3, [pc, #240]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d12:	483b      	ldr	r0, [pc, #236]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001d14:	f002 fb78 	bl	8004408 <HAL_TIM_Base_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001d1e:	f000 f9e3 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d26:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d28:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4834      	ldr	r0, [pc, #208]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001d30:	f003 fa16 	bl	8005160 <HAL_TIM_ConfigClockSource>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001d3a:	f000 f9d5 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d3e:	4830      	ldr	r0, [pc, #192]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001d40:	f002 fbb9 	bl	80044b6 <HAL_TIM_PWM_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001d4a:	f000 f9cd 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4827      	ldr	r0, [pc, #156]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001d62:	f004 f93d 	bl	8005fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001d6c:	f000 f9bc 	bl	80020e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d70:	2360      	movs	r3, #96	; 0x60
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1;
 8001d74:	2301      	movs	r3, #1
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d90:	2200      	movs	r2, #0
 8001d92:	4619      	mov	r1, r3
 8001d94:	481a      	ldr	r0, [pc, #104]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001d96:	f003 f8cf 	bl	8004f38 <HAL_TIM_PWM_ConfigChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001da0:	f000 f9a2 	bl	80020e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dbc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4807      	ldr	r0, [pc, #28]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001de2:	f004 f993 	bl	800610c <HAL_TIMEx_ConfigBreakDeadTime>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001dec:	f000 f97c 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001df0:	4803      	ldr	r0, [pc, #12]	; (8001e00 <MX_TIM1_Init+0x15c>)
 8001df2:	f000 fdf3 	bl	80029dc <HAL_TIM_MspPostInit>

}
 8001df6:	bf00      	nop
 8001df8:	3770      	adds	r7, #112	; 0x70
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000324 	.word	0x20000324
 8001e04:	40012c00 	.word	0x40012c00

08001e08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e34:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <MX_TIM4_Init+0xdc>)
 8001e36:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <MX_TIM4_Init+0xe0>)
 8001e38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 33999;
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <MX_TIM4_Init+0xdc>)
 8001e3c:	f248 42cf 	movw	r2, #33999	; 0x84cf
 8001e40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <MX_TIM4_Init+0xdc>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <MX_TIM4_Init+0xdc>)
 8001e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <MX_TIM4_Init+0xdc>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <MX_TIM4_Init+0xdc>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e5c:	4821      	ldr	r0, [pc, #132]	; (8001ee4 <MX_TIM4_Init+0xdc>)
 8001e5e:	f002 fad3 	bl	8004408 <HAL_TIM_Base_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001e68:	f000 f93e 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e70:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	4619      	mov	r1, r3
 8001e78:	481a      	ldr	r0, [pc, #104]	; (8001ee4 <MX_TIM4_Init+0xdc>)
 8001e7a:	f003 f971 	bl	8005160 <HAL_TIM_ConfigClockSource>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001e84:	f000 f930 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001e88:	4816      	ldr	r0, [pc, #88]	; (8001ee4 <MX_TIM4_Init+0xdc>)
 8001e8a:	f002 fc87 	bl	800479c <HAL_TIM_IC_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001e94:	f000 f928 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480f      	ldr	r0, [pc, #60]	; (8001ee4 <MX_TIM4_Init+0xdc>)
 8001ea8:	f004 f89a 	bl	8005fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001eb2:	f000 f919 	bl	80020e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_TIM4_Init+0xdc>)
 8001ece:	f002 ff96 	bl	8004dfe <HAL_TIM_IC_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001ed8:	f000 f906 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	3730      	adds	r7, #48	; 0x30
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000370 	.word	0x20000370
 8001ee8:	40000800 	.word	0x40000800

08001eec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	; 0x30
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001f1a:	4a31      	ldr	r2, [pc, #196]	; (8001fe0 <MX_TIM5_Init+0xf4>)
 8001f1c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001f20:	22a9      	movs	r2, #169	; 0xa9
 8001f22:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f3e:	4827      	ldr	r0, [pc, #156]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001f40:	f002 fa62 	bl	8004408 <HAL_TIM_Base_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8001f4a:	f000 f8cd 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f52:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f54:	f107 0320 	add.w	r3, r7, #32
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4820      	ldr	r0, [pc, #128]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001f5c:	f003 f900 	bl	8005160 <HAL_TIM_ConfigClockSource>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001f66:	f000 f8bf 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001f6a:	481c      	ldr	r0, [pc, #112]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001f6c:	f002 fc16 	bl	800479c <HAL_TIM_IC_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001f76:	f000 f8b7 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4814      	ldr	r0, [pc, #80]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001f8a:	f004 f829 	bl	8005fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001f94:	f000 f8a8 	bl	80020e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001f98:	230a      	movs	r3, #10
 8001f9a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	2200      	movs	r2, #0
 8001fac:	4619      	mov	r1, r3
 8001fae:	480b      	ldr	r0, [pc, #44]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001fb0:	f002 ff25 	bl	8004dfe <HAL_TIM_IC_ConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8001fba:	f000 f895 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_TIM5_Init+0xf0>)
 8001fc6:	f002 ff1a 	bl	8004dfe <HAL_TIM_IC_ConfigChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 8001fd0:	f000 f88a 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	3730      	adds	r7, #48	; 0x30
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200003bc 	.word	0x200003bc
 8001fe0:	40000c00 	.word	0x40000c00

08001fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <MX_GPIO_Init+0xd8>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <MX_GPIO_Init+0xd8>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <MX_GPIO_Init+0xd8>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <MX_GPIO_Init+0xd8>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	4a29      	ldr	r2, [pc, #164]	; (80020bc <MX_GPIO_Init+0xd8>)
 8002018:	f043 0320 	orr.w	r3, r3, #32
 800201c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201e:	4b27      	ldr	r3, [pc, #156]	; (80020bc <MX_GPIO_Init+0xd8>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <MX_GPIO_Init+0xd8>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <MX_GPIO_Init+0xd8>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <MX_GPIO_Init+0xd8>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <MX_GPIO_Init+0xd8>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <MX_GPIO_Init+0xd8>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <MX_GPIO_Init+0xd8>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trig_Pin, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002064:	f001 f95e 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800206e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4810      	ldr	r0, [pc, #64]	; (80020c0 <MX_GPIO_Init+0xdc>)
 8002080:	f000 ffce 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Trig_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Trig_Pin;
 8002084:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208a:	2301      	movs	r3, #1
 800208c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a0:	f000 ffbe 	bl	8003020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2100      	movs	r1, #0
 80020a8:	2028      	movs	r0, #40	; 0x28
 80020aa:	f000 ff84 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020ae:	2028      	movs	r0, #40	; 0x28
 80020b0:	f000 ff9b 	bl	8002fea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020b4:	bf00      	nop
 80020b6:	3728      	adds	r7, #40	; 0x28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	48000800 	.word	0x48000800

080020c4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80020cc:	1d39      	adds	r1, r7, #4
 80020ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d2:	2201      	movs	r2, #1
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <__io_putchar+0x20>)
 80020d6:	f004 f961 	bl	800639c <HAL_UART_Transmit>

  return ch;
 80020da:	687b      	ldr	r3, [r7, #4]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000204 	.word	0x20000204

080020e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ec:	b672      	cpsid	i
}
 80020ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <Error_Handler+0x8>

080020f2 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002122:	f7fe fd21 	bl	8000b68 <__aeabi_dcmpgt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8002138:	e011      	b.n	800215e <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002146:	f7fe fcf1 	bl	8000b2c <__aeabi_dcmplt>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d100      	bne.n	8002152 <PID_Init+0x60>
}
 8002150:	e005      	b.n	800215e <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6278      	str	r0, [r7, #36]	; 0x24
 8002170:	6239      	str	r1, [r7, #32]
 8002172:	61fa      	str	r2, [r7, #28]
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	ed87 0b04 	vstr	d0, [r7, #16]
 800217a:	ed87 1b02 	vstr	d1, [r7, #8]
 800217e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	6a3a      	ldr	r2, [r7, #32]
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	2200      	movs	r2, #0
 8002198:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800219a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80021f0 <PID+0x88>
 800219e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80021f8 <PID+0x90>
 80021a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021a4:	f000 f934 	bl	8002410 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	2264      	movs	r2, #100	; 0x64
 80021ac:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 80021ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021b2:	4619      	mov	r1, r3
 80021b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021b6:	f000 fa41 	bl	800263c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80021ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021be:	4619      	mov	r1, r3
 80021c0:	ed97 2b00 	vldr	d2, [r7]
 80021c4:	ed97 1b02 	vldr	d1, [r7, #8]
 80021c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80021cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021ce:	f000 f98d 	bl	80024ec <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80021d2:	f000 fde7 	bl	8002da4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	1ad2      	subs	r2, r2, r3
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	605a      	str	r2, [r3, #4]
	
}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	f3af 8000 	nop.w
 80021f0:	00000000 	.word	0x00000000
 80021f4:	406fe000 	.word	0x406fe000
	...

08002200 <PID_Compute>:
// 	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
// }

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002200:	b5b0      	push	{r4, r5, r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <PID_Compute+0x14>
	{
		return _FALSE;
 8002210:	2300      	movs	r3, #0
 8002212:	e0db      	b.n	80023cc <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002214:	f000 fdc6 	bl	8002da4 <HAL_GetTick>
 8002218:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	6a3a      	ldr	r2, [r7, #32]
 800222a:	429a      	cmp	r2, r3
 800222c:	f0c0 80cd 	bcc.w	80023ca <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002248:	f7fe f846 	bl	80002d8 <__aeabi_dsub>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800225a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800225e:	f7fe f83b 	bl	80002d8 <__aeabi_dsub>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002276:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800227a:	f7fe f9e5 	bl	8000648 <__aeabi_dmul>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fe f829 	bl	80002dc <__adddf3>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d114      	bne.n	80022c6 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80022a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022ac:	f7fe f9cc 	bl	8000648 <__aeabi_dmul>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	4629      	mov	r1, r5
 80022b8:	f7fe f80e 	bl	80002d8 <__aeabi_dsub>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80022d2:	f7fe fc49 	bl	8000b68 <__aeabi_dcmpgt>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d006      	beq.n	80022ea <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80022e8:	e010      	b.n	800230c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80022f6:	f7fe fc19 	bl	8000b2c <__aeabi_dcmplt>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00b      	beq.n	800232c <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800231a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800231e:	f7fe f993 	bl	8000648 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800232a:	e005      	b.n	8002338 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002348:	f7fe f97e 	bl	8000648 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4620      	mov	r0, r4
 8002352:	4629      	mov	r1, r5
 8002354:	f7fd ffc0 	bl	80002d8 <__aeabi_dsub>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002360:	f7fd ffbc 	bl	80002dc <__adddf3>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002372:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002376:	f7fe fbf7 	bl	8000b68 <__aeabi_dcmpgt>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002386:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800238a:	e00e      	b.n	80023aa <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002392:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002396:	f7fe fbc9 	bl	8000b2c <__aeabi_dcmplt>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80023a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023b2:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023bc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c4:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 80023ca:	2300      	movs	r3, #0
	}
	
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3730      	adds	r7, #48	; 0x30
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bdb0      	pop	{r4, r5, r7, pc}

080023d4 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <PID_SetMode+0x2e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	785b      	ldrb	r3, [r3, #1]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff fe78 	bl	80020f2 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	705a      	strb	r2, [r3, #1]
	
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6178      	str	r0, [r7, #20]
 8002418:	ed87 0b02 	vstr	d0, [r7, #8]
 800241c:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002424:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002428:	f7fe fb94 	bl	8000b54 <__aeabi_dcmpge>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d158      	bne.n	80024e4 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8002432:	6979      	ldr	r1, [r7, #20]
 8002434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002438:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 800243c:	6979      	ldr	r1, [r7, #20]
 800243e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002442:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	785b      	ldrb	r3, [r3, #1]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d04b      	beq.n	80024e6 <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800245c:	f7fe fb84 	bl	8000b68 <__aeabi_dcmpgt>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002470:	e9c1 2300 	strd	r2, r3, [r1]
 8002474:	e012      	b.n	800249c <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002484:	f7fe fb52 	bl	8000b2c <__aeabi_dcmplt>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002498:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80024a8:	f7fe fb5e 	bl	8000b68 <__aeabi_dcmpgt>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d006      	beq.n	80024c0 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80024b8:	6979      	ldr	r1, [r7, #20]
 80024ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80024be:	e012      	b.n	80024e6 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80024cc:	f7fe fb2e 	bl	8000b2c <__aeabi_dcmplt>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80024dc:	6979      	ldr	r1, [r7, #20]
 80024de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80024e2:	e000      	b.n	80024e6 <PID_SetOutputLimits+0xd6>
		return;
 80024e4:	bf00      	nop
		}
		else { }
		
	}
	
}
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	61f8      	str	r0, [r7, #28]
 80024f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80024f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80024fc:	ed87 2b00 	vstr	d2, [r7]
 8002500:	460b      	mov	r3, r1
 8002502:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002510:	f7fe fb0c 	bl	8000b2c <__aeabi_dcmplt>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 8089 	bne.w	800262e <PID_SetTunings2+0x142>
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002528:	f7fe fb00 	bl	8000b2c <__aeabi_dcmplt>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d17d      	bne.n	800262e <PID_SetTunings2+0x142>
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800253e:	f7fe faf5 	bl	8000b2c <__aeabi_dcmplt>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d172      	bne.n	800262e <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	7efa      	ldrb	r2, [r7, #27]
 800254c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800254e:	7efb      	ldrb	r3, [r7, #27]
 8002550:	2b01      	cmp	r3, #1
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002560:	69f9      	ldr	r1, [r7, #28]
 8002562:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002566:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800256a:	69f9      	ldr	r1, [r7, #28]
 800256c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002570:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002574:	69f9      	ldr	r1, [r7, #28]
 8002576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800257a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd ffe6 	bl	8000554 <__aeabi_ui2d>
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <PID_SetTunings2+0x14c>)
 800258e:	f7fe f985 	bl	800089c <__aeabi_ddiv>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 800259a:	69f9      	ldr	r1, [r7, #28]
 800259c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80025a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025ac:	f7fe f84c 	bl	8000648 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	69f9      	ldr	r1, [r7, #28]
 80025b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80025ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025c2:	f7fe f96b 	bl	800089c <__aeabi_ddiv>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	69f9      	ldr	r1, [r7, #28]
 80025cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	78db      	ldrb	r3, [r3, #3]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d12b      	bne.n	8002630 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80025de:	f04f 0000 	mov.w	r0, #0
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	f7fd fe77 	bl	80002d8 <__aeabi_dsub>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	69f9      	ldr	r1, [r7, #28]
 80025f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80025fa:	f04f 0000 	mov.w	r0, #0
 80025fe:	f04f 0100 	mov.w	r1, #0
 8002602:	f7fd fe69 	bl	80002d8 <__aeabi_dsub>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	69f9      	ldr	r1, [r7, #28]
 800260c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002616:	f04f 0000 	mov.w	r0, #0
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	f7fd fe5b 	bl	80002d8 <__aeabi_dsub>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	69f9      	ldr	r1, [r7, #28]
 8002628:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800262c:	e000      	b.n	8002630 <PID_SetTunings2+0x144>
		return;
 800262e:	bf00      	nop
		
	}
	
}
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	408f4000 	.word	0x408f4000

0800263c <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	785b      	ldrb	r3, [r3, #1]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d02e      	beq.n	80026ae <PID_SetControllerDirection+0x72>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	78db      	ldrb	r3, [r3, #3]
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	429a      	cmp	r2, r3
 8002658:	d029      	beq.n	80026ae <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002660:	f04f 0000 	mov.w	r0, #0
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	f7fd fe36 	bl	80002d8 <__aeabi_dsub>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800267c:	f04f 0000 	mov.w	r0, #0
 8002680:	f04f 0100 	mov.w	r1, #0
 8002684:	f7fd fe28 	bl	80002d8 <__aeabi_dsub>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002698:	f04f 0000 	mov.w	r0, #0
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	f7fd fe1a 	bl	80002d8 <__aeabi_dsub>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	70da      	strb	r2, [r3, #3]
	
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80026bc:	b5b0      	push	{r4, r5, r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	dd2e      	ble.n	800272a <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80026cc:	6838      	ldr	r0, [r7, #0]
 80026ce:	f7fd ff51 	bl	8000574 <__aeabi_i2d>
 80026d2:	4604      	mov	r4, r0
 80026d4:	460d      	mov	r5, r1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff3a 	bl	8000554 <__aeabi_ui2d>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4620      	mov	r0, r4
 80026e6:	4629      	mov	r1, r5
 80026e8:	f7fe f8d8 	bl	800089c <__aeabi_ddiv>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80026fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026fe:	f7fd ffa3 	bl	8000648 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002716:	f7fe f8c1 	bl	800089c <__aeabi_ddiv>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	609a      	str	r2, [r3, #8]
		
	}
	
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002734 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_MspInit+0x44>)
 800273c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273e:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <HAL_MspInit+0x44>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6613      	str	r3, [r2, #96]	; 0x60
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_MspInit+0x44>)
 8002748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_MspInit+0x44>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	4a08      	ldr	r2, [pc, #32]	; (8002778 <HAL_MspInit+0x44>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6593      	str	r3, [r2, #88]	; 0x58
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_MspInit+0x44>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800276a:	f000 febb 	bl	80034e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000

0800277c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b0a0      	sub	sp, #128	; 0x80
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002794:	f107 0318 	add.w	r3, r7, #24
 8002798:	2254      	movs	r2, #84	; 0x54
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f004 fc71 	bl	8007084 <memset>
  if(huart->Instance==LPUART1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a3d      	ldr	r2, [pc, #244]	; (800289c <HAL_UART_MspInit+0x120>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d137      	bne.n	800281c <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80027ac:	2320      	movs	r3, #32
 80027ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80027b0:	2300      	movs	r3, #0
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027b4:	f107 0318 	add.w	r3, r7, #24
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 fbd7 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027c4:	f7ff fc90 	bl	80020e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80027c8:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <HAL_UART_MspInit+0x124>)
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	4a34      	ldr	r2, [pc, #208]	; (80028a0 <HAL_UART_MspInit+0x124>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80027d4:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_UART_MspInit+0x124>)
 80027d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e0:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <HAL_UART_MspInit+0x124>)
 80027e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e4:	4a2e      	ldr	r2, [pc, #184]	; (80028a0 <HAL_UART_MspInit+0x124>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ec:	4b2c      	ldr	r3, [pc, #176]	; (80028a0 <HAL_UART_MspInit+0x124>)
 80027ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80027f8:	230c      	movs	r3, #12
 80027fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002808:	230c      	movs	r3, #12
 800280a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002810:	4619      	mov	r1, r3
 8002812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002816:	f000 fc03 	bl	8003020 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800281a:	e03b      	b.n	8002894 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==UART4)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a20      	ldr	r2, [pc, #128]	; (80028a4 <HAL_UART_MspInit+0x128>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d136      	bne.n	8002894 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002826:	2308      	movs	r3, #8
 8002828:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800282a:	2300      	movs	r3, #0
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800282e:	f107 0318 	add.w	r3, r7, #24
 8002832:	4618      	mov	r0, r3
 8002834:	f001 fb9a 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800283e:	f7ff fc53 	bl	80020e8 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <HAL_UART_MspInit+0x124>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <HAL_UART_MspInit+0x124>)
 8002848:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800284c:	6593      	str	r3, [r2, #88]	; 0x58
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <HAL_UART_MspInit+0x124>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_UART_MspInit+0x124>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	4a10      	ldr	r2, [pc, #64]	; (80028a0 <HAL_UART_MspInit+0x124>)
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_UART_MspInit+0x124>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002872:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002876:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002884:	2305      	movs	r3, #5
 8002886:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002888:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800288c:	4619      	mov	r1, r3
 800288e:	4806      	ldr	r0, [pc, #24]	; (80028a8 <HAL_UART_MspInit+0x12c>)
 8002890:	f000 fbc6 	bl	8003020 <HAL_GPIO_Init>
}
 8002894:	bf00      	nop
 8002896:	3780      	adds	r7, #128	; 0x80
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40008000 	.word	0x40008000
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40004c00 	.word	0x40004c00
 80028a8:	48000800 	.word	0x48000800

080028ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	; 0x30
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a40      	ldr	r2, [pc, #256]	; (80029cc <HAL_TIM_Base_MspInit+0x120>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10c      	bne.n	80028e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ce:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 80028d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d2:	4a3f      	ldr	r2, [pc, #252]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 80028d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028d8:	6613      	str	r3, [r2, #96]	; 0x60
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80028e6:	e06d      	b.n	80029c4 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM4)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a39      	ldr	r2, [pc, #228]	; (80029d4 <HAL_TIM_Base_MspInit+0x128>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d132      	bne.n	8002958 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028f2:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	4a36      	ldr	r2, [pc, #216]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6593      	str	r3, [r2, #88]	; 0x58
 80028fe:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002916:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002922:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002934:	230a      	movs	r3, #10
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 031c 	add.w	r3, r7, #28
 800293c:	4619      	mov	r1, r3
 800293e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002942:	f000 fb6d 	bl	8003020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2100      	movs	r1, #0
 800294a:	201e      	movs	r0, #30
 800294c:	f000 fb33 	bl	8002fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002950:	201e      	movs	r0, #30
 8002952:	f000 fb4a 	bl	8002fea <HAL_NVIC_EnableIRQ>
}
 8002956:	e035      	b.n	80029c4 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM5)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <HAL_TIM_Base_MspInit+0x12c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d130      	bne.n	80029c4 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002962:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	4a1a      	ldr	r2, [pc, #104]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	6593      	str	r3, [r2, #88]	; 0x58
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_TIM_Base_MspInit+0x124>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ul_Pin|ur_Pin;
 8002992:	2303      	movs	r3, #3
 8002994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029a2:	2302      	movs	r3, #2
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	4619      	mov	r1, r3
 80029ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b0:	f000 fb36 	bl	8003020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029b4:	2200      	movs	r2, #0
 80029b6:	2100      	movs	r1, #0
 80029b8:	2032      	movs	r0, #50	; 0x32
 80029ba:	f000 fafc 	bl	8002fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029be:	2032      	movs	r0, #50	; 0x32
 80029c0:	f000 fb13 	bl	8002fea <HAL_NVIC_EnableIRQ>
}
 80029c4:	bf00      	nop
 80029c6:	3730      	adds	r7, #48	; 0x30
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00

080029dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a11      	ldr	r2, [pc, #68]	; (8002a40 <HAL_TIM_MspPostInit+0x64>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d11b      	bne.n	8002a36 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_TIM_MspPostInit+0x68>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <HAL_TIM_MspPostInit+0x68>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <HAL_TIM_MspPostInit+0x68>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = uen_Pin;
 8002a16:	2301      	movs	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a26:	2302      	movs	r3, #2
 8002a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(uen_GPIO_Port, &GPIO_InitStruct);
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	; (8002a48 <HAL_TIM_MspPostInit+0x6c>)
 8002a32:	f000 faf5 	bl	8003020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40012c00 	.word	0x40012c00
 8002a44:	40021000 	.word	0x40021000
 8002a48:	48000800 	.word	0x48000800

08002a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <NMI_Handler+0x4>

08002a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a56:	e7fe      	b.n	8002a56 <HardFault_Handler+0x4>

08002a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <MemManage_Handler+0x4>

08002a5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a62:	e7fe      	b.n	8002a62 <BusFault_Handler+0x4>

08002a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <UsageFault_Handler+0x4>

08002a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a98:	f000 f972 	bl	8002d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002aa4:	4802      	ldr	r0, [pc, #8]	; (8002ab0 <TIM4_IRQHandler+0x10>)
 8002aa6:	f002 f82b 	bl	8004b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000370 	.word	0x20000370

08002ab4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ab8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002abc:	f000 fc4a 	bl	8003354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <TIM5_IRQHandler+0x10>)
 8002aca:	f002 f819 	bl	8004b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200003bc 	.word	0x200003bc

08002ad8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return 1;
 8002adc:	2301      	movs	r3, #1
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_kill>:

int _kill(int pid, int sig)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002af2:	f004 fa9d 	bl	8007030 <__errno>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2216      	movs	r2, #22
 8002afa:	601a      	str	r2, [r3, #0]
  return -1;
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_exit>:

void _exit (int status)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b10:	f04f 31ff 	mov.w	r1, #4294967295
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ffe7 	bl	8002ae8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b1a:	e7fe      	b.n	8002b1a <_exit+0x12>

08002b1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	e00a      	b.n	8002b44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b2e:	f3af 8000 	nop.w
 8002b32:	4601      	mov	r1, r0
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	60ba      	str	r2, [r7, #8]
 8002b3a:	b2ca      	uxtb	r2, r1
 8002b3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3301      	adds	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	dbf0      	blt.n	8002b2e <_read+0x12>
  }

  return len;
 8002b4c:	687b      	ldr	r3, [r7, #4]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e009      	b.n	8002b7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	60ba      	str	r2, [r7, #8]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff faa7 	bl	80020c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	dbf1      	blt.n	8002b68 <_write+0x12>
  }
  return len;
 8002b84:	687b      	ldr	r3, [r7, #4]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <_close>:

int _close(int file)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <_isatty>:

int _isatty(int file)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <_sbrk+0x5c>)
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <_sbrk+0x60>)
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <_sbrk+0x64>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <_sbrk+0x64>)
 8002c16:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <_sbrk+0x68>)
 8002c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <_sbrk+0x64>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d207      	bcs.n	8002c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c28:	f004 fa02 	bl	8007030 <__errno>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	220c      	movs	r2, #12
 8002c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
 8002c36:	e009      	b.n	8002c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <_sbrk+0x64>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c3e:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <_sbrk+0x64>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <_sbrk+0x64>)
 8002c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20020000 	.word	0x20020000
 8002c58:	00000400 	.word	0x00000400
 8002c5c:	20000570 	.word	0x20000570
 8002c60:	20000588 	.word	0x20000588

08002c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <SystemInit+0x20>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <SystemInit+0x20>)
 8002c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c88:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c8c:	480d      	ldr	r0, [pc, #52]	; (8002cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c8e:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c90:	4a0e      	ldr	r2, [pc, #56]	; (8002ccc <LoopForever+0xe>)
  movs r3, #0
 8002c92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c94:	e002      	b.n	8002c9c <LoopCopyDataInit>

08002c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c9a:	3304      	adds	r3, #4

08002c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca0:	d3f9      	bcc.n	8002c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ca4:	4c0b      	ldr	r4, [pc, #44]	; (8002cd4 <LoopForever+0x16>)
  movs r3, #0
 8002ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca8:	e001      	b.n	8002cae <LoopFillZerobss>

08002caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cac:	3204      	adds	r2, #4

08002cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb0:	d3fb      	bcc.n	8002caa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cb2:	f7ff ffd7 	bl	8002c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cb6:	f004 f9c1 	bl	800703c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cba:	f7fe fe21 	bl	8001900 <main>

08002cbe <LoopForever>:

LoopForever:
    b LoopForever
 8002cbe:	e7fe      	b.n	8002cbe <LoopForever>
  ldr   r0, =_estack
 8002cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002ccc:	0800a12c 	.word	0x0800a12c
  ldr r2, =_sbss
 8002cd0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002cd4:	20000588 	.word	0x20000588

08002cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cd8:	e7fe      	b.n	8002cd8 <ADC1_2_IRQHandler>

08002cda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce4:	2003      	movs	r0, #3
 8002ce6:	f000 f95b 	bl	8002fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cea:	2000      	movs	r0, #0
 8002cec:	f000 f80e 	bl	8002d0c <HAL_InitTick>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	71fb      	strb	r3, [r7, #7]
 8002cfa:	e001      	b.n	8002d00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cfc:	f7ff fd1a 	bl	8002734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d00:	79fb      	ldrb	r3, [r7, #7]

}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d18:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <HAL_InitTick+0x68>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d022      	beq.n	8002d66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d20:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <HAL_InitTick+0x6c>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_InitTick+0x68>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 f966 	bl	8003006 <HAL_SYSTICK_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10f      	bne.n	8002d60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	d809      	bhi.n	8002d5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d46:	2200      	movs	r2, #0
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4e:	f000 f932 	bl	8002fb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <HAL_InitTick+0x70>)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	e007      	b.n	8002d6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	e004      	b.n	8002d6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e001      	b.n	8002d6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000010 	.word	0x20000010
 8002d78:	20000008 	.word	0x20000008
 8002d7c:	2000000c 	.word	0x2000000c

08002d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_IncTick+0x1c>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_IncTick+0x20>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4a03      	ldr	r2, [pc, #12]	; (8002d9c <HAL_IncTick+0x1c>)
 8002d90:	6013      	str	r3, [r2, #0]
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	20000574 	.word	0x20000574
 8002da0:	20000010 	.word	0x20000010

08002da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return uwTick;
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_GetTick+0x14>)
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000574 	.word	0x20000574

08002dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7ff ffee 	bl	8002da4 <HAL_GetTick>
 8002dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d004      	beq.n	8002de0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_Delay+0x40>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4413      	add	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002de0:	bf00      	nop
 8002de2:	f7ff ffdf 	bl	8002da4 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d8f7      	bhi.n	8002de2 <HAL_Delay+0x26>
  {
  }
}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000010 	.word	0x20000010

08002e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e32:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	60d3      	str	r3, [r2, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <__NVIC_GetPriorityGrouping+0x18>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	f003 0307 	and.w	r3, r3, #7
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	db0b      	blt.n	8002e8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	4907      	ldr	r1, [pc, #28]	; (8002e9c <__NVIC_EnableIRQ+0x38>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	2001      	movs	r0, #1
 8002e86:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000e100 	.word	0xe000e100

08002ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	6039      	str	r1, [r7, #0]
 8002eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	db0a      	blt.n	8002eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	490c      	ldr	r1, [pc, #48]	; (8002eec <__NVIC_SetPriority+0x4c>)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	0112      	lsls	r2, r2, #4
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ec8:	e00a      	b.n	8002ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	4908      	ldr	r1, [pc, #32]	; (8002ef0 <__NVIC_SetPriority+0x50>)
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	3b04      	subs	r3, #4
 8002ed8:	0112      	lsls	r2, r2, #4
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	440b      	add	r3, r1
 8002ede:	761a      	strb	r2, [r3, #24]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000e100 	.word	0xe000e100
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	; 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f1c3 0307 	rsb	r3, r3, #7
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	bf28      	it	cs
 8002f12:	2304      	movcs	r3, #4
 8002f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d902      	bls.n	8002f24 <NVIC_EncodePriority+0x30>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3b03      	subs	r3, #3
 8002f22:	e000      	b.n	8002f26 <NVIC_EncodePriority+0x32>
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	401a      	ands	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	43d9      	mvns	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f4c:	4313      	orrs	r3, r2
         );
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f6c:	d301      	bcc.n	8002f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00f      	b.n	8002f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <SysTick_Config+0x40>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7a:	210f      	movs	r1, #15
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	f7ff ff8e 	bl	8002ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <SysTick_Config+0x40>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8a:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <SysTick_Config+0x40>)
 8002f8c:	2207      	movs	r2, #7
 8002f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	e000e010 	.word	0xe000e010

08002fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ff29 	bl	8002e00 <__NVIC_SetPriorityGrouping>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc4:	f7ff ff40 	bl	8002e48 <__NVIC_GetPriorityGrouping>
 8002fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	6978      	ldr	r0, [r7, #20]
 8002fd0:	f7ff ff90 	bl	8002ef4 <NVIC_EncodePriority>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff5f 	bl	8002ea0 <__NVIC_SetPriority>
}
 8002fe2:	bf00      	nop
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff33 	bl	8002e64 <__NVIC_EnableIRQ>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ffa4 	bl	8002f5c <SysTick_Config>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800302e:	e15a      	b.n	80032e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 814c 	beq.w	80032e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d005      	beq.n	8003060 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800305c:	2b02      	cmp	r3, #2
 800305e:	d130      	bne.n	80030c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003096:	2201      	movs	r2, #1
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	f003 0201 	and.w	r2, r3, #1
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d017      	beq.n	80030fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d123      	bne.n	8003152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	08da      	lsrs	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3208      	adds	r2, #8
 8003112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	220f      	movs	r2, #15
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	08da      	lsrs	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	6939      	ldr	r1, [r7, #16]
 800314e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	2203      	movs	r2, #3
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0203 	and.w	r2, r3, #3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80a6 	beq.w	80032e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003194:	4b5b      	ldr	r3, [pc, #364]	; (8003304 <HAL_GPIO_Init+0x2e4>)
 8003196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003198:	4a5a      	ldr	r2, [pc, #360]	; (8003304 <HAL_GPIO_Init+0x2e4>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6613      	str	r3, [r2, #96]	; 0x60
 80031a0:	4b58      	ldr	r3, [pc, #352]	; (8003304 <HAL_GPIO_Init+0x2e4>)
 80031a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ac:	4a56      	ldr	r2, [pc, #344]	; (8003308 <HAL_GPIO_Init+0x2e8>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	3302      	adds	r3, #2
 80031b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	220f      	movs	r2, #15
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031d6:	d01f      	beq.n	8003218 <HAL_GPIO_Init+0x1f8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a4c      	ldr	r2, [pc, #304]	; (800330c <HAL_GPIO_Init+0x2ec>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d019      	beq.n	8003214 <HAL_GPIO_Init+0x1f4>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a4b      	ldr	r2, [pc, #300]	; (8003310 <HAL_GPIO_Init+0x2f0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d013      	beq.n	8003210 <HAL_GPIO_Init+0x1f0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a4a      	ldr	r2, [pc, #296]	; (8003314 <HAL_GPIO_Init+0x2f4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00d      	beq.n	800320c <HAL_GPIO_Init+0x1ec>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a49      	ldr	r2, [pc, #292]	; (8003318 <HAL_GPIO_Init+0x2f8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <HAL_GPIO_Init+0x1e8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a48      	ldr	r2, [pc, #288]	; (800331c <HAL_GPIO_Init+0x2fc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_GPIO_Init+0x1e4>
 8003200:	2305      	movs	r3, #5
 8003202:	e00a      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 8003204:	2306      	movs	r3, #6
 8003206:	e008      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 8003208:	2304      	movs	r3, #4
 800320a:	e006      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 800320c:	2303      	movs	r3, #3
 800320e:	e004      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 8003210:	2302      	movs	r3, #2
 8003212:	e002      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 8003218:	2300      	movs	r3, #0
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	f002 0203 	and.w	r2, r2, #3
 8003220:	0092      	lsls	r2, r2, #2
 8003222:	4093      	lsls	r3, r2
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800322a:	4937      	ldr	r1, [pc, #220]	; (8003308 <HAL_GPIO_Init+0x2e8>)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3302      	adds	r3, #2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003238:	4b39      	ldr	r3, [pc, #228]	; (8003320 <HAL_GPIO_Init+0x300>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800325c:	4a30      	ldr	r2, [pc, #192]	; (8003320 <HAL_GPIO_Init+0x300>)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003262:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <HAL_GPIO_Init+0x300>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43db      	mvns	r3, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003286:	4a26      	ldr	r2, [pc, #152]	; (8003320 <HAL_GPIO_Init+0x300>)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_GPIO_Init+0x300>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	43db      	mvns	r3, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_GPIO_Init+0x300>)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <HAL_GPIO_Init+0x300>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032da:	4a11      	ldr	r2, [pc, #68]	; (8003320 <HAL_GPIO_Init+0x300>)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3301      	adds	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f47f ae9d 	bne.w	8003030 <HAL_GPIO_Init+0x10>
  }
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40021000 	.word	0x40021000
 8003308:	40010000 	.word	0x40010000
 800330c:	48000400 	.word	0x48000400
 8003310:	48000800 	.word	0x48000800
 8003314:	48000c00 	.word	0x48000c00
 8003318:	48001000 	.word	0x48001000
 800331c:	48001400 	.word	0x48001400
 8003320:	40010400 	.word	0x40010400

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003340:	e002      	b.n	8003348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d006      	beq.n	8003378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800336a:	4a05      	ldr	r2, [pc, #20]	; (8003380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f806 	bl	8003384 <HAL_GPIO_EXTI_Callback>
  }
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40010400 	.word	0x40010400

08003384 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d141      	bne.n	800342e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033aa:	4b4b      	ldr	r3, [pc, #300]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b6:	d131      	bne.n	800341c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033b8:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033be:	4a46      	ldr	r2, [pc, #280]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033c8:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033d0:	4a41      	ldr	r2, [pc, #260]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033d8:	4b40      	ldr	r3, [pc, #256]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2232      	movs	r2, #50	; 0x32
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	4a3f      	ldr	r2, [pc, #252]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	0c9b      	lsrs	r3, r3, #18
 80033ea:	3301      	adds	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ee:	e002      	b.n	80033f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033f6:	4b38      	ldr	r3, [pc, #224]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003402:	d102      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f2      	bne.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800340a:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003416:	d158      	bne.n	80034ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e057      	b.n	80034cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800341c:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003422:	4a2d      	ldr	r2, [pc, #180]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003428:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800342c:	e04d      	b.n	80034ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003434:	d141      	bne.n	80034ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003436:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003442:	d131      	bne.n	80034a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003444:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800344a:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003450:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003454:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800345c:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003462:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003464:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2232      	movs	r2, #50	; 0x32
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003470:	fba2 2303 	umull	r2, r3, r2, r3
 8003474:	0c9b      	lsrs	r3, r3, #18
 8003476:	3301      	adds	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800347a:	e002      	b.n	8003482 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3b01      	subs	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d102      	bne.n	8003496 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f2      	bne.n	800347c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a2:	d112      	bne.n	80034ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e011      	b.n	80034cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ae:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034b8:	e007      	b.n	80034ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034c2:	4a05      	ldr	r2, [pc, #20]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40007000 	.word	0x40007000
 80034dc:	20000008 	.word	0x20000008
 80034e0:	431bde83 	.word	0x431bde83

080034e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034f2:	6093      	str	r3, [r2, #8]
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40007000 	.word	0x40007000

08003504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e306      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d075      	beq.n	800360e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003522:	4b97      	ldr	r3, [pc, #604]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800352c:	4b94      	ldr	r3, [pc, #592]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b0c      	cmp	r3, #12
 800353a:	d102      	bne.n	8003542 <HAL_RCC_OscConfig+0x3e>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b03      	cmp	r3, #3
 8003540:	d002      	beq.n	8003548 <HAL_RCC_OscConfig+0x44>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b8d      	ldr	r3, [pc, #564]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05b      	beq.n	800360c <HAL_RCC_OscConfig+0x108>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d157      	bne.n	800360c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e2e1      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x74>
 800356a:	4b85      	ldr	r3, [pc, #532]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a84      	ldr	r2, [pc, #528]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e01d      	b.n	80035b4 <HAL_RCC_OscConfig+0xb0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x98>
 8003582:	4b7f      	ldr	r3, [pc, #508]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a7e      	ldr	r2, [pc, #504]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b7c      	ldr	r3, [pc, #496]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7b      	ldr	r2, [pc, #492]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0xb0>
 800359c:	4b78      	ldr	r3, [pc, #480]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a77      	ldr	r2, [pc, #476]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b75      	ldr	r3, [pc, #468]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a74      	ldr	r2, [pc, #464]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d013      	beq.n	80035e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7ff fbf2 	bl	8002da4 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c4:	f7ff fbee 	bl	8002da4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e2a6      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d6:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0xc0>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7ff fbde 	bl	8002da4 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ec:	f7ff fbda 	bl	8002da4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e292      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035fe:	4b60      	ldr	r3, [pc, #384]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0xe8>
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d075      	beq.n	8003706 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361a:	4b59      	ldr	r3, [pc, #356]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003624:	4b56      	ldr	r3, [pc, #344]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d102      	bne.n	800363a <HAL_RCC_OscConfig+0x136>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d002      	beq.n	8003640 <HAL_RCC_OscConfig+0x13c>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d11f      	bne.n	8003680 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003640:	4b4f      	ldr	r3, [pc, #316]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_OscConfig+0x154>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e265      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003658:	4b49      	ldr	r3, [pc, #292]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	061b      	lsls	r3, r3, #24
 8003666:	4946      	ldr	r1, [pc, #280]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800366c:	4b45      	ldr	r3, [pc, #276]	; (8003784 <HAL_RCC_OscConfig+0x280>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fb4b 	bl	8002d0c <HAL_InitTick>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d043      	beq.n	8003704 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e251      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d023      	beq.n	80036d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003688:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a3c      	ldr	r2, [pc, #240]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7ff fb86 	bl	8002da4 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369c:	f7ff fb82 	bl	8002da4 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e23a      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ae:	4b34      	ldr	r3, [pc, #208]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	492d      	ldr	r1, [pc, #180]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]
 80036ce:	e01a      	b.n	8003706 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d0:	4b2b      	ldr	r3, [pc, #172]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2a      	ldr	r2, [pc, #168]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 80036d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7ff fb62 	bl	8002da4 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e4:	f7ff fb5e 	bl	8002da4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e216      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036f6:	4b22      	ldr	r3, [pc, #136]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x1e0>
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003704:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d041      	beq.n	8003796 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01c      	beq.n	8003754 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371a:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 800371c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7ff fb3b 	bl	8002da4 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003732:	f7ff fb37 	bl	8002da4 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e1ef      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0ef      	beq.n	8003732 <HAL_RCC_OscConfig+0x22e>
 8003752:	e020      	b.n	8003796 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 8003756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375a:	4a09      	ldr	r2, [pc, #36]	; (8003780 <HAL_RCC_OscConfig+0x27c>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7ff fb1e 	bl	8002da4 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800376a:	e00d      	b.n	8003788 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376c:	f7ff fb1a 	bl	8002da4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d906      	bls.n	8003788 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e1d2      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003788:	4b8c      	ldr	r3, [pc, #560]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1ea      	bne.n	800376c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80a6 	beq.w	80038f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037a8:	4b84      	ldr	r3, [pc, #528]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_OscConfig+0x2b4>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x2b6>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00d      	beq.n	80037da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4b7f      	ldr	r3, [pc, #508]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	4a7e      	ldr	r2, [pc, #504]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6593      	str	r3, [r2, #88]	; 0x58
 80037ca:	4b7c      	ldr	r3, [pc, #496]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037d6:	2301      	movs	r3, #1
 80037d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037da:	4b79      	ldr	r3, [pc, #484]	; (80039c0 <HAL_RCC_OscConfig+0x4bc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d118      	bne.n	8003818 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e6:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <HAL_RCC_OscConfig+0x4bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a75      	ldr	r2, [pc, #468]	; (80039c0 <HAL_RCC_OscConfig+0x4bc>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f2:	f7ff fad7 	bl	8002da4 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fa:	f7ff fad3 	bl	8002da4 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e18b      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380c:	4b6c      	ldr	r3, [pc, #432]	; (80039c0 <HAL_RCC_OscConfig+0x4bc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d108      	bne.n	8003832 <HAL_RCC_OscConfig+0x32e>
 8003820:	4b66      	ldr	r3, [pc, #408]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	4a65      	ldr	r2, [pc, #404]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003830:	e024      	b.n	800387c <HAL_RCC_OscConfig+0x378>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b05      	cmp	r3, #5
 8003838:	d110      	bne.n	800385c <HAL_RCC_OscConfig+0x358>
 800383a:	4b60      	ldr	r3, [pc, #384]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	4a5e      	ldr	r2, [pc, #376]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003842:	f043 0304 	orr.w	r3, r3, #4
 8003846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800384a:	4b5c      	ldr	r3, [pc, #368]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	4a5a      	ldr	r2, [pc, #360]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800385a:	e00f      	b.n	800387c <HAL_RCC_OscConfig+0x378>
 800385c:	4b57      	ldr	r3, [pc, #348]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	4a56      	ldr	r2, [pc, #344]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800386c:	4b53      	ldr	r3, [pc, #332]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	4a52      	ldr	r2, [pc, #328]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003874:	f023 0304 	bic.w	r3, r3, #4
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d016      	beq.n	80038b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7ff fa8e 	bl	8002da4 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7ff fa8a 	bl	8002da4 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e140      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a2:	4b46      	ldr	r3, [pc, #280]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ed      	beq.n	800388c <HAL_RCC_OscConfig+0x388>
 80038b0:	e015      	b.n	80038de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7ff fa77 	bl	8002da4 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7ff fa73 	bl	8002da4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e129      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038d0:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1ed      	bne.n	80038ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038de:	7ffb      	ldrb	r3, [r7, #31]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b35      	ldr	r3, [pc, #212]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	4a34      	ldr	r2, [pc, #208]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d03c      	beq.n	8003976 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01c      	beq.n	800393e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003904:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800390a:	4a2c      	ldr	r2, [pc, #176]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7ff fa46 	bl	8002da4 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800391c:	f7ff fa42 	bl	8002da4 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0fa      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ef      	beq.n	800391c <HAL_RCC_OscConfig+0x418>
 800393c:	e01b      	b.n	8003976 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800393e:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003944:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7ff fa29 	bl	8002da4 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003956:	f7ff fa25 	bl	8002da4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e0dd      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 800396a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1ef      	bne.n	8003956 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80d1 	beq.w	8003b22 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003980:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b0c      	cmp	r3, #12
 800398a:	f000 808b 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d15e      	bne.n	8003a54 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a08      	ldr	r2, [pc, #32]	; (80039bc <HAL_RCC_OscConfig+0x4b8>)
 800399c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a2:	f7ff f9ff 	bl	8002da4 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a8:	e00c      	b.n	80039c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039aa:	f7ff f9fb 	bl	8002da4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d905      	bls.n	80039c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0b3      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c4:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ec      	bne.n	80039aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d0:	4b56      	ldr	r3, [pc, #344]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	4b56      	ldr	r3, [pc, #344]	; (8003b30 <HAL_RCC_OscConfig+0x62c>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6a11      	ldr	r1, [r2, #32]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039e0:	3a01      	subs	r2, #1
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	4311      	orrs	r1, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039ea:	0212      	lsls	r2, r2, #8
 80039ec:	4311      	orrs	r1, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039f2:	0852      	lsrs	r2, r2, #1
 80039f4:	3a01      	subs	r2, #1
 80039f6:	0552      	lsls	r2, r2, #21
 80039f8:	4311      	orrs	r1, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039fe:	0852      	lsrs	r2, r2, #1
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0652      	lsls	r2, r2, #25
 8003a04:	4311      	orrs	r1, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a0a:	06d2      	lsls	r2, r2, #27
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	4947      	ldr	r1, [pc, #284]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a14:	4b45      	ldr	r3, [pc, #276]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a44      	ldr	r2, [pc, #272]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a20:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a41      	ldr	r2, [pc, #260]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7ff f9ba 	bl	8002da4 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7ff f9b6 	bl	8002da4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e06e      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a46:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x530>
 8003a52:	e066      	b.n	8003b22 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a54:	4b35      	ldr	r3, [pc, #212]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a34      	ldr	r2, [pc, #208]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a60:	4b32      	ldr	r3, [pc, #200]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a31      	ldr	r2, [pc, #196]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a6c:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a2e      	ldr	r2, [pc, #184]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a72:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7ff f992 	bl	8002da4 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7ff f98e 	bl	8002da4 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e046      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a96:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x580>
 8003aa2:	e03e      	b.n	8003b22 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e039      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ab0:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <HAL_RCC_OscConfig+0x628>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0203 	and.w	r2, r3, #3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d12c      	bne.n	8003b1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d123      	bne.n	8003b1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d11b      	bne.n	8003b1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d113      	bne.n	8003b1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	3b01      	subs	r3, #1
 8003b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d109      	bne.n	8003b1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	3b01      	subs	r3, #1
 8003b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d001      	beq.n	8003b22 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	019f800c 	.word	0x019f800c

08003b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e11e      	b.n	8003d8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b91      	ldr	r3, [pc, #580]	; (8003d94 <HAL_RCC_ClockConfig+0x260>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d910      	bls.n	8003b7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b8e      	ldr	r3, [pc, #568]	; (8003d94 <HAL_RCC_ClockConfig+0x260>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 020f 	bic.w	r2, r3, #15
 8003b62:	498c      	ldr	r1, [pc, #560]	; (8003d94 <HAL_RCC_ClockConfig+0x260>)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b8a      	ldr	r3, [pc, #552]	; (8003d94 <HAL_RCC_ClockConfig+0x260>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e106      	b.n	8003d8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d073      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d129      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b90:	4b81      	ldr	r3, [pc, #516]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0f4      	b.n	8003d8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ba0:	f000 f99e 	bl	8003ee0 <RCC_GetSysClockFreqFromPLLSource>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4a7c      	ldr	r2, [pc, #496]	; (8003d9c <HAL_RCC_ClockConfig+0x268>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d93f      	bls.n	8003c2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bae:	4b7a      	ldr	r3, [pc, #488]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d033      	beq.n	8003c2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d12f      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bce:	4b72      	ldr	r3, [pc, #456]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd6:	4a70      	ldr	r2, [pc, #448]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bdc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	e024      	b.n	8003c2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d107      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bec:	4b6a      	ldr	r3, [pc, #424]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d109      	bne.n	8003c0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0c6      	b.n	8003d8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bfc:	4b66      	ldr	r3, [pc, #408]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0be      	b.n	8003d8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c0c:	f000 f8ce 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4a61      	ldr	r2, [pc, #388]	; (8003d9c <HAL_RCC_ClockConfig+0x268>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d909      	bls.n	8003c2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c1a:	4b5f      	ldr	r3, [pc, #380]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c22:	4a5d      	ldr	r2, [pc, #372]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c2e:	4b5a      	ldr	r3, [pc, #360]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4957      	ldr	r1, [pc, #348]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c40:	f7ff f8b0 	bl	8002da4 <HAL_GetTick>
 8003c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c48:	f7ff f8ac 	bl	8002da4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e095      	b.n	8003d8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	4b4e      	ldr	r3, [pc, #312]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 020c 	and.w	r2, r3, #12
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d1eb      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d023      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c88:	4b43      	ldr	r3, [pc, #268]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a42      	ldr	r2, [pc, #264]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003c8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ca0:	4b3d      	ldr	r3, [pc, #244]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ca8:	4a3b      	ldr	r2, [pc, #236]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb0:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4936      	ldr	r1, [pc, #216]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b80      	cmp	r3, #128	; 0x80
 8003cc8:	d105      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cca:	4b33      	ldr	r3, [pc, #204]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4a32      	ldr	r2, [pc, #200]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003cd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cd4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd6:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <HAL_RCC_ClockConfig+0x260>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d21d      	bcs.n	8003d20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce4:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <HAL_RCC_ClockConfig+0x260>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 020f 	bic.w	r2, r3, #15
 8003cec:	4929      	ldr	r1, [pc, #164]	; (8003d94 <HAL_RCC_ClockConfig+0x260>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cf4:	f7ff f856 	bl	8002da4 <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfc:	f7ff f852 	bl	8002da4 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e03b      	b.n	8003d8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d12:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <HAL_RCC_ClockConfig+0x260>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d1ed      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4917      	ldr	r1, [pc, #92]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d4a:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	490f      	ldr	r1, [pc, #60]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d5e:	f000 f825 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8003d62:	4602      	mov	r2, r0
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <HAL_RCC_ClockConfig+0x264>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	490c      	ldr	r1, [pc, #48]	; (8003da0 <HAL_RCC_ClockConfig+0x26c>)
 8003d70:	5ccb      	ldrb	r3, [r1, r3]
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7a:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <HAL_RCC_ClockConfig+0x270>)
 8003d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_RCC_ClockConfig+0x274>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe ffc2 	bl	8002d0c <HAL_InitTick>
 8003d88:	4603      	mov	r3, r0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40022000 	.word	0x40022000
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	04c4b400 	.word	0x04c4b400
 8003da0:	08009d04 	.word	0x08009d04
 8003da4:	20000008 	.word	0x20000008
 8003da8:	2000000c 	.word	0x2000000c

08003dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003db2:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d102      	bne.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dbe:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	e047      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 030c 	and.w	r3, r3, #12
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d102      	bne.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dd0:	4b26      	ldr	r3, [pc, #152]	; (8003e6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	e03e      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003dd6:	4b23      	ldr	r3, [pc, #140]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	d136      	bne.n	8003e50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003de2:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dec:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	3301      	adds	r3, #1
 8003df8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d10c      	bne.n	8003e1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e00:	4a1a      	ldr	r2, [pc, #104]	; (8003e6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e08:	4a16      	ldr	r2, [pc, #88]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e0a:	68d2      	ldr	r2, [r2, #12]
 8003e0c:	0a12      	lsrs	r2, r2, #8
 8003e0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	617b      	str	r3, [r7, #20]
      break;
 8003e18:	e00c      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e1a:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e22:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e24:	68d2      	ldr	r2, [r2, #12]
 8003e26:	0a12      	lsrs	r2, r2, #8
 8003e28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]
      break;
 8003e32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0e5b      	lsrs	r3, r3, #25
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	e001      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e54:	693b      	ldr	r3, [r7, #16]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	00f42400 	.word	0x00f42400
 8003e6c:	016e3600 	.word	0x016e3600

08003e70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000008 	.word	0x20000008

08003e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e8c:	f7ff fff0 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0a1b      	lsrs	r3, r3, #8
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4904      	ldr	r1, [pc, #16]	; (8003eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	08009d14 	.word	0x08009d14

08003eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eb8:	f7ff ffda 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0adb      	lsrs	r3, r3, #11
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4904      	ldr	r1, [pc, #16]	; (8003edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	08009d14 	.word	0x08009d14

08003ee0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ee6:	4b1e      	ldr	r3, [pc, #120]	; (8003f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	3301      	adds	r3, #1
 8003efc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d10c      	bne.n	8003f1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f04:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f0e:	68d2      	ldr	r2, [r2, #12]
 8003f10:	0a12      	lsrs	r2, r2, #8
 8003f12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	617b      	str	r3, [r7, #20]
    break;
 8003f1c:	e00c      	b.n	8003f38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f28:	68d2      	ldr	r2, [r2, #12]
 8003f2a:	0a12      	lsrs	r2, r2, #8
 8003f2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]
    break;
 8003f36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	0e5b      	lsrs	r3, r3, #25
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	3301      	adds	r3, #1
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f52:	687b      	ldr	r3, [r7, #4]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40021000 	.word	0x40021000
 8003f64:	016e3600 	.word	0x016e3600
 8003f68:	00f42400 	.word	0x00f42400

08003f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f74:	2300      	movs	r3, #0
 8003f76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f78:	2300      	movs	r3, #0
 8003f7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8098 	beq.w	80040ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8e:	4b43      	ldr	r3, [pc, #268]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10d      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9a:	4b40      	ldr	r3, [pc, #256]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9e:	4a3f      	ldr	r2, [pc, #252]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8003fa6:	4b3d      	ldr	r3, [pc, #244]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb6:	4b3a      	ldr	r3, [pc, #232]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a39      	ldr	r2, [pc, #228]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fc2:	f7fe feef 	bl	8002da4 <HAL_GetTick>
 8003fc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc8:	e009      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fca:	f7fe feeb 	bl	8002da4 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d902      	bls.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	74fb      	strb	r3, [r7, #19]
        break;
 8003fdc:	e005      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fde:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0ef      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d159      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01e      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	429a      	cmp	r2, r3
 800400a:	d019      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800400c:	4b23      	ldr	r3, [pc, #140]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004016:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004018:	4b20      	ldr	r3, [pc, #128]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	4a1f      	ldr	r2, [pc, #124]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004028:	4b1c      	ldr	r3, [pc, #112]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	4a1b      	ldr	r2, [pc, #108]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404a:	f7fe feab 	bl	8002da4 <HAL_GetTick>
 800404e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004050:	e00b      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004052:	f7fe fea7 	bl	8002da4 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004060:	4293      	cmp	r3, r2
 8004062:	d902      	bls.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	74fb      	strb	r3, [r7, #19]
            break;
 8004068:	e006      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ec      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10b      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	4903      	ldr	r1, [pc, #12]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004094:	e008      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	74bb      	strb	r3, [r7, #18]
 800409a:	e005      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800409c:	40021000 	.word	0x40021000
 80040a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a8:	7c7b      	ldrb	r3, [r7, #17]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d105      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ae:	4ba7      	ldr	r3, [pc, #668]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	4aa6      	ldr	r2, [pc, #664]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c6:	4ba1      	ldr	r3, [pc, #644]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f023 0203 	bic.w	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	499d      	ldr	r1, [pc, #628]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040e8:	4b98      	ldr	r3, [pc, #608]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f023 020c 	bic.w	r2, r3, #12
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	4995      	ldr	r1, [pc, #596]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800410a:	4b90      	ldr	r3, [pc, #576]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	498c      	ldr	r1, [pc, #560]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800412c:	4b87      	ldr	r3, [pc, #540]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	4984      	ldr	r1, [pc, #528]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800414e:	4b7f      	ldr	r3, [pc, #508]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	497b      	ldr	r1, [pc, #492]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004170:	4b76      	ldr	r3, [pc, #472]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	4973      	ldr	r1, [pc, #460]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004192:	4b6e      	ldr	r3, [pc, #440]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	496a      	ldr	r1, [pc, #424]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041b4:	4b65      	ldr	r3, [pc, #404]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	4962      	ldr	r1, [pc, #392]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041d6:	4b5d      	ldr	r3, [pc, #372]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	4959      	ldr	r1, [pc, #356]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041f8:	4b54      	ldr	r3, [pc, #336]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	4951      	ldr	r1, [pc, #324]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800421a:	4b4c      	ldr	r3, [pc, #304]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	4948      	ldr	r1, [pc, #288]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d015      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800423c:	4b43      	ldr	r3, [pc, #268]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4940      	ldr	r1, [pc, #256]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425a:	d105      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800425c:	4b3b      	ldr	r3, [pc, #236]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4a3a      	ldr	r2, [pc, #232]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004266:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004270:	2b00      	cmp	r3, #0
 8004272:	d015      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004274:	4b35      	ldr	r3, [pc, #212]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004282:	4932      	ldr	r1, [pc, #200]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004292:	d105      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004294:	4b2d      	ldr	r3, [pc, #180]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a2c      	ldr	r2, [pc, #176]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800429e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d015      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042ac:	4b27      	ldr	r3, [pc, #156]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	4924      	ldr	r1, [pc, #144]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042ca:	d105      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042cc:	4b1f      	ldr	r3, [pc, #124]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a1e      	ldr	r2, [pc, #120]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d015      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e4:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	4916      	ldr	r1, [pc, #88]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004302:	d105      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004304:	4b11      	ldr	r3, [pc, #68]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4a10      	ldr	r2, [pc, #64]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800430e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d019      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	4908      	ldr	r1, [pc, #32]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800433a:	d109      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4a02      	ldr	r2, [pc, #8]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004346:	60d3      	str	r3, [r2, #12]
 8004348:	e002      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d015      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800435c:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	4926      	ldr	r1, [pc, #152]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800437a:	d105      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800437c:	4b21      	ldr	r3, [pc, #132]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a20      	ldr	r2, [pc, #128]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004386:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d015      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004394:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a2:	4918      	ldr	r1, [pc, #96]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b2:	d105      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a12      	ldr	r2, [pc, #72]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043be:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	490a      	ldr	r1, [pc, #40]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ea:	d105      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a04      	ldr	r2, [pc, #16]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000

08004408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e049      	b.n	80044ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fe fa3c 	bl	80028ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f001 f80c 	bl	8005464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e049      	b.n	800455c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f841 	bl	8004564 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f000 ffb5 	bl	8005464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_TIM_PWM_Start+0x24>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	e03c      	b.n	8004616 <HAL_TIM_PWM_Start+0x9e>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d109      	bne.n	80045b6 <HAL_TIM_PWM_Start+0x3e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	bf14      	ite	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	2300      	moveq	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	e02f      	b.n	8004616 <HAL_TIM_PWM_Start+0x9e>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d109      	bne.n	80045d0 <HAL_TIM_PWM_Start+0x58>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	bf14      	ite	ne
 80045c8:	2301      	movne	r3, #1
 80045ca:	2300      	moveq	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	e022      	b.n	8004616 <HAL_TIM_PWM_Start+0x9e>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d109      	bne.n	80045ea <HAL_TIM_PWM_Start+0x72>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	bf14      	ite	ne
 80045e2:	2301      	movne	r3, #1
 80045e4:	2300      	moveq	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	e015      	b.n	8004616 <HAL_TIM_PWM_Start+0x9e>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d109      	bne.n	8004604 <HAL_TIM_PWM_Start+0x8c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e008      	b.n	8004616 <HAL_TIM_PWM_Start+0x9e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0a6      	b.n	800476c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <HAL_TIM_PWM_Start+0xb6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800462c:	e023      	b.n	8004676 <HAL_TIM_PWM_Start+0xfe>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b04      	cmp	r3, #4
 8004632:	d104      	bne.n	800463e <HAL_TIM_PWM_Start+0xc6>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800463c:	e01b      	b.n	8004676 <HAL_TIM_PWM_Start+0xfe>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d104      	bne.n	800464e <HAL_TIM_PWM_Start+0xd6>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464c:	e013      	b.n	8004676 <HAL_TIM_PWM_Start+0xfe>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b0c      	cmp	r3, #12
 8004652:	d104      	bne.n	800465e <HAL_TIM_PWM_Start+0xe6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800465c:	e00b      	b.n	8004676 <HAL_TIM_PWM_Start+0xfe>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b10      	cmp	r3, #16
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start+0xf6>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800466c:	e003      	b.n	8004676 <HAL_TIM_PWM_Start+0xfe>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2201      	movs	r2, #1
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f001 fc88 	bl	8005f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3a      	ldr	r2, [pc, #232]	; (8004774 <HAL_TIM_PWM_Start+0x1fc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d018      	beq.n	80046c0 <HAL_TIM_PWM_Start+0x148>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a39      	ldr	r2, [pc, #228]	; (8004778 <HAL_TIM_PWM_Start+0x200>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <HAL_TIM_PWM_Start+0x148>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a37      	ldr	r2, [pc, #220]	; (800477c <HAL_TIM_PWM_Start+0x204>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00e      	beq.n	80046c0 <HAL_TIM_PWM_Start+0x148>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a36      	ldr	r2, [pc, #216]	; (8004780 <HAL_TIM_PWM_Start+0x208>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d009      	beq.n	80046c0 <HAL_TIM_PWM_Start+0x148>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a34      	ldr	r2, [pc, #208]	; (8004784 <HAL_TIM_PWM_Start+0x20c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_TIM_PWM_Start+0x148>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a33      	ldr	r2, [pc, #204]	; (8004788 <HAL_TIM_PWM_Start+0x210>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <HAL_TIM_PWM_Start+0x14c>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <HAL_TIM_PWM_Start+0x14e>
 80046c4:	2300      	movs	r3, #0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a25      	ldr	r2, [pc, #148]	; (8004774 <HAL_TIM_PWM_Start+0x1fc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d022      	beq.n	800472a <HAL_TIM_PWM_Start+0x1b2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ec:	d01d      	beq.n	800472a <HAL_TIM_PWM_Start+0x1b2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a26      	ldr	r2, [pc, #152]	; (800478c <HAL_TIM_PWM_Start+0x214>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d018      	beq.n	800472a <HAL_TIM_PWM_Start+0x1b2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a24      	ldr	r2, [pc, #144]	; (8004790 <HAL_TIM_PWM_Start+0x218>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_TIM_PWM_Start+0x1b2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a23      	ldr	r2, [pc, #140]	; (8004794 <HAL_TIM_PWM_Start+0x21c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_TIM_PWM_Start+0x1b2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a19      	ldr	r2, [pc, #100]	; (8004778 <HAL_TIM_PWM_Start+0x200>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_TIM_PWM_Start+0x1b2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a18      	ldr	r2, [pc, #96]	; (800477c <HAL_TIM_PWM_Start+0x204>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_TIM_PWM_Start+0x1b2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a18      	ldr	r2, [pc, #96]	; (8004788 <HAL_TIM_PWM_Start+0x210>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d115      	bne.n	8004756 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_TIM_PWM_Start+0x220>)
 8004732:	4013      	ands	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b06      	cmp	r3, #6
 800473a:	d015      	beq.n	8004768 <HAL_TIM_PWM_Start+0x1f0>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004742:	d011      	beq.n	8004768 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004754:	e008      	b.n	8004768 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0201 	orr.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e000      	b.n	800476a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004768:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40013400 	.word	0x40013400
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800
 8004788:	40015000 	.word	0x40015000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	00010007 	.word	0x00010007

0800479c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e049      	b.n	8004842 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f841 	bl	800484a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f000 fe42 	bl	8005464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <HAL_TIM_IC_Start_IT+0x1e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e023      	b.n	80048c6 <HAL_TIM_IC_Start_IT+0x66>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d104      	bne.n	800488e <HAL_TIM_IC_Start_IT+0x2e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800488a:	b2db      	uxtb	r3, r3
 800488c:	e01b      	b.n	80048c6 <HAL_TIM_IC_Start_IT+0x66>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d104      	bne.n	800489e <HAL_TIM_IC_Start_IT+0x3e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800489a:	b2db      	uxtb	r3, r3
 800489c:	e013      	b.n	80048c6 <HAL_TIM_IC_Start_IT+0x66>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_IC_Start_IT+0x4e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	e00b      	b.n	80048c6 <HAL_TIM_IC_Start_IT+0x66>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d104      	bne.n	80048be <HAL_TIM_IC_Start_IT+0x5e>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	e003      	b.n	80048c6 <HAL_TIM_IC_Start_IT+0x66>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d104      	bne.n	80048d8 <HAL_TIM_IC_Start_IT+0x78>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	e013      	b.n	8004900 <HAL_TIM_IC_Start_IT+0xa0>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d104      	bne.n	80048e8 <HAL_TIM_IC_Start_IT+0x88>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	e00b      	b.n	8004900 <HAL_TIM_IC_Start_IT+0xa0>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d104      	bne.n	80048f8 <HAL_TIM_IC_Start_IT+0x98>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e003      	b.n	8004900 <HAL_TIM_IC_Start_IT+0xa0>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004902:	7bbb      	ldrb	r3, [r7, #14]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d102      	bne.n	800490e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004908:	7b7b      	ldrb	r3, [r7, #13]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d001      	beq.n	8004912 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0e2      	b.n	8004ad8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <HAL_TIM_IC_Start_IT+0xc2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004920:	e023      	b.n	800496a <HAL_TIM_IC_Start_IT+0x10a>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d104      	bne.n	8004932 <HAL_TIM_IC_Start_IT+0xd2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004930:	e01b      	b.n	800496a <HAL_TIM_IC_Start_IT+0x10a>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d104      	bne.n	8004942 <HAL_TIM_IC_Start_IT+0xe2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004940:	e013      	b.n	800496a <HAL_TIM_IC_Start_IT+0x10a>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d104      	bne.n	8004952 <HAL_TIM_IC_Start_IT+0xf2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004950:	e00b      	b.n	800496a <HAL_TIM_IC_Start_IT+0x10a>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b10      	cmp	r3, #16
 8004956:	d104      	bne.n	8004962 <HAL_TIM_IC_Start_IT+0x102>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004960:	e003      	b.n	800496a <HAL_TIM_IC_Start_IT+0x10a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <HAL_TIM_IC_Start_IT+0x11a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004978:	e013      	b.n	80049a2 <HAL_TIM_IC_Start_IT+0x142>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b04      	cmp	r3, #4
 800497e:	d104      	bne.n	800498a <HAL_TIM_IC_Start_IT+0x12a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004988:	e00b      	b.n	80049a2 <HAL_TIM_IC_Start_IT+0x142>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d104      	bne.n	800499a <HAL_TIM_IC_Start_IT+0x13a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004998:	e003      	b.n	80049a2 <HAL_TIM_IC_Start_IT+0x142>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d841      	bhi.n	8004a2c <HAL_TIM_IC_Start_IT+0x1cc>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <HAL_TIM_IC_Start_IT+0x150>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	08004a2d 	.word	0x08004a2d
 80049b8:	08004a2d 	.word	0x08004a2d
 80049bc:	08004a2d 	.word	0x08004a2d
 80049c0:	080049f7 	.word	0x080049f7
 80049c4:	08004a2d 	.word	0x08004a2d
 80049c8:	08004a2d 	.word	0x08004a2d
 80049cc:	08004a2d 	.word	0x08004a2d
 80049d0:	08004a09 	.word	0x08004a09
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a2d 	.word	0x08004a2d
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	08004a1b 	.word	0x08004a1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0202 	orr.w	r2, r2, #2
 80049f2:	60da      	str	r2, [r3, #12]
      break;
 80049f4:	e01d      	b.n	8004a32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0204 	orr.w	r2, r2, #4
 8004a04:	60da      	str	r2, [r3, #12]
      break;
 8004a06:	e014      	b.n	8004a32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0208 	orr.w	r2, r2, #8
 8004a16:	60da      	str	r2, [r3, #12]
      break;
 8004a18:	e00b      	b.n	8004a32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0210 	orr.w	r2, r2, #16
 8004a28:	60da      	str	r2, [r3, #12]
      break;
 8004a2a:	e002      	b.n	8004a32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a30:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d14e      	bne.n	8004ad6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 faa7 	bl	8005f94 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <HAL_TIM_IC_Start_IT+0x280>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d022      	beq.n	8004a96 <HAL_TIM_IC_Start_IT+0x236>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a58:	d01d      	beq.n	8004a96 <HAL_TIM_IC_Start_IT+0x236>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a21      	ldr	r2, [pc, #132]	; (8004ae4 <HAL_TIM_IC_Start_IT+0x284>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d018      	beq.n	8004a96 <HAL_TIM_IC_Start_IT+0x236>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <HAL_TIM_IC_Start_IT+0x288>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <HAL_TIM_IC_Start_IT+0x236>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1e      	ldr	r2, [pc, #120]	; (8004aec <HAL_TIM_IC_Start_IT+0x28c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00e      	beq.n	8004a96 <HAL_TIM_IC_Start_IT+0x236>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <HAL_TIM_IC_Start_IT+0x290>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d009      	beq.n	8004a96 <HAL_TIM_IC_Start_IT+0x236>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <HAL_TIM_IC_Start_IT+0x294>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_TIM_IC_Start_IT+0x236>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <HAL_TIM_IC_Start_IT+0x298>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d115      	bne.n	8004ac2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	4b17      	ldr	r3, [pc, #92]	; (8004afc <HAL_TIM_IC_Start_IT+0x29c>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b06      	cmp	r3, #6
 8004aa6:	d015      	beq.n	8004ad4 <HAL_TIM_IC_Start_IT+0x274>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aae:	d011      	beq.n	8004ad4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac0:	e008      	b.n	8004ad4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e000      	b.n	8004ad6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40012c00 	.word	0x40012c00
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40000c00 	.word	0x40000c00
 8004af0:	40013400 	.word	0x40013400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40015000 	.word	0x40015000
 8004afc:	00010007 	.word	0x00010007

08004b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d122      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d11b      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0202 	mvn.w	r2, #2
 8004b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc fa40 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fc6c 	bl	8005428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fc73 	bl	800543c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d122      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d11b      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0204 	mvn.w	r2, #4
 8004b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fc fa16 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004b9c:	e005      	b.n	8004baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fc42 	bl	8005428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fc49 	bl	800543c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d122      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d11b      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0208 	mvn.w	r2, #8
 8004bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc f9ec 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fc18 	bl	8005428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fc1f 	bl	800543c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d122      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0210 	mvn.w	r2, #16
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fc f9c2 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fbee 	bl	8005428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fbf5 	bl	800543c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d10e      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d107      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0201 	mvn.w	r2, #1
 8004c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fbc8 	bl	8005414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d10e      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9c:	2b80      	cmp	r3, #128	; 0x80
 8004c9e:	d107      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f001 faea 	bl	8006284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbe:	d10e      	bne.n	8004cde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cca:	2b80      	cmp	r3, #128	; 0x80
 8004ccc:	d107      	bne.n	8004cde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f001 fadd 	bl	8006298 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d10e      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	d107      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fba3 	bl	8005450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d10e      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d107      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f06f 0220 	mvn.w	r2, #32
 8004d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 fa9d 	bl	8006270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d44:	d10f      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d54:	d107      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f001 faa3 	bl	80062ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d74:	d10f      	bne.n	8004d96 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d84:	d107      	bne.n	8004d96 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f001 fa95 	bl	80062c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da4:	d10f      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db4:	d107      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f001 fa87 	bl	80062d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dd4:	d10f      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004de4:	d107      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f001 fa79 	bl	80062e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b086      	sub	sp, #24
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e088      	b.n	8004f2e <HAL_TIM_IC_ConfigChannel+0x130>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d11b      	bne.n	8004e62 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f000 fee5 	bl	8005c08 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699a      	ldr	r2, [r3, #24]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 020c 	bic.w	r2, r2, #12
 8004e4c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6999      	ldr	r1, [r3, #24]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	619a      	str	r2, [r3, #24]
 8004e60:	e060      	b.n	8004f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d11c      	bne.n	8004ea2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f000 ff69 	bl	8005d4e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e8a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6999      	ldr	r1, [r3, #24]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	021a      	lsls	r2, r3, #8
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	619a      	str	r2, [r3, #24]
 8004ea0:	e040      	b.n	8004f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d11b      	bne.n	8004ee0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	6819      	ldr	r1, [r3, #0]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f000 ffb6 	bl	8005e28 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 020c 	bic.w	r2, r2, #12
 8004eca:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69d9      	ldr	r1, [r3, #28]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	61da      	str	r2, [r3, #28]
 8004ede:	e021      	b.n	8004f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b0c      	cmp	r3, #12
 8004ee4:	d11c      	bne.n	8004f20 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f000 ffd3 	bl	8005ea0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f08:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69d9      	ldr	r1, [r3, #28]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	021a      	lsls	r2, r3, #8
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	61da      	str	r2, [r3, #28]
 8004f1e:	e001      	b.n	8004f24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e0ff      	b.n	8005156 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b14      	cmp	r3, #20
 8004f62:	f200 80f0 	bhi.w	8005146 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f66:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004fc1 	.word	0x08004fc1
 8004f70:	08005147 	.word	0x08005147
 8004f74:	08005147 	.word	0x08005147
 8004f78:	08005147 	.word	0x08005147
 8004f7c:	08005001 	.word	0x08005001
 8004f80:	08005147 	.word	0x08005147
 8004f84:	08005147 	.word	0x08005147
 8004f88:	08005147 	.word	0x08005147
 8004f8c:	08005043 	.word	0x08005043
 8004f90:	08005147 	.word	0x08005147
 8004f94:	08005147 	.word	0x08005147
 8004f98:	08005147 	.word	0x08005147
 8004f9c:	08005083 	.word	0x08005083
 8004fa0:	08005147 	.word	0x08005147
 8004fa4:	08005147 	.word	0x08005147
 8004fa8:	08005147 	.word	0x08005147
 8004fac:	080050c5 	.word	0x080050c5
 8004fb0:	08005147 	.word	0x08005147
 8004fb4:	08005147 	.word	0x08005147
 8004fb8:	08005147 	.word	0x08005147
 8004fbc:	08005105 	.word	0x08005105
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 faf4 	bl	80055b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0208 	orr.w	r2, r2, #8
 8004fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0204 	bic.w	r2, r2, #4
 8004fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6999      	ldr	r1, [r3, #24]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	619a      	str	r2, [r3, #24]
      break;
 8004ffe:	e0a5      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fb6e 	bl	80056e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800501a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6999      	ldr	r1, [r3, #24]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	021a      	lsls	r2, r3, #8
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	619a      	str	r2, [r3, #24]
      break;
 8005040:	e084      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fbe1 	bl	8005810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0208 	orr.w	r2, r2, #8
 800505c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0204 	bic.w	r2, r2, #4
 800506c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69d9      	ldr	r1, [r3, #28]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	61da      	str	r2, [r3, #28]
      break;
 8005080:	e064      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fc53 	bl	8005934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69da      	ldr	r2, [r3, #28]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800509c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69da      	ldr	r2, [r3, #28]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69d9      	ldr	r1, [r3, #28]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	021a      	lsls	r2, r3, #8
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	61da      	str	r2, [r3, #28]
      break;
 80050c2:	e043      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fcc6 	bl	8005a5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0208 	orr.w	r2, r2, #8
 80050de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0204 	bic.w	r2, r2, #4
 80050ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005102:	e023      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fd10 	bl	8005b30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800511e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	021a      	lsls	r2, r3, #8
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005144:	e002      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	75fb      	strb	r3, [r7, #23]
      break;
 800514a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005154:	7dfb      	ldrb	r3, [r7, #23]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop

08005160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIM_ConfigClockSource+0x1c>
 8005178:	2302      	movs	r3, #2
 800517a:	e0f6      	b.n	800536a <HAL_TIM_ConfigClockSource+0x20a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800519a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800519e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a6f      	ldr	r2, [pc, #444]	; (8005374 <HAL_TIM_ConfigClockSource+0x214>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	f000 80c1 	beq.w	800533e <HAL_TIM_ConfigClockSource+0x1de>
 80051bc:	4a6d      	ldr	r2, [pc, #436]	; (8005374 <HAL_TIM_ConfigClockSource+0x214>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	f200 80c6 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 80051c4:	4a6c      	ldr	r2, [pc, #432]	; (8005378 <HAL_TIM_ConfigClockSource+0x218>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	f000 80b9 	beq.w	800533e <HAL_TIM_ConfigClockSource+0x1de>
 80051cc:	4a6a      	ldr	r2, [pc, #424]	; (8005378 <HAL_TIM_ConfigClockSource+0x218>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	f200 80be 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 80051d4:	4a69      	ldr	r2, [pc, #420]	; (800537c <HAL_TIM_ConfigClockSource+0x21c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	f000 80b1 	beq.w	800533e <HAL_TIM_ConfigClockSource+0x1de>
 80051dc:	4a67      	ldr	r2, [pc, #412]	; (800537c <HAL_TIM_ConfigClockSource+0x21c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	f200 80b6 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 80051e4:	4a66      	ldr	r2, [pc, #408]	; (8005380 <HAL_TIM_ConfigClockSource+0x220>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	f000 80a9 	beq.w	800533e <HAL_TIM_ConfigClockSource+0x1de>
 80051ec:	4a64      	ldr	r2, [pc, #400]	; (8005380 <HAL_TIM_ConfigClockSource+0x220>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	f200 80ae 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 80051f4:	4a63      	ldr	r2, [pc, #396]	; (8005384 <HAL_TIM_ConfigClockSource+0x224>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	f000 80a1 	beq.w	800533e <HAL_TIM_ConfigClockSource+0x1de>
 80051fc:	4a61      	ldr	r2, [pc, #388]	; (8005384 <HAL_TIM_ConfigClockSource+0x224>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	f200 80a6 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005204:	4a60      	ldr	r2, [pc, #384]	; (8005388 <HAL_TIM_ConfigClockSource+0x228>)
 8005206:	4293      	cmp	r3, r2
 8005208:	f000 8099 	beq.w	800533e <HAL_TIM_ConfigClockSource+0x1de>
 800520c:	4a5e      	ldr	r2, [pc, #376]	; (8005388 <HAL_TIM_ConfigClockSource+0x228>)
 800520e:	4293      	cmp	r3, r2
 8005210:	f200 809e 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005214:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005218:	f000 8091 	beq.w	800533e <HAL_TIM_ConfigClockSource+0x1de>
 800521c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005220:	f200 8096 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005228:	f000 8089 	beq.w	800533e <HAL_TIM_ConfigClockSource+0x1de>
 800522c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005230:	f200 808e 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005238:	d03e      	beq.n	80052b8 <HAL_TIM_ConfigClockSource+0x158>
 800523a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523e:	f200 8087 	bhi.w	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005246:	f000 8086 	beq.w	8005356 <HAL_TIM_ConfigClockSource+0x1f6>
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524e:	d87f      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005250:	2b70      	cmp	r3, #112	; 0x70
 8005252:	d01a      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x12a>
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d87b      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005258:	2b60      	cmp	r3, #96	; 0x60
 800525a:	d050      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x19e>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d877      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005260:	2b50      	cmp	r3, #80	; 0x50
 8005262:	d03c      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x17e>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d873      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d058      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x1be>
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d86f      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d064      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x1de>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d86b      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d060      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x1de>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d867      	bhi.n	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d05c      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x1de>
 8005284:	2b10      	cmp	r3, #16
 8005286:	d05a      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x1de>
 8005288:	e062      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6899      	ldr	r1, [r3, #8]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f000 fe5b 	bl	8005f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	609a      	str	r2, [r3, #8]
      break;
 80052b6:	e04f      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	6899      	ldr	r1, [r3, #8]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f000 fe44 	bl	8005f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052da:	609a      	str	r2, [r3, #8]
      break;
 80052dc:	e03c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f000 fd00 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2150      	movs	r1, #80	; 0x50
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fe0f 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 80052fc:	e02c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6859      	ldr	r1, [r3, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	461a      	mov	r2, r3
 800530c:	f000 fd5c 	bl	8005dc8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2160      	movs	r1, #96	; 0x60
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fdff 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 800531c:	e01c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	461a      	mov	r2, r3
 800532c:	f000 fce0 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2140      	movs	r1, #64	; 0x40
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fdef 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 800533c:	e00c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4619      	mov	r1, r3
 8005348:	4610      	mov	r0, r2
 800534a:	f000 fde6 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 800534e:	e003      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
      break;
 8005354:	e000      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	00100070 	.word	0x00100070
 8005378:	00100060 	.word	0x00100060
 800537c:	00100050 	.word	0x00100050
 8005380:	00100040 	.word	0x00100040
 8005384:	00100030 	.word	0x00100030
 8005388:	00100020 	.word	0x00100020

0800538c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b0c      	cmp	r3, #12
 800539e:	d831      	bhi.n	8005404 <HAL_TIM_ReadCapturedValue+0x78>
 80053a0:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	080053dd 	.word	0x080053dd
 80053ac:	08005405 	.word	0x08005405
 80053b0:	08005405 	.word	0x08005405
 80053b4:	08005405 	.word	0x08005405
 80053b8:	080053e7 	.word	0x080053e7
 80053bc:	08005405 	.word	0x08005405
 80053c0:	08005405 	.word	0x08005405
 80053c4:	08005405 	.word	0x08005405
 80053c8:	080053f1 	.word	0x080053f1
 80053cc:	08005405 	.word	0x08005405
 80053d0:	08005405 	.word	0x08005405
 80053d4:	08005405 	.word	0x08005405
 80053d8:	080053fb 	.word	0x080053fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	60fb      	str	r3, [r7, #12]

      break;
 80053e4:	e00f      	b.n	8005406 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	60fb      	str	r3, [r7, #12]

      break;
 80053ee:	e00a      	b.n	8005406 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f6:	60fb      	str	r3, [r7, #12]

      break;
 80053f8:	e005      	b.n	8005406 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	60fb      	str	r3, [r7, #12]

      break;
 8005402:	e000      	b.n	8005406 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005404:	bf00      	nop
  }

  return tmpreg;
 8005406:	68fb      	ldr	r3, [r7, #12]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a46      	ldr	r2, [pc, #280]	; (8005590 <TIM_Base_SetConfig+0x12c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d017      	beq.n	80054ac <TIM_Base_SetConfig+0x48>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005482:	d013      	beq.n	80054ac <TIM_Base_SetConfig+0x48>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a43      	ldr	r2, [pc, #268]	; (8005594 <TIM_Base_SetConfig+0x130>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00f      	beq.n	80054ac <TIM_Base_SetConfig+0x48>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a42      	ldr	r2, [pc, #264]	; (8005598 <TIM_Base_SetConfig+0x134>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00b      	beq.n	80054ac <TIM_Base_SetConfig+0x48>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a41      	ldr	r2, [pc, #260]	; (800559c <TIM_Base_SetConfig+0x138>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_Base_SetConfig+0x48>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a40      	ldr	r2, [pc, #256]	; (80055a0 <TIM_Base_SetConfig+0x13c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_Base_SetConfig+0x48>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a3f      	ldr	r2, [pc, #252]	; (80055a4 <TIM_Base_SetConfig+0x140>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d108      	bne.n	80054be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a33      	ldr	r2, [pc, #204]	; (8005590 <TIM_Base_SetConfig+0x12c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d023      	beq.n	800550e <TIM_Base_SetConfig+0xaa>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054cc:	d01f      	beq.n	800550e <TIM_Base_SetConfig+0xaa>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a30      	ldr	r2, [pc, #192]	; (8005594 <TIM_Base_SetConfig+0x130>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d01b      	beq.n	800550e <TIM_Base_SetConfig+0xaa>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2f      	ldr	r2, [pc, #188]	; (8005598 <TIM_Base_SetConfig+0x134>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d017      	beq.n	800550e <TIM_Base_SetConfig+0xaa>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2e      	ldr	r2, [pc, #184]	; (800559c <TIM_Base_SetConfig+0x138>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d013      	beq.n	800550e <TIM_Base_SetConfig+0xaa>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <TIM_Base_SetConfig+0x13c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00f      	beq.n	800550e <TIM_Base_SetConfig+0xaa>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2d      	ldr	r2, [pc, #180]	; (80055a8 <TIM_Base_SetConfig+0x144>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00b      	beq.n	800550e <TIM_Base_SetConfig+0xaa>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2c      	ldr	r2, [pc, #176]	; (80055ac <TIM_Base_SetConfig+0x148>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d007      	beq.n	800550e <TIM_Base_SetConfig+0xaa>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2b      	ldr	r2, [pc, #172]	; (80055b0 <TIM_Base_SetConfig+0x14c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_Base_SetConfig+0xaa>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a26      	ldr	r2, [pc, #152]	; (80055a4 <TIM_Base_SetConfig+0x140>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d108      	bne.n	8005520 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a12      	ldr	r2, [pc, #72]	; (8005590 <TIM_Base_SetConfig+0x12c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <TIM_Base_SetConfig+0x110>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <TIM_Base_SetConfig+0x13c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00f      	beq.n	8005574 <TIM_Base_SetConfig+0x110>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a14      	ldr	r2, [pc, #80]	; (80055a8 <TIM_Base_SetConfig+0x144>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00b      	beq.n	8005574 <TIM_Base_SetConfig+0x110>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a13      	ldr	r2, [pc, #76]	; (80055ac <TIM_Base_SetConfig+0x148>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_Base_SetConfig+0x110>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a12      	ldr	r2, [pc, #72]	; (80055b0 <TIM_Base_SetConfig+0x14c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_Base_SetConfig+0x110>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a0d      	ldr	r2, [pc, #52]	; (80055a4 <TIM_Base_SetConfig+0x140>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d103      	bne.n	800557c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	615a      	str	r2, [r3, #20]
}
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40013400 	.word	0x40013400
 80055a4:	40015000 	.word	0x40015000
 80055a8:	40014000 	.word	0x40014000
 80055ac:	40014400 	.word	0x40014400
 80055b0:	40014800 	.word	0x40014800

080055b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 0302 	bic.w	r3, r3, #2
 8005600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a30      	ldr	r2, [pc, #192]	; (80056d0 <TIM_OC1_SetConfig+0x11c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d013      	beq.n	800563c <TIM_OC1_SetConfig+0x88>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a2f      	ldr	r2, [pc, #188]	; (80056d4 <TIM_OC1_SetConfig+0x120>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00f      	beq.n	800563c <TIM_OC1_SetConfig+0x88>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a2e      	ldr	r2, [pc, #184]	; (80056d8 <TIM_OC1_SetConfig+0x124>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00b      	beq.n	800563c <TIM_OC1_SetConfig+0x88>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a2d      	ldr	r2, [pc, #180]	; (80056dc <TIM_OC1_SetConfig+0x128>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d007      	beq.n	800563c <TIM_OC1_SetConfig+0x88>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a2c      	ldr	r2, [pc, #176]	; (80056e0 <TIM_OC1_SetConfig+0x12c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_OC1_SetConfig+0x88>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <TIM_OC1_SetConfig+0x130>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d10c      	bne.n	8005656 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0308 	bic.w	r3, r3, #8
 8005642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 0304 	bic.w	r3, r3, #4
 8005654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1d      	ldr	r2, [pc, #116]	; (80056d0 <TIM_OC1_SetConfig+0x11c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <TIM_OC1_SetConfig+0xd2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a1c      	ldr	r2, [pc, #112]	; (80056d4 <TIM_OC1_SetConfig+0x120>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00f      	beq.n	8005686 <TIM_OC1_SetConfig+0xd2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1b      	ldr	r2, [pc, #108]	; (80056d8 <TIM_OC1_SetConfig+0x124>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00b      	beq.n	8005686 <TIM_OC1_SetConfig+0xd2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <TIM_OC1_SetConfig+0x128>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d007      	beq.n	8005686 <TIM_OC1_SetConfig+0xd2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <TIM_OC1_SetConfig+0x12c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d003      	beq.n	8005686 <TIM_OC1_SetConfig+0xd2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <TIM_OC1_SetConfig+0x130>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d111      	bne.n	80056aa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800568c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40013400 	.word	0x40013400
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40014400 	.word	0x40014400
 80056e0:	40014800 	.word	0x40014800
 80056e4:	40015000 	.word	0x40015000

080056e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0210 	bic.w	r2, r3, #16
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0320 	bic.w	r3, r3, #32
 8005736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a2c      	ldr	r2, [pc, #176]	; (80057f8 <TIM_OC2_SetConfig+0x110>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <TIM_OC2_SetConfig+0x74>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a2b      	ldr	r2, [pc, #172]	; (80057fc <TIM_OC2_SetConfig+0x114>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_OC2_SetConfig+0x74>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a2a      	ldr	r2, [pc, #168]	; (8005800 <TIM_OC2_SetConfig+0x118>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d10d      	bne.n	8005778 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <TIM_OC2_SetConfig+0x110>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <TIM_OC2_SetConfig+0xc0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <TIM_OC2_SetConfig+0x114>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00f      	beq.n	80057a8 <TIM_OC2_SetConfig+0xc0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <TIM_OC2_SetConfig+0x11c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00b      	beq.n	80057a8 <TIM_OC2_SetConfig+0xc0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <TIM_OC2_SetConfig+0x120>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d007      	beq.n	80057a8 <TIM_OC2_SetConfig+0xc0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a1c      	ldr	r2, [pc, #112]	; (800580c <TIM_OC2_SetConfig+0x124>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_OC2_SetConfig+0xc0>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a17      	ldr	r2, [pc, #92]	; (8005800 <TIM_OC2_SetConfig+0x118>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d113      	bne.n	80057d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40015000 	.word	0x40015000
 8005804:	40014000 	.word	0x40014000
 8005808:	40014400 	.word	0x40014400
 800580c:	40014800 	.word	0x40014800

08005810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800583e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0303 	bic.w	r3, r3, #3
 800584a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800585c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2b      	ldr	r2, [pc, #172]	; (800591c <TIM_OC3_SetConfig+0x10c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <TIM_OC3_SetConfig+0x72>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <TIM_OC3_SetConfig+0x110>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_OC3_SetConfig+0x72>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a29      	ldr	r2, [pc, #164]	; (8005924 <TIM_OC3_SetConfig+0x114>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d10d      	bne.n	800589e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800589c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a1e      	ldr	r2, [pc, #120]	; (800591c <TIM_OC3_SetConfig+0x10c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <TIM_OC3_SetConfig+0xbe>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1d      	ldr	r2, [pc, #116]	; (8005920 <TIM_OC3_SetConfig+0x110>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00f      	beq.n	80058ce <TIM_OC3_SetConfig+0xbe>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <TIM_OC3_SetConfig+0x118>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_OC3_SetConfig+0xbe>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1c      	ldr	r2, [pc, #112]	; (800592c <TIM_OC3_SetConfig+0x11c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <TIM_OC3_SetConfig+0xbe>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <TIM_OC3_SetConfig+0x120>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_OC3_SetConfig+0xbe>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a16      	ldr	r2, [pc, #88]	; (8005924 <TIM_OC3_SetConfig+0x114>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d113      	bne.n	80058f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40012c00 	.word	0x40012c00
 8005920:	40013400 	.word	0x40013400
 8005924:	40015000 	.word	0x40015000
 8005928:	40014000 	.word	0x40014000
 800592c:	40014400 	.word	0x40014400
 8005930:	40014800 	.word	0x40014800

08005934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800596e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	031b      	lsls	r3, r3, #12
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a2c      	ldr	r2, [pc, #176]	; (8005a44 <TIM_OC4_SetConfig+0x110>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_OC4_SetConfig+0x74>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a2b      	ldr	r2, [pc, #172]	; (8005a48 <TIM_OC4_SetConfig+0x114>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_OC4_SetConfig+0x74>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <TIM_OC4_SetConfig+0x118>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d10d      	bne.n	80059c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	031b      	lsls	r3, r3, #12
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <TIM_OC4_SetConfig+0x110>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d013      	beq.n	80059f4 <TIM_OC4_SetConfig+0xc0>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <TIM_OC4_SetConfig+0x114>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00f      	beq.n	80059f4 <TIM_OC4_SetConfig+0xc0>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <TIM_OC4_SetConfig+0x11c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00b      	beq.n	80059f4 <TIM_OC4_SetConfig+0xc0>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <TIM_OC4_SetConfig+0x120>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d007      	beq.n	80059f4 <TIM_OC4_SetConfig+0xc0>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <TIM_OC4_SetConfig+0x124>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_OC4_SetConfig+0xc0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <TIM_OC4_SetConfig+0x118>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d113      	bne.n	8005a1c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a02:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	019b      	lsls	r3, r3, #6
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	019b      	lsls	r3, r3, #6
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40013400 	.word	0x40013400
 8005a4c:	40015000 	.word	0x40015000
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800

08005a5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005aa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a19      	ldr	r2, [pc, #100]	; (8005b18 <TIM_OC5_SetConfig+0xbc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <TIM_OC5_SetConfig+0x82>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <TIM_OC5_SetConfig+0xc0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00f      	beq.n	8005ade <TIM_OC5_SetConfig+0x82>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a17      	ldr	r2, [pc, #92]	; (8005b20 <TIM_OC5_SetConfig+0xc4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <TIM_OC5_SetConfig+0x82>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <TIM_OC5_SetConfig+0xc8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d007      	beq.n	8005ade <TIM_OC5_SetConfig+0x82>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <TIM_OC5_SetConfig+0xcc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_OC5_SetConfig+0x82>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a14      	ldr	r2, [pc, #80]	; (8005b2c <TIM_OC5_SetConfig+0xd0>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d109      	bne.n	8005af2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40012c00 	.word	0x40012c00
 8005b1c:	40013400 	.word	0x40013400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800
 8005b2c:	40015000 	.word	0x40015000

08005b30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	051b      	lsls	r3, r3, #20
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a1a      	ldr	r2, [pc, #104]	; (8005bf0 <TIM_OC6_SetConfig+0xc0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <TIM_OC6_SetConfig+0x84>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <TIM_OC6_SetConfig+0xc4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00f      	beq.n	8005bb4 <TIM_OC6_SetConfig+0x84>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <TIM_OC6_SetConfig+0xc8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00b      	beq.n	8005bb4 <TIM_OC6_SetConfig+0x84>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a17      	ldr	r2, [pc, #92]	; (8005bfc <TIM_OC6_SetConfig+0xcc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_OC6_SetConfig+0x84>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a16      	ldr	r2, [pc, #88]	; (8005c00 <TIM_OC6_SetConfig+0xd0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_OC6_SetConfig+0x84>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a15      	ldr	r2, [pc, #84]	; (8005c04 <TIM_OC6_SetConfig+0xd4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d109      	bne.n	8005bc8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	029b      	lsls	r3, r3, #10
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400
 8005c00:	40014800 	.word	0x40014800
 8005c04:	40015000 	.word	0x40015000

08005c08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f023 0201 	bic.w	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <TIM_TI1_SetConfig+0xcc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01b      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3c:	d017      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a25      	ldr	r2, [pc, #148]	; (8005cd8 <TIM_TI1_SetConfig+0xd0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a24      	ldr	r2, [pc, #144]	; (8005cdc <TIM_TI1_SetConfig+0xd4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00f      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a23      	ldr	r2, [pc, #140]	; (8005ce0 <TIM_TI1_SetConfig+0xd8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a22      	ldr	r2, [pc, #136]	; (8005ce4 <TIM_TI1_SetConfig+0xdc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4a21      	ldr	r2, [pc, #132]	; (8005ce8 <TIM_TI1_SetConfig+0xe0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_TI1_SetConfig+0x66>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a20      	ldr	r2, [pc, #128]	; (8005cec <TIM_TI1_SetConfig+0xe4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d101      	bne.n	8005c72 <TIM_TI1_SetConfig+0x6a>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <TIM_TI1_SetConfig+0x6c>
 8005c72:	2300      	movs	r3, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e003      	b.n	8005c92 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f043 0301 	orr.w	r3, r3, #1
 8005c90:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f023 030a 	bic.w	r3, r3, #10
 8005cac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f003 030a 	and.w	r3, r3, #10
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	40013400 	.word	0x40013400
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40015000 	.word	0x40015000

08005cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 030a 	bic.w	r3, r3, #10
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b087      	sub	sp, #28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
 8005d5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f023 0210 	bic.w	r2, r3, #16
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	031b      	lsls	r3, r3, #12
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005da0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	621a      	str	r2, [r3, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	f023 0210 	bic.w	r2, r3, #16
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005df2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	031b      	lsls	r3, r3, #12
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	621a      	str	r2, [r3, #32]
}
 8005e1c:	bf00      	nop
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f023 0303 	bic.w	r3, r3, #3
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	621a      	str	r2, [r3, #32]
}
 8005e94:	bf00      	nop
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ecc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ede:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	031b      	lsls	r3, r3, #12
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ef2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	031b      	lsls	r3, r3, #12
 8005ef8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f043 0307 	orr.w	r3, r3, #7
 8005f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	609a      	str	r2, [r3, #8]
}
 8005f48:	bf00      	nop
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	021a      	lsls	r2, r3, #8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a1a      	ldr	r2, [r3, #32]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a1a      	ldr	r2, [r3, #32]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 031f 	and.w	r3, r3, #31
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
	...

08005fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e074      	b.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a34      	ldr	r2, [pc, #208]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d009      	beq.n	8006036 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a33      	ldr	r2, [pc, #204]	; (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d004      	beq.n	8006036 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a31      	ldr	r2, [pc, #196]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d108      	bne.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800603c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800604e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a21      	ldr	r2, [pc, #132]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d022      	beq.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006078:	d01d      	beq.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d018      	beq.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1d      	ldr	r2, [pc, #116]	; (8006100 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00e      	beq.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d009      	beq.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a18      	ldr	r2, [pc, #96]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a11      	ldr	r2, [pc, #68]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d10c      	bne.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40013400 	.word	0x40013400
 80060f8:	40015000 	.word	0x40015000
 80060fc:	40000400 	.word	0x40000400
 8006100:	40000800 	.word	0x40000800
 8006104:	40000c00 	.word	0x40000c00
 8006108:	40014000 	.word	0x40014000

0800610c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006124:	2302      	movs	r3, #2
 8006126:	e096      	b.n	8006256 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a2f      	ldr	r2, [pc, #188]	; (8006264 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d009      	beq.n	80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a2d      	ldr	r2, [pc, #180]	; (8006268 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d004      	beq.n	80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a2c      	ldr	r2, [pc, #176]	; (800626c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d106      	bne.n	80061ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a24      	ldr	r2, [pc, #144]	; (8006264 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d009      	beq.n	80061ec <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a22      	ldr	r2, [pc, #136]	; (8006268 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d004      	beq.n	80061ec <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a21      	ldr	r2, [pc, #132]	; (800626c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d12b      	bne.n	8006244 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	051b      	lsls	r3, r3, #20
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a11      	ldr	r2, [pc, #68]	; (8006264 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a10      	ldr	r2, [pc, #64]	; (8006268 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d004      	beq.n	8006236 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0e      	ldr	r2, [pc, #56]	; (800626c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d106      	bne.n	8006244 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40012c00 	.word	0x40012c00
 8006268:	40013400 	.word	0x40013400
 800626c:	40015000 	.word	0x40015000

08006270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e042      	b.n	8006394 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fc fa2b 	bl	800277c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2224      	movs	r2, #36	; 0x24
 800632a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0201 	bic.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f8c2 	bl	80064c8 <UART_SetConfig>
 8006344:	4603      	mov	r3, r0
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e022      	b.n	8006394 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fbb2 	bl	8006ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800636a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800637a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fc39 	bl	8006c04 <UART_CheckIdleState>
 8006392:	4603      	mov	r3, r0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	f040 8083 	bne.w	80064be <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_UART_Transmit+0x28>
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e07b      	b.n	80064c0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Transmit+0x3a>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e074      	b.n	80064c0 <HAL_UART_Transmit+0x124>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2221      	movs	r2, #33	; 0x21
 80063ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ee:	f7fc fcd9 	bl	8002da4 <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d108      	bne.n	8006420 <HAL_UART_Transmit+0x84>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d104      	bne.n	8006420 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	e003      	b.n	8006428 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006430:	e02c      	b.n	800648c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2200      	movs	r2, #0
 800643a:	2180      	movs	r1, #128	; 0x80
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fc2c 	bl	8006c9a <UART_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e039      	b.n	80064c0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006460:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	3302      	adds	r3, #2
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	e007      	b.n	800647a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	781a      	ldrb	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	3301      	adds	r3, #1
 8006478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1cc      	bne.n	8006432 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2200      	movs	r2, #0
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fbf9 	bl	8006c9a <UART_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e006      	b.n	80064c0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e000      	b.n	80064c0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80064be:	2302      	movs	r3, #2
  }
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064cc:	b08c      	sub	sp, #48	; 0x30
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4baa      	ldr	r3, [pc, #680]	; (80067a0 <UART_SetConfig+0x2d8>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006500:	430b      	orrs	r3, r1
 8006502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a9f      	ldr	r2, [pc, #636]	; (80067a4 <UART_SetConfig+0x2dc>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006530:	4313      	orrs	r3, r2
 8006532:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800653e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	6812      	ldr	r2, [r2, #0]
 8006546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006548:	430b      	orrs	r3, r1
 800654a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	f023 010f 	bic.w	r1, r3, #15
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a90      	ldr	r2, [pc, #576]	; (80067a8 <UART_SetConfig+0x2e0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d125      	bne.n	80065b8 <UART_SetConfig+0xf0>
 800656c:	4b8f      	ldr	r3, [pc, #572]	; (80067ac <UART_SetConfig+0x2e4>)
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	2b03      	cmp	r3, #3
 8006578:	d81a      	bhi.n	80065b0 <UART_SetConfig+0xe8>
 800657a:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <UART_SetConfig+0xb8>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	08006591 	.word	0x08006591
 8006584:	080065a1 	.word	0x080065a1
 8006588:	08006599 	.word	0x08006599
 800658c:	080065a9 	.word	0x080065a9
 8006590:	2301      	movs	r3, #1
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006596:	e116      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006598:	2302      	movs	r3, #2
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659e:	e112      	b.n	80067c6 <UART_SetConfig+0x2fe>
 80065a0:	2304      	movs	r3, #4
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a6:	e10e      	b.n	80067c6 <UART_SetConfig+0x2fe>
 80065a8:	2308      	movs	r3, #8
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ae:	e10a      	b.n	80067c6 <UART_SetConfig+0x2fe>
 80065b0:	2310      	movs	r3, #16
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b6:	e106      	b.n	80067c6 <UART_SetConfig+0x2fe>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a7c      	ldr	r2, [pc, #496]	; (80067b0 <UART_SetConfig+0x2e8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d138      	bne.n	8006634 <UART_SetConfig+0x16c>
 80065c2:	4b7a      	ldr	r3, [pc, #488]	; (80067ac <UART_SetConfig+0x2e4>)
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c8:	f003 030c 	and.w	r3, r3, #12
 80065cc:	2b0c      	cmp	r3, #12
 80065ce:	d82d      	bhi.n	800662c <UART_SetConfig+0x164>
 80065d0:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <UART_SetConfig+0x110>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	0800660d 	.word	0x0800660d
 80065dc:	0800662d 	.word	0x0800662d
 80065e0:	0800662d 	.word	0x0800662d
 80065e4:	0800662d 	.word	0x0800662d
 80065e8:	0800661d 	.word	0x0800661d
 80065ec:	0800662d 	.word	0x0800662d
 80065f0:	0800662d 	.word	0x0800662d
 80065f4:	0800662d 	.word	0x0800662d
 80065f8:	08006615 	.word	0x08006615
 80065fc:	0800662d 	.word	0x0800662d
 8006600:	0800662d 	.word	0x0800662d
 8006604:	0800662d 	.word	0x0800662d
 8006608:	08006625 	.word	0x08006625
 800660c:	2300      	movs	r3, #0
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006612:	e0d8      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006614:	2302      	movs	r3, #2
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661a:	e0d4      	b.n	80067c6 <UART_SetConfig+0x2fe>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006622:	e0d0      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662a:	e0cc      	b.n	80067c6 <UART_SetConfig+0x2fe>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006632:	e0c8      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a5e      	ldr	r2, [pc, #376]	; (80067b4 <UART_SetConfig+0x2ec>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d125      	bne.n	800668a <UART_SetConfig+0x1c2>
 800663e:	4b5b      	ldr	r3, [pc, #364]	; (80067ac <UART_SetConfig+0x2e4>)
 8006640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006644:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006648:	2b30      	cmp	r3, #48	; 0x30
 800664a:	d016      	beq.n	800667a <UART_SetConfig+0x1b2>
 800664c:	2b30      	cmp	r3, #48	; 0x30
 800664e:	d818      	bhi.n	8006682 <UART_SetConfig+0x1ba>
 8006650:	2b20      	cmp	r3, #32
 8006652:	d00a      	beq.n	800666a <UART_SetConfig+0x1a2>
 8006654:	2b20      	cmp	r3, #32
 8006656:	d814      	bhi.n	8006682 <UART_SetConfig+0x1ba>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <UART_SetConfig+0x19a>
 800665c:	2b10      	cmp	r3, #16
 800665e:	d008      	beq.n	8006672 <UART_SetConfig+0x1aa>
 8006660:	e00f      	b.n	8006682 <UART_SetConfig+0x1ba>
 8006662:	2300      	movs	r3, #0
 8006664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006668:	e0ad      	b.n	80067c6 <UART_SetConfig+0x2fe>
 800666a:	2302      	movs	r3, #2
 800666c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006670:	e0a9      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006672:	2304      	movs	r3, #4
 8006674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006678:	e0a5      	b.n	80067c6 <UART_SetConfig+0x2fe>
 800667a:	2308      	movs	r3, #8
 800667c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006680:	e0a1      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006682:	2310      	movs	r3, #16
 8006684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006688:	e09d      	b.n	80067c6 <UART_SetConfig+0x2fe>
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a4a      	ldr	r2, [pc, #296]	; (80067b8 <UART_SetConfig+0x2f0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d125      	bne.n	80066e0 <UART_SetConfig+0x218>
 8006694:	4b45      	ldr	r3, [pc, #276]	; (80067ac <UART_SetConfig+0x2e4>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800669e:	2bc0      	cmp	r3, #192	; 0xc0
 80066a0:	d016      	beq.n	80066d0 <UART_SetConfig+0x208>
 80066a2:	2bc0      	cmp	r3, #192	; 0xc0
 80066a4:	d818      	bhi.n	80066d8 <UART_SetConfig+0x210>
 80066a6:	2b80      	cmp	r3, #128	; 0x80
 80066a8:	d00a      	beq.n	80066c0 <UART_SetConfig+0x1f8>
 80066aa:	2b80      	cmp	r3, #128	; 0x80
 80066ac:	d814      	bhi.n	80066d8 <UART_SetConfig+0x210>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <UART_SetConfig+0x1f0>
 80066b2:	2b40      	cmp	r3, #64	; 0x40
 80066b4:	d008      	beq.n	80066c8 <UART_SetConfig+0x200>
 80066b6:	e00f      	b.n	80066d8 <UART_SetConfig+0x210>
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066be:	e082      	b.n	80067c6 <UART_SetConfig+0x2fe>
 80066c0:	2302      	movs	r3, #2
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066c6:	e07e      	b.n	80067c6 <UART_SetConfig+0x2fe>
 80066c8:	2304      	movs	r3, #4
 80066ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ce:	e07a      	b.n	80067c6 <UART_SetConfig+0x2fe>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d6:	e076      	b.n	80067c6 <UART_SetConfig+0x2fe>
 80066d8:	2310      	movs	r3, #16
 80066da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066de:	e072      	b.n	80067c6 <UART_SetConfig+0x2fe>
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a35      	ldr	r2, [pc, #212]	; (80067bc <UART_SetConfig+0x2f4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d12a      	bne.n	8006740 <UART_SetConfig+0x278>
 80066ea:	4b30      	ldr	r3, [pc, #192]	; (80067ac <UART_SetConfig+0x2e4>)
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066f8:	d01a      	beq.n	8006730 <UART_SetConfig+0x268>
 80066fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066fe:	d81b      	bhi.n	8006738 <UART_SetConfig+0x270>
 8006700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006704:	d00c      	beq.n	8006720 <UART_SetConfig+0x258>
 8006706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800670a:	d815      	bhi.n	8006738 <UART_SetConfig+0x270>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <UART_SetConfig+0x250>
 8006710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006714:	d008      	beq.n	8006728 <UART_SetConfig+0x260>
 8006716:	e00f      	b.n	8006738 <UART_SetConfig+0x270>
 8006718:	2300      	movs	r3, #0
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671e:	e052      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006720:	2302      	movs	r3, #2
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006726:	e04e      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006728:	2304      	movs	r3, #4
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672e:	e04a      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006730:	2308      	movs	r3, #8
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006736:	e046      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006738:	2310      	movs	r3, #16
 800673a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800673e:	e042      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a17      	ldr	r2, [pc, #92]	; (80067a4 <UART_SetConfig+0x2dc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d13a      	bne.n	80067c0 <UART_SetConfig+0x2f8>
 800674a:	4b18      	ldr	r3, [pc, #96]	; (80067ac <UART_SetConfig+0x2e4>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006750:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006754:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006758:	d01a      	beq.n	8006790 <UART_SetConfig+0x2c8>
 800675a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800675e:	d81b      	bhi.n	8006798 <UART_SetConfig+0x2d0>
 8006760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006764:	d00c      	beq.n	8006780 <UART_SetConfig+0x2b8>
 8006766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676a:	d815      	bhi.n	8006798 <UART_SetConfig+0x2d0>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <UART_SetConfig+0x2b0>
 8006770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006774:	d008      	beq.n	8006788 <UART_SetConfig+0x2c0>
 8006776:	e00f      	b.n	8006798 <UART_SetConfig+0x2d0>
 8006778:	2300      	movs	r3, #0
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800677e:	e022      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006780:	2302      	movs	r3, #2
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006786:	e01e      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006788:	2304      	movs	r3, #4
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678e:	e01a      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006790:	2308      	movs	r3, #8
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006796:	e016      	b.n	80067c6 <UART_SetConfig+0x2fe>
 8006798:	2310      	movs	r3, #16
 800679a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679e:	e012      	b.n	80067c6 <UART_SetConfig+0x2fe>
 80067a0:	cfff69f3 	.word	0xcfff69f3
 80067a4:	40008000 	.word	0x40008000
 80067a8:	40013800 	.word	0x40013800
 80067ac:	40021000 	.word	0x40021000
 80067b0:	40004400 	.word	0x40004400
 80067b4:	40004800 	.word	0x40004800
 80067b8:	40004c00 	.word	0x40004c00
 80067bc:	40005000 	.word	0x40005000
 80067c0:	2310      	movs	r3, #16
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4aae      	ldr	r2, [pc, #696]	; (8006a84 <UART_SetConfig+0x5bc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	f040 8097 	bne.w	8006900 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d823      	bhi.n	8006822 <UART_SetConfig+0x35a>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <UART_SetConfig+0x318>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006805 	.word	0x08006805
 80067e4:	08006823 	.word	0x08006823
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	08006823 	.word	0x08006823
 80067f0:	08006813 	.word	0x08006813
 80067f4:	08006823 	.word	0x08006823
 80067f8:	08006823 	.word	0x08006823
 80067fc:	08006823 	.word	0x08006823
 8006800:	0800681b 	.word	0x0800681b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006804:	f7fd fb40 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8006808:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800680a:	e010      	b.n	800682e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800680c:	4b9e      	ldr	r3, [pc, #632]	; (8006a88 <UART_SetConfig+0x5c0>)
 800680e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006810:	e00d      	b.n	800682e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006812:	f7fd facb 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8006816:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006818:	e009      	b.n	800682e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800681a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006820:	e005      	b.n	800682e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800682c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8130 	beq.w	8006a96 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	4a94      	ldr	r2, [pc, #592]	; (8006a8c <UART_SetConfig+0x5c4>)
 800683c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006840:	461a      	mov	r2, r3
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	fbb3 f3f2 	udiv	r3, r3, r2
 8006848:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	4613      	mov	r3, r2
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	4413      	add	r3, r2
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	429a      	cmp	r2, r3
 8006858:	d305      	bcc.n	8006866 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	429a      	cmp	r2, r3
 8006864:	d903      	bls.n	800686e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800686c:	e113      	b.n	8006a96 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	2200      	movs	r2, #0
 8006872:	60bb      	str	r3, [r7, #8]
 8006874:	60fa      	str	r2, [r7, #12]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	4a84      	ldr	r2, [pc, #528]	; (8006a8c <UART_SetConfig+0x5c4>)
 800687c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006880:	b29b      	uxth	r3, r3
 8006882:	2200      	movs	r2, #0
 8006884:	603b      	str	r3, [r7, #0]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800688c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006890:	f7fa f9d2 	bl	8000c38 <__aeabi_uldivmod>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4610      	mov	r0, r2
 800689a:	4619      	mov	r1, r3
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	020b      	lsls	r3, r1, #8
 80068a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068aa:	0202      	lsls	r2, r0, #8
 80068ac:	6979      	ldr	r1, [r7, #20]
 80068ae:	6849      	ldr	r1, [r1, #4]
 80068b0:	0849      	lsrs	r1, r1, #1
 80068b2:	2000      	movs	r0, #0
 80068b4:	460c      	mov	r4, r1
 80068b6:	4605      	mov	r5, r0
 80068b8:	eb12 0804 	adds.w	r8, r2, r4
 80068bc:	eb43 0905 	adc.w	r9, r3, r5
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	469a      	mov	sl, r3
 80068c8:	4693      	mov	fp, r2
 80068ca:	4652      	mov	r2, sl
 80068cc:	465b      	mov	r3, fp
 80068ce:	4640      	mov	r0, r8
 80068d0:	4649      	mov	r1, r9
 80068d2:	f7fa f9b1 	bl	8000c38 <__aeabi_uldivmod>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4613      	mov	r3, r2
 80068dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068e4:	d308      	bcc.n	80068f8 <UART_SetConfig+0x430>
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ec:	d204      	bcs.n	80068f8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6a3a      	ldr	r2, [r7, #32]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	e0ce      	b.n	8006a96 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068fe:	e0ca      	b.n	8006a96 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006908:	d166      	bne.n	80069d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800690a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800690e:	2b08      	cmp	r3, #8
 8006910:	d827      	bhi.n	8006962 <UART_SetConfig+0x49a>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <UART_SetConfig+0x450>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	0800693d 	.word	0x0800693d
 800691c:	08006945 	.word	0x08006945
 8006920:	0800694d 	.word	0x0800694d
 8006924:	08006963 	.word	0x08006963
 8006928:	08006953 	.word	0x08006953
 800692c:	08006963 	.word	0x08006963
 8006930:	08006963 	.word	0x08006963
 8006934:	08006963 	.word	0x08006963
 8006938:	0800695b 	.word	0x0800695b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800693c:	f7fd faa4 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8006940:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006942:	e014      	b.n	800696e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006944:	f7fd fab6 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8006948:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800694a:	e010      	b.n	800696e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800694c:	4b4e      	ldr	r3, [pc, #312]	; (8006a88 <UART_SetConfig+0x5c0>)
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006950:	e00d      	b.n	800696e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006952:	f7fd fa2b 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8006956:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006958:	e009      	b.n	800696e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800695a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006960:	e005      	b.n	800696e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800696c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8090 	beq.w	8006a96 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	4a44      	ldr	r2, [pc, #272]	; (8006a8c <UART_SetConfig+0x5c4>)
 800697c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006980:	461a      	mov	r2, r3
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	fbb3 f3f2 	udiv	r3, r3, r2
 8006988:	005a      	lsls	r2, r3, #1
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	441a      	add	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	fbb2 f3f3 	udiv	r3, r2, r3
 800699a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	2b0f      	cmp	r3, #15
 80069a0:	d916      	bls.n	80069d0 <UART_SetConfig+0x508>
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a8:	d212      	bcs.n	80069d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f023 030f 	bic.w	r3, r3, #15
 80069b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	b29a      	uxth	r2, r3
 80069c0:	8bfb      	ldrh	r3, [r7, #30]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	8bfa      	ldrh	r2, [r7, #30]
 80069cc:	60da      	str	r2, [r3, #12]
 80069ce:	e062      	b.n	8006a96 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069d6:	e05e      	b.n	8006a96 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d828      	bhi.n	8006a32 <UART_SetConfig+0x56a>
 80069e0:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <UART_SetConfig+0x520>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a0d 	.word	0x08006a0d
 80069ec:	08006a15 	.word	0x08006a15
 80069f0:	08006a1d 	.word	0x08006a1d
 80069f4:	08006a33 	.word	0x08006a33
 80069f8:	08006a23 	.word	0x08006a23
 80069fc:	08006a33 	.word	0x08006a33
 8006a00:	08006a33 	.word	0x08006a33
 8006a04:	08006a33 	.word	0x08006a33
 8006a08:	08006a2b 	.word	0x08006a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a0c:	f7fd fa3c 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8006a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a12:	e014      	b.n	8006a3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a14:	f7fd fa4e 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8006a18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a1a:	e010      	b.n	8006a3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a1c:	4b1a      	ldr	r3, [pc, #104]	; (8006a88 <UART_SetConfig+0x5c0>)
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a20:	e00d      	b.n	8006a3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a22:	f7fd f9c3 	bl	8003dac <HAL_RCC_GetSysClockFreq>
 8006a26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a28:	e009      	b.n	8006a3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a30:	e005      	b.n	8006a3e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a3c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d028      	beq.n	8006a96 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	4a10      	ldr	r2, [pc, #64]	; (8006a8c <UART_SetConfig+0x5c4>)
 8006a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	441a      	add	r2, r3
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	2b0f      	cmp	r3, #15
 8006a6c:	d910      	bls.n	8006a90 <UART_SetConfig+0x5c8>
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a74:	d20c      	bcs.n	8006a90 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60da      	str	r2, [r3, #12]
 8006a80:	e009      	b.n	8006a96 <UART_SetConfig+0x5ce>
 8006a82:	bf00      	nop
 8006a84:	40008000 	.word	0x40008000
 8006a88:	00f42400 	.word	0x00f42400
 8006a8c:	08009d1c 	.word	0x08009d1c
      }
      else
      {
        ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006ab2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3730      	adds	r7, #48	; 0x30
 8006aba:	46bd      	mov	sp, r7
 8006abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00a      	beq.n	8006aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00a      	beq.n	8006b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01a      	beq.n	8006bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bbe:	d10a      	bne.n	8006bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	605a      	str	r2, [r3, #4]
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c14:	f7fc f8c6 	bl	8002da4 <HAL_GetTick>
 8006c18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d10e      	bne.n	8006c46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f82f 	bl	8006c9a <UART_WaitOnFlagUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e025      	b.n	8006c92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d10e      	bne.n	8006c72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f819 	bl	8006c9a <UART_WaitOnFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e00f      	b.n	8006c92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b09c      	sub	sp, #112	; 0x70
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	603b      	str	r3, [r7, #0]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006caa:	e0a9      	b.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	f000 80a5 	beq.w	8006e00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb6:	f7fc f875 	bl	8002da4 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d302      	bcc.n	8006ccc <UART_WaitOnFlagUntilTimeout+0x32>
 8006cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d140      	bne.n	8006d4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ce0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e6      	bne.n	8006ccc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3308      	adds	r3, #8
 8006d04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	f023 0301 	bic.w	r3, r3, #1
 8006d14:	663b      	str	r3, [r7, #96]	; 0x60
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e5      	bne.n	8006cfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e069      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d051      	beq.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d6a:	d149      	bne.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	e853 3f00 	ldrex	r3, [r3]
 8006d82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
 8006d96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e6      	bne.n	8006d76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	613b      	str	r3, [r7, #16]
   return(result);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f023 0301 	bic.w	r3, r3, #1
 8006dbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dc8:	623a      	str	r2, [r7, #32]
 8006dca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	69f9      	ldr	r1, [r7, #28]
 8006dce:	6a3a      	ldr	r2, [r7, #32]
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e5      	bne.n	8006da8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e010      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69da      	ldr	r2, [r3, #28]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	bf0c      	ite	eq
 8006e10:	2301      	moveq	r3, #1
 8006e12:	2300      	movne	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	f43f af46 	beq.w	8006cac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3770      	adds	r7, #112	; 0x70
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e027      	b.n	8006e90 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2224      	movs	r2, #36	; 0x24
 8006e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0201 	bic.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e02d      	b.n	8006f10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2224      	movs	r2, #36	; 0x24
 8006ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 0201 	bic.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f84f 	bl	8006f94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e02d      	b.n	8006f8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2224      	movs	r2, #36	; 0x24
 8006f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0201 	bic.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f811 	bl	8006f94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d108      	bne.n	8006fb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fb4:	e031      	b.n	800701a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fb6:	2308      	movs	r3, #8
 8006fb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fba:	2308      	movs	r3, #8
 8006fbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	0e5b      	lsrs	r3, r3, #25
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	0f5b      	lsrs	r3, r3, #29
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	f003 0307 	and.w	r3, r3, #7
 8006fdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
 8006fe0:	7b3a      	ldrb	r2, [r7, #12]
 8006fe2:	4911      	ldr	r1, [pc, #68]	; (8007028 <UARTEx_SetNbDataToProcess+0x94>)
 8006fe4:	5c8a      	ldrb	r2, [r1, r2]
 8006fe6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fea:	7b3a      	ldrb	r2, [r7, #12]
 8006fec:	490f      	ldr	r1, [pc, #60]	; (800702c <UARTEx_SetNbDataToProcess+0x98>)
 8006fee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ff0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	7b7a      	ldrb	r2, [r7, #13]
 8007000:	4909      	ldr	r1, [pc, #36]	; (8007028 <UARTEx_SetNbDataToProcess+0x94>)
 8007002:	5c8a      	ldrb	r2, [r1, r2]
 8007004:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007008:	7b7a      	ldrb	r2, [r7, #13]
 800700a:	4908      	ldr	r1, [pc, #32]	; (800702c <UARTEx_SetNbDataToProcess+0x98>)
 800700c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800700e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007012:	b29a      	uxth	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	08009d34 	.word	0x08009d34
 800702c:	08009d3c 	.word	0x08009d3c

08007030 <__errno>:
 8007030:	4b01      	ldr	r3, [pc, #4]	; (8007038 <__errno+0x8>)
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20000014 	.word	0x20000014

0800703c <__libc_init_array>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	4d0d      	ldr	r5, [pc, #52]	; (8007074 <__libc_init_array+0x38>)
 8007040:	4c0d      	ldr	r4, [pc, #52]	; (8007078 <__libc_init_array+0x3c>)
 8007042:	1b64      	subs	r4, r4, r5
 8007044:	10a4      	asrs	r4, r4, #2
 8007046:	2600      	movs	r6, #0
 8007048:	42a6      	cmp	r6, r4
 800704a:	d109      	bne.n	8007060 <__libc_init_array+0x24>
 800704c:	4d0b      	ldr	r5, [pc, #44]	; (800707c <__libc_init_array+0x40>)
 800704e:	4c0c      	ldr	r4, [pc, #48]	; (8007080 <__libc_init_array+0x44>)
 8007050:	f002 fdc4 	bl	8009bdc <_init>
 8007054:	1b64      	subs	r4, r4, r5
 8007056:	10a4      	asrs	r4, r4, #2
 8007058:	2600      	movs	r6, #0
 800705a:	42a6      	cmp	r6, r4
 800705c:	d105      	bne.n	800706a <__libc_init_array+0x2e>
 800705e:	bd70      	pop	{r4, r5, r6, pc}
 8007060:	f855 3b04 	ldr.w	r3, [r5], #4
 8007064:	4798      	blx	r3
 8007066:	3601      	adds	r6, #1
 8007068:	e7ee      	b.n	8007048 <__libc_init_array+0xc>
 800706a:	f855 3b04 	ldr.w	r3, [r5], #4
 800706e:	4798      	blx	r3
 8007070:	3601      	adds	r6, #1
 8007072:	e7f2      	b.n	800705a <__libc_init_array+0x1e>
 8007074:	0800a124 	.word	0x0800a124
 8007078:	0800a124 	.word	0x0800a124
 800707c:	0800a124 	.word	0x0800a124
 8007080:	0800a128 	.word	0x0800a128

08007084 <memset>:
 8007084:	4402      	add	r2, r0
 8007086:	4603      	mov	r3, r0
 8007088:	4293      	cmp	r3, r2
 800708a:	d100      	bne.n	800708e <memset+0xa>
 800708c:	4770      	bx	lr
 800708e:	f803 1b01 	strb.w	r1, [r3], #1
 8007092:	e7f9      	b.n	8007088 <memset+0x4>

08007094 <__cvt>:
 8007094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	ec55 4b10 	vmov	r4, r5, d0
 800709c:	2d00      	cmp	r5, #0
 800709e:	460e      	mov	r6, r1
 80070a0:	4619      	mov	r1, r3
 80070a2:	462b      	mov	r3, r5
 80070a4:	bfbb      	ittet	lt
 80070a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070aa:	461d      	movlt	r5, r3
 80070ac:	2300      	movge	r3, #0
 80070ae:	232d      	movlt	r3, #45	; 0x2d
 80070b0:	700b      	strb	r3, [r1, #0]
 80070b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070b8:	4691      	mov	r9, r2
 80070ba:	f023 0820 	bic.w	r8, r3, #32
 80070be:	bfbc      	itt	lt
 80070c0:	4622      	movlt	r2, r4
 80070c2:	4614      	movlt	r4, r2
 80070c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070c8:	d005      	beq.n	80070d6 <__cvt+0x42>
 80070ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070ce:	d100      	bne.n	80070d2 <__cvt+0x3e>
 80070d0:	3601      	adds	r6, #1
 80070d2:	2102      	movs	r1, #2
 80070d4:	e000      	b.n	80070d8 <__cvt+0x44>
 80070d6:	2103      	movs	r1, #3
 80070d8:	ab03      	add	r3, sp, #12
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	ab02      	add	r3, sp, #8
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	ec45 4b10 	vmov	d0, r4, r5
 80070e4:	4653      	mov	r3, sl
 80070e6:	4632      	mov	r2, r6
 80070e8:	f000 fe1a 	bl	8007d20 <_dtoa_r>
 80070ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070f0:	4607      	mov	r7, r0
 80070f2:	d102      	bne.n	80070fa <__cvt+0x66>
 80070f4:	f019 0f01 	tst.w	r9, #1
 80070f8:	d022      	beq.n	8007140 <__cvt+0xac>
 80070fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070fe:	eb07 0906 	add.w	r9, r7, r6
 8007102:	d110      	bne.n	8007126 <__cvt+0x92>
 8007104:	783b      	ldrb	r3, [r7, #0]
 8007106:	2b30      	cmp	r3, #48	; 0x30
 8007108:	d10a      	bne.n	8007120 <__cvt+0x8c>
 800710a:	2200      	movs	r2, #0
 800710c:	2300      	movs	r3, #0
 800710e:	4620      	mov	r0, r4
 8007110:	4629      	mov	r1, r5
 8007112:	f7f9 fd01 	bl	8000b18 <__aeabi_dcmpeq>
 8007116:	b918      	cbnz	r0, 8007120 <__cvt+0x8c>
 8007118:	f1c6 0601 	rsb	r6, r6, #1
 800711c:	f8ca 6000 	str.w	r6, [sl]
 8007120:	f8da 3000 	ldr.w	r3, [sl]
 8007124:	4499      	add	r9, r3
 8007126:	2200      	movs	r2, #0
 8007128:	2300      	movs	r3, #0
 800712a:	4620      	mov	r0, r4
 800712c:	4629      	mov	r1, r5
 800712e:	f7f9 fcf3 	bl	8000b18 <__aeabi_dcmpeq>
 8007132:	b108      	cbz	r0, 8007138 <__cvt+0xa4>
 8007134:	f8cd 900c 	str.w	r9, [sp, #12]
 8007138:	2230      	movs	r2, #48	; 0x30
 800713a:	9b03      	ldr	r3, [sp, #12]
 800713c:	454b      	cmp	r3, r9
 800713e:	d307      	bcc.n	8007150 <__cvt+0xbc>
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007144:	1bdb      	subs	r3, r3, r7
 8007146:	4638      	mov	r0, r7
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	b004      	add	sp, #16
 800714c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007150:	1c59      	adds	r1, r3, #1
 8007152:	9103      	str	r1, [sp, #12]
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	e7f0      	b.n	800713a <__cvt+0xa6>

08007158 <__exponent>:
 8007158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800715a:	4603      	mov	r3, r0
 800715c:	2900      	cmp	r1, #0
 800715e:	bfb8      	it	lt
 8007160:	4249      	neglt	r1, r1
 8007162:	f803 2b02 	strb.w	r2, [r3], #2
 8007166:	bfb4      	ite	lt
 8007168:	222d      	movlt	r2, #45	; 0x2d
 800716a:	222b      	movge	r2, #43	; 0x2b
 800716c:	2909      	cmp	r1, #9
 800716e:	7042      	strb	r2, [r0, #1]
 8007170:	dd2a      	ble.n	80071c8 <__exponent+0x70>
 8007172:	f10d 0407 	add.w	r4, sp, #7
 8007176:	46a4      	mov	ip, r4
 8007178:	270a      	movs	r7, #10
 800717a:	46a6      	mov	lr, r4
 800717c:	460a      	mov	r2, r1
 800717e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007182:	fb07 1516 	mls	r5, r7, r6, r1
 8007186:	3530      	adds	r5, #48	; 0x30
 8007188:	2a63      	cmp	r2, #99	; 0x63
 800718a:	f104 34ff 	add.w	r4, r4, #4294967295
 800718e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007192:	4631      	mov	r1, r6
 8007194:	dcf1      	bgt.n	800717a <__exponent+0x22>
 8007196:	3130      	adds	r1, #48	; 0x30
 8007198:	f1ae 0502 	sub.w	r5, lr, #2
 800719c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071a0:	1c44      	adds	r4, r0, #1
 80071a2:	4629      	mov	r1, r5
 80071a4:	4561      	cmp	r1, ip
 80071a6:	d30a      	bcc.n	80071be <__exponent+0x66>
 80071a8:	f10d 0209 	add.w	r2, sp, #9
 80071ac:	eba2 020e 	sub.w	r2, r2, lr
 80071b0:	4565      	cmp	r5, ip
 80071b2:	bf88      	it	hi
 80071b4:	2200      	movhi	r2, #0
 80071b6:	4413      	add	r3, r2
 80071b8:	1a18      	subs	r0, r3, r0
 80071ba:	b003      	add	sp, #12
 80071bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071c6:	e7ed      	b.n	80071a4 <__exponent+0x4c>
 80071c8:	2330      	movs	r3, #48	; 0x30
 80071ca:	3130      	adds	r1, #48	; 0x30
 80071cc:	7083      	strb	r3, [r0, #2]
 80071ce:	70c1      	strb	r1, [r0, #3]
 80071d0:	1d03      	adds	r3, r0, #4
 80071d2:	e7f1      	b.n	80071b8 <__exponent+0x60>

080071d4 <_printf_float>:
 80071d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d8:	ed2d 8b02 	vpush	{d8}
 80071dc:	b08d      	sub	sp, #52	; 0x34
 80071de:	460c      	mov	r4, r1
 80071e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071e4:	4616      	mov	r6, r2
 80071e6:	461f      	mov	r7, r3
 80071e8:	4605      	mov	r5, r0
 80071ea:	f001 fd3f 	bl	8008c6c <_localeconv_r>
 80071ee:	f8d0 a000 	ldr.w	sl, [r0]
 80071f2:	4650      	mov	r0, sl
 80071f4:	f7f9 f814 	bl	8000220 <strlen>
 80071f8:	2300      	movs	r3, #0
 80071fa:	930a      	str	r3, [sp, #40]	; 0x28
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	9305      	str	r3, [sp, #20]
 8007200:	f8d8 3000 	ldr.w	r3, [r8]
 8007204:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007208:	3307      	adds	r3, #7
 800720a:	f023 0307 	bic.w	r3, r3, #7
 800720e:	f103 0208 	add.w	r2, r3, #8
 8007212:	f8c8 2000 	str.w	r2, [r8]
 8007216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800721e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007222:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007226:	9307      	str	r3, [sp, #28]
 8007228:	f8cd 8018 	str.w	r8, [sp, #24]
 800722c:	ee08 0a10 	vmov	s16, r0
 8007230:	4b9f      	ldr	r3, [pc, #636]	; (80074b0 <_printf_float+0x2dc>)
 8007232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007236:	f04f 32ff 	mov.w	r2, #4294967295
 800723a:	f7f9 fc9f 	bl	8000b7c <__aeabi_dcmpun>
 800723e:	bb88      	cbnz	r0, 80072a4 <_printf_float+0xd0>
 8007240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007244:	4b9a      	ldr	r3, [pc, #616]	; (80074b0 <_printf_float+0x2dc>)
 8007246:	f04f 32ff 	mov.w	r2, #4294967295
 800724a:	f7f9 fc79 	bl	8000b40 <__aeabi_dcmple>
 800724e:	bb48      	cbnz	r0, 80072a4 <_printf_float+0xd0>
 8007250:	2200      	movs	r2, #0
 8007252:	2300      	movs	r3, #0
 8007254:	4640      	mov	r0, r8
 8007256:	4649      	mov	r1, r9
 8007258:	f7f9 fc68 	bl	8000b2c <__aeabi_dcmplt>
 800725c:	b110      	cbz	r0, 8007264 <_printf_float+0x90>
 800725e:	232d      	movs	r3, #45	; 0x2d
 8007260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007264:	4b93      	ldr	r3, [pc, #588]	; (80074b4 <_printf_float+0x2e0>)
 8007266:	4894      	ldr	r0, [pc, #592]	; (80074b8 <_printf_float+0x2e4>)
 8007268:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800726c:	bf94      	ite	ls
 800726e:	4698      	movls	r8, r3
 8007270:	4680      	movhi	r8, r0
 8007272:	2303      	movs	r3, #3
 8007274:	6123      	str	r3, [r4, #16]
 8007276:	9b05      	ldr	r3, [sp, #20]
 8007278:	f023 0204 	bic.w	r2, r3, #4
 800727c:	6022      	str	r2, [r4, #0]
 800727e:	f04f 0900 	mov.w	r9, #0
 8007282:	9700      	str	r7, [sp, #0]
 8007284:	4633      	mov	r3, r6
 8007286:	aa0b      	add	r2, sp, #44	; 0x2c
 8007288:	4621      	mov	r1, r4
 800728a:	4628      	mov	r0, r5
 800728c:	f000 f9d8 	bl	8007640 <_printf_common>
 8007290:	3001      	adds	r0, #1
 8007292:	f040 8090 	bne.w	80073b6 <_printf_float+0x1e2>
 8007296:	f04f 30ff 	mov.w	r0, #4294967295
 800729a:	b00d      	add	sp, #52	; 0x34
 800729c:	ecbd 8b02 	vpop	{d8}
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a4:	4642      	mov	r2, r8
 80072a6:	464b      	mov	r3, r9
 80072a8:	4640      	mov	r0, r8
 80072aa:	4649      	mov	r1, r9
 80072ac:	f7f9 fc66 	bl	8000b7c <__aeabi_dcmpun>
 80072b0:	b140      	cbz	r0, 80072c4 <_printf_float+0xf0>
 80072b2:	464b      	mov	r3, r9
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bfbc      	itt	lt
 80072b8:	232d      	movlt	r3, #45	; 0x2d
 80072ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072be:	487f      	ldr	r0, [pc, #508]	; (80074bc <_printf_float+0x2e8>)
 80072c0:	4b7f      	ldr	r3, [pc, #508]	; (80074c0 <_printf_float+0x2ec>)
 80072c2:	e7d1      	b.n	8007268 <_printf_float+0x94>
 80072c4:	6863      	ldr	r3, [r4, #4]
 80072c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80072ca:	9206      	str	r2, [sp, #24]
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	d13f      	bne.n	8007350 <_printf_float+0x17c>
 80072d0:	2306      	movs	r3, #6
 80072d2:	6063      	str	r3, [r4, #4]
 80072d4:	9b05      	ldr	r3, [sp, #20]
 80072d6:	6861      	ldr	r1, [r4, #4]
 80072d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072dc:	2300      	movs	r3, #0
 80072de:	9303      	str	r3, [sp, #12]
 80072e0:	ab0a      	add	r3, sp, #40	; 0x28
 80072e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072e6:	ab09      	add	r3, sp, #36	; 0x24
 80072e8:	ec49 8b10 	vmov	d0, r8, r9
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	6022      	str	r2, [r4, #0]
 80072f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072f4:	4628      	mov	r0, r5
 80072f6:	f7ff fecd 	bl	8007094 <__cvt>
 80072fa:	9b06      	ldr	r3, [sp, #24]
 80072fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072fe:	2b47      	cmp	r3, #71	; 0x47
 8007300:	4680      	mov	r8, r0
 8007302:	d108      	bne.n	8007316 <_printf_float+0x142>
 8007304:	1cc8      	adds	r0, r1, #3
 8007306:	db02      	blt.n	800730e <_printf_float+0x13a>
 8007308:	6863      	ldr	r3, [r4, #4]
 800730a:	4299      	cmp	r1, r3
 800730c:	dd41      	ble.n	8007392 <_printf_float+0x1be>
 800730e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007312:	fa5f fb8b 	uxtb.w	fp, fp
 8007316:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800731a:	d820      	bhi.n	800735e <_printf_float+0x18a>
 800731c:	3901      	subs	r1, #1
 800731e:	465a      	mov	r2, fp
 8007320:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007324:	9109      	str	r1, [sp, #36]	; 0x24
 8007326:	f7ff ff17 	bl	8007158 <__exponent>
 800732a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800732c:	1813      	adds	r3, r2, r0
 800732e:	2a01      	cmp	r2, #1
 8007330:	4681      	mov	r9, r0
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	dc02      	bgt.n	800733c <_printf_float+0x168>
 8007336:	6822      	ldr	r2, [r4, #0]
 8007338:	07d2      	lsls	r2, r2, #31
 800733a:	d501      	bpl.n	8007340 <_printf_float+0x16c>
 800733c:	3301      	adds	r3, #1
 800733e:	6123      	str	r3, [r4, #16]
 8007340:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007344:	2b00      	cmp	r3, #0
 8007346:	d09c      	beq.n	8007282 <_printf_float+0xae>
 8007348:	232d      	movs	r3, #45	; 0x2d
 800734a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800734e:	e798      	b.n	8007282 <_printf_float+0xae>
 8007350:	9a06      	ldr	r2, [sp, #24]
 8007352:	2a47      	cmp	r2, #71	; 0x47
 8007354:	d1be      	bne.n	80072d4 <_printf_float+0x100>
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1bc      	bne.n	80072d4 <_printf_float+0x100>
 800735a:	2301      	movs	r3, #1
 800735c:	e7b9      	b.n	80072d2 <_printf_float+0xfe>
 800735e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007362:	d118      	bne.n	8007396 <_printf_float+0x1c2>
 8007364:	2900      	cmp	r1, #0
 8007366:	6863      	ldr	r3, [r4, #4]
 8007368:	dd0b      	ble.n	8007382 <_printf_float+0x1ae>
 800736a:	6121      	str	r1, [r4, #16]
 800736c:	b913      	cbnz	r3, 8007374 <_printf_float+0x1a0>
 800736e:	6822      	ldr	r2, [r4, #0]
 8007370:	07d0      	lsls	r0, r2, #31
 8007372:	d502      	bpl.n	800737a <_printf_float+0x1a6>
 8007374:	3301      	adds	r3, #1
 8007376:	440b      	add	r3, r1
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	65a1      	str	r1, [r4, #88]	; 0x58
 800737c:	f04f 0900 	mov.w	r9, #0
 8007380:	e7de      	b.n	8007340 <_printf_float+0x16c>
 8007382:	b913      	cbnz	r3, 800738a <_printf_float+0x1b6>
 8007384:	6822      	ldr	r2, [r4, #0]
 8007386:	07d2      	lsls	r2, r2, #31
 8007388:	d501      	bpl.n	800738e <_printf_float+0x1ba>
 800738a:	3302      	adds	r3, #2
 800738c:	e7f4      	b.n	8007378 <_printf_float+0x1a4>
 800738e:	2301      	movs	r3, #1
 8007390:	e7f2      	b.n	8007378 <_printf_float+0x1a4>
 8007392:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007398:	4299      	cmp	r1, r3
 800739a:	db05      	blt.n	80073a8 <_printf_float+0x1d4>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	6121      	str	r1, [r4, #16]
 80073a0:	07d8      	lsls	r0, r3, #31
 80073a2:	d5ea      	bpl.n	800737a <_printf_float+0x1a6>
 80073a4:	1c4b      	adds	r3, r1, #1
 80073a6:	e7e7      	b.n	8007378 <_printf_float+0x1a4>
 80073a8:	2900      	cmp	r1, #0
 80073aa:	bfd4      	ite	le
 80073ac:	f1c1 0202 	rsble	r2, r1, #2
 80073b0:	2201      	movgt	r2, #1
 80073b2:	4413      	add	r3, r2
 80073b4:	e7e0      	b.n	8007378 <_printf_float+0x1a4>
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	055a      	lsls	r2, r3, #21
 80073ba:	d407      	bmi.n	80073cc <_printf_float+0x1f8>
 80073bc:	6923      	ldr	r3, [r4, #16]
 80073be:	4642      	mov	r2, r8
 80073c0:	4631      	mov	r1, r6
 80073c2:	4628      	mov	r0, r5
 80073c4:	47b8      	blx	r7
 80073c6:	3001      	adds	r0, #1
 80073c8:	d12c      	bne.n	8007424 <_printf_float+0x250>
 80073ca:	e764      	b.n	8007296 <_printf_float+0xc2>
 80073cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073d0:	f240 80e0 	bls.w	8007594 <_printf_float+0x3c0>
 80073d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073d8:	2200      	movs	r2, #0
 80073da:	2300      	movs	r3, #0
 80073dc:	f7f9 fb9c 	bl	8000b18 <__aeabi_dcmpeq>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d034      	beq.n	800744e <_printf_float+0x27a>
 80073e4:	4a37      	ldr	r2, [pc, #220]	; (80074c4 <_printf_float+0x2f0>)
 80073e6:	2301      	movs	r3, #1
 80073e8:	4631      	mov	r1, r6
 80073ea:	4628      	mov	r0, r5
 80073ec:	47b8      	blx	r7
 80073ee:	3001      	adds	r0, #1
 80073f0:	f43f af51 	beq.w	8007296 <_printf_float+0xc2>
 80073f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073f8:	429a      	cmp	r2, r3
 80073fa:	db02      	blt.n	8007402 <_printf_float+0x22e>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	07d8      	lsls	r0, r3, #31
 8007400:	d510      	bpl.n	8007424 <_printf_float+0x250>
 8007402:	ee18 3a10 	vmov	r3, s16
 8007406:	4652      	mov	r2, sl
 8007408:	4631      	mov	r1, r6
 800740a:	4628      	mov	r0, r5
 800740c:	47b8      	blx	r7
 800740e:	3001      	adds	r0, #1
 8007410:	f43f af41 	beq.w	8007296 <_printf_float+0xc2>
 8007414:	f04f 0800 	mov.w	r8, #0
 8007418:	f104 091a 	add.w	r9, r4, #26
 800741c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741e:	3b01      	subs	r3, #1
 8007420:	4543      	cmp	r3, r8
 8007422:	dc09      	bgt.n	8007438 <_printf_float+0x264>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	079b      	lsls	r3, r3, #30
 8007428:	f100 8105 	bmi.w	8007636 <_printf_float+0x462>
 800742c:	68e0      	ldr	r0, [r4, #12]
 800742e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007430:	4298      	cmp	r0, r3
 8007432:	bfb8      	it	lt
 8007434:	4618      	movlt	r0, r3
 8007436:	e730      	b.n	800729a <_printf_float+0xc6>
 8007438:	2301      	movs	r3, #1
 800743a:	464a      	mov	r2, r9
 800743c:	4631      	mov	r1, r6
 800743e:	4628      	mov	r0, r5
 8007440:	47b8      	blx	r7
 8007442:	3001      	adds	r0, #1
 8007444:	f43f af27 	beq.w	8007296 <_printf_float+0xc2>
 8007448:	f108 0801 	add.w	r8, r8, #1
 800744c:	e7e6      	b.n	800741c <_printf_float+0x248>
 800744e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	dc39      	bgt.n	80074c8 <_printf_float+0x2f4>
 8007454:	4a1b      	ldr	r2, [pc, #108]	; (80074c4 <_printf_float+0x2f0>)
 8007456:	2301      	movs	r3, #1
 8007458:	4631      	mov	r1, r6
 800745a:	4628      	mov	r0, r5
 800745c:	47b8      	blx	r7
 800745e:	3001      	adds	r0, #1
 8007460:	f43f af19 	beq.w	8007296 <_printf_float+0xc2>
 8007464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007468:	4313      	orrs	r3, r2
 800746a:	d102      	bne.n	8007472 <_printf_float+0x29e>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	07d9      	lsls	r1, r3, #31
 8007470:	d5d8      	bpl.n	8007424 <_printf_float+0x250>
 8007472:	ee18 3a10 	vmov	r3, s16
 8007476:	4652      	mov	r2, sl
 8007478:	4631      	mov	r1, r6
 800747a:	4628      	mov	r0, r5
 800747c:	47b8      	blx	r7
 800747e:	3001      	adds	r0, #1
 8007480:	f43f af09 	beq.w	8007296 <_printf_float+0xc2>
 8007484:	f04f 0900 	mov.w	r9, #0
 8007488:	f104 0a1a 	add.w	sl, r4, #26
 800748c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800748e:	425b      	negs	r3, r3
 8007490:	454b      	cmp	r3, r9
 8007492:	dc01      	bgt.n	8007498 <_printf_float+0x2c4>
 8007494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007496:	e792      	b.n	80073be <_printf_float+0x1ea>
 8007498:	2301      	movs	r3, #1
 800749a:	4652      	mov	r2, sl
 800749c:	4631      	mov	r1, r6
 800749e:	4628      	mov	r0, r5
 80074a0:	47b8      	blx	r7
 80074a2:	3001      	adds	r0, #1
 80074a4:	f43f aef7 	beq.w	8007296 <_printf_float+0xc2>
 80074a8:	f109 0901 	add.w	r9, r9, #1
 80074ac:	e7ee      	b.n	800748c <_printf_float+0x2b8>
 80074ae:	bf00      	nop
 80074b0:	7fefffff 	.word	0x7fefffff
 80074b4:	08009d48 	.word	0x08009d48
 80074b8:	08009d4c 	.word	0x08009d4c
 80074bc:	08009d54 	.word	0x08009d54
 80074c0:	08009d50 	.word	0x08009d50
 80074c4:	08009d58 	.word	0x08009d58
 80074c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074cc:	429a      	cmp	r2, r3
 80074ce:	bfa8      	it	ge
 80074d0:	461a      	movge	r2, r3
 80074d2:	2a00      	cmp	r2, #0
 80074d4:	4691      	mov	r9, r2
 80074d6:	dc37      	bgt.n	8007548 <_printf_float+0x374>
 80074d8:	f04f 0b00 	mov.w	fp, #0
 80074dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074e0:	f104 021a 	add.w	r2, r4, #26
 80074e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074e6:	9305      	str	r3, [sp, #20]
 80074e8:	eba3 0309 	sub.w	r3, r3, r9
 80074ec:	455b      	cmp	r3, fp
 80074ee:	dc33      	bgt.n	8007558 <_printf_float+0x384>
 80074f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074f4:	429a      	cmp	r2, r3
 80074f6:	db3b      	blt.n	8007570 <_printf_float+0x39c>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	07da      	lsls	r2, r3, #31
 80074fc:	d438      	bmi.n	8007570 <_printf_float+0x39c>
 80074fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007500:	9a05      	ldr	r2, [sp, #20]
 8007502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007504:	1a9a      	subs	r2, r3, r2
 8007506:	eba3 0901 	sub.w	r9, r3, r1
 800750a:	4591      	cmp	r9, r2
 800750c:	bfa8      	it	ge
 800750e:	4691      	movge	r9, r2
 8007510:	f1b9 0f00 	cmp.w	r9, #0
 8007514:	dc35      	bgt.n	8007582 <_printf_float+0x3ae>
 8007516:	f04f 0800 	mov.w	r8, #0
 800751a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800751e:	f104 0a1a 	add.w	sl, r4, #26
 8007522:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	eba3 0309 	sub.w	r3, r3, r9
 800752c:	4543      	cmp	r3, r8
 800752e:	f77f af79 	ble.w	8007424 <_printf_float+0x250>
 8007532:	2301      	movs	r3, #1
 8007534:	4652      	mov	r2, sl
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	f43f aeaa 	beq.w	8007296 <_printf_float+0xc2>
 8007542:	f108 0801 	add.w	r8, r8, #1
 8007546:	e7ec      	b.n	8007522 <_printf_float+0x34e>
 8007548:	4613      	mov	r3, r2
 800754a:	4631      	mov	r1, r6
 800754c:	4642      	mov	r2, r8
 800754e:	4628      	mov	r0, r5
 8007550:	47b8      	blx	r7
 8007552:	3001      	adds	r0, #1
 8007554:	d1c0      	bne.n	80074d8 <_printf_float+0x304>
 8007556:	e69e      	b.n	8007296 <_printf_float+0xc2>
 8007558:	2301      	movs	r3, #1
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	9205      	str	r2, [sp, #20]
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	f43f ae97 	beq.w	8007296 <_printf_float+0xc2>
 8007568:	9a05      	ldr	r2, [sp, #20]
 800756a:	f10b 0b01 	add.w	fp, fp, #1
 800756e:	e7b9      	b.n	80074e4 <_printf_float+0x310>
 8007570:	ee18 3a10 	vmov	r3, s16
 8007574:	4652      	mov	r2, sl
 8007576:	4631      	mov	r1, r6
 8007578:	4628      	mov	r0, r5
 800757a:	47b8      	blx	r7
 800757c:	3001      	adds	r0, #1
 800757e:	d1be      	bne.n	80074fe <_printf_float+0x32a>
 8007580:	e689      	b.n	8007296 <_printf_float+0xc2>
 8007582:	9a05      	ldr	r2, [sp, #20]
 8007584:	464b      	mov	r3, r9
 8007586:	4442      	add	r2, r8
 8007588:	4631      	mov	r1, r6
 800758a:	4628      	mov	r0, r5
 800758c:	47b8      	blx	r7
 800758e:	3001      	adds	r0, #1
 8007590:	d1c1      	bne.n	8007516 <_printf_float+0x342>
 8007592:	e680      	b.n	8007296 <_printf_float+0xc2>
 8007594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007596:	2a01      	cmp	r2, #1
 8007598:	dc01      	bgt.n	800759e <_printf_float+0x3ca>
 800759a:	07db      	lsls	r3, r3, #31
 800759c:	d538      	bpl.n	8007610 <_printf_float+0x43c>
 800759e:	2301      	movs	r3, #1
 80075a0:	4642      	mov	r2, r8
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b8      	blx	r7
 80075a8:	3001      	adds	r0, #1
 80075aa:	f43f ae74 	beq.w	8007296 <_printf_float+0xc2>
 80075ae:	ee18 3a10 	vmov	r3, s16
 80075b2:	4652      	mov	r2, sl
 80075b4:	4631      	mov	r1, r6
 80075b6:	4628      	mov	r0, r5
 80075b8:	47b8      	blx	r7
 80075ba:	3001      	adds	r0, #1
 80075bc:	f43f ae6b 	beq.w	8007296 <_printf_float+0xc2>
 80075c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075c4:	2200      	movs	r2, #0
 80075c6:	2300      	movs	r3, #0
 80075c8:	f7f9 faa6 	bl	8000b18 <__aeabi_dcmpeq>
 80075cc:	b9d8      	cbnz	r0, 8007606 <_printf_float+0x432>
 80075ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d0:	f108 0201 	add.w	r2, r8, #1
 80075d4:	3b01      	subs	r3, #1
 80075d6:	4631      	mov	r1, r6
 80075d8:	4628      	mov	r0, r5
 80075da:	47b8      	blx	r7
 80075dc:	3001      	adds	r0, #1
 80075de:	d10e      	bne.n	80075fe <_printf_float+0x42a>
 80075e0:	e659      	b.n	8007296 <_printf_float+0xc2>
 80075e2:	2301      	movs	r3, #1
 80075e4:	4652      	mov	r2, sl
 80075e6:	4631      	mov	r1, r6
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b8      	blx	r7
 80075ec:	3001      	adds	r0, #1
 80075ee:	f43f ae52 	beq.w	8007296 <_printf_float+0xc2>
 80075f2:	f108 0801 	add.w	r8, r8, #1
 80075f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f8:	3b01      	subs	r3, #1
 80075fa:	4543      	cmp	r3, r8
 80075fc:	dcf1      	bgt.n	80075e2 <_printf_float+0x40e>
 80075fe:	464b      	mov	r3, r9
 8007600:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007604:	e6dc      	b.n	80073c0 <_printf_float+0x1ec>
 8007606:	f04f 0800 	mov.w	r8, #0
 800760a:	f104 0a1a 	add.w	sl, r4, #26
 800760e:	e7f2      	b.n	80075f6 <_printf_float+0x422>
 8007610:	2301      	movs	r3, #1
 8007612:	4642      	mov	r2, r8
 8007614:	e7df      	b.n	80075d6 <_printf_float+0x402>
 8007616:	2301      	movs	r3, #1
 8007618:	464a      	mov	r2, r9
 800761a:	4631      	mov	r1, r6
 800761c:	4628      	mov	r0, r5
 800761e:	47b8      	blx	r7
 8007620:	3001      	adds	r0, #1
 8007622:	f43f ae38 	beq.w	8007296 <_printf_float+0xc2>
 8007626:	f108 0801 	add.w	r8, r8, #1
 800762a:	68e3      	ldr	r3, [r4, #12]
 800762c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800762e:	1a5b      	subs	r3, r3, r1
 8007630:	4543      	cmp	r3, r8
 8007632:	dcf0      	bgt.n	8007616 <_printf_float+0x442>
 8007634:	e6fa      	b.n	800742c <_printf_float+0x258>
 8007636:	f04f 0800 	mov.w	r8, #0
 800763a:	f104 0919 	add.w	r9, r4, #25
 800763e:	e7f4      	b.n	800762a <_printf_float+0x456>

08007640 <_printf_common>:
 8007640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	4616      	mov	r6, r2
 8007646:	4699      	mov	r9, r3
 8007648:	688a      	ldr	r2, [r1, #8]
 800764a:	690b      	ldr	r3, [r1, #16]
 800764c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007650:	4293      	cmp	r3, r2
 8007652:	bfb8      	it	lt
 8007654:	4613      	movlt	r3, r2
 8007656:	6033      	str	r3, [r6, #0]
 8007658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800765c:	4607      	mov	r7, r0
 800765e:	460c      	mov	r4, r1
 8007660:	b10a      	cbz	r2, 8007666 <_printf_common+0x26>
 8007662:	3301      	adds	r3, #1
 8007664:	6033      	str	r3, [r6, #0]
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	0699      	lsls	r1, r3, #26
 800766a:	bf42      	ittt	mi
 800766c:	6833      	ldrmi	r3, [r6, #0]
 800766e:	3302      	addmi	r3, #2
 8007670:	6033      	strmi	r3, [r6, #0]
 8007672:	6825      	ldr	r5, [r4, #0]
 8007674:	f015 0506 	ands.w	r5, r5, #6
 8007678:	d106      	bne.n	8007688 <_printf_common+0x48>
 800767a:	f104 0a19 	add.w	sl, r4, #25
 800767e:	68e3      	ldr	r3, [r4, #12]
 8007680:	6832      	ldr	r2, [r6, #0]
 8007682:	1a9b      	subs	r3, r3, r2
 8007684:	42ab      	cmp	r3, r5
 8007686:	dc26      	bgt.n	80076d6 <_printf_common+0x96>
 8007688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800768c:	1e13      	subs	r3, r2, #0
 800768e:	6822      	ldr	r2, [r4, #0]
 8007690:	bf18      	it	ne
 8007692:	2301      	movne	r3, #1
 8007694:	0692      	lsls	r2, r2, #26
 8007696:	d42b      	bmi.n	80076f0 <_printf_common+0xb0>
 8007698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800769c:	4649      	mov	r1, r9
 800769e:	4638      	mov	r0, r7
 80076a0:	47c0      	blx	r8
 80076a2:	3001      	adds	r0, #1
 80076a4:	d01e      	beq.n	80076e4 <_printf_common+0xa4>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	68e5      	ldr	r5, [r4, #12]
 80076aa:	6832      	ldr	r2, [r6, #0]
 80076ac:	f003 0306 	and.w	r3, r3, #6
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	bf08      	it	eq
 80076b4:	1aad      	subeq	r5, r5, r2
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	6922      	ldr	r2, [r4, #16]
 80076ba:	bf0c      	ite	eq
 80076bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076c0:	2500      	movne	r5, #0
 80076c2:	4293      	cmp	r3, r2
 80076c4:	bfc4      	itt	gt
 80076c6:	1a9b      	subgt	r3, r3, r2
 80076c8:	18ed      	addgt	r5, r5, r3
 80076ca:	2600      	movs	r6, #0
 80076cc:	341a      	adds	r4, #26
 80076ce:	42b5      	cmp	r5, r6
 80076d0:	d11a      	bne.n	8007708 <_printf_common+0xc8>
 80076d2:	2000      	movs	r0, #0
 80076d4:	e008      	b.n	80076e8 <_printf_common+0xa8>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4652      	mov	r2, sl
 80076da:	4649      	mov	r1, r9
 80076dc:	4638      	mov	r0, r7
 80076de:	47c0      	blx	r8
 80076e0:	3001      	adds	r0, #1
 80076e2:	d103      	bne.n	80076ec <_printf_common+0xac>
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ec:	3501      	adds	r5, #1
 80076ee:	e7c6      	b.n	800767e <_printf_common+0x3e>
 80076f0:	18e1      	adds	r1, r4, r3
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	2030      	movs	r0, #48	; 0x30
 80076f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076fa:	4422      	add	r2, r4
 80076fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007704:	3302      	adds	r3, #2
 8007706:	e7c7      	b.n	8007698 <_printf_common+0x58>
 8007708:	2301      	movs	r3, #1
 800770a:	4622      	mov	r2, r4
 800770c:	4649      	mov	r1, r9
 800770e:	4638      	mov	r0, r7
 8007710:	47c0      	blx	r8
 8007712:	3001      	adds	r0, #1
 8007714:	d0e6      	beq.n	80076e4 <_printf_common+0xa4>
 8007716:	3601      	adds	r6, #1
 8007718:	e7d9      	b.n	80076ce <_printf_common+0x8e>
	...

0800771c <_printf_i>:
 800771c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007720:	7e0f      	ldrb	r7, [r1, #24]
 8007722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007724:	2f78      	cmp	r7, #120	; 0x78
 8007726:	4691      	mov	r9, r2
 8007728:	4680      	mov	r8, r0
 800772a:	460c      	mov	r4, r1
 800772c:	469a      	mov	sl, r3
 800772e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007732:	d807      	bhi.n	8007744 <_printf_i+0x28>
 8007734:	2f62      	cmp	r7, #98	; 0x62
 8007736:	d80a      	bhi.n	800774e <_printf_i+0x32>
 8007738:	2f00      	cmp	r7, #0
 800773a:	f000 80d8 	beq.w	80078ee <_printf_i+0x1d2>
 800773e:	2f58      	cmp	r7, #88	; 0x58
 8007740:	f000 80a3 	beq.w	800788a <_printf_i+0x16e>
 8007744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800774c:	e03a      	b.n	80077c4 <_printf_i+0xa8>
 800774e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007752:	2b15      	cmp	r3, #21
 8007754:	d8f6      	bhi.n	8007744 <_printf_i+0x28>
 8007756:	a101      	add	r1, pc, #4	; (adr r1, 800775c <_printf_i+0x40>)
 8007758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800775c:	080077b5 	.word	0x080077b5
 8007760:	080077c9 	.word	0x080077c9
 8007764:	08007745 	.word	0x08007745
 8007768:	08007745 	.word	0x08007745
 800776c:	08007745 	.word	0x08007745
 8007770:	08007745 	.word	0x08007745
 8007774:	080077c9 	.word	0x080077c9
 8007778:	08007745 	.word	0x08007745
 800777c:	08007745 	.word	0x08007745
 8007780:	08007745 	.word	0x08007745
 8007784:	08007745 	.word	0x08007745
 8007788:	080078d5 	.word	0x080078d5
 800778c:	080077f9 	.word	0x080077f9
 8007790:	080078b7 	.word	0x080078b7
 8007794:	08007745 	.word	0x08007745
 8007798:	08007745 	.word	0x08007745
 800779c:	080078f7 	.word	0x080078f7
 80077a0:	08007745 	.word	0x08007745
 80077a4:	080077f9 	.word	0x080077f9
 80077a8:	08007745 	.word	0x08007745
 80077ac:	08007745 	.word	0x08007745
 80077b0:	080078bf 	.word	0x080078bf
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	1d1a      	adds	r2, r3, #4
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	602a      	str	r2, [r5, #0]
 80077bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077c4:	2301      	movs	r3, #1
 80077c6:	e0a3      	b.n	8007910 <_printf_i+0x1f4>
 80077c8:	6820      	ldr	r0, [r4, #0]
 80077ca:	6829      	ldr	r1, [r5, #0]
 80077cc:	0606      	lsls	r6, r0, #24
 80077ce:	f101 0304 	add.w	r3, r1, #4
 80077d2:	d50a      	bpl.n	80077ea <_printf_i+0xce>
 80077d4:	680e      	ldr	r6, [r1, #0]
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	2e00      	cmp	r6, #0
 80077da:	da03      	bge.n	80077e4 <_printf_i+0xc8>
 80077dc:	232d      	movs	r3, #45	; 0x2d
 80077de:	4276      	negs	r6, r6
 80077e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e4:	485e      	ldr	r0, [pc, #376]	; (8007960 <_printf_i+0x244>)
 80077e6:	230a      	movs	r3, #10
 80077e8:	e019      	b.n	800781e <_printf_i+0x102>
 80077ea:	680e      	ldr	r6, [r1, #0]
 80077ec:	602b      	str	r3, [r5, #0]
 80077ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077f2:	bf18      	it	ne
 80077f4:	b236      	sxthne	r6, r6
 80077f6:	e7ef      	b.n	80077d8 <_printf_i+0xbc>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	6820      	ldr	r0, [r4, #0]
 80077fc:	1d19      	adds	r1, r3, #4
 80077fe:	6029      	str	r1, [r5, #0]
 8007800:	0601      	lsls	r1, r0, #24
 8007802:	d501      	bpl.n	8007808 <_printf_i+0xec>
 8007804:	681e      	ldr	r6, [r3, #0]
 8007806:	e002      	b.n	800780e <_printf_i+0xf2>
 8007808:	0646      	lsls	r6, r0, #25
 800780a:	d5fb      	bpl.n	8007804 <_printf_i+0xe8>
 800780c:	881e      	ldrh	r6, [r3, #0]
 800780e:	4854      	ldr	r0, [pc, #336]	; (8007960 <_printf_i+0x244>)
 8007810:	2f6f      	cmp	r7, #111	; 0x6f
 8007812:	bf0c      	ite	eq
 8007814:	2308      	moveq	r3, #8
 8007816:	230a      	movne	r3, #10
 8007818:	2100      	movs	r1, #0
 800781a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800781e:	6865      	ldr	r5, [r4, #4]
 8007820:	60a5      	str	r5, [r4, #8]
 8007822:	2d00      	cmp	r5, #0
 8007824:	bfa2      	ittt	ge
 8007826:	6821      	ldrge	r1, [r4, #0]
 8007828:	f021 0104 	bicge.w	r1, r1, #4
 800782c:	6021      	strge	r1, [r4, #0]
 800782e:	b90e      	cbnz	r6, 8007834 <_printf_i+0x118>
 8007830:	2d00      	cmp	r5, #0
 8007832:	d04d      	beq.n	80078d0 <_printf_i+0x1b4>
 8007834:	4615      	mov	r5, r2
 8007836:	fbb6 f1f3 	udiv	r1, r6, r3
 800783a:	fb03 6711 	mls	r7, r3, r1, r6
 800783e:	5dc7      	ldrb	r7, [r0, r7]
 8007840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007844:	4637      	mov	r7, r6
 8007846:	42bb      	cmp	r3, r7
 8007848:	460e      	mov	r6, r1
 800784a:	d9f4      	bls.n	8007836 <_printf_i+0x11a>
 800784c:	2b08      	cmp	r3, #8
 800784e:	d10b      	bne.n	8007868 <_printf_i+0x14c>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	07de      	lsls	r6, r3, #31
 8007854:	d508      	bpl.n	8007868 <_printf_i+0x14c>
 8007856:	6923      	ldr	r3, [r4, #16]
 8007858:	6861      	ldr	r1, [r4, #4]
 800785a:	4299      	cmp	r1, r3
 800785c:	bfde      	ittt	le
 800785e:	2330      	movle	r3, #48	; 0x30
 8007860:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007864:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007868:	1b52      	subs	r2, r2, r5
 800786a:	6122      	str	r2, [r4, #16]
 800786c:	f8cd a000 	str.w	sl, [sp]
 8007870:	464b      	mov	r3, r9
 8007872:	aa03      	add	r2, sp, #12
 8007874:	4621      	mov	r1, r4
 8007876:	4640      	mov	r0, r8
 8007878:	f7ff fee2 	bl	8007640 <_printf_common>
 800787c:	3001      	adds	r0, #1
 800787e:	d14c      	bne.n	800791a <_printf_i+0x1fe>
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	b004      	add	sp, #16
 8007886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788a:	4835      	ldr	r0, [pc, #212]	; (8007960 <_printf_i+0x244>)
 800788c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007890:	6829      	ldr	r1, [r5, #0]
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	f851 6b04 	ldr.w	r6, [r1], #4
 8007898:	6029      	str	r1, [r5, #0]
 800789a:	061d      	lsls	r5, r3, #24
 800789c:	d514      	bpl.n	80078c8 <_printf_i+0x1ac>
 800789e:	07df      	lsls	r7, r3, #31
 80078a0:	bf44      	itt	mi
 80078a2:	f043 0320 	orrmi.w	r3, r3, #32
 80078a6:	6023      	strmi	r3, [r4, #0]
 80078a8:	b91e      	cbnz	r6, 80078b2 <_printf_i+0x196>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	f023 0320 	bic.w	r3, r3, #32
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	2310      	movs	r3, #16
 80078b4:	e7b0      	b.n	8007818 <_printf_i+0xfc>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	f043 0320 	orr.w	r3, r3, #32
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	2378      	movs	r3, #120	; 0x78
 80078c0:	4828      	ldr	r0, [pc, #160]	; (8007964 <_printf_i+0x248>)
 80078c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078c6:	e7e3      	b.n	8007890 <_printf_i+0x174>
 80078c8:	0659      	lsls	r1, r3, #25
 80078ca:	bf48      	it	mi
 80078cc:	b2b6      	uxthmi	r6, r6
 80078ce:	e7e6      	b.n	800789e <_printf_i+0x182>
 80078d0:	4615      	mov	r5, r2
 80078d2:	e7bb      	b.n	800784c <_printf_i+0x130>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	6826      	ldr	r6, [r4, #0]
 80078d8:	6961      	ldr	r1, [r4, #20]
 80078da:	1d18      	adds	r0, r3, #4
 80078dc:	6028      	str	r0, [r5, #0]
 80078de:	0635      	lsls	r5, r6, #24
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	d501      	bpl.n	80078e8 <_printf_i+0x1cc>
 80078e4:	6019      	str	r1, [r3, #0]
 80078e6:	e002      	b.n	80078ee <_printf_i+0x1d2>
 80078e8:	0670      	lsls	r0, r6, #25
 80078ea:	d5fb      	bpl.n	80078e4 <_printf_i+0x1c8>
 80078ec:	8019      	strh	r1, [r3, #0]
 80078ee:	2300      	movs	r3, #0
 80078f0:	6123      	str	r3, [r4, #16]
 80078f2:	4615      	mov	r5, r2
 80078f4:	e7ba      	b.n	800786c <_printf_i+0x150>
 80078f6:	682b      	ldr	r3, [r5, #0]
 80078f8:	1d1a      	adds	r2, r3, #4
 80078fa:	602a      	str	r2, [r5, #0]
 80078fc:	681d      	ldr	r5, [r3, #0]
 80078fe:	6862      	ldr	r2, [r4, #4]
 8007900:	2100      	movs	r1, #0
 8007902:	4628      	mov	r0, r5
 8007904:	f7f8 fc94 	bl	8000230 <memchr>
 8007908:	b108      	cbz	r0, 800790e <_printf_i+0x1f2>
 800790a:	1b40      	subs	r0, r0, r5
 800790c:	6060      	str	r0, [r4, #4]
 800790e:	6863      	ldr	r3, [r4, #4]
 8007910:	6123      	str	r3, [r4, #16]
 8007912:	2300      	movs	r3, #0
 8007914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007918:	e7a8      	b.n	800786c <_printf_i+0x150>
 800791a:	6923      	ldr	r3, [r4, #16]
 800791c:	462a      	mov	r2, r5
 800791e:	4649      	mov	r1, r9
 8007920:	4640      	mov	r0, r8
 8007922:	47d0      	blx	sl
 8007924:	3001      	adds	r0, #1
 8007926:	d0ab      	beq.n	8007880 <_printf_i+0x164>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	079b      	lsls	r3, r3, #30
 800792c:	d413      	bmi.n	8007956 <_printf_i+0x23a>
 800792e:	68e0      	ldr	r0, [r4, #12]
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	4298      	cmp	r0, r3
 8007934:	bfb8      	it	lt
 8007936:	4618      	movlt	r0, r3
 8007938:	e7a4      	b.n	8007884 <_printf_i+0x168>
 800793a:	2301      	movs	r3, #1
 800793c:	4632      	mov	r2, r6
 800793e:	4649      	mov	r1, r9
 8007940:	4640      	mov	r0, r8
 8007942:	47d0      	blx	sl
 8007944:	3001      	adds	r0, #1
 8007946:	d09b      	beq.n	8007880 <_printf_i+0x164>
 8007948:	3501      	adds	r5, #1
 800794a:	68e3      	ldr	r3, [r4, #12]
 800794c:	9903      	ldr	r1, [sp, #12]
 800794e:	1a5b      	subs	r3, r3, r1
 8007950:	42ab      	cmp	r3, r5
 8007952:	dcf2      	bgt.n	800793a <_printf_i+0x21e>
 8007954:	e7eb      	b.n	800792e <_printf_i+0x212>
 8007956:	2500      	movs	r5, #0
 8007958:	f104 0619 	add.w	r6, r4, #25
 800795c:	e7f5      	b.n	800794a <_printf_i+0x22e>
 800795e:	bf00      	nop
 8007960:	08009d5a 	.word	0x08009d5a
 8007964:	08009d6b 	.word	0x08009d6b

08007968 <iprintf>:
 8007968:	b40f      	push	{r0, r1, r2, r3}
 800796a:	4b0a      	ldr	r3, [pc, #40]	; (8007994 <iprintf+0x2c>)
 800796c:	b513      	push	{r0, r1, r4, lr}
 800796e:	681c      	ldr	r4, [r3, #0]
 8007970:	b124      	cbz	r4, 800797c <iprintf+0x14>
 8007972:	69a3      	ldr	r3, [r4, #24]
 8007974:	b913      	cbnz	r3, 800797c <iprintf+0x14>
 8007976:	4620      	mov	r0, r4
 8007978:	f001 f8da 	bl	8008b30 <__sinit>
 800797c:	ab05      	add	r3, sp, #20
 800797e:	9a04      	ldr	r2, [sp, #16]
 8007980:	68a1      	ldr	r1, [r4, #8]
 8007982:	9301      	str	r3, [sp, #4]
 8007984:	4620      	mov	r0, r4
 8007986:	f001 fe97 	bl	80096b8 <_vfiprintf_r>
 800798a:	b002      	add	sp, #8
 800798c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007990:	b004      	add	sp, #16
 8007992:	4770      	bx	lr
 8007994:	20000014 	.word	0x20000014

08007998 <_puts_r>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	460e      	mov	r6, r1
 800799c:	4605      	mov	r5, r0
 800799e:	b118      	cbz	r0, 80079a8 <_puts_r+0x10>
 80079a0:	6983      	ldr	r3, [r0, #24]
 80079a2:	b90b      	cbnz	r3, 80079a8 <_puts_r+0x10>
 80079a4:	f001 f8c4 	bl	8008b30 <__sinit>
 80079a8:	69ab      	ldr	r3, [r5, #24]
 80079aa:	68ac      	ldr	r4, [r5, #8]
 80079ac:	b913      	cbnz	r3, 80079b4 <_puts_r+0x1c>
 80079ae:	4628      	mov	r0, r5
 80079b0:	f001 f8be 	bl	8008b30 <__sinit>
 80079b4:	4b2c      	ldr	r3, [pc, #176]	; (8007a68 <_puts_r+0xd0>)
 80079b6:	429c      	cmp	r4, r3
 80079b8:	d120      	bne.n	80079fc <_puts_r+0x64>
 80079ba:	686c      	ldr	r4, [r5, #4]
 80079bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079be:	07db      	lsls	r3, r3, #31
 80079c0:	d405      	bmi.n	80079ce <_puts_r+0x36>
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	0598      	lsls	r0, r3, #22
 80079c6:	d402      	bmi.n	80079ce <_puts_r+0x36>
 80079c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ca:	f001 f954 	bl	8008c76 <__retarget_lock_acquire_recursive>
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	0719      	lsls	r1, r3, #28
 80079d2:	d51d      	bpl.n	8007a10 <_puts_r+0x78>
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	b1db      	cbz	r3, 8007a10 <_puts_r+0x78>
 80079d8:	3e01      	subs	r6, #1
 80079da:	68a3      	ldr	r3, [r4, #8]
 80079dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079e0:	3b01      	subs	r3, #1
 80079e2:	60a3      	str	r3, [r4, #8]
 80079e4:	bb39      	cbnz	r1, 8007a36 <_puts_r+0x9e>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	da38      	bge.n	8007a5c <_puts_r+0xc4>
 80079ea:	4622      	mov	r2, r4
 80079ec:	210a      	movs	r1, #10
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 f848 	bl	8007a84 <__swbuf_r>
 80079f4:	3001      	adds	r0, #1
 80079f6:	d011      	beq.n	8007a1c <_puts_r+0x84>
 80079f8:	250a      	movs	r5, #10
 80079fa:	e011      	b.n	8007a20 <_puts_r+0x88>
 80079fc:	4b1b      	ldr	r3, [pc, #108]	; (8007a6c <_puts_r+0xd4>)
 80079fe:	429c      	cmp	r4, r3
 8007a00:	d101      	bne.n	8007a06 <_puts_r+0x6e>
 8007a02:	68ac      	ldr	r4, [r5, #8]
 8007a04:	e7da      	b.n	80079bc <_puts_r+0x24>
 8007a06:	4b1a      	ldr	r3, [pc, #104]	; (8007a70 <_puts_r+0xd8>)
 8007a08:	429c      	cmp	r4, r3
 8007a0a:	bf08      	it	eq
 8007a0c:	68ec      	ldreq	r4, [r5, #12]
 8007a0e:	e7d5      	b.n	80079bc <_puts_r+0x24>
 8007a10:	4621      	mov	r1, r4
 8007a12:	4628      	mov	r0, r5
 8007a14:	f000 f888 	bl	8007b28 <__swsetup_r>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d0dd      	beq.n	80079d8 <_puts_r+0x40>
 8007a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a22:	07da      	lsls	r2, r3, #31
 8007a24:	d405      	bmi.n	8007a32 <_puts_r+0x9a>
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	059b      	lsls	r3, r3, #22
 8007a2a:	d402      	bmi.n	8007a32 <_puts_r+0x9a>
 8007a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a2e:	f001 f923 	bl	8008c78 <__retarget_lock_release_recursive>
 8007a32:	4628      	mov	r0, r5
 8007a34:	bd70      	pop	{r4, r5, r6, pc}
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	da04      	bge.n	8007a44 <_puts_r+0xac>
 8007a3a:	69a2      	ldr	r2, [r4, #24]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	dc06      	bgt.n	8007a4e <_puts_r+0xb6>
 8007a40:	290a      	cmp	r1, #10
 8007a42:	d004      	beq.n	8007a4e <_puts_r+0xb6>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	6022      	str	r2, [r4, #0]
 8007a4a:	7019      	strb	r1, [r3, #0]
 8007a4c:	e7c5      	b.n	80079da <_puts_r+0x42>
 8007a4e:	4622      	mov	r2, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 f817 	bl	8007a84 <__swbuf_r>
 8007a56:	3001      	adds	r0, #1
 8007a58:	d1bf      	bne.n	80079da <_puts_r+0x42>
 8007a5a:	e7df      	b.n	8007a1c <_puts_r+0x84>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	250a      	movs	r5, #10
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	6022      	str	r2, [r4, #0]
 8007a64:	701d      	strb	r5, [r3, #0]
 8007a66:	e7db      	b.n	8007a20 <_puts_r+0x88>
 8007a68:	08009e2c 	.word	0x08009e2c
 8007a6c:	08009e4c 	.word	0x08009e4c
 8007a70:	08009e0c 	.word	0x08009e0c

08007a74 <puts>:
 8007a74:	4b02      	ldr	r3, [pc, #8]	; (8007a80 <puts+0xc>)
 8007a76:	4601      	mov	r1, r0
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	f7ff bf8d 	b.w	8007998 <_puts_r>
 8007a7e:	bf00      	nop
 8007a80:	20000014 	.word	0x20000014

08007a84 <__swbuf_r>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	460e      	mov	r6, r1
 8007a88:	4614      	mov	r4, r2
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	b118      	cbz	r0, 8007a96 <__swbuf_r+0x12>
 8007a8e:	6983      	ldr	r3, [r0, #24]
 8007a90:	b90b      	cbnz	r3, 8007a96 <__swbuf_r+0x12>
 8007a92:	f001 f84d 	bl	8008b30 <__sinit>
 8007a96:	4b21      	ldr	r3, [pc, #132]	; (8007b1c <__swbuf_r+0x98>)
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	d12b      	bne.n	8007af4 <__swbuf_r+0x70>
 8007a9c:	686c      	ldr	r4, [r5, #4]
 8007a9e:	69a3      	ldr	r3, [r4, #24]
 8007aa0:	60a3      	str	r3, [r4, #8]
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	071a      	lsls	r2, r3, #28
 8007aa6:	d52f      	bpl.n	8007b08 <__swbuf_r+0x84>
 8007aa8:	6923      	ldr	r3, [r4, #16]
 8007aaa:	b36b      	cbz	r3, 8007b08 <__swbuf_r+0x84>
 8007aac:	6923      	ldr	r3, [r4, #16]
 8007aae:	6820      	ldr	r0, [r4, #0]
 8007ab0:	1ac0      	subs	r0, r0, r3
 8007ab2:	6963      	ldr	r3, [r4, #20]
 8007ab4:	b2f6      	uxtb	r6, r6
 8007ab6:	4283      	cmp	r3, r0
 8007ab8:	4637      	mov	r7, r6
 8007aba:	dc04      	bgt.n	8007ac6 <__swbuf_r+0x42>
 8007abc:	4621      	mov	r1, r4
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 ffa2 	bl	8008a08 <_fflush_r>
 8007ac4:	bb30      	cbnz	r0, 8007b14 <__swbuf_r+0x90>
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	60a3      	str	r3, [r4, #8]
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	6022      	str	r2, [r4, #0]
 8007ad2:	701e      	strb	r6, [r3, #0]
 8007ad4:	6963      	ldr	r3, [r4, #20]
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	4283      	cmp	r3, r0
 8007ada:	d004      	beq.n	8007ae6 <__swbuf_r+0x62>
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	07db      	lsls	r3, r3, #31
 8007ae0:	d506      	bpl.n	8007af0 <__swbuf_r+0x6c>
 8007ae2:	2e0a      	cmp	r6, #10
 8007ae4:	d104      	bne.n	8007af0 <__swbuf_r+0x6c>
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 ff8d 	bl	8008a08 <_fflush_r>
 8007aee:	b988      	cbnz	r0, 8007b14 <__swbuf_r+0x90>
 8007af0:	4638      	mov	r0, r7
 8007af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007af4:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <__swbuf_r+0x9c>)
 8007af6:	429c      	cmp	r4, r3
 8007af8:	d101      	bne.n	8007afe <__swbuf_r+0x7a>
 8007afa:	68ac      	ldr	r4, [r5, #8]
 8007afc:	e7cf      	b.n	8007a9e <__swbuf_r+0x1a>
 8007afe:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <__swbuf_r+0xa0>)
 8007b00:	429c      	cmp	r4, r3
 8007b02:	bf08      	it	eq
 8007b04:	68ec      	ldreq	r4, [r5, #12]
 8007b06:	e7ca      	b.n	8007a9e <__swbuf_r+0x1a>
 8007b08:	4621      	mov	r1, r4
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f000 f80c 	bl	8007b28 <__swsetup_r>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d0cb      	beq.n	8007aac <__swbuf_r+0x28>
 8007b14:	f04f 37ff 	mov.w	r7, #4294967295
 8007b18:	e7ea      	b.n	8007af0 <__swbuf_r+0x6c>
 8007b1a:	bf00      	nop
 8007b1c:	08009e2c 	.word	0x08009e2c
 8007b20:	08009e4c 	.word	0x08009e4c
 8007b24:	08009e0c 	.word	0x08009e0c

08007b28 <__swsetup_r>:
 8007b28:	4b32      	ldr	r3, [pc, #200]	; (8007bf4 <__swsetup_r+0xcc>)
 8007b2a:	b570      	push	{r4, r5, r6, lr}
 8007b2c:	681d      	ldr	r5, [r3, #0]
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	b125      	cbz	r5, 8007b3e <__swsetup_r+0x16>
 8007b34:	69ab      	ldr	r3, [r5, #24]
 8007b36:	b913      	cbnz	r3, 8007b3e <__swsetup_r+0x16>
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 fff9 	bl	8008b30 <__sinit>
 8007b3e:	4b2e      	ldr	r3, [pc, #184]	; (8007bf8 <__swsetup_r+0xd0>)
 8007b40:	429c      	cmp	r4, r3
 8007b42:	d10f      	bne.n	8007b64 <__swsetup_r+0x3c>
 8007b44:	686c      	ldr	r4, [r5, #4]
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b4c:	0719      	lsls	r1, r3, #28
 8007b4e:	d42c      	bmi.n	8007baa <__swsetup_r+0x82>
 8007b50:	06dd      	lsls	r5, r3, #27
 8007b52:	d411      	bmi.n	8007b78 <__swsetup_r+0x50>
 8007b54:	2309      	movs	r3, #9
 8007b56:	6033      	str	r3, [r6, #0]
 8007b58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b62:	e03e      	b.n	8007be2 <__swsetup_r+0xba>
 8007b64:	4b25      	ldr	r3, [pc, #148]	; (8007bfc <__swsetup_r+0xd4>)
 8007b66:	429c      	cmp	r4, r3
 8007b68:	d101      	bne.n	8007b6e <__swsetup_r+0x46>
 8007b6a:	68ac      	ldr	r4, [r5, #8]
 8007b6c:	e7eb      	b.n	8007b46 <__swsetup_r+0x1e>
 8007b6e:	4b24      	ldr	r3, [pc, #144]	; (8007c00 <__swsetup_r+0xd8>)
 8007b70:	429c      	cmp	r4, r3
 8007b72:	bf08      	it	eq
 8007b74:	68ec      	ldreq	r4, [r5, #12]
 8007b76:	e7e6      	b.n	8007b46 <__swsetup_r+0x1e>
 8007b78:	0758      	lsls	r0, r3, #29
 8007b7a:	d512      	bpl.n	8007ba2 <__swsetup_r+0x7a>
 8007b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b7e:	b141      	cbz	r1, 8007b92 <__swsetup_r+0x6a>
 8007b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b84:	4299      	cmp	r1, r3
 8007b86:	d002      	beq.n	8007b8e <__swsetup_r+0x66>
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f001 fc8b 	bl	80094a4 <_free_r>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	6363      	str	r3, [r4, #52]	; 0x34
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	6063      	str	r3, [r4, #4]
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f043 0308 	orr.w	r3, r3, #8
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	6923      	ldr	r3, [r4, #16]
 8007bac:	b94b      	cbnz	r3, 8007bc2 <__swsetup_r+0x9a>
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb8:	d003      	beq.n	8007bc2 <__swsetup_r+0x9a>
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f001 f881 	bl	8008cc4 <__smakebuf_r>
 8007bc2:	89a0      	ldrh	r0, [r4, #12]
 8007bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bc8:	f010 0301 	ands.w	r3, r0, #1
 8007bcc:	d00a      	beq.n	8007be4 <__swsetup_r+0xbc>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60a3      	str	r3, [r4, #8]
 8007bd2:	6963      	ldr	r3, [r4, #20]
 8007bd4:	425b      	negs	r3, r3
 8007bd6:	61a3      	str	r3, [r4, #24]
 8007bd8:	6923      	ldr	r3, [r4, #16]
 8007bda:	b943      	cbnz	r3, 8007bee <__swsetup_r+0xc6>
 8007bdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007be0:	d1ba      	bne.n	8007b58 <__swsetup_r+0x30>
 8007be2:	bd70      	pop	{r4, r5, r6, pc}
 8007be4:	0781      	lsls	r1, r0, #30
 8007be6:	bf58      	it	pl
 8007be8:	6963      	ldrpl	r3, [r4, #20]
 8007bea:	60a3      	str	r3, [r4, #8]
 8007bec:	e7f4      	b.n	8007bd8 <__swsetup_r+0xb0>
 8007bee:	2000      	movs	r0, #0
 8007bf0:	e7f7      	b.n	8007be2 <__swsetup_r+0xba>
 8007bf2:	bf00      	nop
 8007bf4:	20000014 	.word	0x20000014
 8007bf8:	08009e2c 	.word	0x08009e2c
 8007bfc:	08009e4c 	.word	0x08009e4c
 8007c00:	08009e0c 	.word	0x08009e0c

08007c04 <quorem>:
 8007c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	6903      	ldr	r3, [r0, #16]
 8007c0a:	690c      	ldr	r4, [r1, #16]
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	4607      	mov	r7, r0
 8007c10:	f2c0 8081 	blt.w	8007d16 <quorem+0x112>
 8007c14:	3c01      	subs	r4, #1
 8007c16:	f101 0814 	add.w	r8, r1, #20
 8007c1a:	f100 0514 	add.w	r5, r0, #20
 8007c1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c38:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c3c:	d331      	bcc.n	8007ca2 <quorem+0x9e>
 8007c3e:	f04f 0e00 	mov.w	lr, #0
 8007c42:	4640      	mov	r0, r8
 8007c44:	46ac      	mov	ip, r5
 8007c46:	46f2      	mov	sl, lr
 8007c48:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c4c:	b293      	uxth	r3, r2
 8007c4e:	fb06 e303 	mla	r3, r6, r3, lr
 8007c52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	ebaa 0303 	sub.w	r3, sl, r3
 8007c5c:	f8dc a000 	ldr.w	sl, [ip]
 8007c60:	0c12      	lsrs	r2, r2, #16
 8007c62:	fa13 f38a 	uxtah	r3, r3, sl
 8007c66:	fb06 e202 	mla	r2, r6, r2, lr
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	9b00      	ldr	r3, [sp, #0]
 8007c6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c72:	b292      	uxth	r2, r2
 8007c74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c80:	4581      	cmp	r9, r0
 8007c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c86:	f84c 3b04 	str.w	r3, [ip], #4
 8007c8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c8e:	d2db      	bcs.n	8007c48 <quorem+0x44>
 8007c90:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c94:	b92b      	cbnz	r3, 8007ca2 <quorem+0x9e>
 8007c96:	9b01      	ldr	r3, [sp, #4]
 8007c98:	3b04      	subs	r3, #4
 8007c9a:	429d      	cmp	r5, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	d32e      	bcc.n	8007cfe <quorem+0xfa>
 8007ca0:	613c      	str	r4, [r7, #16]
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	f001 fae6 	bl	8009274 <__mcmp>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	db24      	blt.n	8007cf6 <quorem+0xf2>
 8007cac:	3601      	adds	r6, #1
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f04f 0c00 	mov.w	ip, #0
 8007cb4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cb8:	f8d0 e000 	ldr.w	lr, [r0]
 8007cbc:	b293      	uxth	r3, r2
 8007cbe:	ebac 0303 	sub.w	r3, ip, r3
 8007cc2:	0c12      	lsrs	r2, r2, #16
 8007cc4:	fa13 f38e 	uxtah	r3, r3, lr
 8007cc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cd6:	45c1      	cmp	r9, r8
 8007cd8:	f840 3b04 	str.w	r3, [r0], #4
 8007cdc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ce0:	d2e8      	bcs.n	8007cb4 <quorem+0xb0>
 8007ce2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cea:	b922      	cbnz	r2, 8007cf6 <quorem+0xf2>
 8007cec:	3b04      	subs	r3, #4
 8007cee:	429d      	cmp	r5, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	d30a      	bcc.n	8007d0a <quorem+0x106>
 8007cf4:	613c      	str	r4, [r7, #16]
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	b003      	add	sp, #12
 8007cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfe:	6812      	ldr	r2, [r2, #0]
 8007d00:	3b04      	subs	r3, #4
 8007d02:	2a00      	cmp	r2, #0
 8007d04:	d1cc      	bne.n	8007ca0 <quorem+0x9c>
 8007d06:	3c01      	subs	r4, #1
 8007d08:	e7c7      	b.n	8007c9a <quorem+0x96>
 8007d0a:	6812      	ldr	r2, [r2, #0]
 8007d0c:	3b04      	subs	r3, #4
 8007d0e:	2a00      	cmp	r2, #0
 8007d10:	d1f0      	bne.n	8007cf4 <quorem+0xf0>
 8007d12:	3c01      	subs	r4, #1
 8007d14:	e7eb      	b.n	8007cee <quorem+0xea>
 8007d16:	2000      	movs	r0, #0
 8007d18:	e7ee      	b.n	8007cf8 <quorem+0xf4>
 8007d1a:	0000      	movs	r0, r0
 8007d1c:	0000      	movs	r0, r0
	...

08007d20 <_dtoa_r>:
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	ed2d 8b04 	vpush	{d8-d9}
 8007d28:	ec57 6b10 	vmov	r6, r7, d0
 8007d2c:	b093      	sub	sp, #76	; 0x4c
 8007d2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d34:	9106      	str	r1, [sp, #24]
 8007d36:	ee10 aa10 	vmov	sl, s0
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8007d40:	46bb      	mov	fp, r7
 8007d42:	b975      	cbnz	r5, 8007d62 <_dtoa_r+0x42>
 8007d44:	2010      	movs	r0, #16
 8007d46:	f000 fffd 	bl	8008d44 <malloc>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	6260      	str	r0, [r4, #36]	; 0x24
 8007d4e:	b920      	cbnz	r0, 8007d5a <_dtoa_r+0x3a>
 8007d50:	4ba7      	ldr	r3, [pc, #668]	; (8007ff0 <_dtoa_r+0x2d0>)
 8007d52:	21ea      	movs	r1, #234	; 0xea
 8007d54:	48a7      	ldr	r0, [pc, #668]	; (8007ff4 <_dtoa_r+0x2d4>)
 8007d56:	f001 fe45 	bl	80099e4 <__assert_func>
 8007d5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d5e:	6005      	str	r5, [r0, #0]
 8007d60:	60c5      	str	r5, [r0, #12]
 8007d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d64:	6819      	ldr	r1, [r3, #0]
 8007d66:	b151      	cbz	r1, 8007d7e <_dtoa_r+0x5e>
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	604a      	str	r2, [r1, #4]
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	4093      	lsls	r3, r2
 8007d70:	608b      	str	r3, [r1, #8]
 8007d72:	4620      	mov	r0, r4
 8007d74:	f001 f83c 	bl	8008df0 <_Bfree>
 8007d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	1e3b      	subs	r3, r7, #0
 8007d80:	bfaa      	itet	ge
 8007d82:	2300      	movge	r3, #0
 8007d84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d88:	f8c8 3000 	strge.w	r3, [r8]
 8007d8c:	4b9a      	ldr	r3, [pc, #616]	; (8007ff8 <_dtoa_r+0x2d8>)
 8007d8e:	bfbc      	itt	lt
 8007d90:	2201      	movlt	r2, #1
 8007d92:	f8c8 2000 	strlt.w	r2, [r8]
 8007d96:	ea33 030b 	bics.w	r3, r3, fp
 8007d9a:	d11b      	bne.n	8007dd4 <_dtoa_r+0xb4>
 8007d9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007da8:	4333      	orrs	r3, r6
 8007daa:	f000 8592 	beq.w	80088d2 <_dtoa_r+0xbb2>
 8007dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db0:	b963      	cbnz	r3, 8007dcc <_dtoa_r+0xac>
 8007db2:	4b92      	ldr	r3, [pc, #584]	; (8007ffc <_dtoa_r+0x2dc>)
 8007db4:	e022      	b.n	8007dfc <_dtoa_r+0xdc>
 8007db6:	4b92      	ldr	r3, [pc, #584]	; (8008000 <_dtoa_r+0x2e0>)
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	9801      	ldr	r0, [sp, #4]
 8007dc2:	b013      	add	sp, #76	; 0x4c
 8007dc4:	ecbd 8b04 	vpop	{d8-d9}
 8007dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dcc:	4b8b      	ldr	r3, [pc, #556]	; (8007ffc <_dtoa_r+0x2dc>)
 8007dce:	9301      	str	r3, [sp, #4]
 8007dd0:	3303      	adds	r3, #3
 8007dd2:	e7f3      	b.n	8007dbc <_dtoa_r+0x9c>
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4650      	mov	r0, sl
 8007dda:	4659      	mov	r1, fp
 8007ddc:	f7f8 fe9c 	bl	8000b18 <__aeabi_dcmpeq>
 8007de0:	ec4b ab19 	vmov	d9, sl, fp
 8007de4:	4680      	mov	r8, r0
 8007de6:	b158      	cbz	r0, 8007e00 <_dtoa_r+0xe0>
 8007de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dea:	2301      	movs	r3, #1
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 856b 	beq.w	80088cc <_dtoa_r+0xbac>
 8007df6:	4883      	ldr	r0, [pc, #524]	; (8008004 <_dtoa_r+0x2e4>)
 8007df8:	6018      	str	r0, [r3, #0]
 8007dfa:	1e43      	subs	r3, r0, #1
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	e7df      	b.n	8007dc0 <_dtoa_r+0xa0>
 8007e00:	ec4b ab10 	vmov	d0, sl, fp
 8007e04:	aa10      	add	r2, sp, #64	; 0x40
 8007e06:	a911      	add	r1, sp, #68	; 0x44
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f001 fad9 	bl	80093c0 <__d2b>
 8007e0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007e12:	ee08 0a10 	vmov	s16, r0
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	f000 8084 	beq.w	8007f24 <_dtoa_r+0x204>
 8007e1c:	ee19 3a90 	vmov	r3, s19
 8007e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e28:	4656      	mov	r6, sl
 8007e2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007e36:	4b74      	ldr	r3, [pc, #464]	; (8008008 <_dtoa_r+0x2e8>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	f7f8 fa4b 	bl	80002d8 <__aeabi_dsub>
 8007e42:	a365      	add	r3, pc, #404	; (adr r3, 8007fd8 <_dtoa_r+0x2b8>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 fbfe 	bl	8000648 <__aeabi_dmul>
 8007e4c:	a364      	add	r3, pc, #400	; (adr r3, 8007fe0 <_dtoa_r+0x2c0>)
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	f7f8 fa43 	bl	80002dc <__adddf3>
 8007e56:	4606      	mov	r6, r0
 8007e58:	4628      	mov	r0, r5
 8007e5a:	460f      	mov	r7, r1
 8007e5c:	f7f8 fb8a 	bl	8000574 <__aeabi_i2d>
 8007e60:	a361      	add	r3, pc, #388	; (adr r3, 8007fe8 <_dtoa_r+0x2c8>)
 8007e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e66:	f7f8 fbef 	bl	8000648 <__aeabi_dmul>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4630      	mov	r0, r6
 8007e70:	4639      	mov	r1, r7
 8007e72:	f7f8 fa33 	bl	80002dc <__adddf3>
 8007e76:	4606      	mov	r6, r0
 8007e78:	460f      	mov	r7, r1
 8007e7a:	f7f8 fe95 	bl	8000ba8 <__aeabi_d2iz>
 8007e7e:	2200      	movs	r2, #0
 8007e80:	9000      	str	r0, [sp, #0]
 8007e82:	2300      	movs	r3, #0
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fe50 	bl	8000b2c <__aeabi_dcmplt>
 8007e8c:	b150      	cbz	r0, 8007ea4 <_dtoa_r+0x184>
 8007e8e:	9800      	ldr	r0, [sp, #0]
 8007e90:	f7f8 fb70 	bl	8000574 <__aeabi_i2d>
 8007e94:	4632      	mov	r2, r6
 8007e96:	463b      	mov	r3, r7
 8007e98:	f7f8 fe3e 	bl	8000b18 <__aeabi_dcmpeq>
 8007e9c:	b910      	cbnz	r0, 8007ea4 <_dtoa_r+0x184>
 8007e9e:	9b00      	ldr	r3, [sp, #0]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	9b00      	ldr	r3, [sp, #0]
 8007ea6:	2b16      	cmp	r3, #22
 8007ea8:	d85a      	bhi.n	8007f60 <_dtoa_r+0x240>
 8007eaa:	9a00      	ldr	r2, [sp, #0]
 8007eac:	4b57      	ldr	r3, [pc, #348]	; (800800c <_dtoa_r+0x2ec>)
 8007eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	ec51 0b19 	vmov	r0, r1, d9
 8007eba:	f7f8 fe37 	bl	8000b2c <__aeabi_dcmplt>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d050      	beq.n	8007f64 <_dtoa_r+0x244>
 8007ec2:	9b00      	ldr	r3, [sp, #0]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ece:	1b5d      	subs	r5, r3, r5
 8007ed0:	1e6b      	subs	r3, r5, #1
 8007ed2:	9305      	str	r3, [sp, #20]
 8007ed4:	bf45      	ittet	mi
 8007ed6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007eda:	9304      	strmi	r3, [sp, #16]
 8007edc:	2300      	movpl	r3, #0
 8007ede:	2300      	movmi	r3, #0
 8007ee0:	bf4c      	ite	mi
 8007ee2:	9305      	strmi	r3, [sp, #20]
 8007ee4:	9304      	strpl	r3, [sp, #16]
 8007ee6:	9b00      	ldr	r3, [sp, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	db3d      	blt.n	8007f68 <_dtoa_r+0x248>
 8007eec:	9b05      	ldr	r3, [sp, #20]
 8007eee:	9a00      	ldr	r2, [sp, #0]
 8007ef0:	920a      	str	r2, [sp, #40]	; 0x28
 8007ef2:	4413      	add	r3, r2
 8007ef4:	9305      	str	r3, [sp, #20]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9307      	str	r3, [sp, #28]
 8007efa:	9b06      	ldr	r3, [sp, #24]
 8007efc:	2b09      	cmp	r3, #9
 8007efe:	f200 8089 	bhi.w	8008014 <_dtoa_r+0x2f4>
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	bfc4      	itt	gt
 8007f06:	3b04      	subgt	r3, #4
 8007f08:	9306      	strgt	r3, [sp, #24]
 8007f0a:	9b06      	ldr	r3, [sp, #24]
 8007f0c:	f1a3 0302 	sub.w	r3, r3, #2
 8007f10:	bfcc      	ite	gt
 8007f12:	2500      	movgt	r5, #0
 8007f14:	2501      	movle	r5, #1
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	f200 8087 	bhi.w	800802a <_dtoa_r+0x30a>
 8007f1c:	e8df f003 	tbb	[pc, r3]
 8007f20:	59383a2d 	.word	0x59383a2d
 8007f24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007f28:	441d      	add	r5, r3
 8007f2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	bfc1      	itttt	gt
 8007f32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007f3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f42:	bfda      	itte	le
 8007f44:	f1c3 0320 	rsble	r3, r3, #32
 8007f48:	fa06 f003 	lslle.w	r0, r6, r3
 8007f4c:	4318      	orrgt	r0, r3
 8007f4e:	f7f8 fb01 	bl	8000554 <__aeabi_ui2d>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4606      	mov	r6, r0
 8007f56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f5a:	3d01      	subs	r5, #1
 8007f5c:	930e      	str	r3, [sp, #56]	; 0x38
 8007f5e:	e76a      	b.n	8007e36 <_dtoa_r+0x116>
 8007f60:	2301      	movs	r3, #1
 8007f62:	e7b2      	b.n	8007eca <_dtoa_r+0x1aa>
 8007f64:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f66:	e7b1      	b.n	8007ecc <_dtoa_r+0x1ac>
 8007f68:	9b04      	ldr	r3, [sp, #16]
 8007f6a:	9a00      	ldr	r2, [sp, #0]
 8007f6c:	1a9b      	subs	r3, r3, r2
 8007f6e:	9304      	str	r3, [sp, #16]
 8007f70:	4253      	negs	r3, r2
 8007f72:	9307      	str	r3, [sp, #28]
 8007f74:	2300      	movs	r3, #0
 8007f76:	930a      	str	r3, [sp, #40]	; 0x28
 8007f78:	e7bf      	b.n	8007efa <_dtoa_r+0x1da>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9308      	str	r3, [sp, #32]
 8007f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	dc55      	bgt.n	8008030 <_dtoa_r+0x310>
 8007f84:	2301      	movs	r3, #1
 8007f86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f8e:	e00c      	b.n	8007faa <_dtoa_r+0x28a>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e7f3      	b.n	8007f7c <_dtoa_r+0x25c>
 8007f94:	2300      	movs	r3, #0
 8007f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f98:	9308      	str	r3, [sp, #32]
 8007f9a:	9b00      	ldr	r3, [sp, #0]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	9302      	str	r3, [sp, #8]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	9303      	str	r3, [sp, #12]
 8007fa6:	bfb8      	it	lt
 8007fa8:	2301      	movlt	r3, #1
 8007faa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007fac:	2200      	movs	r2, #0
 8007fae:	6042      	str	r2, [r0, #4]
 8007fb0:	2204      	movs	r2, #4
 8007fb2:	f102 0614 	add.w	r6, r2, #20
 8007fb6:	429e      	cmp	r6, r3
 8007fb8:	6841      	ldr	r1, [r0, #4]
 8007fba:	d93d      	bls.n	8008038 <_dtoa_r+0x318>
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f000 fed7 	bl	8008d70 <_Balloc>
 8007fc2:	9001      	str	r0, [sp, #4]
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d13b      	bne.n	8008040 <_dtoa_r+0x320>
 8007fc8:	4b11      	ldr	r3, [pc, #68]	; (8008010 <_dtoa_r+0x2f0>)
 8007fca:	4602      	mov	r2, r0
 8007fcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007fd0:	e6c0      	b.n	8007d54 <_dtoa_r+0x34>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e7df      	b.n	8007f96 <_dtoa_r+0x276>
 8007fd6:	bf00      	nop
 8007fd8:	636f4361 	.word	0x636f4361
 8007fdc:	3fd287a7 	.word	0x3fd287a7
 8007fe0:	8b60c8b3 	.word	0x8b60c8b3
 8007fe4:	3fc68a28 	.word	0x3fc68a28
 8007fe8:	509f79fb 	.word	0x509f79fb
 8007fec:	3fd34413 	.word	0x3fd34413
 8007ff0:	08009d89 	.word	0x08009d89
 8007ff4:	08009da0 	.word	0x08009da0
 8007ff8:	7ff00000 	.word	0x7ff00000
 8007ffc:	08009d85 	.word	0x08009d85
 8008000:	08009d7c 	.word	0x08009d7c
 8008004:	08009d59 	.word	0x08009d59
 8008008:	3ff80000 	.word	0x3ff80000
 800800c:	08009ef0 	.word	0x08009ef0
 8008010:	08009dfb 	.word	0x08009dfb
 8008014:	2501      	movs	r5, #1
 8008016:	2300      	movs	r3, #0
 8008018:	9306      	str	r3, [sp, #24]
 800801a:	9508      	str	r5, [sp, #32]
 800801c:	f04f 33ff 	mov.w	r3, #4294967295
 8008020:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008024:	2200      	movs	r2, #0
 8008026:	2312      	movs	r3, #18
 8008028:	e7b0      	b.n	8007f8c <_dtoa_r+0x26c>
 800802a:	2301      	movs	r3, #1
 800802c:	9308      	str	r3, [sp, #32]
 800802e:	e7f5      	b.n	800801c <_dtoa_r+0x2fc>
 8008030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008032:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008036:	e7b8      	b.n	8007faa <_dtoa_r+0x28a>
 8008038:	3101      	adds	r1, #1
 800803a:	6041      	str	r1, [r0, #4]
 800803c:	0052      	lsls	r2, r2, #1
 800803e:	e7b8      	b.n	8007fb2 <_dtoa_r+0x292>
 8008040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008042:	9a01      	ldr	r2, [sp, #4]
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	9b03      	ldr	r3, [sp, #12]
 8008048:	2b0e      	cmp	r3, #14
 800804a:	f200 809d 	bhi.w	8008188 <_dtoa_r+0x468>
 800804e:	2d00      	cmp	r5, #0
 8008050:	f000 809a 	beq.w	8008188 <_dtoa_r+0x468>
 8008054:	9b00      	ldr	r3, [sp, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	dd32      	ble.n	80080c0 <_dtoa_r+0x3a0>
 800805a:	4ab7      	ldr	r2, [pc, #732]	; (8008338 <_dtoa_r+0x618>)
 800805c:	f003 030f 	and.w	r3, r3, #15
 8008060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008064:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008068:	9b00      	ldr	r3, [sp, #0]
 800806a:	05d8      	lsls	r0, r3, #23
 800806c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008070:	d516      	bpl.n	80080a0 <_dtoa_r+0x380>
 8008072:	4bb2      	ldr	r3, [pc, #712]	; (800833c <_dtoa_r+0x61c>)
 8008074:	ec51 0b19 	vmov	r0, r1, d9
 8008078:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800807c:	f7f8 fc0e 	bl	800089c <__aeabi_ddiv>
 8008080:	f007 070f 	and.w	r7, r7, #15
 8008084:	4682      	mov	sl, r0
 8008086:	468b      	mov	fp, r1
 8008088:	2503      	movs	r5, #3
 800808a:	4eac      	ldr	r6, [pc, #688]	; (800833c <_dtoa_r+0x61c>)
 800808c:	b957      	cbnz	r7, 80080a4 <_dtoa_r+0x384>
 800808e:	4642      	mov	r2, r8
 8008090:	464b      	mov	r3, r9
 8008092:	4650      	mov	r0, sl
 8008094:	4659      	mov	r1, fp
 8008096:	f7f8 fc01 	bl	800089c <__aeabi_ddiv>
 800809a:	4682      	mov	sl, r0
 800809c:	468b      	mov	fp, r1
 800809e:	e028      	b.n	80080f2 <_dtoa_r+0x3d2>
 80080a0:	2502      	movs	r5, #2
 80080a2:	e7f2      	b.n	800808a <_dtoa_r+0x36a>
 80080a4:	07f9      	lsls	r1, r7, #31
 80080a6:	d508      	bpl.n	80080ba <_dtoa_r+0x39a>
 80080a8:	4640      	mov	r0, r8
 80080aa:	4649      	mov	r1, r9
 80080ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080b0:	f7f8 faca 	bl	8000648 <__aeabi_dmul>
 80080b4:	3501      	adds	r5, #1
 80080b6:	4680      	mov	r8, r0
 80080b8:	4689      	mov	r9, r1
 80080ba:	107f      	asrs	r7, r7, #1
 80080bc:	3608      	adds	r6, #8
 80080be:	e7e5      	b.n	800808c <_dtoa_r+0x36c>
 80080c0:	f000 809b 	beq.w	80081fa <_dtoa_r+0x4da>
 80080c4:	9b00      	ldr	r3, [sp, #0]
 80080c6:	4f9d      	ldr	r7, [pc, #628]	; (800833c <_dtoa_r+0x61c>)
 80080c8:	425e      	negs	r6, r3
 80080ca:	4b9b      	ldr	r3, [pc, #620]	; (8008338 <_dtoa_r+0x618>)
 80080cc:	f006 020f 	and.w	r2, r6, #15
 80080d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	ec51 0b19 	vmov	r0, r1, d9
 80080dc:	f7f8 fab4 	bl	8000648 <__aeabi_dmul>
 80080e0:	1136      	asrs	r6, r6, #4
 80080e2:	4682      	mov	sl, r0
 80080e4:	468b      	mov	fp, r1
 80080e6:	2300      	movs	r3, #0
 80080e8:	2502      	movs	r5, #2
 80080ea:	2e00      	cmp	r6, #0
 80080ec:	d17a      	bne.n	80081e4 <_dtoa_r+0x4c4>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1d3      	bne.n	800809a <_dtoa_r+0x37a>
 80080f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 8082 	beq.w	80081fe <_dtoa_r+0x4de>
 80080fa:	4b91      	ldr	r3, [pc, #580]	; (8008340 <_dtoa_r+0x620>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	4650      	mov	r0, sl
 8008100:	4659      	mov	r1, fp
 8008102:	f7f8 fd13 	bl	8000b2c <__aeabi_dcmplt>
 8008106:	2800      	cmp	r0, #0
 8008108:	d079      	beq.n	80081fe <_dtoa_r+0x4de>
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d076      	beq.n	80081fe <_dtoa_r+0x4de>
 8008110:	9b02      	ldr	r3, [sp, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	dd36      	ble.n	8008184 <_dtoa_r+0x464>
 8008116:	9b00      	ldr	r3, [sp, #0]
 8008118:	4650      	mov	r0, sl
 800811a:	4659      	mov	r1, fp
 800811c:	1e5f      	subs	r7, r3, #1
 800811e:	2200      	movs	r2, #0
 8008120:	4b88      	ldr	r3, [pc, #544]	; (8008344 <_dtoa_r+0x624>)
 8008122:	f7f8 fa91 	bl	8000648 <__aeabi_dmul>
 8008126:	9e02      	ldr	r6, [sp, #8]
 8008128:	4682      	mov	sl, r0
 800812a:	468b      	mov	fp, r1
 800812c:	3501      	adds	r5, #1
 800812e:	4628      	mov	r0, r5
 8008130:	f7f8 fa20 	bl	8000574 <__aeabi_i2d>
 8008134:	4652      	mov	r2, sl
 8008136:	465b      	mov	r3, fp
 8008138:	f7f8 fa86 	bl	8000648 <__aeabi_dmul>
 800813c:	4b82      	ldr	r3, [pc, #520]	; (8008348 <_dtoa_r+0x628>)
 800813e:	2200      	movs	r2, #0
 8008140:	f7f8 f8cc 	bl	80002dc <__adddf3>
 8008144:	46d0      	mov	r8, sl
 8008146:	46d9      	mov	r9, fp
 8008148:	4682      	mov	sl, r0
 800814a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800814e:	2e00      	cmp	r6, #0
 8008150:	d158      	bne.n	8008204 <_dtoa_r+0x4e4>
 8008152:	4b7e      	ldr	r3, [pc, #504]	; (800834c <_dtoa_r+0x62c>)
 8008154:	2200      	movs	r2, #0
 8008156:	4640      	mov	r0, r8
 8008158:	4649      	mov	r1, r9
 800815a:	f7f8 f8bd 	bl	80002d8 <__aeabi_dsub>
 800815e:	4652      	mov	r2, sl
 8008160:	465b      	mov	r3, fp
 8008162:	4680      	mov	r8, r0
 8008164:	4689      	mov	r9, r1
 8008166:	f7f8 fcff 	bl	8000b68 <__aeabi_dcmpgt>
 800816a:	2800      	cmp	r0, #0
 800816c:	f040 8295 	bne.w	800869a <_dtoa_r+0x97a>
 8008170:	4652      	mov	r2, sl
 8008172:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008176:	4640      	mov	r0, r8
 8008178:	4649      	mov	r1, r9
 800817a:	f7f8 fcd7 	bl	8000b2c <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	f040 8289 	bne.w	8008696 <_dtoa_r+0x976>
 8008184:	ec5b ab19 	vmov	sl, fp, d9
 8008188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800818a:	2b00      	cmp	r3, #0
 800818c:	f2c0 8148 	blt.w	8008420 <_dtoa_r+0x700>
 8008190:	9a00      	ldr	r2, [sp, #0]
 8008192:	2a0e      	cmp	r2, #14
 8008194:	f300 8144 	bgt.w	8008420 <_dtoa_r+0x700>
 8008198:	4b67      	ldr	r3, [pc, #412]	; (8008338 <_dtoa_r+0x618>)
 800819a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800819e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f280 80d5 	bge.w	8008354 <_dtoa_r+0x634>
 80081aa:	9b03      	ldr	r3, [sp, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f300 80d1 	bgt.w	8008354 <_dtoa_r+0x634>
 80081b2:	f040 826f 	bne.w	8008694 <_dtoa_r+0x974>
 80081b6:	4b65      	ldr	r3, [pc, #404]	; (800834c <_dtoa_r+0x62c>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	4640      	mov	r0, r8
 80081bc:	4649      	mov	r1, r9
 80081be:	f7f8 fa43 	bl	8000648 <__aeabi_dmul>
 80081c2:	4652      	mov	r2, sl
 80081c4:	465b      	mov	r3, fp
 80081c6:	f7f8 fcc5 	bl	8000b54 <__aeabi_dcmpge>
 80081ca:	9e03      	ldr	r6, [sp, #12]
 80081cc:	4637      	mov	r7, r6
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f040 8245 	bne.w	800865e <_dtoa_r+0x93e>
 80081d4:	9d01      	ldr	r5, [sp, #4]
 80081d6:	2331      	movs	r3, #49	; 0x31
 80081d8:	f805 3b01 	strb.w	r3, [r5], #1
 80081dc:	9b00      	ldr	r3, [sp, #0]
 80081de:	3301      	adds	r3, #1
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	e240      	b.n	8008666 <_dtoa_r+0x946>
 80081e4:	07f2      	lsls	r2, r6, #31
 80081e6:	d505      	bpl.n	80081f4 <_dtoa_r+0x4d4>
 80081e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ec:	f7f8 fa2c 	bl	8000648 <__aeabi_dmul>
 80081f0:	3501      	adds	r5, #1
 80081f2:	2301      	movs	r3, #1
 80081f4:	1076      	asrs	r6, r6, #1
 80081f6:	3708      	adds	r7, #8
 80081f8:	e777      	b.n	80080ea <_dtoa_r+0x3ca>
 80081fa:	2502      	movs	r5, #2
 80081fc:	e779      	b.n	80080f2 <_dtoa_r+0x3d2>
 80081fe:	9f00      	ldr	r7, [sp, #0]
 8008200:	9e03      	ldr	r6, [sp, #12]
 8008202:	e794      	b.n	800812e <_dtoa_r+0x40e>
 8008204:	9901      	ldr	r1, [sp, #4]
 8008206:	4b4c      	ldr	r3, [pc, #304]	; (8008338 <_dtoa_r+0x618>)
 8008208:	4431      	add	r1, r6
 800820a:	910d      	str	r1, [sp, #52]	; 0x34
 800820c:	9908      	ldr	r1, [sp, #32]
 800820e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008212:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008216:	2900      	cmp	r1, #0
 8008218:	d043      	beq.n	80082a2 <_dtoa_r+0x582>
 800821a:	494d      	ldr	r1, [pc, #308]	; (8008350 <_dtoa_r+0x630>)
 800821c:	2000      	movs	r0, #0
 800821e:	f7f8 fb3d 	bl	800089c <__aeabi_ddiv>
 8008222:	4652      	mov	r2, sl
 8008224:	465b      	mov	r3, fp
 8008226:	f7f8 f857 	bl	80002d8 <__aeabi_dsub>
 800822a:	9d01      	ldr	r5, [sp, #4]
 800822c:	4682      	mov	sl, r0
 800822e:	468b      	mov	fp, r1
 8008230:	4649      	mov	r1, r9
 8008232:	4640      	mov	r0, r8
 8008234:	f7f8 fcb8 	bl	8000ba8 <__aeabi_d2iz>
 8008238:	4606      	mov	r6, r0
 800823a:	f7f8 f99b 	bl	8000574 <__aeabi_i2d>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	4640      	mov	r0, r8
 8008244:	4649      	mov	r1, r9
 8008246:	f7f8 f847 	bl	80002d8 <__aeabi_dsub>
 800824a:	3630      	adds	r6, #48	; 0x30
 800824c:	f805 6b01 	strb.w	r6, [r5], #1
 8008250:	4652      	mov	r2, sl
 8008252:	465b      	mov	r3, fp
 8008254:	4680      	mov	r8, r0
 8008256:	4689      	mov	r9, r1
 8008258:	f7f8 fc68 	bl	8000b2c <__aeabi_dcmplt>
 800825c:	2800      	cmp	r0, #0
 800825e:	d163      	bne.n	8008328 <_dtoa_r+0x608>
 8008260:	4642      	mov	r2, r8
 8008262:	464b      	mov	r3, r9
 8008264:	4936      	ldr	r1, [pc, #216]	; (8008340 <_dtoa_r+0x620>)
 8008266:	2000      	movs	r0, #0
 8008268:	f7f8 f836 	bl	80002d8 <__aeabi_dsub>
 800826c:	4652      	mov	r2, sl
 800826e:	465b      	mov	r3, fp
 8008270:	f7f8 fc5c 	bl	8000b2c <__aeabi_dcmplt>
 8008274:	2800      	cmp	r0, #0
 8008276:	f040 80b5 	bne.w	80083e4 <_dtoa_r+0x6c4>
 800827a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800827c:	429d      	cmp	r5, r3
 800827e:	d081      	beq.n	8008184 <_dtoa_r+0x464>
 8008280:	4b30      	ldr	r3, [pc, #192]	; (8008344 <_dtoa_r+0x624>)
 8008282:	2200      	movs	r2, #0
 8008284:	4650      	mov	r0, sl
 8008286:	4659      	mov	r1, fp
 8008288:	f7f8 f9de 	bl	8000648 <__aeabi_dmul>
 800828c:	4b2d      	ldr	r3, [pc, #180]	; (8008344 <_dtoa_r+0x624>)
 800828e:	4682      	mov	sl, r0
 8008290:	468b      	mov	fp, r1
 8008292:	4640      	mov	r0, r8
 8008294:	4649      	mov	r1, r9
 8008296:	2200      	movs	r2, #0
 8008298:	f7f8 f9d6 	bl	8000648 <__aeabi_dmul>
 800829c:	4680      	mov	r8, r0
 800829e:	4689      	mov	r9, r1
 80082a0:	e7c6      	b.n	8008230 <_dtoa_r+0x510>
 80082a2:	4650      	mov	r0, sl
 80082a4:	4659      	mov	r1, fp
 80082a6:	f7f8 f9cf 	bl	8000648 <__aeabi_dmul>
 80082aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ac:	9d01      	ldr	r5, [sp, #4]
 80082ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80082b0:	4682      	mov	sl, r0
 80082b2:	468b      	mov	fp, r1
 80082b4:	4649      	mov	r1, r9
 80082b6:	4640      	mov	r0, r8
 80082b8:	f7f8 fc76 	bl	8000ba8 <__aeabi_d2iz>
 80082bc:	4606      	mov	r6, r0
 80082be:	f7f8 f959 	bl	8000574 <__aeabi_i2d>
 80082c2:	3630      	adds	r6, #48	; 0x30
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4640      	mov	r0, r8
 80082ca:	4649      	mov	r1, r9
 80082cc:	f7f8 f804 	bl	80002d8 <__aeabi_dsub>
 80082d0:	f805 6b01 	strb.w	r6, [r5], #1
 80082d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082d6:	429d      	cmp	r5, r3
 80082d8:	4680      	mov	r8, r0
 80082da:	4689      	mov	r9, r1
 80082dc:	f04f 0200 	mov.w	r2, #0
 80082e0:	d124      	bne.n	800832c <_dtoa_r+0x60c>
 80082e2:	4b1b      	ldr	r3, [pc, #108]	; (8008350 <_dtoa_r+0x630>)
 80082e4:	4650      	mov	r0, sl
 80082e6:	4659      	mov	r1, fp
 80082e8:	f7f7 fff8 	bl	80002dc <__adddf3>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	4640      	mov	r0, r8
 80082f2:	4649      	mov	r1, r9
 80082f4:	f7f8 fc38 	bl	8000b68 <__aeabi_dcmpgt>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d173      	bne.n	80083e4 <_dtoa_r+0x6c4>
 80082fc:	4652      	mov	r2, sl
 80082fe:	465b      	mov	r3, fp
 8008300:	4913      	ldr	r1, [pc, #76]	; (8008350 <_dtoa_r+0x630>)
 8008302:	2000      	movs	r0, #0
 8008304:	f7f7 ffe8 	bl	80002d8 <__aeabi_dsub>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4640      	mov	r0, r8
 800830e:	4649      	mov	r1, r9
 8008310:	f7f8 fc0c 	bl	8000b2c <__aeabi_dcmplt>
 8008314:	2800      	cmp	r0, #0
 8008316:	f43f af35 	beq.w	8008184 <_dtoa_r+0x464>
 800831a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800831c:	1e6b      	subs	r3, r5, #1
 800831e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008320:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008324:	2b30      	cmp	r3, #48	; 0x30
 8008326:	d0f8      	beq.n	800831a <_dtoa_r+0x5fa>
 8008328:	9700      	str	r7, [sp, #0]
 800832a:	e049      	b.n	80083c0 <_dtoa_r+0x6a0>
 800832c:	4b05      	ldr	r3, [pc, #20]	; (8008344 <_dtoa_r+0x624>)
 800832e:	f7f8 f98b 	bl	8000648 <__aeabi_dmul>
 8008332:	4680      	mov	r8, r0
 8008334:	4689      	mov	r9, r1
 8008336:	e7bd      	b.n	80082b4 <_dtoa_r+0x594>
 8008338:	08009ef0 	.word	0x08009ef0
 800833c:	08009ec8 	.word	0x08009ec8
 8008340:	3ff00000 	.word	0x3ff00000
 8008344:	40240000 	.word	0x40240000
 8008348:	401c0000 	.word	0x401c0000
 800834c:	40140000 	.word	0x40140000
 8008350:	3fe00000 	.word	0x3fe00000
 8008354:	9d01      	ldr	r5, [sp, #4]
 8008356:	4656      	mov	r6, sl
 8008358:	465f      	mov	r7, fp
 800835a:	4642      	mov	r2, r8
 800835c:	464b      	mov	r3, r9
 800835e:	4630      	mov	r0, r6
 8008360:	4639      	mov	r1, r7
 8008362:	f7f8 fa9b 	bl	800089c <__aeabi_ddiv>
 8008366:	f7f8 fc1f 	bl	8000ba8 <__aeabi_d2iz>
 800836a:	4682      	mov	sl, r0
 800836c:	f7f8 f902 	bl	8000574 <__aeabi_i2d>
 8008370:	4642      	mov	r2, r8
 8008372:	464b      	mov	r3, r9
 8008374:	f7f8 f968 	bl	8000648 <__aeabi_dmul>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4630      	mov	r0, r6
 800837e:	4639      	mov	r1, r7
 8008380:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008384:	f7f7 ffa8 	bl	80002d8 <__aeabi_dsub>
 8008388:	f805 6b01 	strb.w	r6, [r5], #1
 800838c:	9e01      	ldr	r6, [sp, #4]
 800838e:	9f03      	ldr	r7, [sp, #12]
 8008390:	1bae      	subs	r6, r5, r6
 8008392:	42b7      	cmp	r7, r6
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	d135      	bne.n	8008406 <_dtoa_r+0x6e6>
 800839a:	f7f7 ff9f 	bl	80002dc <__adddf3>
 800839e:	4642      	mov	r2, r8
 80083a0:	464b      	mov	r3, r9
 80083a2:	4606      	mov	r6, r0
 80083a4:	460f      	mov	r7, r1
 80083a6:	f7f8 fbdf 	bl	8000b68 <__aeabi_dcmpgt>
 80083aa:	b9d0      	cbnz	r0, 80083e2 <_dtoa_r+0x6c2>
 80083ac:	4642      	mov	r2, r8
 80083ae:	464b      	mov	r3, r9
 80083b0:	4630      	mov	r0, r6
 80083b2:	4639      	mov	r1, r7
 80083b4:	f7f8 fbb0 	bl	8000b18 <__aeabi_dcmpeq>
 80083b8:	b110      	cbz	r0, 80083c0 <_dtoa_r+0x6a0>
 80083ba:	f01a 0f01 	tst.w	sl, #1
 80083be:	d110      	bne.n	80083e2 <_dtoa_r+0x6c2>
 80083c0:	4620      	mov	r0, r4
 80083c2:	ee18 1a10 	vmov	r1, s16
 80083c6:	f000 fd13 	bl	8008df0 <_Bfree>
 80083ca:	2300      	movs	r3, #0
 80083cc:	9800      	ldr	r0, [sp, #0]
 80083ce:	702b      	strb	r3, [r5, #0]
 80083d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083d2:	3001      	adds	r0, #1
 80083d4:	6018      	str	r0, [r3, #0]
 80083d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f43f acf1 	beq.w	8007dc0 <_dtoa_r+0xa0>
 80083de:	601d      	str	r5, [r3, #0]
 80083e0:	e4ee      	b.n	8007dc0 <_dtoa_r+0xa0>
 80083e2:	9f00      	ldr	r7, [sp, #0]
 80083e4:	462b      	mov	r3, r5
 80083e6:	461d      	mov	r5, r3
 80083e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083ec:	2a39      	cmp	r2, #57	; 0x39
 80083ee:	d106      	bne.n	80083fe <_dtoa_r+0x6de>
 80083f0:	9a01      	ldr	r2, [sp, #4]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d1f7      	bne.n	80083e6 <_dtoa_r+0x6c6>
 80083f6:	9901      	ldr	r1, [sp, #4]
 80083f8:	2230      	movs	r2, #48	; 0x30
 80083fa:	3701      	adds	r7, #1
 80083fc:	700a      	strb	r2, [r1, #0]
 80083fe:	781a      	ldrb	r2, [r3, #0]
 8008400:	3201      	adds	r2, #1
 8008402:	701a      	strb	r2, [r3, #0]
 8008404:	e790      	b.n	8008328 <_dtoa_r+0x608>
 8008406:	4ba6      	ldr	r3, [pc, #664]	; (80086a0 <_dtoa_r+0x980>)
 8008408:	2200      	movs	r2, #0
 800840a:	f7f8 f91d 	bl	8000648 <__aeabi_dmul>
 800840e:	2200      	movs	r2, #0
 8008410:	2300      	movs	r3, #0
 8008412:	4606      	mov	r6, r0
 8008414:	460f      	mov	r7, r1
 8008416:	f7f8 fb7f 	bl	8000b18 <__aeabi_dcmpeq>
 800841a:	2800      	cmp	r0, #0
 800841c:	d09d      	beq.n	800835a <_dtoa_r+0x63a>
 800841e:	e7cf      	b.n	80083c0 <_dtoa_r+0x6a0>
 8008420:	9a08      	ldr	r2, [sp, #32]
 8008422:	2a00      	cmp	r2, #0
 8008424:	f000 80d7 	beq.w	80085d6 <_dtoa_r+0x8b6>
 8008428:	9a06      	ldr	r2, [sp, #24]
 800842a:	2a01      	cmp	r2, #1
 800842c:	f300 80ba 	bgt.w	80085a4 <_dtoa_r+0x884>
 8008430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008432:	2a00      	cmp	r2, #0
 8008434:	f000 80b2 	beq.w	800859c <_dtoa_r+0x87c>
 8008438:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800843c:	9e07      	ldr	r6, [sp, #28]
 800843e:	9d04      	ldr	r5, [sp, #16]
 8008440:	9a04      	ldr	r2, [sp, #16]
 8008442:	441a      	add	r2, r3
 8008444:	9204      	str	r2, [sp, #16]
 8008446:	9a05      	ldr	r2, [sp, #20]
 8008448:	2101      	movs	r1, #1
 800844a:	441a      	add	r2, r3
 800844c:	4620      	mov	r0, r4
 800844e:	9205      	str	r2, [sp, #20]
 8008450:	f000 fd86 	bl	8008f60 <__i2b>
 8008454:	4607      	mov	r7, r0
 8008456:	2d00      	cmp	r5, #0
 8008458:	dd0c      	ble.n	8008474 <_dtoa_r+0x754>
 800845a:	9b05      	ldr	r3, [sp, #20]
 800845c:	2b00      	cmp	r3, #0
 800845e:	dd09      	ble.n	8008474 <_dtoa_r+0x754>
 8008460:	42ab      	cmp	r3, r5
 8008462:	9a04      	ldr	r2, [sp, #16]
 8008464:	bfa8      	it	ge
 8008466:	462b      	movge	r3, r5
 8008468:	1ad2      	subs	r2, r2, r3
 800846a:	9204      	str	r2, [sp, #16]
 800846c:	9a05      	ldr	r2, [sp, #20]
 800846e:	1aed      	subs	r5, r5, r3
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	9305      	str	r3, [sp, #20]
 8008474:	9b07      	ldr	r3, [sp, #28]
 8008476:	b31b      	cbz	r3, 80084c0 <_dtoa_r+0x7a0>
 8008478:	9b08      	ldr	r3, [sp, #32]
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 80af 	beq.w	80085de <_dtoa_r+0x8be>
 8008480:	2e00      	cmp	r6, #0
 8008482:	dd13      	ble.n	80084ac <_dtoa_r+0x78c>
 8008484:	4639      	mov	r1, r7
 8008486:	4632      	mov	r2, r6
 8008488:	4620      	mov	r0, r4
 800848a:	f000 fe29 	bl	80090e0 <__pow5mult>
 800848e:	ee18 2a10 	vmov	r2, s16
 8008492:	4601      	mov	r1, r0
 8008494:	4607      	mov	r7, r0
 8008496:	4620      	mov	r0, r4
 8008498:	f000 fd78 	bl	8008f8c <__multiply>
 800849c:	ee18 1a10 	vmov	r1, s16
 80084a0:	4680      	mov	r8, r0
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 fca4 	bl	8008df0 <_Bfree>
 80084a8:	ee08 8a10 	vmov	s16, r8
 80084ac:	9b07      	ldr	r3, [sp, #28]
 80084ae:	1b9a      	subs	r2, r3, r6
 80084b0:	d006      	beq.n	80084c0 <_dtoa_r+0x7a0>
 80084b2:	ee18 1a10 	vmov	r1, s16
 80084b6:	4620      	mov	r0, r4
 80084b8:	f000 fe12 	bl	80090e0 <__pow5mult>
 80084bc:	ee08 0a10 	vmov	s16, r0
 80084c0:	2101      	movs	r1, #1
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 fd4c 	bl	8008f60 <__i2b>
 80084c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	4606      	mov	r6, r0
 80084ce:	f340 8088 	ble.w	80085e2 <_dtoa_r+0x8c2>
 80084d2:	461a      	mov	r2, r3
 80084d4:	4601      	mov	r1, r0
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 fe02 	bl	80090e0 <__pow5mult>
 80084dc:	9b06      	ldr	r3, [sp, #24]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	4606      	mov	r6, r0
 80084e2:	f340 8081 	ble.w	80085e8 <_dtoa_r+0x8c8>
 80084e6:	f04f 0800 	mov.w	r8, #0
 80084ea:	6933      	ldr	r3, [r6, #16]
 80084ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80084f0:	6918      	ldr	r0, [r3, #16]
 80084f2:	f000 fce5 	bl	8008ec0 <__hi0bits>
 80084f6:	f1c0 0020 	rsb	r0, r0, #32
 80084fa:	9b05      	ldr	r3, [sp, #20]
 80084fc:	4418      	add	r0, r3
 80084fe:	f010 001f 	ands.w	r0, r0, #31
 8008502:	f000 8092 	beq.w	800862a <_dtoa_r+0x90a>
 8008506:	f1c0 0320 	rsb	r3, r0, #32
 800850a:	2b04      	cmp	r3, #4
 800850c:	f340 808a 	ble.w	8008624 <_dtoa_r+0x904>
 8008510:	f1c0 001c 	rsb	r0, r0, #28
 8008514:	9b04      	ldr	r3, [sp, #16]
 8008516:	4403      	add	r3, r0
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	9b05      	ldr	r3, [sp, #20]
 800851c:	4403      	add	r3, r0
 800851e:	4405      	add	r5, r0
 8008520:	9305      	str	r3, [sp, #20]
 8008522:	9b04      	ldr	r3, [sp, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	dd07      	ble.n	8008538 <_dtoa_r+0x818>
 8008528:	ee18 1a10 	vmov	r1, s16
 800852c:	461a      	mov	r2, r3
 800852e:	4620      	mov	r0, r4
 8008530:	f000 fe30 	bl	8009194 <__lshift>
 8008534:	ee08 0a10 	vmov	s16, r0
 8008538:	9b05      	ldr	r3, [sp, #20]
 800853a:	2b00      	cmp	r3, #0
 800853c:	dd05      	ble.n	800854a <_dtoa_r+0x82a>
 800853e:	4631      	mov	r1, r6
 8008540:	461a      	mov	r2, r3
 8008542:	4620      	mov	r0, r4
 8008544:	f000 fe26 	bl	8009194 <__lshift>
 8008548:	4606      	mov	r6, r0
 800854a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d06e      	beq.n	800862e <_dtoa_r+0x90e>
 8008550:	ee18 0a10 	vmov	r0, s16
 8008554:	4631      	mov	r1, r6
 8008556:	f000 fe8d 	bl	8009274 <__mcmp>
 800855a:	2800      	cmp	r0, #0
 800855c:	da67      	bge.n	800862e <_dtoa_r+0x90e>
 800855e:	9b00      	ldr	r3, [sp, #0]
 8008560:	3b01      	subs	r3, #1
 8008562:	ee18 1a10 	vmov	r1, s16
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	220a      	movs	r2, #10
 800856a:	2300      	movs	r3, #0
 800856c:	4620      	mov	r0, r4
 800856e:	f000 fc61 	bl	8008e34 <__multadd>
 8008572:	9b08      	ldr	r3, [sp, #32]
 8008574:	ee08 0a10 	vmov	s16, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 81b1 	beq.w	80088e0 <_dtoa_r+0xbc0>
 800857e:	2300      	movs	r3, #0
 8008580:	4639      	mov	r1, r7
 8008582:	220a      	movs	r2, #10
 8008584:	4620      	mov	r0, r4
 8008586:	f000 fc55 	bl	8008e34 <__multadd>
 800858a:	9b02      	ldr	r3, [sp, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	4607      	mov	r7, r0
 8008590:	f300 808e 	bgt.w	80086b0 <_dtoa_r+0x990>
 8008594:	9b06      	ldr	r3, [sp, #24]
 8008596:	2b02      	cmp	r3, #2
 8008598:	dc51      	bgt.n	800863e <_dtoa_r+0x91e>
 800859a:	e089      	b.n	80086b0 <_dtoa_r+0x990>
 800859c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800859e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085a2:	e74b      	b.n	800843c <_dtoa_r+0x71c>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	1e5e      	subs	r6, r3, #1
 80085a8:	9b07      	ldr	r3, [sp, #28]
 80085aa:	42b3      	cmp	r3, r6
 80085ac:	bfbf      	itttt	lt
 80085ae:	9b07      	ldrlt	r3, [sp, #28]
 80085b0:	9607      	strlt	r6, [sp, #28]
 80085b2:	1af2      	sublt	r2, r6, r3
 80085b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80085b6:	bfb6      	itet	lt
 80085b8:	189b      	addlt	r3, r3, r2
 80085ba:	1b9e      	subge	r6, r3, r6
 80085bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	bfb8      	it	lt
 80085c2:	2600      	movlt	r6, #0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	bfb7      	itett	lt
 80085c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80085cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80085d0:	1a9d      	sublt	r5, r3, r2
 80085d2:	2300      	movlt	r3, #0
 80085d4:	e734      	b.n	8008440 <_dtoa_r+0x720>
 80085d6:	9e07      	ldr	r6, [sp, #28]
 80085d8:	9d04      	ldr	r5, [sp, #16]
 80085da:	9f08      	ldr	r7, [sp, #32]
 80085dc:	e73b      	b.n	8008456 <_dtoa_r+0x736>
 80085de:	9a07      	ldr	r2, [sp, #28]
 80085e0:	e767      	b.n	80084b2 <_dtoa_r+0x792>
 80085e2:	9b06      	ldr	r3, [sp, #24]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	dc18      	bgt.n	800861a <_dtoa_r+0x8fa>
 80085e8:	f1ba 0f00 	cmp.w	sl, #0
 80085ec:	d115      	bne.n	800861a <_dtoa_r+0x8fa>
 80085ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085f2:	b993      	cbnz	r3, 800861a <_dtoa_r+0x8fa>
 80085f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085f8:	0d1b      	lsrs	r3, r3, #20
 80085fa:	051b      	lsls	r3, r3, #20
 80085fc:	b183      	cbz	r3, 8008620 <_dtoa_r+0x900>
 80085fe:	9b04      	ldr	r3, [sp, #16]
 8008600:	3301      	adds	r3, #1
 8008602:	9304      	str	r3, [sp, #16]
 8008604:	9b05      	ldr	r3, [sp, #20]
 8008606:	3301      	adds	r3, #1
 8008608:	9305      	str	r3, [sp, #20]
 800860a:	f04f 0801 	mov.w	r8, #1
 800860e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008610:	2b00      	cmp	r3, #0
 8008612:	f47f af6a 	bne.w	80084ea <_dtoa_r+0x7ca>
 8008616:	2001      	movs	r0, #1
 8008618:	e76f      	b.n	80084fa <_dtoa_r+0x7da>
 800861a:	f04f 0800 	mov.w	r8, #0
 800861e:	e7f6      	b.n	800860e <_dtoa_r+0x8ee>
 8008620:	4698      	mov	r8, r3
 8008622:	e7f4      	b.n	800860e <_dtoa_r+0x8ee>
 8008624:	f43f af7d 	beq.w	8008522 <_dtoa_r+0x802>
 8008628:	4618      	mov	r0, r3
 800862a:	301c      	adds	r0, #28
 800862c:	e772      	b.n	8008514 <_dtoa_r+0x7f4>
 800862e:	9b03      	ldr	r3, [sp, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	dc37      	bgt.n	80086a4 <_dtoa_r+0x984>
 8008634:	9b06      	ldr	r3, [sp, #24]
 8008636:	2b02      	cmp	r3, #2
 8008638:	dd34      	ble.n	80086a4 <_dtoa_r+0x984>
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	9302      	str	r3, [sp, #8]
 800863e:	9b02      	ldr	r3, [sp, #8]
 8008640:	b96b      	cbnz	r3, 800865e <_dtoa_r+0x93e>
 8008642:	4631      	mov	r1, r6
 8008644:	2205      	movs	r2, #5
 8008646:	4620      	mov	r0, r4
 8008648:	f000 fbf4 	bl	8008e34 <__multadd>
 800864c:	4601      	mov	r1, r0
 800864e:	4606      	mov	r6, r0
 8008650:	ee18 0a10 	vmov	r0, s16
 8008654:	f000 fe0e 	bl	8009274 <__mcmp>
 8008658:	2800      	cmp	r0, #0
 800865a:	f73f adbb 	bgt.w	80081d4 <_dtoa_r+0x4b4>
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	9d01      	ldr	r5, [sp, #4]
 8008662:	43db      	mvns	r3, r3
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	4631      	mov	r1, r6
 800866c:	4620      	mov	r0, r4
 800866e:	f000 fbbf 	bl	8008df0 <_Bfree>
 8008672:	2f00      	cmp	r7, #0
 8008674:	f43f aea4 	beq.w	80083c0 <_dtoa_r+0x6a0>
 8008678:	f1b8 0f00 	cmp.w	r8, #0
 800867c:	d005      	beq.n	800868a <_dtoa_r+0x96a>
 800867e:	45b8      	cmp	r8, r7
 8008680:	d003      	beq.n	800868a <_dtoa_r+0x96a>
 8008682:	4641      	mov	r1, r8
 8008684:	4620      	mov	r0, r4
 8008686:	f000 fbb3 	bl	8008df0 <_Bfree>
 800868a:	4639      	mov	r1, r7
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fbaf 	bl	8008df0 <_Bfree>
 8008692:	e695      	b.n	80083c0 <_dtoa_r+0x6a0>
 8008694:	2600      	movs	r6, #0
 8008696:	4637      	mov	r7, r6
 8008698:	e7e1      	b.n	800865e <_dtoa_r+0x93e>
 800869a:	9700      	str	r7, [sp, #0]
 800869c:	4637      	mov	r7, r6
 800869e:	e599      	b.n	80081d4 <_dtoa_r+0x4b4>
 80086a0:	40240000 	.word	0x40240000
 80086a4:	9b08      	ldr	r3, [sp, #32]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 80ca 	beq.w	8008840 <_dtoa_r+0xb20>
 80086ac:	9b03      	ldr	r3, [sp, #12]
 80086ae:	9302      	str	r3, [sp, #8]
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	dd05      	ble.n	80086c0 <_dtoa_r+0x9a0>
 80086b4:	4639      	mov	r1, r7
 80086b6:	462a      	mov	r2, r5
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 fd6b 	bl	8009194 <__lshift>
 80086be:	4607      	mov	r7, r0
 80086c0:	f1b8 0f00 	cmp.w	r8, #0
 80086c4:	d05b      	beq.n	800877e <_dtoa_r+0xa5e>
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fb51 	bl	8008d70 <_Balloc>
 80086ce:	4605      	mov	r5, r0
 80086d0:	b928      	cbnz	r0, 80086de <_dtoa_r+0x9be>
 80086d2:	4b87      	ldr	r3, [pc, #540]	; (80088f0 <_dtoa_r+0xbd0>)
 80086d4:	4602      	mov	r2, r0
 80086d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086da:	f7ff bb3b 	b.w	8007d54 <_dtoa_r+0x34>
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	3202      	adds	r2, #2
 80086e2:	0092      	lsls	r2, r2, #2
 80086e4:	f107 010c 	add.w	r1, r7, #12
 80086e8:	300c      	adds	r0, #12
 80086ea:	f000 fb33 	bl	8008d54 <memcpy>
 80086ee:	2201      	movs	r2, #1
 80086f0:	4629      	mov	r1, r5
 80086f2:	4620      	mov	r0, r4
 80086f4:	f000 fd4e 	bl	8009194 <__lshift>
 80086f8:	9b01      	ldr	r3, [sp, #4]
 80086fa:	f103 0901 	add.w	r9, r3, #1
 80086fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008702:	4413      	add	r3, r2
 8008704:	9305      	str	r3, [sp, #20]
 8008706:	f00a 0301 	and.w	r3, sl, #1
 800870a:	46b8      	mov	r8, r7
 800870c:	9304      	str	r3, [sp, #16]
 800870e:	4607      	mov	r7, r0
 8008710:	4631      	mov	r1, r6
 8008712:	ee18 0a10 	vmov	r0, s16
 8008716:	f7ff fa75 	bl	8007c04 <quorem>
 800871a:	4641      	mov	r1, r8
 800871c:	9002      	str	r0, [sp, #8]
 800871e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008722:	ee18 0a10 	vmov	r0, s16
 8008726:	f000 fda5 	bl	8009274 <__mcmp>
 800872a:	463a      	mov	r2, r7
 800872c:	9003      	str	r0, [sp, #12]
 800872e:	4631      	mov	r1, r6
 8008730:	4620      	mov	r0, r4
 8008732:	f000 fdbb 	bl	80092ac <__mdiff>
 8008736:	68c2      	ldr	r2, [r0, #12]
 8008738:	f109 3bff 	add.w	fp, r9, #4294967295
 800873c:	4605      	mov	r5, r0
 800873e:	bb02      	cbnz	r2, 8008782 <_dtoa_r+0xa62>
 8008740:	4601      	mov	r1, r0
 8008742:	ee18 0a10 	vmov	r0, s16
 8008746:	f000 fd95 	bl	8009274 <__mcmp>
 800874a:	4602      	mov	r2, r0
 800874c:	4629      	mov	r1, r5
 800874e:	4620      	mov	r0, r4
 8008750:	9207      	str	r2, [sp, #28]
 8008752:	f000 fb4d 	bl	8008df0 <_Bfree>
 8008756:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800875a:	ea43 0102 	orr.w	r1, r3, r2
 800875e:	9b04      	ldr	r3, [sp, #16]
 8008760:	430b      	orrs	r3, r1
 8008762:	464d      	mov	r5, r9
 8008764:	d10f      	bne.n	8008786 <_dtoa_r+0xa66>
 8008766:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800876a:	d02a      	beq.n	80087c2 <_dtoa_r+0xaa2>
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	2b00      	cmp	r3, #0
 8008770:	dd02      	ble.n	8008778 <_dtoa_r+0xa58>
 8008772:	9b02      	ldr	r3, [sp, #8]
 8008774:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008778:	f88b a000 	strb.w	sl, [fp]
 800877c:	e775      	b.n	800866a <_dtoa_r+0x94a>
 800877e:	4638      	mov	r0, r7
 8008780:	e7ba      	b.n	80086f8 <_dtoa_r+0x9d8>
 8008782:	2201      	movs	r2, #1
 8008784:	e7e2      	b.n	800874c <_dtoa_r+0xa2c>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	db04      	blt.n	8008796 <_dtoa_r+0xa76>
 800878c:	9906      	ldr	r1, [sp, #24]
 800878e:	430b      	orrs	r3, r1
 8008790:	9904      	ldr	r1, [sp, #16]
 8008792:	430b      	orrs	r3, r1
 8008794:	d122      	bne.n	80087dc <_dtoa_r+0xabc>
 8008796:	2a00      	cmp	r2, #0
 8008798:	ddee      	ble.n	8008778 <_dtoa_r+0xa58>
 800879a:	ee18 1a10 	vmov	r1, s16
 800879e:	2201      	movs	r2, #1
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fcf7 	bl	8009194 <__lshift>
 80087a6:	4631      	mov	r1, r6
 80087a8:	ee08 0a10 	vmov	s16, r0
 80087ac:	f000 fd62 	bl	8009274 <__mcmp>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	dc03      	bgt.n	80087bc <_dtoa_r+0xa9c>
 80087b4:	d1e0      	bne.n	8008778 <_dtoa_r+0xa58>
 80087b6:	f01a 0f01 	tst.w	sl, #1
 80087ba:	d0dd      	beq.n	8008778 <_dtoa_r+0xa58>
 80087bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087c0:	d1d7      	bne.n	8008772 <_dtoa_r+0xa52>
 80087c2:	2339      	movs	r3, #57	; 0x39
 80087c4:	f88b 3000 	strb.w	r3, [fp]
 80087c8:	462b      	mov	r3, r5
 80087ca:	461d      	mov	r5, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087d2:	2a39      	cmp	r2, #57	; 0x39
 80087d4:	d071      	beq.n	80088ba <_dtoa_r+0xb9a>
 80087d6:	3201      	adds	r2, #1
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	e746      	b.n	800866a <_dtoa_r+0x94a>
 80087dc:	2a00      	cmp	r2, #0
 80087de:	dd07      	ble.n	80087f0 <_dtoa_r+0xad0>
 80087e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087e4:	d0ed      	beq.n	80087c2 <_dtoa_r+0xaa2>
 80087e6:	f10a 0301 	add.w	r3, sl, #1
 80087ea:	f88b 3000 	strb.w	r3, [fp]
 80087ee:	e73c      	b.n	800866a <_dtoa_r+0x94a>
 80087f0:	9b05      	ldr	r3, [sp, #20]
 80087f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80087f6:	4599      	cmp	r9, r3
 80087f8:	d047      	beq.n	800888a <_dtoa_r+0xb6a>
 80087fa:	ee18 1a10 	vmov	r1, s16
 80087fe:	2300      	movs	r3, #0
 8008800:	220a      	movs	r2, #10
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fb16 	bl	8008e34 <__multadd>
 8008808:	45b8      	cmp	r8, r7
 800880a:	ee08 0a10 	vmov	s16, r0
 800880e:	f04f 0300 	mov.w	r3, #0
 8008812:	f04f 020a 	mov.w	r2, #10
 8008816:	4641      	mov	r1, r8
 8008818:	4620      	mov	r0, r4
 800881a:	d106      	bne.n	800882a <_dtoa_r+0xb0a>
 800881c:	f000 fb0a 	bl	8008e34 <__multadd>
 8008820:	4680      	mov	r8, r0
 8008822:	4607      	mov	r7, r0
 8008824:	f109 0901 	add.w	r9, r9, #1
 8008828:	e772      	b.n	8008710 <_dtoa_r+0x9f0>
 800882a:	f000 fb03 	bl	8008e34 <__multadd>
 800882e:	4639      	mov	r1, r7
 8008830:	4680      	mov	r8, r0
 8008832:	2300      	movs	r3, #0
 8008834:	220a      	movs	r2, #10
 8008836:	4620      	mov	r0, r4
 8008838:	f000 fafc 	bl	8008e34 <__multadd>
 800883c:	4607      	mov	r7, r0
 800883e:	e7f1      	b.n	8008824 <_dtoa_r+0xb04>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	9302      	str	r3, [sp, #8]
 8008844:	9d01      	ldr	r5, [sp, #4]
 8008846:	ee18 0a10 	vmov	r0, s16
 800884a:	4631      	mov	r1, r6
 800884c:	f7ff f9da 	bl	8007c04 <quorem>
 8008850:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008854:	9b01      	ldr	r3, [sp, #4]
 8008856:	f805 ab01 	strb.w	sl, [r5], #1
 800885a:	1aea      	subs	r2, r5, r3
 800885c:	9b02      	ldr	r3, [sp, #8]
 800885e:	4293      	cmp	r3, r2
 8008860:	dd09      	ble.n	8008876 <_dtoa_r+0xb56>
 8008862:	ee18 1a10 	vmov	r1, s16
 8008866:	2300      	movs	r3, #0
 8008868:	220a      	movs	r2, #10
 800886a:	4620      	mov	r0, r4
 800886c:	f000 fae2 	bl	8008e34 <__multadd>
 8008870:	ee08 0a10 	vmov	s16, r0
 8008874:	e7e7      	b.n	8008846 <_dtoa_r+0xb26>
 8008876:	9b02      	ldr	r3, [sp, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	bfc8      	it	gt
 800887c:	461d      	movgt	r5, r3
 800887e:	9b01      	ldr	r3, [sp, #4]
 8008880:	bfd8      	it	le
 8008882:	2501      	movle	r5, #1
 8008884:	441d      	add	r5, r3
 8008886:	f04f 0800 	mov.w	r8, #0
 800888a:	ee18 1a10 	vmov	r1, s16
 800888e:	2201      	movs	r2, #1
 8008890:	4620      	mov	r0, r4
 8008892:	f000 fc7f 	bl	8009194 <__lshift>
 8008896:	4631      	mov	r1, r6
 8008898:	ee08 0a10 	vmov	s16, r0
 800889c:	f000 fcea 	bl	8009274 <__mcmp>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	dc91      	bgt.n	80087c8 <_dtoa_r+0xaa8>
 80088a4:	d102      	bne.n	80088ac <_dtoa_r+0xb8c>
 80088a6:	f01a 0f01 	tst.w	sl, #1
 80088aa:	d18d      	bne.n	80087c8 <_dtoa_r+0xaa8>
 80088ac:	462b      	mov	r3, r5
 80088ae:	461d      	mov	r5, r3
 80088b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088b4:	2a30      	cmp	r2, #48	; 0x30
 80088b6:	d0fa      	beq.n	80088ae <_dtoa_r+0xb8e>
 80088b8:	e6d7      	b.n	800866a <_dtoa_r+0x94a>
 80088ba:	9a01      	ldr	r2, [sp, #4]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d184      	bne.n	80087ca <_dtoa_r+0xaaa>
 80088c0:	9b00      	ldr	r3, [sp, #0]
 80088c2:	3301      	adds	r3, #1
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	2331      	movs	r3, #49	; 0x31
 80088c8:	7013      	strb	r3, [r2, #0]
 80088ca:	e6ce      	b.n	800866a <_dtoa_r+0x94a>
 80088cc:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <_dtoa_r+0xbd4>)
 80088ce:	f7ff ba95 	b.w	8007dfc <_dtoa_r+0xdc>
 80088d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f47f aa6e 	bne.w	8007db6 <_dtoa_r+0x96>
 80088da:	4b07      	ldr	r3, [pc, #28]	; (80088f8 <_dtoa_r+0xbd8>)
 80088dc:	f7ff ba8e 	b.w	8007dfc <_dtoa_r+0xdc>
 80088e0:	9b02      	ldr	r3, [sp, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	dcae      	bgt.n	8008844 <_dtoa_r+0xb24>
 80088e6:	9b06      	ldr	r3, [sp, #24]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	f73f aea8 	bgt.w	800863e <_dtoa_r+0x91e>
 80088ee:	e7a9      	b.n	8008844 <_dtoa_r+0xb24>
 80088f0:	08009dfb 	.word	0x08009dfb
 80088f4:	08009d58 	.word	0x08009d58
 80088f8:	08009d7c 	.word	0x08009d7c

080088fc <__sflush_r>:
 80088fc:	898a      	ldrh	r2, [r1, #12]
 80088fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008902:	4605      	mov	r5, r0
 8008904:	0710      	lsls	r0, r2, #28
 8008906:	460c      	mov	r4, r1
 8008908:	d458      	bmi.n	80089bc <__sflush_r+0xc0>
 800890a:	684b      	ldr	r3, [r1, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	dc05      	bgt.n	800891c <__sflush_r+0x20>
 8008910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008912:	2b00      	cmp	r3, #0
 8008914:	dc02      	bgt.n	800891c <__sflush_r+0x20>
 8008916:	2000      	movs	r0, #0
 8008918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800891c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800891e:	2e00      	cmp	r6, #0
 8008920:	d0f9      	beq.n	8008916 <__sflush_r+0x1a>
 8008922:	2300      	movs	r3, #0
 8008924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008928:	682f      	ldr	r7, [r5, #0]
 800892a:	602b      	str	r3, [r5, #0]
 800892c:	d032      	beq.n	8008994 <__sflush_r+0x98>
 800892e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	075a      	lsls	r2, r3, #29
 8008934:	d505      	bpl.n	8008942 <__sflush_r+0x46>
 8008936:	6863      	ldr	r3, [r4, #4]
 8008938:	1ac0      	subs	r0, r0, r3
 800893a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800893c:	b10b      	cbz	r3, 8008942 <__sflush_r+0x46>
 800893e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008940:	1ac0      	subs	r0, r0, r3
 8008942:	2300      	movs	r3, #0
 8008944:	4602      	mov	r2, r0
 8008946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008948:	6a21      	ldr	r1, [r4, #32]
 800894a:	4628      	mov	r0, r5
 800894c:	47b0      	blx	r6
 800894e:	1c43      	adds	r3, r0, #1
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	d106      	bne.n	8008962 <__sflush_r+0x66>
 8008954:	6829      	ldr	r1, [r5, #0]
 8008956:	291d      	cmp	r1, #29
 8008958:	d82c      	bhi.n	80089b4 <__sflush_r+0xb8>
 800895a:	4a2a      	ldr	r2, [pc, #168]	; (8008a04 <__sflush_r+0x108>)
 800895c:	40ca      	lsrs	r2, r1
 800895e:	07d6      	lsls	r6, r2, #31
 8008960:	d528      	bpl.n	80089b4 <__sflush_r+0xb8>
 8008962:	2200      	movs	r2, #0
 8008964:	6062      	str	r2, [r4, #4]
 8008966:	04d9      	lsls	r1, r3, #19
 8008968:	6922      	ldr	r2, [r4, #16]
 800896a:	6022      	str	r2, [r4, #0]
 800896c:	d504      	bpl.n	8008978 <__sflush_r+0x7c>
 800896e:	1c42      	adds	r2, r0, #1
 8008970:	d101      	bne.n	8008976 <__sflush_r+0x7a>
 8008972:	682b      	ldr	r3, [r5, #0]
 8008974:	b903      	cbnz	r3, 8008978 <__sflush_r+0x7c>
 8008976:	6560      	str	r0, [r4, #84]	; 0x54
 8008978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800897a:	602f      	str	r7, [r5, #0]
 800897c:	2900      	cmp	r1, #0
 800897e:	d0ca      	beq.n	8008916 <__sflush_r+0x1a>
 8008980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008984:	4299      	cmp	r1, r3
 8008986:	d002      	beq.n	800898e <__sflush_r+0x92>
 8008988:	4628      	mov	r0, r5
 800898a:	f000 fd8b 	bl	80094a4 <_free_r>
 800898e:	2000      	movs	r0, #0
 8008990:	6360      	str	r0, [r4, #52]	; 0x34
 8008992:	e7c1      	b.n	8008918 <__sflush_r+0x1c>
 8008994:	6a21      	ldr	r1, [r4, #32]
 8008996:	2301      	movs	r3, #1
 8008998:	4628      	mov	r0, r5
 800899a:	47b0      	blx	r6
 800899c:	1c41      	adds	r1, r0, #1
 800899e:	d1c7      	bne.n	8008930 <__sflush_r+0x34>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0c4      	beq.n	8008930 <__sflush_r+0x34>
 80089a6:	2b1d      	cmp	r3, #29
 80089a8:	d001      	beq.n	80089ae <__sflush_r+0xb2>
 80089aa:	2b16      	cmp	r3, #22
 80089ac:	d101      	bne.n	80089b2 <__sflush_r+0xb6>
 80089ae:	602f      	str	r7, [r5, #0]
 80089b0:	e7b1      	b.n	8008916 <__sflush_r+0x1a>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b8:	81a3      	strh	r3, [r4, #12]
 80089ba:	e7ad      	b.n	8008918 <__sflush_r+0x1c>
 80089bc:	690f      	ldr	r7, [r1, #16]
 80089be:	2f00      	cmp	r7, #0
 80089c0:	d0a9      	beq.n	8008916 <__sflush_r+0x1a>
 80089c2:	0793      	lsls	r3, r2, #30
 80089c4:	680e      	ldr	r6, [r1, #0]
 80089c6:	bf08      	it	eq
 80089c8:	694b      	ldreq	r3, [r1, #20]
 80089ca:	600f      	str	r7, [r1, #0]
 80089cc:	bf18      	it	ne
 80089ce:	2300      	movne	r3, #0
 80089d0:	eba6 0807 	sub.w	r8, r6, r7
 80089d4:	608b      	str	r3, [r1, #8]
 80089d6:	f1b8 0f00 	cmp.w	r8, #0
 80089da:	dd9c      	ble.n	8008916 <__sflush_r+0x1a>
 80089dc:	6a21      	ldr	r1, [r4, #32]
 80089de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089e0:	4643      	mov	r3, r8
 80089e2:	463a      	mov	r2, r7
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b0      	blx	r6
 80089e8:	2800      	cmp	r0, #0
 80089ea:	dc06      	bgt.n	80089fa <__sflush_r+0xfe>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	e78e      	b.n	8008918 <__sflush_r+0x1c>
 80089fa:	4407      	add	r7, r0
 80089fc:	eba8 0800 	sub.w	r8, r8, r0
 8008a00:	e7e9      	b.n	80089d6 <__sflush_r+0xda>
 8008a02:	bf00      	nop
 8008a04:	20400001 	.word	0x20400001

08008a08 <_fflush_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	690b      	ldr	r3, [r1, #16]
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	b913      	cbnz	r3, 8008a18 <_fflush_r+0x10>
 8008a12:	2500      	movs	r5, #0
 8008a14:	4628      	mov	r0, r5
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	b118      	cbz	r0, 8008a22 <_fflush_r+0x1a>
 8008a1a:	6983      	ldr	r3, [r0, #24]
 8008a1c:	b90b      	cbnz	r3, 8008a22 <_fflush_r+0x1a>
 8008a1e:	f000 f887 	bl	8008b30 <__sinit>
 8008a22:	4b14      	ldr	r3, [pc, #80]	; (8008a74 <_fflush_r+0x6c>)
 8008a24:	429c      	cmp	r4, r3
 8008a26:	d11b      	bne.n	8008a60 <_fflush_r+0x58>
 8008a28:	686c      	ldr	r4, [r5, #4]
 8008a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0ef      	beq.n	8008a12 <_fflush_r+0xa>
 8008a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a34:	07d0      	lsls	r0, r2, #31
 8008a36:	d404      	bmi.n	8008a42 <_fflush_r+0x3a>
 8008a38:	0599      	lsls	r1, r3, #22
 8008a3a:	d402      	bmi.n	8008a42 <_fflush_r+0x3a>
 8008a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a3e:	f000 f91a 	bl	8008c76 <__retarget_lock_acquire_recursive>
 8008a42:	4628      	mov	r0, r5
 8008a44:	4621      	mov	r1, r4
 8008a46:	f7ff ff59 	bl	80088fc <__sflush_r>
 8008a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a4c:	07da      	lsls	r2, r3, #31
 8008a4e:	4605      	mov	r5, r0
 8008a50:	d4e0      	bmi.n	8008a14 <_fflush_r+0xc>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	059b      	lsls	r3, r3, #22
 8008a56:	d4dd      	bmi.n	8008a14 <_fflush_r+0xc>
 8008a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a5a:	f000 f90d 	bl	8008c78 <__retarget_lock_release_recursive>
 8008a5e:	e7d9      	b.n	8008a14 <_fflush_r+0xc>
 8008a60:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <_fflush_r+0x70>)
 8008a62:	429c      	cmp	r4, r3
 8008a64:	d101      	bne.n	8008a6a <_fflush_r+0x62>
 8008a66:	68ac      	ldr	r4, [r5, #8]
 8008a68:	e7df      	b.n	8008a2a <_fflush_r+0x22>
 8008a6a:	4b04      	ldr	r3, [pc, #16]	; (8008a7c <_fflush_r+0x74>)
 8008a6c:	429c      	cmp	r4, r3
 8008a6e:	bf08      	it	eq
 8008a70:	68ec      	ldreq	r4, [r5, #12]
 8008a72:	e7da      	b.n	8008a2a <_fflush_r+0x22>
 8008a74:	08009e2c 	.word	0x08009e2c
 8008a78:	08009e4c 	.word	0x08009e4c
 8008a7c:	08009e0c 	.word	0x08009e0c

08008a80 <std>:
 8008a80:	2300      	movs	r3, #0
 8008a82:	b510      	push	{r4, lr}
 8008a84:	4604      	mov	r4, r0
 8008a86:	e9c0 3300 	strd	r3, r3, [r0]
 8008a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a8e:	6083      	str	r3, [r0, #8]
 8008a90:	8181      	strh	r1, [r0, #12]
 8008a92:	6643      	str	r3, [r0, #100]	; 0x64
 8008a94:	81c2      	strh	r2, [r0, #14]
 8008a96:	6183      	str	r3, [r0, #24]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	305c      	adds	r0, #92	; 0x5c
 8008a9e:	f7fe faf1 	bl	8007084 <memset>
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <std+0x38>)
 8008aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <std+0x3c>)
 8008aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <std+0x40>)
 8008aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008aae:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <std+0x44>)
 8008ab0:	6224      	str	r4, [r4, #32]
 8008ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	bf00      	nop
 8008ab8:	08009939 	.word	0x08009939
 8008abc:	0800995b 	.word	0x0800995b
 8008ac0:	08009993 	.word	0x08009993
 8008ac4:	080099b7 	.word	0x080099b7

08008ac8 <_cleanup_r>:
 8008ac8:	4901      	ldr	r1, [pc, #4]	; (8008ad0 <_cleanup_r+0x8>)
 8008aca:	f000 b8af 	b.w	8008c2c <_fwalk_reent>
 8008ace:	bf00      	nop
 8008ad0:	08008a09 	.word	0x08008a09

08008ad4 <__sfmoreglue>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	2268      	movs	r2, #104	; 0x68
 8008ad8:	1e4d      	subs	r5, r1, #1
 8008ada:	4355      	muls	r5, r2
 8008adc:	460e      	mov	r6, r1
 8008ade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ae2:	f000 fd4b 	bl	800957c <_malloc_r>
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	b140      	cbz	r0, 8008afc <__sfmoreglue+0x28>
 8008aea:	2100      	movs	r1, #0
 8008aec:	e9c0 1600 	strd	r1, r6, [r0]
 8008af0:	300c      	adds	r0, #12
 8008af2:	60a0      	str	r0, [r4, #8]
 8008af4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008af8:	f7fe fac4 	bl	8007084 <memset>
 8008afc:	4620      	mov	r0, r4
 8008afe:	bd70      	pop	{r4, r5, r6, pc}

08008b00 <__sfp_lock_acquire>:
 8008b00:	4801      	ldr	r0, [pc, #4]	; (8008b08 <__sfp_lock_acquire+0x8>)
 8008b02:	f000 b8b8 	b.w	8008c76 <__retarget_lock_acquire_recursive>
 8008b06:	bf00      	nop
 8008b08:	20000579 	.word	0x20000579

08008b0c <__sfp_lock_release>:
 8008b0c:	4801      	ldr	r0, [pc, #4]	; (8008b14 <__sfp_lock_release+0x8>)
 8008b0e:	f000 b8b3 	b.w	8008c78 <__retarget_lock_release_recursive>
 8008b12:	bf00      	nop
 8008b14:	20000579 	.word	0x20000579

08008b18 <__sinit_lock_acquire>:
 8008b18:	4801      	ldr	r0, [pc, #4]	; (8008b20 <__sinit_lock_acquire+0x8>)
 8008b1a:	f000 b8ac 	b.w	8008c76 <__retarget_lock_acquire_recursive>
 8008b1e:	bf00      	nop
 8008b20:	2000057a 	.word	0x2000057a

08008b24 <__sinit_lock_release>:
 8008b24:	4801      	ldr	r0, [pc, #4]	; (8008b2c <__sinit_lock_release+0x8>)
 8008b26:	f000 b8a7 	b.w	8008c78 <__retarget_lock_release_recursive>
 8008b2a:	bf00      	nop
 8008b2c:	2000057a 	.word	0x2000057a

08008b30 <__sinit>:
 8008b30:	b510      	push	{r4, lr}
 8008b32:	4604      	mov	r4, r0
 8008b34:	f7ff fff0 	bl	8008b18 <__sinit_lock_acquire>
 8008b38:	69a3      	ldr	r3, [r4, #24]
 8008b3a:	b11b      	cbz	r3, 8008b44 <__sinit+0x14>
 8008b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b40:	f7ff bff0 	b.w	8008b24 <__sinit_lock_release>
 8008b44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b48:	6523      	str	r3, [r4, #80]	; 0x50
 8008b4a:	4b13      	ldr	r3, [pc, #76]	; (8008b98 <__sinit+0x68>)
 8008b4c:	4a13      	ldr	r2, [pc, #76]	; (8008b9c <__sinit+0x6c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b52:	42a3      	cmp	r3, r4
 8008b54:	bf04      	itt	eq
 8008b56:	2301      	moveq	r3, #1
 8008b58:	61a3      	streq	r3, [r4, #24]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 f820 	bl	8008ba0 <__sfp>
 8008b60:	6060      	str	r0, [r4, #4]
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 f81c 	bl	8008ba0 <__sfp>
 8008b68:	60a0      	str	r0, [r4, #8]
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 f818 	bl	8008ba0 <__sfp>
 8008b70:	2200      	movs	r2, #0
 8008b72:	60e0      	str	r0, [r4, #12]
 8008b74:	2104      	movs	r1, #4
 8008b76:	6860      	ldr	r0, [r4, #4]
 8008b78:	f7ff ff82 	bl	8008a80 <std>
 8008b7c:	68a0      	ldr	r0, [r4, #8]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	2109      	movs	r1, #9
 8008b82:	f7ff ff7d 	bl	8008a80 <std>
 8008b86:	68e0      	ldr	r0, [r4, #12]
 8008b88:	2202      	movs	r2, #2
 8008b8a:	2112      	movs	r1, #18
 8008b8c:	f7ff ff78 	bl	8008a80 <std>
 8008b90:	2301      	movs	r3, #1
 8008b92:	61a3      	str	r3, [r4, #24]
 8008b94:	e7d2      	b.n	8008b3c <__sinit+0xc>
 8008b96:	bf00      	nop
 8008b98:	08009d44 	.word	0x08009d44
 8008b9c:	08008ac9 	.word	0x08008ac9

08008ba0 <__sfp>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	f7ff ffac 	bl	8008b00 <__sfp_lock_acquire>
 8008ba8:	4b1e      	ldr	r3, [pc, #120]	; (8008c24 <__sfp+0x84>)
 8008baa:	681e      	ldr	r6, [r3, #0]
 8008bac:	69b3      	ldr	r3, [r6, #24]
 8008bae:	b913      	cbnz	r3, 8008bb6 <__sfp+0x16>
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f7ff ffbd 	bl	8008b30 <__sinit>
 8008bb6:	3648      	adds	r6, #72	; 0x48
 8008bb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	d503      	bpl.n	8008bc8 <__sfp+0x28>
 8008bc0:	6833      	ldr	r3, [r6, #0]
 8008bc2:	b30b      	cbz	r3, 8008c08 <__sfp+0x68>
 8008bc4:	6836      	ldr	r6, [r6, #0]
 8008bc6:	e7f7      	b.n	8008bb8 <__sfp+0x18>
 8008bc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bcc:	b9d5      	cbnz	r5, 8008c04 <__sfp+0x64>
 8008bce:	4b16      	ldr	r3, [pc, #88]	; (8008c28 <__sfp+0x88>)
 8008bd0:	60e3      	str	r3, [r4, #12]
 8008bd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bd6:	6665      	str	r5, [r4, #100]	; 0x64
 8008bd8:	f000 f84c 	bl	8008c74 <__retarget_lock_init_recursive>
 8008bdc:	f7ff ff96 	bl	8008b0c <__sfp_lock_release>
 8008be0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008be4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008be8:	6025      	str	r5, [r4, #0]
 8008bea:	61a5      	str	r5, [r4, #24]
 8008bec:	2208      	movs	r2, #8
 8008bee:	4629      	mov	r1, r5
 8008bf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bf4:	f7fe fa46 	bl	8007084 <memset>
 8008bf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c00:	4620      	mov	r0, r4
 8008c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c04:	3468      	adds	r4, #104	; 0x68
 8008c06:	e7d9      	b.n	8008bbc <__sfp+0x1c>
 8008c08:	2104      	movs	r1, #4
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	f7ff ff62 	bl	8008ad4 <__sfmoreglue>
 8008c10:	4604      	mov	r4, r0
 8008c12:	6030      	str	r0, [r6, #0]
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d1d5      	bne.n	8008bc4 <__sfp+0x24>
 8008c18:	f7ff ff78 	bl	8008b0c <__sfp_lock_release>
 8008c1c:	230c      	movs	r3, #12
 8008c1e:	603b      	str	r3, [r7, #0]
 8008c20:	e7ee      	b.n	8008c00 <__sfp+0x60>
 8008c22:	bf00      	nop
 8008c24:	08009d44 	.word	0x08009d44
 8008c28:	ffff0001 	.word	0xffff0001

08008c2c <_fwalk_reent>:
 8008c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c30:	4606      	mov	r6, r0
 8008c32:	4688      	mov	r8, r1
 8008c34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c38:	2700      	movs	r7, #0
 8008c3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c3e:	f1b9 0901 	subs.w	r9, r9, #1
 8008c42:	d505      	bpl.n	8008c50 <_fwalk_reent+0x24>
 8008c44:	6824      	ldr	r4, [r4, #0]
 8008c46:	2c00      	cmp	r4, #0
 8008c48:	d1f7      	bne.n	8008c3a <_fwalk_reent+0xe>
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c50:	89ab      	ldrh	r3, [r5, #12]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d907      	bls.n	8008c66 <_fwalk_reent+0x3a>
 8008c56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	d003      	beq.n	8008c66 <_fwalk_reent+0x3a>
 8008c5e:	4629      	mov	r1, r5
 8008c60:	4630      	mov	r0, r6
 8008c62:	47c0      	blx	r8
 8008c64:	4307      	orrs	r7, r0
 8008c66:	3568      	adds	r5, #104	; 0x68
 8008c68:	e7e9      	b.n	8008c3e <_fwalk_reent+0x12>
	...

08008c6c <_localeconv_r>:
 8008c6c:	4800      	ldr	r0, [pc, #0]	; (8008c70 <_localeconv_r+0x4>)
 8008c6e:	4770      	bx	lr
 8008c70:	20000168 	.word	0x20000168

08008c74 <__retarget_lock_init_recursive>:
 8008c74:	4770      	bx	lr

08008c76 <__retarget_lock_acquire_recursive>:
 8008c76:	4770      	bx	lr

08008c78 <__retarget_lock_release_recursive>:
 8008c78:	4770      	bx	lr

08008c7a <__swhatbuf_r>:
 8008c7a:	b570      	push	{r4, r5, r6, lr}
 8008c7c:	460e      	mov	r6, r1
 8008c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c82:	2900      	cmp	r1, #0
 8008c84:	b096      	sub	sp, #88	; 0x58
 8008c86:	4614      	mov	r4, r2
 8008c88:	461d      	mov	r5, r3
 8008c8a:	da08      	bge.n	8008c9e <__swhatbuf_r+0x24>
 8008c8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	602a      	str	r2, [r5, #0]
 8008c94:	061a      	lsls	r2, r3, #24
 8008c96:	d410      	bmi.n	8008cba <__swhatbuf_r+0x40>
 8008c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9c:	e00e      	b.n	8008cbc <__swhatbuf_r+0x42>
 8008c9e:	466a      	mov	r2, sp
 8008ca0:	f000 fee0 	bl	8009a64 <_fstat_r>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	dbf1      	blt.n	8008c8c <__swhatbuf_r+0x12>
 8008ca8:	9a01      	ldr	r2, [sp, #4]
 8008caa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cb2:	425a      	negs	r2, r3
 8008cb4:	415a      	adcs	r2, r3
 8008cb6:	602a      	str	r2, [r5, #0]
 8008cb8:	e7ee      	b.n	8008c98 <__swhatbuf_r+0x1e>
 8008cba:	2340      	movs	r3, #64	; 0x40
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	b016      	add	sp, #88	; 0x58
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}

08008cc4 <__smakebuf_r>:
 8008cc4:	898b      	ldrh	r3, [r1, #12]
 8008cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cc8:	079d      	lsls	r5, r3, #30
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460c      	mov	r4, r1
 8008cce:	d507      	bpl.n	8008ce0 <__smakebuf_r+0x1c>
 8008cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	2301      	movs	r3, #1
 8008cda:	6163      	str	r3, [r4, #20]
 8008cdc:	b002      	add	sp, #8
 8008cde:	bd70      	pop	{r4, r5, r6, pc}
 8008ce0:	ab01      	add	r3, sp, #4
 8008ce2:	466a      	mov	r2, sp
 8008ce4:	f7ff ffc9 	bl	8008c7a <__swhatbuf_r>
 8008ce8:	9900      	ldr	r1, [sp, #0]
 8008cea:	4605      	mov	r5, r0
 8008cec:	4630      	mov	r0, r6
 8008cee:	f000 fc45 	bl	800957c <_malloc_r>
 8008cf2:	b948      	cbnz	r0, 8008d08 <__smakebuf_r+0x44>
 8008cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf8:	059a      	lsls	r2, r3, #22
 8008cfa:	d4ef      	bmi.n	8008cdc <__smakebuf_r+0x18>
 8008cfc:	f023 0303 	bic.w	r3, r3, #3
 8008d00:	f043 0302 	orr.w	r3, r3, #2
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	e7e3      	b.n	8008cd0 <__smakebuf_r+0xc>
 8008d08:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <__smakebuf_r+0x7c>)
 8008d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	6020      	str	r0, [r4, #0]
 8008d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d14:	81a3      	strh	r3, [r4, #12]
 8008d16:	9b00      	ldr	r3, [sp, #0]
 8008d18:	6163      	str	r3, [r4, #20]
 8008d1a:	9b01      	ldr	r3, [sp, #4]
 8008d1c:	6120      	str	r0, [r4, #16]
 8008d1e:	b15b      	cbz	r3, 8008d38 <__smakebuf_r+0x74>
 8008d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d24:	4630      	mov	r0, r6
 8008d26:	f000 feaf 	bl	8009a88 <_isatty_r>
 8008d2a:	b128      	cbz	r0, 8008d38 <__smakebuf_r+0x74>
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	f023 0303 	bic.w	r3, r3, #3
 8008d32:	f043 0301 	orr.w	r3, r3, #1
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	89a0      	ldrh	r0, [r4, #12]
 8008d3a:	4305      	orrs	r5, r0
 8008d3c:	81a5      	strh	r5, [r4, #12]
 8008d3e:	e7cd      	b.n	8008cdc <__smakebuf_r+0x18>
 8008d40:	08008ac9 	.word	0x08008ac9

08008d44 <malloc>:
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <malloc+0xc>)
 8008d46:	4601      	mov	r1, r0
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	f000 bc17 	b.w	800957c <_malloc_r>
 8008d4e:	bf00      	nop
 8008d50:	20000014 	.word	0x20000014

08008d54 <memcpy>:
 8008d54:	440a      	add	r2, r1
 8008d56:	4291      	cmp	r1, r2
 8008d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d5c:	d100      	bne.n	8008d60 <memcpy+0xc>
 8008d5e:	4770      	bx	lr
 8008d60:	b510      	push	{r4, lr}
 8008d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d6a:	4291      	cmp	r1, r2
 8008d6c:	d1f9      	bne.n	8008d62 <memcpy+0xe>
 8008d6e:	bd10      	pop	{r4, pc}

08008d70 <_Balloc>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d74:	4604      	mov	r4, r0
 8008d76:	460d      	mov	r5, r1
 8008d78:	b976      	cbnz	r6, 8008d98 <_Balloc+0x28>
 8008d7a:	2010      	movs	r0, #16
 8008d7c:	f7ff ffe2 	bl	8008d44 <malloc>
 8008d80:	4602      	mov	r2, r0
 8008d82:	6260      	str	r0, [r4, #36]	; 0x24
 8008d84:	b920      	cbnz	r0, 8008d90 <_Balloc+0x20>
 8008d86:	4b18      	ldr	r3, [pc, #96]	; (8008de8 <_Balloc+0x78>)
 8008d88:	4818      	ldr	r0, [pc, #96]	; (8008dec <_Balloc+0x7c>)
 8008d8a:	2166      	movs	r1, #102	; 0x66
 8008d8c:	f000 fe2a 	bl	80099e4 <__assert_func>
 8008d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d94:	6006      	str	r6, [r0, #0]
 8008d96:	60c6      	str	r6, [r0, #12]
 8008d98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d9a:	68f3      	ldr	r3, [r6, #12]
 8008d9c:	b183      	cbz	r3, 8008dc0 <_Balloc+0x50>
 8008d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008da6:	b9b8      	cbnz	r0, 8008dd8 <_Balloc+0x68>
 8008da8:	2101      	movs	r1, #1
 8008daa:	fa01 f605 	lsl.w	r6, r1, r5
 8008dae:	1d72      	adds	r2, r6, #5
 8008db0:	0092      	lsls	r2, r2, #2
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 fb60 	bl	8009478 <_calloc_r>
 8008db8:	b160      	cbz	r0, 8008dd4 <_Balloc+0x64>
 8008dba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dbe:	e00e      	b.n	8008dde <_Balloc+0x6e>
 8008dc0:	2221      	movs	r2, #33	; 0x21
 8008dc2:	2104      	movs	r1, #4
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f000 fb57 	bl	8009478 <_calloc_r>
 8008dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dcc:	60f0      	str	r0, [r6, #12]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e4      	bne.n	8008d9e <_Balloc+0x2e>
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	6802      	ldr	r2, [r0, #0]
 8008dda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dde:	2300      	movs	r3, #0
 8008de0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008de4:	e7f7      	b.n	8008dd6 <_Balloc+0x66>
 8008de6:	bf00      	nop
 8008de8:	08009d89 	.word	0x08009d89
 8008dec:	08009e6c 	.word	0x08009e6c

08008df0 <_Bfree>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008df4:	4605      	mov	r5, r0
 8008df6:	460c      	mov	r4, r1
 8008df8:	b976      	cbnz	r6, 8008e18 <_Bfree+0x28>
 8008dfa:	2010      	movs	r0, #16
 8008dfc:	f7ff ffa2 	bl	8008d44 <malloc>
 8008e00:	4602      	mov	r2, r0
 8008e02:	6268      	str	r0, [r5, #36]	; 0x24
 8008e04:	b920      	cbnz	r0, 8008e10 <_Bfree+0x20>
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <_Bfree+0x3c>)
 8008e08:	4809      	ldr	r0, [pc, #36]	; (8008e30 <_Bfree+0x40>)
 8008e0a:	218a      	movs	r1, #138	; 0x8a
 8008e0c:	f000 fdea 	bl	80099e4 <__assert_func>
 8008e10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e14:	6006      	str	r6, [r0, #0]
 8008e16:	60c6      	str	r6, [r0, #12]
 8008e18:	b13c      	cbz	r4, 8008e2a <_Bfree+0x3a>
 8008e1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e1c:	6862      	ldr	r2, [r4, #4]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e24:	6021      	str	r1, [r4, #0]
 8008e26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	08009d89 	.word	0x08009d89
 8008e30:	08009e6c 	.word	0x08009e6c

08008e34 <__multadd>:
 8008e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e38:	690d      	ldr	r5, [r1, #16]
 8008e3a:	4607      	mov	r7, r0
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	461e      	mov	r6, r3
 8008e40:	f101 0c14 	add.w	ip, r1, #20
 8008e44:	2000      	movs	r0, #0
 8008e46:	f8dc 3000 	ldr.w	r3, [ip]
 8008e4a:	b299      	uxth	r1, r3
 8008e4c:	fb02 6101 	mla	r1, r2, r1, r6
 8008e50:	0c1e      	lsrs	r6, r3, #16
 8008e52:	0c0b      	lsrs	r3, r1, #16
 8008e54:	fb02 3306 	mla	r3, r2, r6, r3
 8008e58:	b289      	uxth	r1, r1
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e60:	4285      	cmp	r5, r0
 8008e62:	f84c 1b04 	str.w	r1, [ip], #4
 8008e66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e6a:	dcec      	bgt.n	8008e46 <__multadd+0x12>
 8008e6c:	b30e      	cbz	r6, 8008eb2 <__multadd+0x7e>
 8008e6e:	68a3      	ldr	r3, [r4, #8]
 8008e70:	42ab      	cmp	r3, r5
 8008e72:	dc19      	bgt.n	8008ea8 <__multadd+0x74>
 8008e74:	6861      	ldr	r1, [r4, #4]
 8008e76:	4638      	mov	r0, r7
 8008e78:	3101      	adds	r1, #1
 8008e7a:	f7ff ff79 	bl	8008d70 <_Balloc>
 8008e7e:	4680      	mov	r8, r0
 8008e80:	b928      	cbnz	r0, 8008e8e <__multadd+0x5a>
 8008e82:	4602      	mov	r2, r0
 8008e84:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <__multadd+0x84>)
 8008e86:	480d      	ldr	r0, [pc, #52]	; (8008ebc <__multadd+0x88>)
 8008e88:	21b5      	movs	r1, #181	; 0xb5
 8008e8a:	f000 fdab 	bl	80099e4 <__assert_func>
 8008e8e:	6922      	ldr	r2, [r4, #16]
 8008e90:	3202      	adds	r2, #2
 8008e92:	f104 010c 	add.w	r1, r4, #12
 8008e96:	0092      	lsls	r2, r2, #2
 8008e98:	300c      	adds	r0, #12
 8008e9a:	f7ff ff5b 	bl	8008d54 <memcpy>
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	4638      	mov	r0, r7
 8008ea2:	f7ff ffa5 	bl	8008df0 <_Bfree>
 8008ea6:	4644      	mov	r4, r8
 8008ea8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008eac:	3501      	adds	r5, #1
 8008eae:	615e      	str	r6, [r3, #20]
 8008eb0:	6125      	str	r5, [r4, #16]
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb8:	08009dfb 	.word	0x08009dfb
 8008ebc:	08009e6c 	.word	0x08009e6c

08008ec0 <__hi0bits>:
 8008ec0:	0c03      	lsrs	r3, r0, #16
 8008ec2:	041b      	lsls	r3, r3, #16
 8008ec4:	b9d3      	cbnz	r3, 8008efc <__hi0bits+0x3c>
 8008ec6:	0400      	lsls	r0, r0, #16
 8008ec8:	2310      	movs	r3, #16
 8008eca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ece:	bf04      	itt	eq
 8008ed0:	0200      	lsleq	r0, r0, #8
 8008ed2:	3308      	addeq	r3, #8
 8008ed4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ed8:	bf04      	itt	eq
 8008eda:	0100      	lsleq	r0, r0, #4
 8008edc:	3304      	addeq	r3, #4
 8008ede:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ee2:	bf04      	itt	eq
 8008ee4:	0080      	lsleq	r0, r0, #2
 8008ee6:	3302      	addeq	r3, #2
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	db05      	blt.n	8008ef8 <__hi0bits+0x38>
 8008eec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ef0:	f103 0301 	add.w	r3, r3, #1
 8008ef4:	bf08      	it	eq
 8008ef6:	2320      	moveq	r3, #32
 8008ef8:	4618      	mov	r0, r3
 8008efa:	4770      	bx	lr
 8008efc:	2300      	movs	r3, #0
 8008efe:	e7e4      	b.n	8008eca <__hi0bits+0xa>

08008f00 <__lo0bits>:
 8008f00:	6803      	ldr	r3, [r0, #0]
 8008f02:	f013 0207 	ands.w	r2, r3, #7
 8008f06:	4601      	mov	r1, r0
 8008f08:	d00b      	beq.n	8008f22 <__lo0bits+0x22>
 8008f0a:	07da      	lsls	r2, r3, #31
 8008f0c:	d423      	bmi.n	8008f56 <__lo0bits+0x56>
 8008f0e:	0798      	lsls	r0, r3, #30
 8008f10:	bf49      	itett	mi
 8008f12:	085b      	lsrmi	r3, r3, #1
 8008f14:	089b      	lsrpl	r3, r3, #2
 8008f16:	2001      	movmi	r0, #1
 8008f18:	600b      	strmi	r3, [r1, #0]
 8008f1a:	bf5c      	itt	pl
 8008f1c:	600b      	strpl	r3, [r1, #0]
 8008f1e:	2002      	movpl	r0, #2
 8008f20:	4770      	bx	lr
 8008f22:	b298      	uxth	r0, r3
 8008f24:	b9a8      	cbnz	r0, 8008f52 <__lo0bits+0x52>
 8008f26:	0c1b      	lsrs	r3, r3, #16
 8008f28:	2010      	movs	r0, #16
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	b90a      	cbnz	r2, 8008f32 <__lo0bits+0x32>
 8008f2e:	3008      	adds	r0, #8
 8008f30:	0a1b      	lsrs	r3, r3, #8
 8008f32:	071a      	lsls	r2, r3, #28
 8008f34:	bf04      	itt	eq
 8008f36:	091b      	lsreq	r3, r3, #4
 8008f38:	3004      	addeq	r0, #4
 8008f3a:	079a      	lsls	r2, r3, #30
 8008f3c:	bf04      	itt	eq
 8008f3e:	089b      	lsreq	r3, r3, #2
 8008f40:	3002      	addeq	r0, #2
 8008f42:	07da      	lsls	r2, r3, #31
 8008f44:	d403      	bmi.n	8008f4e <__lo0bits+0x4e>
 8008f46:	085b      	lsrs	r3, r3, #1
 8008f48:	f100 0001 	add.w	r0, r0, #1
 8008f4c:	d005      	beq.n	8008f5a <__lo0bits+0x5a>
 8008f4e:	600b      	str	r3, [r1, #0]
 8008f50:	4770      	bx	lr
 8008f52:	4610      	mov	r0, r2
 8008f54:	e7e9      	b.n	8008f2a <__lo0bits+0x2a>
 8008f56:	2000      	movs	r0, #0
 8008f58:	4770      	bx	lr
 8008f5a:	2020      	movs	r0, #32
 8008f5c:	4770      	bx	lr
	...

08008f60 <__i2b>:
 8008f60:	b510      	push	{r4, lr}
 8008f62:	460c      	mov	r4, r1
 8008f64:	2101      	movs	r1, #1
 8008f66:	f7ff ff03 	bl	8008d70 <_Balloc>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	b928      	cbnz	r0, 8008f7a <__i2b+0x1a>
 8008f6e:	4b05      	ldr	r3, [pc, #20]	; (8008f84 <__i2b+0x24>)
 8008f70:	4805      	ldr	r0, [pc, #20]	; (8008f88 <__i2b+0x28>)
 8008f72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f76:	f000 fd35 	bl	80099e4 <__assert_func>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	6144      	str	r4, [r0, #20]
 8008f7e:	6103      	str	r3, [r0, #16]
 8008f80:	bd10      	pop	{r4, pc}
 8008f82:	bf00      	nop
 8008f84:	08009dfb 	.word	0x08009dfb
 8008f88:	08009e6c 	.word	0x08009e6c

08008f8c <__multiply>:
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	4691      	mov	r9, r2
 8008f92:	690a      	ldr	r2, [r1, #16]
 8008f94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	bfb8      	it	lt
 8008f9c:	460b      	movlt	r3, r1
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	bfbc      	itt	lt
 8008fa2:	464c      	movlt	r4, r9
 8008fa4:	4699      	movlt	r9, r3
 8008fa6:	6927      	ldr	r7, [r4, #16]
 8008fa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fac:	68a3      	ldr	r3, [r4, #8]
 8008fae:	6861      	ldr	r1, [r4, #4]
 8008fb0:	eb07 060a 	add.w	r6, r7, sl
 8008fb4:	42b3      	cmp	r3, r6
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	bfb8      	it	lt
 8008fba:	3101      	addlt	r1, #1
 8008fbc:	f7ff fed8 	bl	8008d70 <_Balloc>
 8008fc0:	b930      	cbnz	r0, 8008fd0 <__multiply+0x44>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	4b44      	ldr	r3, [pc, #272]	; (80090d8 <__multiply+0x14c>)
 8008fc6:	4845      	ldr	r0, [pc, #276]	; (80090dc <__multiply+0x150>)
 8008fc8:	f240 115d 	movw	r1, #349	; 0x15d
 8008fcc:	f000 fd0a 	bl	80099e4 <__assert_func>
 8008fd0:	f100 0514 	add.w	r5, r0, #20
 8008fd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008fd8:	462b      	mov	r3, r5
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4543      	cmp	r3, r8
 8008fde:	d321      	bcc.n	8009024 <__multiply+0x98>
 8008fe0:	f104 0314 	add.w	r3, r4, #20
 8008fe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008fe8:	f109 0314 	add.w	r3, r9, #20
 8008fec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ff0:	9202      	str	r2, [sp, #8]
 8008ff2:	1b3a      	subs	r2, r7, r4
 8008ff4:	3a15      	subs	r2, #21
 8008ff6:	f022 0203 	bic.w	r2, r2, #3
 8008ffa:	3204      	adds	r2, #4
 8008ffc:	f104 0115 	add.w	r1, r4, #21
 8009000:	428f      	cmp	r7, r1
 8009002:	bf38      	it	cc
 8009004:	2204      	movcc	r2, #4
 8009006:	9201      	str	r2, [sp, #4]
 8009008:	9a02      	ldr	r2, [sp, #8]
 800900a:	9303      	str	r3, [sp, #12]
 800900c:	429a      	cmp	r2, r3
 800900e:	d80c      	bhi.n	800902a <__multiply+0x9e>
 8009010:	2e00      	cmp	r6, #0
 8009012:	dd03      	ble.n	800901c <__multiply+0x90>
 8009014:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009018:	2b00      	cmp	r3, #0
 800901a:	d05a      	beq.n	80090d2 <__multiply+0x146>
 800901c:	6106      	str	r6, [r0, #16]
 800901e:	b005      	add	sp, #20
 8009020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009024:	f843 2b04 	str.w	r2, [r3], #4
 8009028:	e7d8      	b.n	8008fdc <__multiply+0x50>
 800902a:	f8b3 a000 	ldrh.w	sl, [r3]
 800902e:	f1ba 0f00 	cmp.w	sl, #0
 8009032:	d024      	beq.n	800907e <__multiply+0xf2>
 8009034:	f104 0e14 	add.w	lr, r4, #20
 8009038:	46a9      	mov	r9, r5
 800903a:	f04f 0c00 	mov.w	ip, #0
 800903e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009042:	f8d9 1000 	ldr.w	r1, [r9]
 8009046:	fa1f fb82 	uxth.w	fp, r2
 800904a:	b289      	uxth	r1, r1
 800904c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009050:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009054:	f8d9 2000 	ldr.w	r2, [r9]
 8009058:	4461      	add	r1, ip
 800905a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800905e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009062:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009066:	b289      	uxth	r1, r1
 8009068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800906c:	4577      	cmp	r7, lr
 800906e:	f849 1b04 	str.w	r1, [r9], #4
 8009072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009076:	d8e2      	bhi.n	800903e <__multiply+0xb2>
 8009078:	9a01      	ldr	r2, [sp, #4]
 800907a:	f845 c002 	str.w	ip, [r5, r2]
 800907e:	9a03      	ldr	r2, [sp, #12]
 8009080:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009084:	3304      	adds	r3, #4
 8009086:	f1b9 0f00 	cmp.w	r9, #0
 800908a:	d020      	beq.n	80090ce <__multiply+0x142>
 800908c:	6829      	ldr	r1, [r5, #0]
 800908e:	f104 0c14 	add.w	ip, r4, #20
 8009092:	46ae      	mov	lr, r5
 8009094:	f04f 0a00 	mov.w	sl, #0
 8009098:	f8bc b000 	ldrh.w	fp, [ip]
 800909c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80090a0:	fb09 220b 	mla	r2, r9, fp, r2
 80090a4:	4492      	add	sl, r2
 80090a6:	b289      	uxth	r1, r1
 80090a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80090ac:	f84e 1b04 	str.w	r1, [lr], #4
 80090b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80090b4:	f8be 1000 	ldrh.w	r1, [lr]
 80090b8:	0c12      	lsrs	r2, r2, #16
 80090ba:	fb09 1102 	mla	r1, r9, r2, r1
 80090be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80090c2:	4567      	cmp	r7, ip
 80090c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090c8:	d8e6      	bhi.n	8009098 <__multiply+0x10c>
 80090ca:	9a01      	ldr	r2, [sp, #4]
 80090cc:	50a9      	str	r1, [r5, r2]
 80090ce:	3504      	adds	r5, #4
 80090d0:	e79a      	b.n	8009008 <__multiply+0x7c>
 80090d2:	3e01      	subs	r6, #1
 80090d4:	e79c      	b.n	8009010 <__multiply+0x84>
 80090d6:	bf00      	nop
 80090d8:	08009dfb 	.word	0x08009dfb
 80090dc:	08009e6c 	.word	0x08009e6c

080090e0 <__pow5mult>:
 80090e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e4:	4615      	mov	r5, r2
 80090e6:	f012 0203 	ands.w	r2, r2, #3
 80090ea:	4606      	mov	r6, r0
 80090ec:	460f      	mov	r7, r1
 80090ee:	d007      	beq.n	8009100 <__pow5mult+0x20>
 80090f0:	4c25      	ldr	r4, [pc, #148]	; (8009188 <__pow5mult+0xa8>)
 80090f2:	3a01      	subs	r2, #1
 80090f4:	2300      	movs	r3, #0
 80090f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090fa:	f7ff fe9b 	bl	8008e34 <__multadd>
 80090fe:	4607      	mov	r7, r0
 8009100:	10ad      	asrs	r5, r5, #2
 8009102:	d03d      	beq.n	8009180 <__pow5mult+0xa0>
 8009104:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009106:	b97c      	cbnz	r4, 8009128 <__pow5mult+0x48>
 8009108:	2010      	movs	r0, #16
 800910a:	f7ff fe1b 	bl	8008d44 <malloc>
 800910e:	4602      	mov	r2, r0
 8009110:	6270      	str	r0, [r6, #36]	; 0x24
 8009112:	b928      	cbnz	r0, 8009120 <__pow5mult+0x40>
 8009114:	4b1d      	ldr	r3, [pc, #116]	; (800918c <__pow5mult+0xac>)
 8009116:	481e      	ldr	r0, [pc, #120]	; (8009190 <__pow5mult+0xb0>)
 8009118:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800911c:	f000 fc62 	bl	80099e4 <__assert_func>
 8009120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009124:	6004      	str	r4, [r0, #0]
 8009126:	60c4      	str	r4, [r0, #12]
 8009128:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800912c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009130:	b94c      	cbnz	r4, 8009146 <__pow5mult+0x66>
 8009132:	f240 2171 	movw	r1, #625	; 0x271
 8009136:	4630      	mov	r0, r6
 8009138:	f7ff ff12 	bl	8008f60 <__i2b>
 800913c:	2300      	movs	r3, #0
 800913e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009142:	4604      	mov	r4, r0
 8009144:	6003      	str	r3, [r0, #0]
 8009146:	f04f 0900 	mov.w	r9, #0
 800914a:	07eb      	lsls	r3, r5, #31
 800914c:	d50a      	bpl.n	8009164 <__pow5mult+0x84>
 800914e:	4639      	mov	r1, r7
 8009150:	4622      	mov	r2, r4
 8009152:	4630      	mov	r0, r6
 8009154:	f7ff ff1a 	bl	8008f8c <__multiply>
 8009158:	4639      	mov	r1, r7
 800915a:	4680      	mov	r8, r0
 800915c:	4630      	mov	r0, r6
 800915e:	f7ff fe47 	bl	8008df0 <_Bfree>
 8009162:	4647      	mov	r7, r8
 8009164:	106d      	asrs	r5, r5, #1
 8009166:	d00b      	beq.n	8009180 <__pow5mult+0xa0>
 8009168:	6820      	ldr	r0, [r4, #0]
 800916a:	b938      	cbnz	r0, 800917c <__pow5mult+0x9c>
 800916c:	4622      	mov	r2, r4
 800916e:	4621      	mov	r1, r4
 8009170:	4630      	mov	r0, r6
 8009172:	f7ff ff0b 	bl	8008f8c <__multiply>
 8009176:	6020      	str	r0, [r4, #0]
 8009178:	f8c0 9000 	str.w	r9, [r0]
 800917c:	4604      	mov	r4, r0
 800917e:	e7e4      	b.n	800914a <__pow5mult+0x6a>
 8009180:	4638      	mov	r0, r7
 8009182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009186:	bf00      	nop
 8009188:	08009fb8 	.word	0x08009fb8
 800918c:	08009d89 	.word	0x08009d89
 8009190:	08009e6c 	.word	0x08009e6c

08009194 <__lshift>:
 8009194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009198:	460c      	mov	r4, r1
 800919a:	6849      	ldr	r1, [r1, #4]
 800919c:	6923      	ldr	r3, [r4, #16]
 800919e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091a2:	68a3      	ldr	r3, [r4, #8]
 80091a4:	4607      	mov	r7, r0
 80091a6:	4691      	mov	r9, r2
 80091a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091ac:	f108 0601 	add.w	r6, r8, #1
 80091b0:	42b3      	cmp	r3, r6
 80091b2:	db0b      	blt.n	80091cc <__lshift+0x38>
 80091b4:	4638      	mov	r0, r7
 80091b6:	f7ff fddb 	bl	8008d70 <_Balloc>
 80091ba:	4605      	mov	r5, r0
 80091bc:	b948      	cbnz	r0, 80091d2 <__lshift+0x3e>
 80091be:	4602      	mov	r2, r0
 80091c0:	4b2a      	ldr	r3, [pc, #168]	; (800926c <__lshift+0xd8>)
 80091c2:	482b      	ldr	r0, [pc, #172]	; (8009270 <__lshift+0xdc>)
 80091c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091c8:	f000 fc0c 	bl	80099e4 <__assert_func>
 80091cc:	3101      	adds	r1, #1
 80091ce:	005b      	lsls	r3, r3, #1
 80091d0:	e7ee      	b.n	80091b0 <__lshift+0x1c>
 80091d2:	2300      	movs	r3, #0
 80091d4:	f100 0114 	add.w	r1, r0, #20
 80091d8:	f100 0210 	add.w	r2, r0, #16
 80091dc:	4618      	mov	r0, r3
 80091de:	4553      	cmp	r3, sl
 80091e0:	db37      	blt.n	8009252 <__lshift+0xbe>
 80091e2:	6920      	ldr	r0, [r4, #16]
 80091e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091e8:	f104 0314 	add.w	r3, r4, #20
 80091ec:	f019 091f 	ands.w	r9, r9, #31
 80091f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80091f8:	d02f      	beq.n	800925a <__lshift+0xc6>
 80091fa:	f1c9 0e20 	rsb	lr, r9, #32
 80091fe:	468a      	mov	sl, r1
 8009200:	f04f 0c00 	mov.w	ip, #0
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	fa02 f209 	lsl.w	r2, r2, r9
 800920a:	ea42 020c 	orr.w	r2, r2, ip
 800920e:	f84a 2b04 	str.w	r2, [sl], #4
 8009212:	f853 2b04 	ldr.w	r2, [r3], #4
 8009216:	4298      	cmp	r0, r3
 8009218:	fa22 fc0e 	lsr.w	ip, r2, lr
 800921c:	d8f2      	bhi.n	8009204 <__lshift+0x70>
 800921e:	1b03      	subs	r3, r0, r4
 8009220:	3b15      	subs	r3, #21
 8009222:	f023 0303 	bic.w	r3, r3, #3
 8009226:	3304      	adds	r3, #4
 8009228:	f104 0215 	add.w	r2, r4, #21
 800922c:	4290      	cmp	r0, r2
 800922e:	bf38      	it	cc
 8009230:	2304      	movcc	r3, #4
 8009232:	f841 c003 	str.w	ip, [r1, r3]
 8009236:	f1bc 0f00 	cmp.w	ip, #0
 800923a:	d001      	beq.n	8009240 <__lshift+0xac>
 800923c:	f108 0602 	add.w	r6, r8, #2
 8009240:	3e01      	subs	r6, #1
 8009242:	4638      	mov	r0, r7
 8009244:	612e      	str	r6, [r5, #16]
 8009246:	4621      	mov	r1, r4
 8009248:	f7ff fdd2 	bl	8008df0 <_Bfree>
 800924c:	4628      	mov	r0, r5
 800924e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009252:	f842 0f04 	str.w	r0, [r2, #4]!
 8009256:	3301      	adds	r3, #1
 8009258:	e7c1      	b.n	80091de <__lshift+0x4a>
 800925a:	3904      	subs	r1, #4
 800925c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009260:	f841 2f04 	str.w	r2, [r1, #4]!
 8009264:	4298      	cmp	r0, r3
 8009266:	d8f9      	bhi.n	800925c <__lshift+0xc8>
 8009268:	e7ea      	b.n	8009240 <__lshift+0xac>
 800926a:	bf00      	nop
 800926c:	08009dfb 	.word	0x08009dfb
 8009270:	08009e6c 	.word	0x08009e6c

08009274 <__mcmp>:
 8009274:	b530      	push	{r4, r5, lr}
 8009276:	6902      	ldr	r2, [r0, #16]
 8009278:	690c      	ldr	r4, [r1, #16]
 800927a:	1b12      	subs	r2, r2, r4
 800927c:	d10e      	bne.n	800929c <__mcmp+0x28>
 800927e:	f100 0314 	add.w	r3, r0, #20
 8009282:	3114      	adds	r1, #20
 8009284:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009288:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800928c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009290:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009294:	42a5      	cmp	r5, r4
 8009296:	d003      	beq.n	80092a0 <__mcmp+0x2c>
 8009298:	d305      	bcc.n	80092a6 <__mcmp+0x32>
 800929a:	2201      	movs	r2, #1
 800929c:	4610      	mov	r0, r2
 800929e:	bd30      	pop	{r4, r5, pc}
 80092a0:	4283      	cmp	r3, r0
 80092a2:	d3f3      	bcc.n	800928c <__mcmp+0x18>
 80092a4:	e7fa      	b.n	800929c <__mcmp+0x28>
 80092a6:	f04f 32ff 	mov.w	r2, #4294967295
 80092aa:	e7f7      	b.n	800929c <__mcmp+0x28>

080092ac <__mdiff>:
 80092ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b0:	460c      	mov	r4, r1
 80092b2:	4606      	mov	r6, r0
 80092b4:	4611      	mov	r1, r2
 80092b6:	4620      	mov	r0, r4
 80092b8:	4690      	mov	r8, r2
 80092ba:	f7ff ffdb 	bl	8009274 <__mcmp>
 80092be:	1e05      	subs	r5, r0, #0
 80092c0:	d110      	bne.n	80092e4 <__mdiff+0x38>
 80092c2:	4629      	mov	r1, r5
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff fd53 	bl	8008d70 <_Balloc>
 80092ca:	b930      	cbnz	r0, 80092da <__mdiff+0x2e>
 80092cc:	4b3a      	ldr	r3, [pc, #232]	; (80093b8 <__mdiff+0x10c>)
 80092ce:	4602      	mov	r2, r0
 80092d0:	f240 2132 	movw	r1, #562	; 0x232
 80092d4:	4839      	ldr	r0, [pc, #228]	; (80093bc <__mdiff+0x110>)
 80092d6:	f000 fb85 	bl	80099e4 <__assert_func>
 80092da:	2301      	movs	r3, #1
 80092dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e4:	bfa4      	itt	ge
 80092e6:	4643      	movge	r3, r8
 80092e8:	46a0      	movge	r8, r4
 80092ea:	4630      	mov	r0, r6
 80092ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80092f0:	bfa6      	itte	ge
 80092f2:	461c      	movge	r4, r3
 80092f4:	2500      	movge	r5, #0
 80092f6:	2501      	movlt	r5, #1
 80092f8:	f7ff fd3a 	bl	8008d70 <_Balloc>
 80092fc:	b920      	cbnz	r0, 8009308 <__mdiff+0x5c>
 80092fe:	4b2e      	ldr	r3, [pc, #184]	; (80093b8 <__mdiff+0x10c>)
 8009300:	4602      	mov	r2, r0
 8009302:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009306:	e7e5      	b.n	80092d4 <__mdiff+0x28>
 8009308:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800930c:	6926      	ldr	r6, [r4, #16]
 800930e:	60c5      	str	r5, [r0, #12]
 8009310:	f104 0914 	add.w	r9, r4, #20
 8009314:	f108 0514 	add.w	r5, r8, #20
 8009318:	f100 0e14 	add.w	lr, r0, #20
 800931c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009320:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009324:	f108 0210 	add.w	r2, r8, #16
 8009328:	46f2      	mov	sl, lr
 800932a:	2100      	movs	r1, #0
 800932c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009330:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009334:	fa1f f883 	uxth.w	r8, r3
 8009338:	fa11 f18b 	uxtah	r1, r1, fp
 800933c:	0c1b      	lsrs	r3, r3, #16
 800933e:	eba1 0808 	sub.w	r8, r1, r8
 8009342:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009346:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800934a:	fa1f f888 	uxth.w	r8, r8
 800934e:	1419      	asrs	r1, r3, #16
 8009350:	454e      	cmp	r6, r9
 8009352:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009356:	f84a 3b04 	str.w	r3, [sl], #4
 800935a:	d8e7      	bhi.n	800932c <__mdiff+0x80>
 800935c:	1b33      	subs	r3, r6, r4
 800935e:	3b15      	subs	r3, #21
 8009360:	f023 0303 	bic.w	r3, r3, #3
 8009364:	3304      	adds	r3, #4
 8009366:	3415      	adds	r4, #21
 8009368:	42a6      	cmp	r6, r4
 800936a:	bf38      	it	cc
 800936c:	2304      	movcc	r3, #4
 800936e:	441d      	add	r5, r3
 8009370:	4473      	add	r3, lr
 8009372:	469e      	mov	lr, r3
 8009374:	462e      	mov	r6, r5
 8009376:	4566      	cmp	r6, ip
 8009378:	d30e      	bcc.n	8009398 <__mdiff+0xec>
 800937a:	f10c 0203 	add.w	r2, ip, #3
 800937e:	1b52      	subs	r2, r2, r5
 8009380:	f022 0203 	bic.w	r2, r2, #3
 8009384:	3d03      	subs	r5, #3
 8009386:	45ac      	cmp	ip, r5
 8009388:	bf38      	it	cc
 800938a:	2200      	movcc	r2, #0
 800938c:	441a      	add	r2, r3
 800938e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009392:	b17b      	cbz	r3, 80093b4 <__mdiff+0x108>
 8009394:	6107      	str	r7, [r0, #16]
 8009396:	e7a3      	b.n	80092e0 <__mdiff+0x34>
 8009398:	f856 8b04 	ldr.w	r8, [r6], #4
 800939c:	fa11 f288 	uxtah	r2, r1, r8
 80093a0:	1414      	asrs	r4, r2, #16
 80093a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80093a6:	b292      	uxth	r2, r2
 80093a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80093ac:	f84e 2b04 	str.w	r2, [lr], #4
 80093b0:	1421      	asrs	r1, r4, #16
 80093b2:	e7e0      	b.n	8009376 <__mdiff+0xca>
 80093b4:	3f01      	subs	r7, #1
 80093b6:	e7ea      	b.n	800938e <__mdiff+0xe2>
 80093b8:	08009dfb 	.word	0x08009dfb
 80093bc:	08009e6c 	.word	0x08009e6c

080093c0 <__d2b>:
 80093c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093c4:	4689      	mov	r9, r1
 80093c6:	2101      	movs	r1, #1
 80093c8:	ec57 6b10 	vmov	r6, r7, d0
 80093cc:	4690      	mov	r8, r2
 80093ce:	f7ff fccf 	bl	8008d70 <_Balloc>
 80093d2:	4604      	mov	r4, r0
 80093d4:	b930      	cbnz	r0, 80093e4 <__d2b+0x24>
 80093d6:	4602      	mov	r2, r0
 80093d8:	4b25      	ldr	r3, [pc, #148]	; (8009470 <__d2b+0xb0>)
 80093da:	4826      	ldr	r0, [pc, #152]	; (8009474 <__d2b+0xb4>)
 80093dc:	f240 310a 	movw	r1, #778	; 0x30a
 80093e0:	f000 fb00 	bl	80099e4 <__assert_func>
 80093e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093ec:	bb35      	cbnz	r5, 800943c <__d2b+0x7c>
 80093ee:	2e00      	cmp	r6, #0
 80093f0:	9301      	str	r3, [sp, #4]
 80093f2:	d028      	beq.n	8009446 <__d2b+0x86>
 80093f4:	4668      	mov	r0, sp
 80093f6:	9600      	str	r6, [sp, #0]
 80093f8:	f7ff fd82 	bl	8008f00 <__lo0bits>
 80093fc:	9900      	ldr	r1, [sp, #0]
 80093fe:	b300      	cbz	r0, 8009442 <__d2b+0x82>
 8009400:	9a01      	ldr	r2, [sp, #4]
 8009402:	f1c0 0320 	rsb	r3, r0, #32
 8009406:	fa02 f303 	lsl.w	r3, r2, r3
 800940a:	430b      	orrs	r3, r1
 800940c:	40c2      	lsrs	r2, r0
 800940e:	6163      	str	r3, [r4, #20]
 8009410:	9201      	str	r2, [sp, #4]
 8009412:	9b01      	ldr	r3, [sp, #4]
 8009414:	61a3      	str	r3, [r4, #24]
 8009416:	2b00      	cmp	r3, #0
 8009418:	bf14      	ite	ne
 800941a:	2202      	movne	r2, #2
 800941c:	2201      	moveq	r2, #1
 800941e:	6122      	str	r2, [r4, #16]
 8009420:	b1d5      	cbz	r5, 8009458 <__d2b+0x98>
 8009422:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009426:	4405      	add	r5, r0
 8009428:	f8c9 5000 	str.w	r5, [r9]
 800942c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009430:	f8c8 0000 	str.w	r0, [r8]
 8009434:	4620      	mov	r0, r4
 8009436:	b003      	add	sp, #12
 8009438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800943c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009440:	e7d5      	b.n	80093ee <__d2b+0x2e>
 8009442:	6161      	str	r1, [r4, #20]
 8009444:	e7e5      	b.n	8009412 <__d2b+0x52>
 8009446:	a801      	add	r0, sp, #4
 8009448:	f7ff fd5a 	bl	8008f00 <__lo0bits>
 800944c:	9b01      	ldr	r3, [sp, #4]
 800944e:	6163      	str	r3, [r4, #20]
 8009450:	2201      	movs	r2, #1
 8009452:	6122      	str	r2, [r4, #16]
 8009454:	3020      	adds	r0, #32
 8009456:	e7e3      	b.n	8009420 <__d2b+0x60>
 8009458:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800945c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009460:	f8c9 0000 	str.w	r0, [r9]
 8009464:	6918      	ldr	r0, [r3, #16]
 8009466:	f7ff fd2b 	bl	8008ec0 <__hi0bits>
 800946a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800946e:	e7df      	b.n	8009430 <__d2b+0x70>
 8009470:	08009dfb 	.word	0x08009dfb
 8009474:	08009e6c 	.word	0x08009e6c

08009478 <_calloc_r>:
 8009478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800947a:	fba1 2402 	umull	r2, r4, r1, r2
 800947e:	b94c      	cbnz	r4, 8009494 <_calloc_r+0x1c>
 8009480:	4611      	mov	r1, r2
 8009482:	9201      	str	r2, [sp, #4]
 8009484:	f000 f87a 	bl	800957c <_malloc_r>
 8009488:	9a01      	ldr	r2, [sp, #4]
 800948a:	4605      	mov	r5, r0
 800948c:	b930      	cbnz	r0, 800949c <_calloc_r+0x24>
 800948e:	4628      	mov	r0, r5
 8009490:	b003      	add	sp, #12
 8009492:	bd30      	pop	{r4, r5, pc}
 8009494:	220c      	movs	r2, #12
 8009496:	6002      	str	r2, [r0, #0]
 8009498:	2500      	movs	r5, #0
 800949a:	e7f8      	b.n	800948e <_calloc_r+0x16>
 800949c:	4621      	mov	r1, r4
 800949e:	f7fd fdf1 	bl	8007084 <memset>
 80094a2:	e7f4      	b.n	800948e <_calloc_r+0x16>

080094a4 <_free_r>:
 80094a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094a6:	2900      	cmp	r1, #0
 80094a8:	d044      	beq.n	8009534 <_free_r+0x90>
 80094aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ae:	9001      	str	r0, [sp, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f1a1 0404 	sub.w	r4, r1, #4
 80094b6:	bfb8      	it	lt
 80094b8:	18e4      	addlt	r4, r4, r3
 80094ba:	f000 fb19 	bl	8009af0 <__malloc_lock>
 80094be:	4a1e      	ldr	r2, [pc, #120]	; (8009538 <_free_r+0x94>)
 80094c0:	9801      	ldr	r0, [sp, #4]
 80094c2:	6813      	ldr	r3, [r2, #0]
 80094c4:	b933      	cbnz	r3, 80094d4 <_free_r+0x30>
 80094c6:	6063      	str	r3, [r4, #4]
 80094c8:	6014      	str	r4, [r2, #0]
 80094ca:	b003      	add	sp, #12
 80094cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094d0:	f000 bb14 	b.w	8009afc <__malloc_unlock>
 80094d4:	42a3      	cmp	r3, r4
 80094d6:	d908      	bls.n	80094ea <_free_r+0x46>
 80094d8:	6825      	ldr	r5, [r4, #0]
 80094da:	1961      	adds	r1, r4, r5
 80094dc:	428b      	cmp	r3, r1
 80094de:	bf01      	itttt	eq
 80094e0:	6819      	ldreq	r1, [r3, #0]
 80094e2:	685b      	ldreq	r3, [r3, #4]
 80094e4:	1949      	addeq	r1, r1, r5
 80094e6:	6021      	streq	r1, [r4, #0]
 80094e8:	e7ed      	b.n	80094c6 <_free_r+0x22>
 80094ea:	461a      	mov	r2, r3
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	b10b      	cbz	r3, 80094f4 <_free_r+0x50>
 80094f0:	42a3      	cmp	r3, r4
 80094f2:	d9fa      	bls.n	80094ea <_free_r+0x46>
 80094f4:	6811      	ldr	r1, [r2, #0]
 80094f6:	1855      	adds	r5, r2, r1
 80094f8:	42a5      	cmp	r5, r4
 80094fa:	d10b      	bne.n	8009514 <_free_r+0x70>
 80094fc:	6824      	ldr	r4, [r4, #0]
 80094fe:	4421      	add	r1, r4
 8009500:	1854      	adds	r4, r2, r1
 8009502:	42a3      	cmp	r3, r4
 8009504:	6011      	str	r1, [r2, #0]
 8009506:	d1e0      	bne.n	80094ca <_free_r+0x26>
 8009508:	681c      	ldr	r4, [r3, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	6053      	str	r3, [r2, #4]
 800950e:	4421      	add	r1, r4
 8009510:	6011      	str	r1, [r2, #0]
 8009512:	e7da      	b.n	80094ca <_free_r+0x26>
 8009514:	d902      	bls.n	800951c <_free_r+0x78>
 8009516:	230c      	movs	r3, #12
 8009518:	6003      	str	r3, [r0, #0]
 800951a:	e7d6      	b.n	80094ca <_free_r+0x26>
 800951c:	6825      	ldr	r5, [r4, #0]
 800951e:	1961      	adds	r1, r4, r5
 8009520:	428b      	cmp	r3, r1
 8009522:	bf04      	itt	eq
 8009524:	6819      	ldreq	r1, [r3, #0]
 8009526:	685b      	ldreq	r3, [r3, #4]
 8009528:	6063      	str	r3, [r4, #4]
 800952a:	bf04      	itt	eq
 800952c:	1949      	addeq	r1, r1, r5
 800952e:	6021      	streq	r1, [r4, #0]
 8009530:	6054      	str	r4, [r2, #4]
 8009532:	e7ca      	b.n	80094ca <_free_r+0x26>
 8009534:	b003      	add	sp, #12
 8009536:	bd30      	pop	{r4, r5, pc}
 8009538:	2000057c 	.word	0x2000057c

0800953c <sbrk_aligned>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	4e0e      	ldr	r6, [pc, #56]	; (8009578 <sbrk_aligned+0x3c>)
 8009540:	460c      	mov	r4, r1
 8009542:	6831      	ldr	r1, [r6, #0]
 8009544:	4605      	mov	r5, r0
 8009546:	b911      	cbnz	r1, 800954e <sbrk_aligned+0x12>
 8009548:	f000 f9e6 	bl	8009918 <_sbrk_r>
 800954c:	6030      	str	r0, [r6, #0]
 800954e:	4621      	mov	r1, r4
 8009550:	4628      	mov	r0, r5
 8009552:	f000 f9e1 	bl	8009918 <_sbrk_r>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	d00a      	beq.n	8009570 <sbrk_aligned+0x34>
 800955a:	1cc4      	adds	r4, r0, #3
 800955c:	f024 0403 	bic.w	r4, r4, #3
 8009560:	42a0      	cmp	r0, r4
 8009562:	d007      	beq.n	8009574 <sbrk_aligned+0x38>
 8009564:	1a21      	subs	r1, r4, r0
 8009566:	4628      	mov	r0, r5
 8009568:	f000 f9d6 	bl	8009918 <_sbrk_r>
 800956c:	3001      	adds	r0, #1
 800956e:	d101      	bne.n	8009574 <sbrk_aligned+0x38>
 8009570:	f04f 34ff 	mov.w	r4, #4294967295
 8009574:	4620      	mov	r0, r4
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	20000580 	.word	0x20000580

0800957c <_malloc_r>:
 800957c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009580:	1ccd      	adds	r5, r1, #3
 8009582:	f025 0503 	bic.w	r5, r5, #3
 8009586:	3508      	adds	r5, #8
 8009588:	2d0c      	cmp	r5, #12
 800958a:	bf38      	it	cc
 800958c:	250c      	movcc	r5, #12
 800958e:	2d00      	cmp	r5, #0
 8009590:	4607      	mov	r7, r0
 8009592:	db01      	blt.n	8009598 <_malloc_r+0x1c>
 8009594:	42a9      	cmp	r1, r5
 8009596:	d905      	bls.n	80095a4 <_malloc_r+0x28>
 8009598:	230c      	movs	r3, #12
 800959a:	603b      	str	r3, [r7, #0]
 800959c:	2600      	movs	r6, #0
 800959e:	4630      	mov	r0, r6
 80095a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a4:	4e2e      	ldr	r6, [pc, #184]	; (8009660 <_malloc_r+0xe4>)
 80095a6:	f000 faa3 	bl	8009af0 <__malloc_lock>
 80095aa:	6833      	ldr	r3, [r6, #0]
 80095ac:	461c      	mov	r4, r3
 80095ae:	bb34      	cbnz	r4, 80095fe <_malloc_r+0x82>
 80095b0:	4629      	mov	r1, r5
 80095b2:	4638      	mov	r0, r7
 80095b4:	f7ff ffc2 	bl	800953c <sbrk_aligned>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	4604      	mov	r4, r0
 80095bc:	d14d      	bne.n	800965a <_malloc_r+0xde>
 80095be:	6834      	ldr	r4, [r6, #0]
 80095c0:	4626      	mov	r6, r4
 80095c2:	2e00      	cmp	r6, #0
 80095c4:	d140      	bne.n	8009648 <_malloc_r+0xcc>
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	4631      	mov	r1, r6
 80095ca:	4638      	mov	r0, r7
 80095cc:	eb04 0803 	add.w	r8, r4, r3
 80095d0:	f000 f9a2 	bl	8009918 <_sbrk_r>
 80095d4:	4580      	cmp	r8, r0
 80095d6:	d13a      	bne.n	800964e <_malloc_r+0xd2>
 80095d8:	6821      	ldr	r1, [r4, #0]
 80095da:	3503      	adds	r5, #3
 80095dc:	1a6d      	subs	r5, r5, r1
 80095de:	f025 0503 	bic.w	r5, r5, #3
 80095e2:	3508      	adds	r5, #8
 80095e4:	2d0c      	cmp	r5, #12
 80095e6:	bf38      	it	cc
 80095e8:	250c      	movcc	r5, #12
 80095ea:	4629      	mov	r1, r5
 80095ec:	4638      	mov	r0, r7
 80095ee:	f7ff ffa5 	bl	800953c <sbrk_aligned>
 80095f2:	3001      	adds	r0, #1
 80095f4:	d02b      	beq.n	800964e <_malloc_r+0xd2>
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	442b      	add	r3, r5
 80095fa:	6023      	str	r3, [r4, #0]
 80095fc:	e00e      	b.n	800961c <_malloc_r+0xa0>
 80095fe:	6822      	ldr	r2, [r4, #0]
 8009600:	1b52      	subs	r2, r2, r5
 8009602:	d41e      	bmi.n	8009642 <_malloc_r+0xc6>
 8009604:	2a0b      	cmp	r2, #11
 8009606:	d916      	bls.n	8009636 <_malloc_r+0xba>
 8009608:	1961      	adds	r1, r4, r5
 800960a:	42a3      	cmp	r3, r4
 800960c:	6025      	str	r5, [r4, #0]
 800960e:	bf18      	it	ne
 8009610:	6059      	strne	r1, [r3, #4]
 8009612:	6863      	ldr	r3, [r4, #4]
 8009614:	bf08      	it	eq
 8009616:	6031      	streq	r1, [r6, #0]
 8009618:	5162      	str	r2, [r4, r5]
 800961a:	604b      	str	r3, [r1, #4]
 800961c:	4638      	mov	r0, r7
 800961e:	f104 060b 	add.w	r6, r4, #11
 8009622:	f000 fa6b 	bl	8009afc <__malloc_unlock>
 8009626:	f026 0607 	bic.w	r6, r6, #7
 800962a:	1d23      	adds	r3, r4, #4
 800962c:	1af2      	subs	r2, r6, r3
 800962e:	d0b6      	beq.n	800959e <_malloc_r+0x22>
 8009630:	1b9b      	subs	r3, r3, r6
 8009632:	50a3      	str	r3, [r4, r2]
 8009634:	e7b3      	b.n	800959e <_malloc_r+0x22>
 8009636:	6862      	ldr	r2, [r4, #4]
 8009638:	42a3      	cmp	r3, r4
 800963a:	bf0c      	ite	eq
 800963c:	6032      	streq	r2, [r6, #0]
 800963e:	605a      	strne	r2, [r3, #4]
 8009640:	e7ec      	b.n	800961c <_malloc_r+0xa0>
 8009642:	4623      	mov	r3, r4
 8009644:	6864      	ldr	r4, [r4, #4]
 8009646:	e7b2      	b.n	80095ae <_malloc_r+0x32>
 8009648:	4634      	mov	r4, r6
 800964a:	6876      	ldr	r6, [r6, #4]
 800964c:	e7b9      	b.n	80095c2 <_malloc_r+0x46>
 800964e:	230c      	movs	r3, #12
 8009650:	603b      	str	r3, [r7, #0]
 8009652:	4638      	mov	r0, r7
 8009654:	f000 fa52 	bl	8009afc <__malloc_unlock>
 8009658:	e7a1      	b.n	800959e <_malloc_r+0x22>
 800965a:	6025      	str	r5, [r4, #0]
 800965c:	e7de      	b.n	800961c <_malloc_r+0xa0>
 800965e:	bf00      	nop
 8009660:	2000057c 	.word	0x2000057c

08009664 <__sfputc_r>:
 8009664:	6893      	ldr	r3, [r2, #8]
 8009666:	3b01      	subs	r3, #1
 8009668:	2b00      	cmp	r3, #0
 800966a:	b410      	push	{r4}
 800966c:	6093      	str	r3, [r2, #8]
 800966e:	da08      	bge.n	8009682 <__sfputc_r+0x1e>
 8009670:	6994      	ldr	r4, [r2, #24]
 8009672:	42a3      	cmp	r3, r4
 8009674:	db01      	blt.n	800967a <__sfputc_r+0x16>
 8009676:	290a      	cmp	r1, #10
 8009678:	d103      	bne.n	8009682 <__sfputc_r+0x1e>
 800967a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800967e:	f7fe ba01 	b.w	8007a84 <__swbuf_r>
 8009682:	6813      	ldr	r3, [r2, #0]
 8009684:	1c58      	adds	r0, r3, #1
 8009686:	6010      	str	r0, [r2, #0]
 8009688:	7019      	strb	r1, [r3, #0]
 800968a:	4608      	mov	r0, r1
 800968c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009690:	4770      	bx	lr

08009692 <__sfputs_r>:
 8009692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009694:	4606      	mov	r6, r0
 8009696:	460f      	mov	r7, r1
 8009698:	4614      	mov	r4, r2
 800969a:	18d5      	adds	r5, r2, r3
 800969c:	42ac      	cmp	r4, r5
 800969e:	d101      	bne.n	80096a4 <__sfputs_r+0x12>
 80096a0:	2000      	movs	r0, #0
 80096a2:	e007      	b.n	80096b4 <__sfputs_r+0x22>
 80096a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a8:	463a      	mov	r2, r7
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7ff ffda 	bl	8009664 <__sfputc_r>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d1f3      	bne.n	800969c <__sfputs_r+0xa>
 80096b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096b8 <_vfiprintf_r>:
 80096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	460d      	mov	r5, r1
 80096be:	b09d      	sub	sp, #116	; 0x74
 80096c0:	4614      	mov	r4, r2
 80096c2:	4698      	mov	r8, r3
 80096c4:	4606      	mov	r6, r0
 80096c6:	b118      	cbz	r0, 80096d0 <_vfiprintf_r+0x18>
 80096c8:	6983      	ldr	r3, [r0, #24]
 80096ca:	b90b      	cbnz	r3, 80096d0 <_vfiprintf_r+0x18>
 80096cc:	f7ff fa30 	bl	8008b30 <__sinit>
 80096d0:	4b89      	ldr	r3, [pc, #548]	; (80098f8 <_vfiprintf_r+0x240>)
 80096d2:	429d      	cmp	r5, r3
 80096d4:	d11b      	bne.n	800970e <_vfiprintf_r+0x56>
 80096d6:	6875      	ldr	r5, [r6, #4]
 80096d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096da:	07d9      	lsls	r1, r3, #31
 80096dc:	d405      	bmi.n	80096ea <_vfiprintf_r+0x32>
 80096de:	89ab      	ldrh	r3, [r5, #12]
 80096e0:	059a      	lsls	r2, r3, #22
 80096e2:	d402      	bmi.n	80096ea <_vfiprintf_r+0x32>
 80096e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096e6:	f7ff fac6 	bl	8008c76 <__retarget_lock_acquire_recursive>
 80096ea:	89ab      	ldrh	r3, [r5, #12]
 80096ec:	071b      	lsls	r3, r3, #28
 80096ee:	d501      	bpl.n	80096f4 <_vfiprintf_r+0x3c>
 80096f0:	692b      	ldr	r3, [r5, #16]
 80096f2:	b9eb      	cbnz	r3, 8009730 <_vfiprintf_r+0x78>
 80096f4:	4629      	mov	r1, r5
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7fe fa16 	bl	8007b28 <__swsetup_r>
 80096fc:	b1c0      	cbz	r0, 8009730 <_vfiprintf_r+0x78>
 80096fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009700:	07dc      	lsls	r4, r3, #31
 8009702:	d50e      	bpl.n	8009722 <_vfiprintf_r+0x6a>
 8009704:	f04f 30ff 	mov.w	r0, #4294967295
 8009708:	b01d      	add	sp, #116	; 0x74
 800970a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970e:	4b7b      	ldr	r3, [pc, #492]	; (80098fc <_vfiprintf_r+0x244>)
 8009710:	429d      	cmp	r5, r3
 8009712:	d101      	bne.n	8009718 <_vfiprintf_r+0x60>
 8009714:	68b5      	ldr	r5, [r6, #8]
 8009716:	e7df      	b.n	80096d8 <_vfiprintf_r+0x20>
 8009718:	4b79      	ldr	r3, [pc, #484]	; (8009900 <_vfiprintf_r+0x248>)
 800971a:	429d      	cmp	r5, r3
 800971c:	bf08      	it	eq
 800971e:	68f5      	ldreq	r5, [r6, #12]
 8009720:	e7da      	b.n	80096d8 <_vfiprintf_r+0x20>
 8009722:	89ab      	ldrh	r3, [r5, #12]
 8009724:	0598      	lsls	r0, r3, #22
 8009726:	d4ed      	bmi.n	8009704 <_vfiprintf_r+0x4c>
 8009728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800972a:	f7ff faa5 	bl	8008c78 <__retarget_lock_release_recursive>
 800972e:	e7e9      	b.n	8009704 <_vfiprintf_r+0x4c>
 8009730:	2300      	movs	r3, #0
 8009732:	9309      	str	r3, [sp, #36]	; 0x24
 8009734:	2320      	movs	r3, #32
 8009736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800973a:	f8cd 800c 	str.w	r8, [sp, #12]
 800973e:	2330      	movs	r3, #48	; 0x30
 8009740:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009904 <_vfiprintf_r+0x24c>
 8009744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009748:	f04f 0901 	mov.w	r9, #1
 800974c:	4623      	mov	r3, r4
 800974e:	469a      	mov	sl, r3
 8009750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009754:	b10a      	cbz	r2, 800975a <_vfiprintf_r+0xa2>
 8009756:	2a25      	cmp	r2, #37	; 0x25
 8009758:	d1f9      	bne.n	800974e <_vfiprintf_r+0x96>
 800975a:	ebba 0b04 	subs.w	fp, sl, r4
 800975e:	d00b      	beq.n	8009778 <_vfiprintf_r+0xc0>
 8009760:	465b      	mov	r3, fp
 8009762:	4622      	mov	r2, r4
 8009764:	4629      	mov	r1, r5
 8009766:	4630      	mov	r0, r6
 8009768:	f7ff ff93 	bl	8009692 <__sfputs_r>
 800976c:	3001      	adds	r0, #1
 800976e:	f000 80aa 	beq.w	80098c6 <_vfiprintf_r+0x20e>
 8009772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009774:	445a      	add	r2, fp
 8009776:	9209      	str	r2, [sp, #36]	; 0x24
 8009778:	f89a 3000 	ldrb.w	r3, [sl]
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 80a2 	beq.w	80098c6 <_vfiprintf_r+0x20e>
 8009782:	2300      	movs	r3, #0
 8009784:	f04f 32ff 	mov.w	r2, #4294967295
 8009788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800978c:	f10a 0a01 	add.w	sl, sl, #1
 8009790:	9304      	str	r3, [sp, #16]
 8009792:	9307      	str	r3, [sp, #28]
 8009794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009798:	931a      	str	r3, [sp, #104]	; 0x68
 800979a:	4654      	mov	r4, sl
 800979c:	2205      	movs	r2, #5
 800979e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a2:	4858      	ldr	r0, [pc, #352]	; (8009904 <_vfiprintf_r+0x24c>)
 80097a4:	f7f6 fd44 	bl	8000230 <memchr>
 80097a8:	9a04      	ldr	r2, [sp, #16]
 80097aa:	b9d8      	cbnz	r0, 80097e4 <_vfiprintf_r+0x12c>
 80097ac:	06d1      	lsls	r1, r2, #27
 80097ae:	bf44      	itt	mi
 80097b0:	2320      	movmi	r3, #32
 80097b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b6:	0713      	lsls	r3, r2, #28
 80097b8:	bf44      	itt	mi
 80097ba:	232b      	movmi	r3, #43	; 0x2b
 80097bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097c0:	f89a 3000 	ldrb.w	r3, [sl]
 80097c4:	2b2a      	cmp	r3, #42	; 0x2a
 80097c6:	d015      	beq.n	80097f4 <_vfiprintf_r+0x13c>
 80097c8:	9a07      	ldr	r2, [sp, #28]
 80097ca:	4654      	mov	r4, sl
 80097cc:	2000      	movs	r0, #0
 80097ce:	f04f 0c0a 	mov.w	ip, #10
 80097d2:	4621      	mov	r1, r4
 80097d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d8:	3b30      	subs	r3, #48	; 0x30
 80097da:	2b09      	cmp	r3, #9
 80097dc:	d94e      	bls.n	800987c <_vfiprintf_r+0x1c4>
 80097de:	b1b0      	cbz	r0, 800980e <_vfiprintf_r+0x156>
 80097e0:	9207      	str	r2, [sp, #28]
 80097e2:	e014      	b.n	800980e <_vfiprintf_r+0x156>
 80097e4:	eba0 0308 	sub.w	r3, r0, r8
 80097e8:	fa09 f303 	lsl.w	r3, r9, r3
 80097ec:	4313      	orrs	r3, r2
 80097ee:	9304      	str	r3, [sp, #16]
 80097f0:	46a2      	mov	sl, r4
 80097f2:	e7d2      	b.n	800979a <_vfiprintf_r+0xe2>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	1d19      	adds	r1, r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	9103      	str	r1, [sp, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bfbb      	ittet	lt
 8009800:	425b      	neglt	r3, r3
 8009802:	f042 0202 	orrlt.w	r2, r2, #2
 8009806:	9307      	strge	r3, [sp, #28]
 8009808:	9307      	strlt	r3, [sp, #28]
 800980a:	bfb8      	it	lt
 800980c:	9204      	strlt	r2, [sp, #16]
 800980e:	7823      	ldrb	r3, [r4, #0]
 8009810:	2b2e      	cmp	r3, #46	; 0x2e
 8009812:	d10c      	bne.n	800982e <_vfiprintf_r+0x176>
 8009814:	7863      	ldrb	r3, [r4, #1]
 8009816:	2b2a      	cmp	r3, #42	; 0x2a
 8009818:	d135      	bne.n	8009886 <_vfiprintf_r+0x1ce>
 800981a:	9b03      	ldr	r3, [sp, #12]
 800981c:	1d1a      	adds	r2, r3, #4
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	9203      	str	r2, [sp, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	bfb8      	it	lt
 8009826:	f04f 33ff 	movlt.w	r3, #4294967295
 800982a:	3402      	adds	r4, #2
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009914 <_vfiprintf_r+0x25c>
 8009832:	7821      	ldrb	r1, [r4, #0]
 8009834:	2203      	movs	r2, #3
 8009836:	4650      	mov	r0, sl
 8009838:	f7f6 fcfa 	bl	8000230 <memchr>
 800983c:	b140      	cbz	r0, 8009850 <_vfiprintf_r+0x198>
 800983e:	2340      	movs	r3, #64	; 0x40
 8009840:	eba0 000a 	sub.w	r0, r0, sl
 8009844:	fa03 f000 	lsl.w	r0, r3, r0
 8009848:	9b04      	ldr	r3, [sp, #16]
 800984a:	4303      	orrs	r3, r0
 800984c:	3401      	adds	r4, #1
 800984e:	9304      	str	r3, [sp, #16]
 8009850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009854:	482c      	ldr	r0, [pc, #176]	; (8009908 <_vfiprintf_r+0x250>)
 8009856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800985a:	2206      	movs	r2, #6
 800985c:	f7f6 fce8 	bl	8000230 <memchr>
 8009860:	2800      	cmp	r0, #0
 8009862:	d03f      	beq.n	80098e4 <_vfiprintf_r+0x22c>
 8009864:	4b29      	ldr	r3, [pc, #164]	; (800990c <_vfiprintf_r+0x254>)
 8009866:	bb1b      	cbnz	r3, 80098b0 <_vfiprintf_r+0x1f8>
 8009868:	9b03      	ldr	r3, [sp, #12]
 800986a:	3307      	adds	r3, #7
 800986c:	f023 0307 	bic.w	r3, r3, #7
 8009870:	3308      	adds	r3, #8
 8009872:	9303      	str	r3, [sp, #12]
 8009874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009876:	443b      	add	r3, r7
 8009878:	9309      	str	r3, [sp, #36]	; 0x24
 800987a:	e767      	b.n	800974c <_vfiprintf_r+0x94>
 800987c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009880:	460c      	mov	r4, r1
 8009882:	2001      	movs	r0, #1
 8009884:	e7a5      	b.n	80097d2 <_vfiprintf_r+0x11a>
 8009886:	2300      	movs	r3, #0
 8009888:	3401      	adds	r4, #1
 800988a:	9305      	str	r3, [sp, #20]
 800988c:	4619      	mov	r1, r3
 800988e:	f04f 0c0a 	mov.w	ip, #10
 8009892:	4620      	mov	r0, r4
 8009894:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009898:	3a30      	subs	r2, #48	; 0x30
 800989a:	2a09      	cmp	r2, #9
 800989c:	d903      	bls.n	80098a6 <_vfiprintf_r+0x1ee>
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0c5      	beq.n	800982e <_vfiprintf_r+0x176>
 80098a2:	9105      	str	r1, [sp, #20]
 80098a4:	e7c3      	b.n	800982e <_vfiprintf_r+0x176>
 80098a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80098aa:	4604      	mov	r4, r0
 80098ac:	2301      	movs	r3, #1
 80098ae:	e7f0      	b.n	8009892 <_vfiprintf_r+0x1da>
 80098b0:	ab03      	add	r3, sp, #12
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	462a      	mov	r2, r5
 80098b6:	4b16      	ldr	r3, [pc, #88]	; (8009910 <_vfiprintf_r+0x258>)
 80098b8:	a904      	add	r1, sp, #16
 80098ba:	4630      	mov	r0, r6
 80098bc:	f7fd fc8a 	bl	80071d4 <_printf_float>
 80098c0:	4607      	mov	r7, r0
 80098c2:	1c78      	adds	r0, r7, #1
 80098c4:	d1d6      	bne.n	8009874 <_vfiprintf_r+0x1bc>
 80098c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c8:	07d9      	lsls	r1, r3, #31
 80098ca:	d405      	bmi.n	80098d8 <_vfiprintf_r+0x220>
 80098cc:	89ab      	ldrh	r3, [r5, #12]
 80098ce:	059a      	lsls	r2, r3, #22
 80098d0:	d402      	bmi.n	80098d8 <_vfiprintf_r+0x220>
 80098d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098d4:	f7ff f9d0 	bl	8008c78 <__retarget_lock_release_recursive>
 80098d8:	89ab      	ldrh	r3, [r5, #12]
 80098da:	065b      	lsls	r3, r3, #25
 80098dc:	f53f af12 	bmi.w	8009704 <_vfiprintf_r+0x4c>
 80098e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098e2:	e711      	b.n	8009708 <_vfiprintf_r+0x50>
 80098e4:	ab03      	add	r3, sp, #12
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	462a      	mov	r2, r5
 80098ea:	4b09      	ldr	r3, [pc, #36]	; (8009910 <_vfiprintf_r+0x258>)
 80098ec:	a904      	add	r1, sp, #16
 80098ee:	4630      	mov	r0, r6
 80098f0:	f7fd ff14 	bl	800771c <_printf_i>
 80098f4:	e7e4      	b.n	80098c0 <_vfiprintf_r+0x208>
 80098f6:	bf00      	nop
 80098f8:	08009e2c 	.word	0x08009e2c
 80098fc:	08009e4c 	.word	0x08009e4c
 8009900:	08009e0c 	.word	0x08009e0c
 8009904:	08009fc4 	.word	0x08009fc4
 8009908:	08009fce 	.word	0x08009fce
 800990c:	080071d5 	.word	0x080071d5
 8009910:	08009693 	.word	0x08009693
 8009914:	08009fca 	.word	0x08009fca

08009918 <_sbrk_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d06      	ldr	r5, [pc, #24]	; (8009934 <_sbrk_r+0x1c>)
 800991c:	2300      	movs	r3, #0
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	602b      	str	r3, [r5, #0]
 8009924:	f7f9 f968 	bl	8002bf8 <_sbrk>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <_sbrk_r+0x1a>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	b103      	cbz	r3, 8009932 <_sbrk_r+0x1a>
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	20000584 	.word	0x20000584

08009938 <__sread>:
 8009938:	b510      	push	{r4, lr}
 800993a:	460c      	mov	r4, r1
 800993c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009940:	f000 f8e2 	bl	8009b08 <_read_r>
 8009944:	2800      	cmp	r0, #0
 8009946:	bfab      	itete	ge
 8009948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800994a:	89a3      	ldrhlt	r3, [r4, #12]
 800994c:	181b      	addge	r3, r3, r0
 800994e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009952:	bfac      	ite	ge
 8009954:	6563      	strge	r3, [r4, #84]	; 0x54
 8009956:	81a3      	strhlt	r3, [r4, #12]
 8009958:	bd10      	pop	{r4, pc}

0800995a <__swrite>:
 800995a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800995e:	461f      	mov	r7, r3
 8009960:	898b      	ldrh	r3, [r1, #12]
 8009962:	05db      	lsls	r3, r3, #23
 8009964:	4605      	mov	r5, r0
 8009966:	460c      	mov	r4, r1
 8009968:	4616      	mov	r6, r2
 800996a:	d505      	bpl.n	8009978 <__swrite+0x1e>
 800996c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009970:	2302      	movs	r3, #2
 8009972:	2200      	movs	r2, #0
 8009974:	f000 f898 	bl	8009aa8 <_lseek_r>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800997e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009982:	81a3      	strh	r3, [r4, #12]
 8009984:	4632      	mov	r2, r6
 8009986:	463b      	mov	r3, r7
 8009988:	4628      	mov	r0, r5
 800998a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800998e:	f000 b817 	b.w	80099c0 <_write_r>

08009992 <__sseek>:
 8009992:	b510      	push	{r4, lr}
 8009994:	460c      	mov	r4, r1
 8009996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999a:	f000 f885 	bl	8009aa8 <_lseek_r>
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	bf15      	itete	ne
 80099a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80099a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099ae:	81a3      	strheq	r3, [r4, #12]
 80099b0:	bf18      	it	ne
 80099b2:	81a3      	strhne	r3, [r4, #12]
 80099b4:	bd10      	pop	{r4, pc}

080099b6 <__sclose>:
 80099b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ba:	f000 b831 	b.w	8009a20 <_close_r>
	...

080099c0 <_write_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4d07      	ldr	r5, [pc, #28]	; (80099e0 <_write_r+0x20>)
 80099c4:	4604      	mov	r4, r0
 80099c6:	4608      	mov	r0, r1
 80099c8:	4611      	mov	r1, r2
 80099ca:	2200      	movs	r2, #0
 80099cc:	602a      	str	r2, [r5, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	f7f9 f8c1 	bl	8002b56 <_write>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_write_r+0x1e>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_write_r+0x1e>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	20000584 	.word	0x20000584

080099e4 <__assert_func>:
 80099e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099e6:	4614      	mov	r4, r2
 80099e8:	461a      	mov	r2, r3
 80099ea:	4b09      	ldr	r3, [pc, #36]	; (8009a10 <__assert_func+0x2c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4605      	mov	r5, r0
 80099f0:	68d8      	ldr	r0, [r3, #12]
 80099f2:	b14c      	cbz	r4, 8009a08 <__assert_func+0x24>
 80099f4:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <__assert_func+0x30>)
 80099f6:	9100      	str	r1, [sp, #0]
 80099f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099fc:	4906      	ldr	r1, [pc, #24]	; (8009a18 <__assert_func+0x34>)
 80099fe:	462b      	mov	r3, r5
 8009a00:	f000 f81e 	bl	8009a40 <fiprintf>
 8009a04:	f000 f89f 	bl	8009b46 <abort>
 8009a08:	4b04      	ldr	r3, [pc, #16]	; (8009a1c <__assert_func+0x38>)
 8009a0a:	461c      	mov	r4, r3
 8009a0c:	e7f3      	b.n	80099f6 <__assert_func+0x12>
 8009a0e:	bf00      	nop
 8009a10:	20000014 	.word	0x20000014
 8009a14:	08009fd5 	.word	0x08009fd5
 8009a18:	08009fe2 	.word	0x08009fe2
 8009a1c:	0800a010 	.word	0x0800a010

08009a20 <_close_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4d06      	ldr	r5, [pc, #24]	; (8009a3c <_close_r+0x1c>)
 8009a24:	2300      	movs	r3, #0
 8009a26:	4604      	mov	r4, r0
 8009a28:	4608      	mov	r0, r1
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	f7f9 f8af 	bl	8002b8e <_close>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_close_r+0x1a>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_close_r+0x1a>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	20000584 	.word	0x20000584

08009a40 <fiprintf>:
 8009a40:	b40e      	push	{r1, r2, r3}
 8009a42:	b503      	push	{r0, r1, lr}
 8009a44:	4601      	mov	r1, r0
 8009a46:	ab03      	add	r3, sp, #12
 8009a48:	4805      	ldr	r0, [pc, #20]	; (8009a60 <fiprintf+0x20>)
 8009a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a4e:	6800      	ldr	r0, [r0, #0]
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	f7ff fe31 	bl	80096b8 <_vfiprintf_r>
 8009a56:	b002      	add	sp, #8
 8009a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a5c:	b003      	add	sp, #12
 8009a5e:	4770      	bx	lr
 8009a60:	20000014 	.word	0x20000014

08009a64 <_fstat_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4d07      	ldr	r5, [pc, #28]	; (8009a84 <_fstat_r+0x20>)
 8009a68:	2300      	movs	r3, #0
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	4611      	mov	r1, r2
 8009a70:	602b      	str	r3, [r5, #0]
 8009a72:	f7f9 f898 	bl	8002ba6 <_fstat>
 8009a76:	1c43      	adds	r3, r0, #1
 8009a78:	d102      	bne.n	8009a80 <_fstat_r+0x1c>
 8009a7a:	682b      	ldr	r3, [r5, #0]
 8009a7c:	b103      	cbz	r3, 8009a80 <_fstat_r+0x1c>
 8009a7e:	6023      	str	r3, [r4, #0]
 8009a80:	bd38      	pop	{r3, r4, r5, pc}
 8009a82:	bf00      	nop
 8009a84:	20000584 	.word	0x20000584

08009a88 <_isatty_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	4d06      	ldr	r5, [pc, #24]	; (8009aa4 <_isatty_r+0x1c>)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4608      	mov	r0, r1
 8009a92:	602b      	str	r3, [r5, #0]
 8009a94:	f7f9 f897 	bl	8002bc6 <_isatty>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d102      	bne.n	8009aa2 <_isatty_r+0x1a>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	b103      	cbz	r3, 8009aa2 <_isatty_r+0x1a>
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	20000584 	.word	0x20000584

08009aa8 <_lseek_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d07      	ldr	r5, [pc, #28]	; (8009ac8 <_lseek_r+0x20>)
 8009aac:	4604      	mov	r4, r0
 8009aae:	4608      	mov	r0, r1
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	602a      	str	r2, [r5, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f7f9 f890 	bl	8002bdc <_lseek>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_lseek_r+0x1e>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_lseek_r+0x1e>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	20000584 	.word	0x20000584

08009acc <__ascii_mbtowc>:
 8009acc:	b082      	sub	sp, #8
 8009ace:	b901      	cbnz	r1, 8009ad2 <__ascii_mbtowc+0x6>
 8009ad0:	a901      	add	r1, sp, #4
 8009ad2:	b142      	cbz	r2, 8009ae6 <__ascii_mbtowc+0x1a>
 8009ad4:	b14b      	cbz	r3, 8009aea <__ascii_mbtowc+0x1e>
 8009ad6:	7813      	ldrb	r3, [r2, #0]
 8009ad8:	600b      	str	r3, [r1, #0]
 8009ada:	7812      	ldrb	r2, [r2, #0]
 8009adc:	1e10      	subs	r0, r2, #0
 8009ade:	bf18      	it	ne
 8009ae0:	2001      	movne	r0, #1
 8009ae2:	b002      	add	sp, #8
 8009ae4:	4770      	bx	lr
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	e7fb      	b.n	8009ae2 <__ascii_mbtowc+0x16>
 8009aea:	f06f 0001 	mvn.w	r0, #1
 8009aee:	e7f8      	b.n	8009ae2 <__ascii_mbtowc+0x16>

08009af0 <__malloc_lock>:
 8009af0:	4801      	ldr	r0, [pc, #4]	; (8009af8 <__malloc_lock+0x8>)
 8009af2:	f7ff b8c0 	b.w	8008c76 <__retarget_lock_acquire_recursive>
 8009af6:	bf00      	nop
 8009af8:	20000578 	.word	0x20000578

08009afc <__malloc_unlock>:
 8009afc:	4801      	ldr	r0, [pc, #4]	; (8009b04 <__malloc_unlock+0x8>)
 8009afe:	f7ff b8bb 	b.w	8008c78 <__retarget_lock_release_recursive>
 8009b02:	bf00      	nop
 8009b04:	20000578 	.word	0x20000578

08009b08 <_read_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d07      	ldr	r5, [pc, #28]	; (8009b28 <_read_r+0x20>)
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	4608      	mov	r0, r1
 8009b10:	4611      	mov	r1, r2
 8009b12:	2200      	movs	r2, #0
 8009b14:	602a      	str	r2, [r5, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f7f9 f800 	bl	8002b1c <_read>
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	d102      	bne.n	8009b26 <_read_r+0x1e>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	b103      	cbz	r3, 8009b26 <_read_r+0x1e>
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	20000584 	.word	0x20000584

08009b2c <__ascii_wctomb>:
 8009b2c:	b149      	cbz	r1, 8009b42 <__ascii_wctomb+0x16>
 8009b2e:	2aff      	cmp	r2, #255	; 0xff
 8009b30:	bf85      	ittet	hi
 8009b32:	238a      	movhi	r3, #138	; 0x8a
 8009b34:	6003      	strhi	r3, [r0, #0]
 8009b36:	700a      	strbls	r2, [r1, #0]
 8009b38:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b3c:	bf98      	it	ls
 8009b3e:	2001      	movls	r0, #1
 8009b40:	4770      	bx	lr
 8009b42:	4608      	mov	r0, r1
 8009b44:	4770      	bx	lr

08009b46 <abort>:
 8009b46:	b508      	push	{r3, lr}
 8009b48:	2006      	movs	r0, #6
 8009b4a:	f000 f82b 	bl	8009ba4 <raise>
 8009b4e:	2001      	movs	r0, #1
 8009b50:	f7f8 ffda 	bl	8002b08 <_exit>

08009b54 <_raise_r>:
 8009b54:	291f      	cmp	r1, #31
 8009b56:	b538      	push	{r3, r4, r5, lr}
 8009b58:	4604      	mov	r4, r0
 8009b5a:	460d      	mov	r5, r1
 8009b5c:	d904      	bls.n	8009b68 <_raise_r+0x14>
 8009b5e:	2316      	movs	r3, #22
 8009b60:	6003      	str	r3, [r0, #0]
 8009b62:	f04f 30ff 	mov.w	r0, #4294967295
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b6a:	b112      	cbz	r2, 8009b72 <_raise_r+0x1e>
 8009b6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b70:	b94b      	cbnz	r3, 8009b86 <_raise_r+0x32>
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 f830 	bl	8009bd8 <_getpid_r>
 8009b78:	462a      	mov	r2, r5
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b82:	f000 b817 	b.w	8009bb4 <_kill_r>
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d00a      	beq.n	8009ba0 <_raise_r+0x4c>
 8009b8a:	1c59      	adds	r1, r3, #1
 8009b8c:	d103      	bne.n	8009b96 <_raise_r+0x42>
 8009b8e:	2316      	movs	r3, #22
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	2001      	movs	r0, #1
 8009b94:	e7e7      	b.n	8009b66 <_raise_r+0x12>
 8009b96:	2400      	movs	r4, #0
 8009b98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	4798      	blx	r3
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e7e0      	b.n	8009b66 <_raise_r+0x12>

08009ba4 <raise>:
 8009ba4:	4b02      	ldr	r3, [pc, #8]	; (8009bb0 <raise+0xc>)
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	f7ff bfd3 	b.w	8009b54 <_raise_r>
 8009bae:	bf00      	nop
 8009bb0:	20000014 	.word	0x20000014

08009bb4 <_kill_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4d07      	ldr	r5, [pc, #28]	; (8009bd4 <_kill_r+0x20>)
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4604      	mov	r4, r0
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	602b      	str	r3, [r5, #0]
 8009bc2:	f7f8 ff91 	bl	8002ae8 <_kill>
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	d102      	bne.n	8009bd0 <_kill_r+0x1c>
 8009bca:	682b      	ldr	r3, [r5, #0]
 8009bcc:	b103      	cbz	r3, 8009bd0 <_kill_r+0x1c>
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	bd38      	pop	{r3, r4, r5, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20000584 	.word	0x20000584

08009bd8 <_getpid_r>:
 8009bd8:	f7f8 bf7e 	b.w	8002ad8 <_getpid>

08009bdc <_init>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	bf00      	nop
 8009be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009be2:	bc08      	pop	{r3}
 8009be4:	469e      	mov	lr, r3
 8009be6:	4770      	bx	lr

08009be8 <_fini>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	bf00      	nop
 8009bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bee:	bc08      	pop	{r3}
 8009bf0:	469e      	mov	lr, r3
 8009bf2:	4770      	bx	lr
