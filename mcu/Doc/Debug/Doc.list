
Doc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dd4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08009fb8  08009fb8  00019fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4dc  0800a4dc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4dc  0800a4dc  0001a4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4e4  0800a4e4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4e4  0800a4e4  0001a4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4e8  0800a4e8  0001a4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a4ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200001e8  0800a6d0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000074c  0800a6d0  0002074c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145e7  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ac  00000000  00000000  000347fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00036ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00038050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002742c  00000000  00000000  00039128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cd7  00000000  00000000  00060554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd7f2  00000000  00000000  0007422b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171a1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bbc  00000000  00000000  00171a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009f9c 	.word	0x08009f9c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08009f9c 	.word	0x08009f9c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b974 	b.w	8000f38 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468e      	mov	lr, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4694      	mov	ip, r2
 8000c7a:	d969      	bls.n	8000d50 <__udivmoddi4+0xe8>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b152      	cbz	r2, 8000c98 <__udivmoddi4+0x30>
 8000c82:	fa01 f302 	lsl.w	r3, r1, r2
 8000c86:	f1c2 0120 	rsb	r1, r2, #32
 8000c8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c92:	ea41 0e03 	orr.w	lr, r1, r3
 8000c96:	4094      	lsls	r4, r2
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	0c21      	lsrs	r1, r4, #16
 8000c9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca2:	fa1f f78c 	uxth.w	r7, ip
 8000ca6:	fb08 e316 	mls	r3, r8, r6, lr
 8000caa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cae:	fb06 f107 	mul.w	r1, r6, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cbe:	f080 811f 	bcs.w	8000f00 <__udivmoddi4+0x298>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 811c 	bls.w	8000f00 <__udivmoddi4+0x298>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 f707 	mul.w	r7, r0, r7
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x92>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	f080 810a 	bcs.w	8000f04 <__udivmoddi4+0x29c>
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	f240 8107 	bls.w	8000f04 <__udivmoddi4+0x29c>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	1be4      	subs	r4, r4, r7
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa4>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xc2>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80ef 	beq.w	8000efa <__udivmoddi4+0x292>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x160>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd4>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80f9 	bhi.w	8000f2e <__udivmoddi4+0x2c6>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	469e      	mov	lr, r3
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa4>
 8000d4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xec>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 8092 	bne.w	8000e82 <__udivmoddi4+0x21a>
 8000d5e:	eba1 010c 	sub.w	r1, r1, ip
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0c20      	lsrs	r0, r4, #16
 8000d6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d72:	fb07 1113 	mls	r1, r7, r3, r1
 8000d76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7a:	fb0e f003 	mul.w	r0, lr, r3
 8000d7e:	4288      	cmp	r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x12c>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x12a>
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	f200 80cb 	bhi.w	8000f28 <__udivmoddi4+0x2c0>
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000da0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da4:	fb0e fe00 	mul.w	lr, lr, r0
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x156>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x154>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f200 80bb 	bhi.w	8000f32 <__udivmoddi4+0x2ca>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dc6:	e79c      	b.n	8000d02 <__udivmoddi4+0x9a>
 8000dc8:	f1c6 0720 	rsb	r7, r6, #32
 8000dcc:	40b3      	lsls	r3, r6
 8000dce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	431c      	orrs	r4, r3
 8000de0:	40f9      	lsrs	r1, r7
 8000de2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fb09 1118 	mls	r1, r9, r8, r1
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	fb08 f00e 	mul.w	r0, r8, lr
 8000e00:	4288      	cmp	r0, r1
 8000e02:	fa02 f206 	lsl.w	r2, r2, r6
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b8>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2bc>
 8000e14:	4288      	cmp	r0, r1
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2bc>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e28:	fb09 1110 	mls	r1, r9, r0, r1
 8000e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	458e      	cmp	lr, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1e2>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e40:	d26c      	bcs.n	8000f1c <__udivmoddi4+0x2b4>
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d96a      	bls.n	8000f1c <__udivmoddi4+0x2b4>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e52:	eba1 010e 	sub.w	r1, r1, lr
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	46c8      	mov	r8, r9
 8000e5a:	46a6      	mov	lr, r4
 8000e5c:	d356      	bcc.n	8000f0c <__udivmoddi4+0x2a4>
 8000e5e:	d053      	beq.n	8000f08 <__udivmoddi4+0x2a0>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x212>
 8000e62:	ebb3 0208 	subs.w	r2, r3, r8
 8000e66:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e72:	40f1      	lsrs	r1, r6
 8000e74:	431f      	orrs	r7, r3
 8000e76:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e90:	4091      	lsls	r1, r2
 8000e92:	4301      	orrs	r1, r0
 8000e94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e98:	fa1f fe8c 	uxth.w	lr, ip
 8000e9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea4:	0c0b      	lsrs	r3, r1, #16
 8000ea6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x260>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebe:	d22f      	bcs.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d92d      	bls.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	b289      	uxth	r1, r1
 8000ecc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb06 f30e 	mul.w	r3, r6, lr
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x28a>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee8:	d216      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d914      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000eee:	3e02      	subs	r6, #2
 8000ef0:	4461      	add	r1, ip
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef8:	e738      	b.n	8000d6c <__udivmoddi4+0x104>
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e705      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e3      	b.n	8000ccc <__udivmoddi4+0x64>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6f8      	b.n	8000cfa <__udivmoddi4+0x92>
 8000f08:	454b      	cmp	r3, r9
 8000f0a:	d2a9      	bcs.n	8000e60 <__udivmoddi4+0x1f8>
 8000f0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7a3      	b.n	8000e60 <__udivmoddi4+0x1f8>
 8000f18:	4646      	mov	r6, r8
 8000f1a:	e7ea      	b.n	8000ef2 <__udivmoddi4+0x28a>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	e794      	b.n	8000e4a <__udivmoddi4+0x1e2>
 8000f20:	4640      	mov	r0, r8
 8000f22:	e7d1      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f24:	46d0      	mov	r8, sl
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b8>
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e732      	b.n	8000d94 <__udivmoddi4+0x12c>
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e709      	b.n	8000d46 <__udivmoddi4+0xde>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e742      	b.n	8000dbe <__udivmoddi4+0x156>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <toggleLD2>:
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
//Redirect printf to UART
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
//define a function to toggle the LD2 LED in a certain pattern
void toggleLD2(int delay) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2120      	movs	r1, #32
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f002 fb0e 	bl	800356c <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 f856 	bl	8003004 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f002 fb04 	bl	800356c <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 f84c 	bl	8003004 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2120      	movs	r1, #32
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f002 fafa 	bl	800356c <HAL_GPIO_WritePin>
  HAL_Delay(2*delay);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 f841 	bl	8003004 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2120      	movs	r1, #32
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f002 faef 	bl	800356c <HAL_GPIO_WritePin>
  HAL_Delay(2*delay);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 f836 	bl	8003004 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f002 fae4 	bl	800356c <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 f82c 	bl	8003004 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2120      	movs	r1, #32
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f002 fada 	bl	800356c <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 f822 	bl	8003004 <HAL_Delay>

  //printf("Working\r\n");
  
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_TIM_IC_CaptureCallback>:

//interrupt handler for the timer
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fcc:	b090      	sub	sp, #64	; 0x40
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (htim->Instance == TIM5) {
 8000fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4bb6      	ldr	r3, [pc, #728]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 80fa 	bne.w	80011d2 <HAL_TIM_IC_CaptureCallback+0x20a>
      switch (htim->Channel) {
 8000fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fe0:	7f1b      	ldrb	r3, [r3, #28]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d07b      	beq.n	80010de <HAL_TIM_IC_CaptureCallback+0x116>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	f040 80ef 	bne.w	80011ca <HAL_TIM_IC_CaptureCallback+0x202>
        case HAL_TIM_ACTIVE_CHANNEL_2://right sensor 
          if(timer_flag==0)
 8000fec:	4bb1      	ldr	r3, [pc, #708]	; (80012b4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d113      	bne.n	800101c <HAL_TIM_IC_CaptureCallback+0x54>
          {
            timer_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ff8:	f004 faec 	bl	80055d4 <HAL_TIM_ReadCapturedValue>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2200      	movs	r2, #0
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
 8001002:	637a      	str	r2, [r7, #52]	; 0x34
 8001004:	4bac      	ldr	r3, [pc, #688]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001006:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800100a:	e9c3 1200 	strd	r1, r2, [r3]
            //printf("Echo right counter tr1= %d\r\n",timer_1);
            timer_flag=1;
 800100e:	4ba9      	ldr	r3, [pc, #676]	; (80012b4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
            timer_fin=0;
 8001014:	4ba9      	ldr	r3, [pc, #676]	; (80012bc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e05b      	b.n	80010d4 <HAL_TIM_IC_CaptureCallback+0x10c>
          }
          else
          {
            timer_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800101c:	2104      	movs	r1, #4
 800101e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001020:	f004 fad8 	bl	80055d4 <HAL_TIM_ReadCapturedValue>
 8001024:	4603      	mov	r3, r0
 8001026:	2200      	movs	r2, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
 800102a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800102c:	4ba4      	ldr	r3, [pc, #656]	; (80012c0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800102e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001032:	e9c3 1200 	strd	r1, r2, [r3]
            //printf("Echo right counter tr2= %d\r\n",timer_2);
            timer_flag=0;
 8001036:	4b9f      	ldr	r3, [pc, #636]	; (80012b4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
            timer_fin=1;
 800103c:	4b9f      	ldr	r3, [pc, #636]	; (80012bc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
            if(timer_1<timer_2)//if the timer is not overflowed
 8001042:	4b9d      	ldr	r3, [pc, #628]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001044:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001048:	4b9d      	ldr	r3, [pc, #628]	; (80012c0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	4290      	cmp	r0, r2
 8001050:	eb71 0303 	sbcs.w	r3, r1, r3
 8001054:	d219      	bcs.n	800108a <HAL_TIM_IC_CaptureCallback+0xc2>
            {
              cmr = (double)(timer_2 - timer_1) * 0.017;//340*100/1e6/2
 8001056:	4b9a      	ldr	r3, [pc, #616]	; (80012c0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800105c:	4b96      	ldr	r3, [pc, #600]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	1a84      	subs	r4, r0, r2
 8001064:	623c      	str	r4, [r7, #32]
 8001066:	eb61 0303 	sbc.w	r3, r1, r3
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
 800106c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001070:	f7ff fab4 	bl	80005dc <__aeabi_ul2d>
 8001074:	a38a      	add	r3, pc, #552	; (adr r3, 80012a0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff fae5 	bl	8000648 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4990      	ldr	r1, [pc, #576]	; (80012c4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8001084:	e9c1 2300 	strd	r2, r3, [r1]
 8001088:	e01d      	b.n	80010c6 <HAL_TIM_IC_CaptureCallback+0xfe>
            }
            else
            {
              cmr = (double)(timer_2 + 0xffffffff - timer_1) * 0.017;//340*100/1e6/2
 800108a:	4b8d      	ldr	r3, [pc, #564]	; (80012c0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800108c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001090:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	ebb0 0802 	subs.w	r8, r0, r2
 800109a:	eb61 0903 	sbc.w	r9, r1, r3
 800109e:	f118 33ff 	adds.w	r3, r8, #4294967295
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	f149 0300 	adc.w	r3, r9, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ae:	f7ff fa95 	bl	80005dc <__aeabi_ul2d>
 80010b2:	a37b      	add	r3, pc, #492	; (adr r3, 80012a0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fac6 	bl	8000648 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4980      	ldr	r1, [pc, #512]	; (80012c4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80010c2:	e9c1 2300 	strd	r2, r3, [r1]
            }
            timer_1=0;
 80010c6:	497c      	ldr	r1, [pc, #496]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	e9c1 2300 	strd	r2, r3, [r1]
            //printf("Distance right = %.3f cm. \r\n",  cmr);
          }
          //printf("Echo right: t1= %.3f us,  t2= %.3f us\r",timer_1*10, timer_2*10);
          HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 80010d4:	2104      	movs	r1, #4
 80010d6:	487c      	ldr	r0, [pc, #496]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0x300>)
 80010d8:	f003 fce6 	bl	8004aa8 <HAL_TIM_IC_Start_IT>
          break;
 80010dc:	e07a      	b.n	80011d4 <HAL_TIM_IC_CaptureCallback+0x20c>

        case HAL_TIM_ACTIVE_CHANNEL_1://left sensor
          if(timel_flag==0)
 80010de:	4b7b      	ldr	r3, [pc, #492]	; (80012cc <HAL_TIM_IC_CaptureCallback+0x304>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d113      	bne.n	800110e <HAL_TIM_IC_CaptureCallback+0x146>
          {
            timel_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010e6:	2100      	movs	r1, #0
 80010e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010ea:	f004 fa73 	bl	80055d4 <HAL_TIM_ReadCapturedValue>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2200      	movs	r2, #0
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	617a      	str	r2, [r7, #20]
 80010f6:	4b76      	ldr	r3, [pc, #472]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x308>)
 80010f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80010fc:	e9c3 1200 	strd	r1, r2, [r3]
            //printf("Echo left counter tl1= %d\r\n",timel_1);
            timel_flag=1;
 8001100:	4b72      	ldr	r3, [pc, #456]	; (80012cc <HAL_TIM_IC_CaptureCallback+0x304>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
            timel_fin=0;
 8001106:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e058      	b.n	80011c0 <HAL_TIM_IC_CaptureCallback+0x1f8>
          }
          else
          {
            timel_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800110e:	2100      	movs	r1, #0
 8001110:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001112:	f004 fa5f 	bl	80055d4 <HAL_TIM_ReadCapturedValue>
 8001116:	4603      	mov	r3, r0
 8001118:	2200      	movs	r2, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	60fa      	str	r2, [r7, #12]
 800111e:	4b6e      	ldr	r3, [pc, #440]	; (80012d8 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001120:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001124:	e9c3 1200 	strd	r1, r2, [r3]
            //printf("Echo left counter tl2= %d\r\n",timel_2);
            timel_flag=0;
 8001128:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_TIM_IC_CaptureCallback+0x304>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
            timel_fin=1;
 800112e:	4b69      	ldr	r3, [pc, #420]	; (80012d4 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
            if(timel_1<timel_2)//if the timer is not overflowed
 8001134:	4b66      	ldr	r3, [pc, #408]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800113a:	4b67      	ldr	r3, [pc, #412]	; (80012d8 <HAL_TIM_IC_CaptureCallback+0x310>)
 800113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001140:	4290      	cmp	r0, r2
 8001142:	eb71 0303 	sbcs.w	r3, r1, r3
 8001146:	d219      	bcs.n	800117c <HAL_TIM_IC_CaptureCallback+0x1b4>
            {
              cml = (double)(timel_2 - timel_1) * 0.017;//340*100/1e6/2
 8001148:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_TIM_IC_CaptureCallback+0x310>)
 800114a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114e:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	1a84      	subs	r4, r0, r2
 8001156:	603c      	str	r4, [r7, #0]
 8001158:	eb61 0303 	sbc.w	r3, r1, r3
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001162:	f7ff fa3b 	bl	80005dc <__aeabi_ul2d>
 8001166:	a34e      	add	r3, pc, #312	; (adr r3, 80012a0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	f7ff fa6c 	bl	8000648 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4959      	ldr	r1, [pc, #356]	; (80012dc <HAL_TIM_IC_CaptureCallback+0x314>)
 8001176:	e9c1 2300 	strd	r2, r3, [r1]
 800117a:	e01a      	b.n	80011b2 <HAL_TIM_IC_CaptureCallback+0x1ea>
            }
            else
            {
              cml = (double)(timel_2 + 0xffffffff - timel_1) * 0.017;//340*100/1e6/2
 800117c:	4b56      	ldr	r3, [pc, #344]	; (80012d8 <HAL_TIM_IC_CaptureCallback+0x310>)
 800117e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001182:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	1a84      	subs	r4, r0, r2
 800118a:	eb61 0503 	sbc.w	r5, r1, r3
 800118e:	f114 3aff 	adds.w	sl, r4, #4294967295
 8001192:	f145 0b00 	adc.w	fp, r5, #0
 8001196:	4650      	mov	r0, sl
 8001198:	4659      	mov	r1, fp
 800119a:	f7ff fa1f 	bl	80005dc <__aeabi_ul2d>
 800119e:	a340      	add	r3, pc, #256	; (adr r3, 80012a0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff fa50 	bl	8000648 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	494b      	ldr	r1, [pc, #300]	; (80012dc <HAL_TIM_IC_CaptureCallback+0x314>)
 80011ae:	e9c1 2300 	strd	r2, r3, [r1]
            }
            timel_1=0;
 80011b2:	4947      	ldr	r1, [pc, #284]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x308>)
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9c1 2300 	strd	r2, r3, [r1]
          }
          //printf("Echo left: t1= %.3f us,  t2= %.3f us\r",timel_1*10, timel_2*10);
          //printf("Distance left = %.3f cm. \r\n",  cml);
          HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80011c0:	2100      	movs	r1, #0
 80011c2:	4841      	ldr	r0, [pc, #260]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0x300>)
 80011c4:	f003 fc70 	bl	8004aa8 <HAL_TIM_IC_Start_IT>
          break;
 80011c8:	e004      	b.n	80011d4 <HAL_TIM_IC_CaptureCallback+0x20c>
        default:
          printf("Error timer channel.\r\n");
 80011ca:	4845      	ldr	r0, [pc, #276]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x318>)
 80011cc:	f006 fe32 	bl	8007e34 <puts>
          break;
 80011d0:	e000      	b.n	80011d4 <HAL_TIM_IC_CaptureCallback+0x20c>
      }
    }
 80011d2:	bf00      	nop
  if (htim->Instance == TIM4) {
 80011d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x31c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	f040 8090 	bne.w	8001300 <HAL_TIM_IC_CaptureCallback+0x338>
    switch (htim->Channel) {
 80011e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011e2:	7f1b      	ldrb	r3, [r3, #28]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d154      	bne.n	8001292 <HAL_TIM_IC_CaptureCallback+0x2ca>
        case HAL_TIM_ACTIVE_CHANNEL_1://right sensor 
          if(timef_flag==0)
 80011e8:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x320>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10d      	bne.n	800120c <HAL_TIM_IC_CaptureCallback+0x244>
          {
            timef_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80011f0:	2100      	movs	r1, #0
 80011f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011f4:	f004 f9ee 	bl	80055d4 <HAL_TIM_ReadCapturedValue>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a3c      	ldr	r2, [pc, #240]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x324>)
 80011fc:	6013      	str	r3, [r2, #0]
            //printf("Echo front: tf1= %d us\r",timef_1*10);
            timef_flag=1;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
            timef_fin=0;
 8001204:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e03d      	b.n	8001288 <HAL_TIM_IC_CaptureCallback+0x2c0>
          }
          else
          {
            timef_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001210:	f004 f9e0 	bl	80055d4 <HAL_TIM_ReadCapturedValue>
 8001214:	4603      	mov	r3, r0
 8001216:	4a37      	ldr	r2, [pc, #220]	; (80012f4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001218:	6013      	str	r3, [r2, #0]
            timef_flag=0;
 800121a:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x320>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
            timef_fin=1;
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
            if(timef_1<timef_2)//if the timer is not overflowed
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x324>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d212      	bcs.n	8001258 <HAL_TIM_IC_CaptureCallback+0x290>
            {
              cmf = (double)(timef_2 - timef_1) * 3.4;//340*100/5e3/2
 8001232:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x324>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f989 	bl	8000554 <__aeabi_ui2d>
 8001242:	a319      	add	r3, pc, #100	; (adr r3, 80012a8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	f7ff f9fe 	bl	8000648 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4929      	ldr	r1, [pc, #164]	; (80012f8 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001252:	e9c1 2300 	strd	r2, r3, [r1]
 8001256:	e014      	b.n	8001282 <HAL_TIM_IC_CaptureCallback+0x2ba>
            }
            else
            {
              cmf = (double)(timef_2 + 0xffff - timef_1) * 3.4;//340*100/5e3/2
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x324>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001266:	33ff      	adds	r3, #255	; 0xff
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f973 	bl	8000554 <__aeabi_ui2d>
 800126e:	a30e      	add	r3, pc, #56	; (adr r3, 80012a8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f9e8 	bl	8000648 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	491e      	ldr	r1, [pc, #120]	; (80012f8 <HAL_TIM_IC_CaptureCallback+0x330>)
 800127e:	e9c1 2300 	strd	r2, r3, [r1]
            }
            timef_1=0;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x324>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
          }
          //printf("Echo front: t= %.3f us\r\n",timel_1*10, timer_2*10);
          //printf("Distance front = %.3f cm. \r\n",  cmf);
          HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001288:	2100      	movs	r1, #0
 800128a:	481c      	ldr	r0, [pc, #112]	; (80012fc <HAL_TIM_IC_CaptureCallback+0x334>)
 800128c:	f003 fc0c 	bl	8004aa8 <HAL_TIM_IC_Start_IT>
          break;
 8001290:	e037      	b.n	8001302 <HAL_TIM_IC_CaptureCallback+0x33a>
        default:
          printf("Error timer channel.\r\n");
 8001292:	4813      	ldr	r0, [pc, #76]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001294:	f006 fdce 	bl	8007e34 <puts>
          break;
 8001298:	e033      	b.n	8001302 <HAL_TIM_IC_CaptureCallback+0x33a>
 800129a:	bf00      	nop
 800129c:	f3af 8000 	nop.w
 80012a0:	b020c49c 	.word	0xb020c49c
 80012a4:	3f916872 	.word	0x3f916872
 80012a8:	33333333 	.word	0x33333333
 80012ac:	400b3333 	.word	0x400b3333
 80012b0:	40000c00 	.word	0x40000c00
 80012b4:	200005d8 	.word	0x200005d8
 80012b8:	200005e0 	.word	0x200005e0
 80012bc:	200005d9 	.word	0x200005d9
 80012c0:	200005e8 	.word	0x200005e8
 80012c4:	200005f0 	.word	0x200005f0
 80012c8:	2000056c 	.word	0x2000056c
 80012cc:	200005b8 	.word	0x200005b8
 80012d0:	200005c0 	.word	0x200005c0
 80012d4:	200005b9 	.word	0x200005b9
 80012d8:	200005c8 	.word	0x200005c8
 80012dc:	200005d0 	.word	0x200005d0
 80012e0:	08009fb8 	.word	0x08009fb8
 80012e4:	40000800 	.word	0x40000800
 80012e8:	200005f8 	.word	0x200005f8
 80012ec:	200005fc 	.word	0x200005fc
 80012f0:	200005f9 	.word	0x200005f9
 80012f4:	20000600 	.word	0x20000600
 80012f8:	20000608 	.word	0x20000608
 80012fc:	20000520 	.word	0x20000520
    }
  } 
 8001300:	bf00      	nop
}
 8001302:	bf00      	nop
 8001304:	3740      	adds	r7, #64	; 0x40
 8001306:	46bd      	mov	sp, r7
 8001308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800130c <drive>:

void drive ()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
  //Transfer int to char for output
    char outputstr [11];
    outputstr [0] = 0x90;
 8001312:	2390      	movs	r3, #144	; 0x90
 8001314:	713b      	strb	r3, [r7, #4]
    outputstr [1] = xflag;
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <drive+0xd0>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	717b      	strb	r3, [r7, #5]
    outputstr [2] = xspeed / 10;
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <drive+0xd4>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4a30      	ldr	r2, [pc, #192]	; (80013e4 <drive+0xd8>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	71bb      	strb	r3, [r7, #6]
    outputstr [3] = xspeed % 10;
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <drive+0xd4>)
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <drive+0xd8>)
 8001332:	fba3 1302 	umull	r1, r3, r3, r2
 8001336:	08d9      	lsrs	r1, r3, #3
 8001338:	460b      	mov	r3, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	71fb      	strb	r3, [r7, #7]
    outputstr [4] = yflag;
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <drive+0xdc>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	723b      	strb	r3, [r7, #8]
    outputstr [5] = yspeed / 10;
 800134c:	4b27      	ldr	r3, [pc, #156]	; (80013ec <drive+0xe0>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4a24      	ldr	r2, [pc, #144]	; (80013e4 <drive+0xd8>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	727b      	strb	r3, [r7, #9]
    outputstr [6] = yspeed % 10;
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <drive+0xe0>)
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <drive+0xd8>)
 8001362:	fba3 1302 	umull	r1, r3, r3, r2
 8001366:	08d9      	lsrs	r1, r3, #3
 8001368:	460b      	mov	r3, r1
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	72bb      	strb	r3, [r7, #10]
    outputstr [7] = wflag;
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <drive+0xe4>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	72fb      	strb	r3, [r7, #11]
    outputstr [8] = wspeed / 100;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <drive+0xe8>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <drive+0xec>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	b2db      	uxtb	r3, r3
 800138a:	733b      	strb	r3, [r7, #12]
    outputstr [9] = wspeed % 100 / 10;
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <drive+0xe8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <drive+0xec>)
 8001392:	fba2 1203 	umull	r1, r2, r2, r3
 8001396:	0952      	lsrs	r2, r2, #5
 8001398:	2164      	movs	r1, #100	; 0x64
 800139a:	fb01 f202 	mul.w	r2, r1, r2
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <drive+0xd8>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	08db      	lsrs	r3, r3, #3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	737b      	strb	r3, [r7, #13]
    outputstr [10] = wspeed % 10;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <drive+0xe8>)
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <drive+0xd8>)
 80013b4:	fba3 1302 	umull	r1, r3, r3, r2
 80013b8:	08d9      	lsrs	r1, r3, #3
 80013ba:	460b      	mov	r3, r1
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	73bb      	strb	r3, [r7, #14]
    //Transmit the instruction to the motor driver
    HAL_UART_Transmit(&huart4, (uint8_t*)outputstr, 11, 100);
 80013c8:	1d39      	adds	r1, r7, #4
 80013ca:	2364      	movs	r3, #100	; 0x64
 80013cc:	220b      	movs	r2, #11
 80013ce:	480b      	ldr	r0, [pc, #44]	; (80013fc <drive+0xf0>)
 80013d0:	f005 f908 	bl	80065e4 <HAL_UART_Transmit>
}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000719 	.word	0x20000719
 80013e0:	20000718 	.word	0x20000718
 80013e4:	cccccccd 	.word	0xcccccccd
 80013e8:	2000071b 	.word	0x2000071b
 80013ec:	2000071a 	.word	0x2000071a
 80013f0:	2000071d 	.word	0x2000071d
 80013f4:	2000071c 	.word	0x2000071c
 80013f8:	51eb851f 	.word	0x51eb851f
 80013fc:	20000294 	.word	0x20000294

08001400 <Left>:
  yspeed=speed;
  yflag=2;
}

void Left(uint8_t speed)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  yspeed=speed;
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <Left+0x24>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	7013      	strb	r3, [r2, #0]
  yflag=1;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <Left+0x28>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	2000071a 	.word	0x2000071a
 8001428:	2000071b 	.word	0x2000071b

0800142c <Forward>:

void Forward(uint8_t speed)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  xspeed=speed;
 8001436:	4a06      	ldr	r2, [pc, #24]	; (8001450 <Forward+0x24>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	7013      	strb	r3, [r2, #0]
  xflag=2;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <Forward+0x28>)
 800143e:	2202      	movs	r2, #2
 8001440:	701a      	strb	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000718 	.word	0x20000718
 8001454:	20000719 	.word	0x20000719

08001458 <Turn_Left>:
  xspeed=speed;
  xflag=1;
}

void Turn_Left(uint8_t speed)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  wspeed=speed;
 8001462:	4a06      	ldr	r2, [pc, #24]	; (800147c <Turn_Left+0x24>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	7013      	strb	r3, [r2, #0]
  wflag=2;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <Turn_Left+0x28>)
 800146a:	2202      	movs	r2, #2
 800146c:	701a      	strb	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	2000071c 	.word	0x2000071c
 8001480:	2000071d 	.word	0x2000071d

08001484 <Turn_Right>:

void Turn_Right(uint8_t speed)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  wspeed=speed;
 800148e:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <Turn_Right+0x24>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	7013      	strb	r3, [r2, #0]
  wflag=1;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <Turn_Right+0x28>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2000071c 	.word	0x2000071c
 80014ac:	2000071d 	.word	0x2000071d

080014b0 <atkAngleRound>:
//   }
//   SendPC("\r\n", 2);
// }

int atkAngleRound(int a)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return ((a + 360)%360);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <atkAngleRound+0x34>)
 80014c0:	fb82 1203 	smull	r1, r2, r2, r3
 80014c4:	441a      	add	r2, r3
 80014c6:	1211      	asrs	r1, r2, #8
 80014c8:	17da      	asrs	r2, r3, #31
 80014ca:	1a8a      	subs	r2, r1, r2
 80014cc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80014d0:	fb01 f202 	mul.w	r2, r1, r2
 80014d4:	1a9a      	subs	r2, r3, r2
 80014d6:	4613      	mov	r3, r2
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	b60b60b7 	.word	0xb60b60b7

080014e8 <ATKPrcess>:
void ATKPrcess()// update ATK value
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0a2      	sub	sp, #136	; 0x88
 80014ec:	af00      	add	r7, sp, #0
  int r = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  char ATKbuf[100];

  UART_ENABLE_RE(huart1);
 80014f4:	4b76      	ldr	r3, [pc, #472]	; (80016d0 <ATKPrcess+0x1e8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b75      	ldr	r3, [pc, #468]	; (80016d0 <ATKPrcess+0x1e8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0204 	orr.w	r2, r2, #4
 8001502:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Receive(&huart1, (uint8_t*)ATKbuf, 30, HAL_MAX_DELAY) == HAL_ERROR) // Read frames from ATK
 8001504:	f107 0110 	add.w	r1, r7, #16
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	221e      	movs	r2, #30
 800150e:	4870      	ldr	r0, [pc, #448]	; (80016d0 <ATKPrcess+0x1e8>)
 8001510:	f005 f8fe 	bl	8006710 <HAL_UART_Receive>
 8001514:	4603      	mov	r3, r0
 8001516:	2b01      	cmp	r3, #1
 8001518:	d108      	bne.n	800152c <ATKPrcess+0x44>
  {
    UART_DISABLE_RE(huart1); //error
 800151a:	4b6d      	ldr	r3, [pc, #436]	; (80016d0 <ATKPrcess+0x1e8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <ATKPrcess+0x1e8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0204 	bic.w	r2, r2, #4
 8001528:	601a      	str	r2, [r3, #0]
    return;
 800152a:	e0ce      	b.n	80016ca <ATKPrcess+0x1e2>
  } 
  UART_DISABLE_RE(huart1);
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <ATKPrcess+0x1e8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b67      	ldr	r3, [pc, #412]	; (80016d0 <ATKPrcess+0x1e8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0204 	bic.w	r2, r2, #4
 800153a:	601a      	str	r2, [r3, #0]
  // char pp[] = "\x90\x90\x90\x90";
  // SendPC(pp, 4);
  // SendPC(ATKbuf, 30);

  char ATKframes[10];
  for(r = 3; r<30; r++){ // Find the Report message
 800153c:	2303      	movs	r3, #3
 800153e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001542:	e061      	b.n	8001608 <ATKPrcess+0x120>
    if((ATKbuf[r-3] == 0x55 && ATKbuf[r-2] == 0x55) && ATKbuf[r-1] == 0x01)
 8001544:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001548:	3b03      	subs	r3, #3
 800154a:	3388      	adds	r3, #136	; 0x88
 800154c:	443b      	add	r3, r7
 800154e:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8001552:	2b55      	cmp	r3, #85	; 0x55
 8001554:	d153      	bne.n	80015fe <ATKPrcess+0x116>
 8001556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800155a:	3b02      	subs	r3, #2
 800155c:	3388      	adds	r3, #136	; 0x88
 800155e:	443b      	add	r3, r7
 8001560:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8001564:	2b55      	cmp	r3, #85	; 0x55
 8001566:	d14a      	bne.n	80015fe <ATKPrcess+0x116>
 8001568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800156c:	3b01      	subs	r3, #1
 800156e:	3388      	adds	r3, #136	; 0x88
 8001570:	443b      	add	r3, r7
 8001572:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d141      	bne.n	80015fe <ATKPrcess+0x116>
    {
      int i = 0, N = ATKbuf[r];
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001580:	f107 0210 	add.w	r2, r7, #16
 8001584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	67bb      	str	r3, [r7, #120]	; 0x78
      char * tmp = &ATKbuf[r+1];
 800158e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001592:	3301      	adds	r3, #1
 8001594:	f107 0210 	add.w	r2, r7, #16
 8001598:	4413      	add	r3, r2
 800159a:	677b      	str	r3, [r7, #116]	; 0x74
      
      // char pp[] = "\x90\x90\x90\x90";
      // SendPC(pp, 4);
      // SendPC(tmp, 8);

      uint8_t sum = 0x55 + 0x55 + 0x01 + N;  //checksum
 800159c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	3b55      	subs	r3, #85	; 0x55
 80015a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      for(i = 0; i < N; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015ac:	e019      	b.n	80015e2 <ATKPrcess+0xfa>
      {
        ATKframes[i] = tmp[i];
 80015ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015b4:	4413      	add	r3, r2
 80015b6:	7819      	ldrb	r1, [r3, #0]
 80015b8:	1d3a      	adds	r2, r7, #4
 80015ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015be:	4413      	add	r3, r2
 80015c0:	460a      	mov	r2, r1
 80015c2:	701a      	strb	r2, [r3, #0]
        sum += tmp[i];
 80015c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015ca:	4413      	add	r3, r2
 80015cc:	781a      	ldrb	r2, [r3, #0]
 80015ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80015d2:	4413      	add	r3, r2
 80015d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      for(i = 0; i < N; i++)
 80015d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015dc:	3301      	adds	r3, #1
 80015de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80015e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbe0      	blt.n	80015ae <ATKPrcess+0xc6>
      }

      if(sum == tmp[i]) 
 80015ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d009      	beq.n	8001612 <ATKPrcess+0x12a>
  for(r = 3; r<30; r++){ // Find the Report message
 80015fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001602:	3301      	adds	r3, #1
 8001604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800160c:	2b1d      	cmp	r3, #29
 800160e:	dd99      	ble.n	8001544 <ATKPrcess+0x5c>
 8001610:	e000      	b.n	8001614 <ATKPrcess+0x12c>
      {
        break; // if checksum pass 
 8001612:	bf00      	nop
      }

    }
  }

  if(r == 30) // Do not find the correct reply
 8001614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001618:	2b1e      	cmp	r3, #30
 800161a:	d055      	beq.n	80016c8 <ATKPrcess+0x1e0>
  {
    return;
  }

  roll = (float)((int16_t)(ATKframes[1] << 8) | ATKframes[0]) / 32768 * 180;
 800161c:	797b      	ldrb	r3, [r7, #5]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21b      	sxth	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	793b      	ldrb	r3, [r7, #4]
 8001626:	4313      	orrs	r3, r2
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001630:	eddf 6a28 	vldr	s13, [pc, #160]	; 80016d4 <ATKPrcess+0x1ec>
 8001634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001638:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80016d8 <ATKPrcess+0x1f0>
 800163c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <ATKPrcess+0x1f4>)
 8001642:	edc3 7a00 	vstr	s15, [r3]
  pitch = (float)((int16_t)(ATKframes[3] << 8) | ATKframes[2]) / 32768 * 180;
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b21b      	sxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	79bb      	ldrb	r3, [r7, #6]
 8001650:	4313      	orrs	r3, r2
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80016d4 <ATKPrcess+0x1ec>
 800165e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001662:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80016d8 <ATKPrcess+0x1f0>
 8001666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <ATKPrcess+0x1f8>)
 800166c:	edc3 7a00 	vstr	s15, [r3]
  roll = (float)((int16_t)(ATKframes[5] << 8) | ATKframes[4]) / 32768 * 180;
 8001670:	7a7b      	ldrb	r3, [r7, #9]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21b      	sxth	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	7a3b      	ldrb	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001684:	eddf 6a13 	vldr	s13, [pc, #76]	; 80016d4 <ATKPrcess+0x1ec>
 8001688:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80016d8 <ATKPrcess+0x1f0>
 8001690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <ATKPrcess+0x1f4>)
 8001696:	edc3 7a00 	vstr	s15, [r3]
  selfAngelint = ((int)roll + 180) % 360;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <ATKPrcess+0x1f4>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a4:	ee17 3a90 	vmov	r3, s15
 80016a8:	33b4      	adds	r3, #180	; 0xb4
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <ATKPrcess+0x1fc>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	441a      	add	r2, r3
 80016b2:	1211      	asrs	r1, r2, #8
 80016b4:	17da      	asrs	r2, r3, #31
 80016b6:	1a8a      	subs	r2, r1, r2
 80016b8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80016bc:	fb01 f202 	mul.w	r2, r1, r2
 80016c0:	1a9a      	subs	r2, r3, r2
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <ATKPrcess+0x200>)
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e000      	b.n	80016ca <ATKPrcess+0x1e2>
    return;
 80016c8:	bf00      	nop
  // qwq[0] = (int)(selfAngelint/100) + '0'; 
  // qwq[1] = (int)(selfAngelint/10)%10 + '0'; 
  // qwq[2] = selfAngelint%10 + '0'; 
  // qwq[3] = '\n';
  // HAL_UART_Transmit(&huart5, qwq, 4, HAL_MAX_DELAY);
}
 80016ca:	3788      	adds	r7, #136	; 0x88
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200003b4 	.word	0x200003b4
 80016d4:	47000000 	.word	0x47000000
 80016d8:	43340000 	.word	0x43340000
 80016dc:	20000720 	.word	0x20000720
 80016e0:	20000724 	.word	0x20000724
 80016e4:	b60b60b7 	.word	0xb60b60b7
 80016e8:	20000728 	.word	0x20000728

080016ec <Set_angle>:

void Set_angle(TIM_HandleTypeDef * htim,uint32_t Channel,uint8_t angle,uint32_t countPeriod,uint32_t CycleTime) 
{
 80016ec:	b5b0      	push	{r4, r5, r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71fb      	strb	r3, [r7, #7]
	uint16_t compare_value=0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	82fb      	strh	r3, [r7, #22]
  if(angle<=180)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2bb4      	cmp	r3, #180	; 0xb4
 8001704:	d861      	bhi.n	80017ca <Set_angle+0xde>
  {
    compare_value=0.5*countPeriod/CycleTime+angle*countPeriod/CycleTime/90; //compute the compare_value
 8001706:	6838      	ldr	r0, [r7, #0]
 8001708:	f7fe ff24 	bl	8000554 <__aeabi_ui2d>
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <Set_angle+0xe8>)
 8001712:	f7fe ff99 	bl	8000648 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4614      	mov	r4, r2
 800171c:	461d      	mov	r5, r3
 800171e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001720:	f7fe ff18 	bl	8000554 <__aeabi_ui2d>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4620      	mov	r0, r4
 800172a:	4629      	mov	r1, r5
 800172c:	f7ff f8b6 	bl	800089c <__aeabi_ddiv>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4614      	mov	r4, r2
 8001736:	461d      	mov	r5, r3
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	fb03 f202 	mul.w	r2, r3, r2
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <Set_angle+0xec>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe feff 	bl	8000554 <__aeabi_ui2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7fe fdbd 	bl	80002dc <__adddf3>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff fa45 	bl	8000bf8 <__aeabi_d2uiz>
 800176e:	4603      	mov	r3, r0
 8001770:	82fb      	strh	r3, [r7, #22]
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d104      	bne.n	8001782 <Set_angle+0x96>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	8afa      	ldrh	r2, [r7, #22]
 800177e:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001780:	e023      	b.n	80017ca <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b04      	cmp	r3, #4
 8001786:	d104      	bne.n	8001792 <Set_angle+0xa6>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	8afb      	ldrh	r3, [r7, #22]
 800178e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001790:	e01b      	b.n	80017ca <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d104      	bne.n	80017a2 <Set_angle+0xb6>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	8afb      	ldrh	r3, [r7, #22]
 800179e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80017a0:	e013      	b.n	80017ca <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d104      	bne.n	80017b2 <Set_angle+0xc6>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	8afb      	ldrh	r3, [r7, #22]
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80017b0:	e00b      	b.n	80017ca <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b10      	cmp	r3, #16
 80017b6:	d104      	bne.n	80017c2 <Set_angle+0xd6>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	8afb      	ldrh	r3, [r7, #22]
 80017be:	6493      	str	r3, [r2, #72]	; 0x48
}
 80017c0:	e003      	b.n	80017ca <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	8afb      	ldrh	r3, [r7, #22]
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	3fe00000 	.word	0x3fe00000
 80017d8:	b60b60b7 	.word	0xb60b60b7

080017dc <turn_Angle>:
    return TurnAngle;
  return HAL_ERROR;
}

void turn_Angle(int angle, int direction)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  int aimAngle=0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  if(direction == 1)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d12f      	bne.n	8001850 <turn_Angle+0x74>
  {
    ATKPrcess();
 80017f0:	f7ff fe7a 	bl	80014e8 <ATKPrcess>
    aimAngle = atkAngleRound(selfAngelint + angle);
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <turn_Angle+0xfc>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fe57 	bl	80014b0 <atkAngleRound>
 8001802:	60f8      	str	r0, [r7, #12]
    Forward(0);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff fe11 	bl	800142c <Forward>
    Left(0);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fdf8 	bl	8001400 <Left>
    Turn_Right(100); //增大目前角度
 8001810:	2064      	movs	r0, #100	; 0x64
 8001812:	f7ff fe37 	bl	8001484 <Turn_Right>
    drive();
 8001816:	f7ff fd79 	bl	800130c <drive>
      // SendPCint(aimAngle);
    while (selfAngelint >= atkAngleRound(aimAngle + 2) || selfAngelint <= atkAngleRound(aimAngle - 2))
 800181a:	e004      	b.n	8001826 <turn_Angle+0x4a>
    {
      toggleLD2(10);
 800181c:	200a      	movs	r0, #10
 800181e:	f7ff fb8d 	bl	8000f3c <toggleLD2>
      ATKPrcess();
 8001822:	f7ff fe61 	bl	80014e8 <ATKPrcess>
    while (selfAngelint >= atkAngleRound(aimAngle + 2) || selfAngelint <= atkAngleRound(aimAngle - 2))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3302      	adds	r3, #2
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fe40 	bl	80014b0 <atkAngleRound>
 8001830:	4602      	mov	r2, r0
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <turn_Angle+0xfc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	ddf0      	ble.n	800181c <turn_Angle+0x40>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3b02      	subs	r3, #2
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fe36 	bl	80014b0 <atkAngleRound>
 8001844:	4602      	mov	r2, r0
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <turn_Angle+0xfc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	dae6      	bge.n	800181c <turn_Angle+0x40>
 800184e:	e031      	b.n	80018b4 <turn_Angle+0xd8>
      // SendPCint(aimAngle);
    }
  }
  else if(direction == 2)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d12e      	bne.n	80018b4 <turn_Angle+0xd8>
  {
    ATKPrcess();
 8001856:	f7ff fe47 	bl	80014e8 <ATKPrcess>
    aimAngle = atkAngleRound(selfAngelint - angle);
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <turn_Angle+0xfc>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fe24 	bl	80014b0 <atkAngleRound>
 8001868:	60f8      	str	r0, [r7, #12]
    Forward(0);
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fdde 	bl	800142c <Forward>
    Left(0);
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fdc5 	bl	8001400 <Left>
    Turn_Left(100);//减小目前角度
 8001876:	2064      	movs	r0, #100	; 0x64
 8001878:	f7ff fdee 	bl	8001458 <Turn_Left>
    drive();
 800187c:	f7ff fd46 	bl	800130c <drive>
    while (selfAngelint >= atkAngleRound(aimAngle + 2) || selfAngelint <= atkAngleRound(aimAngle - 2))
 8001880:	e004      	b.n	800188c <turn_Angle+0xb0>
    {
      toggleLD2(10);
 8001882:	200a      	movs	r0, #10
 8001884:	f7ff fb5a 	bl	8000f3c <toggleLD2>
      ATKPrcess();
 8001888:	f7ff fe2e 	bl	80014e8 <ATKPrcess>
    while (selfAngelint >= atkAngleRound(aimAngle + 2) || selfAngelint <= atkAngleRound(aimAngle - 2))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3302      	adds	r3, #2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fe0d 	bl	80014b0 <atkAngleRound>
 8001896:	4602      	mov	r2, r0
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <turn_Angle+0xfc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	ddf0      	ble.n	8001882 <turn_Angle+0xa6>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3b02      	subs	r3, #2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fe03 	bl	80014b0 <atkAngleRound>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <turn_Angle+0xfc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dae6      	bge.n	8001882 <turn_Angle+0xa6>
      // SendPCint(aimAngle);
    }
  }
  
  Forward(0);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff fdb9 	bl	800142c <Forward>
  Left(0);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f7ff fda0 	bl	8001400 <Left>
  Turn_Left(0);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff fdc9 	bl	8001458 <Turn_Left>
  drive();
 80018c6:	f7ff fd21 	bl	800130c <drive>
  toggleLD2(100);
 80018ca:	2064      	movs	r0, #100	; 0x64
 80018cc:	f7ff fb36 	bl	8000f3c <toggleLD2>
  return;
 80018d0:	bf00      	nop
}
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000728 	.word	0x20000728
 80018dc:	00000000 	.word	0x00000000

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e6:	f001 fb1c 	bl	8002f22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ea:	f000 f8f9 	bl	8001ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ee:	f000 fc83 	bl	80021f8 <MX_GPIO_Init>
  MX_TIM5_Init();
 80018f2:	f000 fc05 	bl	8002100 <MX_TIM5_Init>
  MX_TIM1_Init();
 80018f6:	f000 fab9 	bl	8001e6c <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 80018fa:	f000 f93d 	bl	8001b78 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80018fe:	f000 f985 	bl	8001c0c <MX_UART4_Init>
  MX_TIM4_Init();
 8001902:	f000 fb8b 	bl	800201c <MX_TIM4_Init>
  MX_UART5_Init();
 8001906:	f000 f9cd 	bl	8001ca4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800190a:	f000 fa17 	bl	8001d3c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800190e:	f000 fa61 	bl	8001dd4 <MX_USART3_UART_Init>

  UART_DISABLE_RE(huart1);// DISABLE ATK uart first (otherwise MCU canot rev message from ATK, small feature here)
 8001912:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <main+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <main+0x1b8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0204 	bic.w	r2, r2, #4
 8001920:	601a      	str	r2, [r3, #0]
  UART_DISABLE_RE(huart3);
 8001922:	4b5e      	ldr	r3, [pc, #376]	; (8001a9c <main+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b5c      	ldr	r3, [pc, #368]	; (8001a9c <main+0x1bc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0204 	bic.w	r2, r2, #4
 8001930:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN 2 */
  //Load parameters to PID
  PID(&myPIDultra, &Inputultra, &Outputultra, &Setpointultra,  20, 40, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 8001932:	2300      	movs	r3, #0
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	2301      	movs	r3, #1
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	ed9f 2b45 	vldr	d2, [pc, #276]	; 8001a50 <main+0x170>
 800193e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8001a58 <main+0x178>
 8001942:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8001a60 <main+0x180>
 8001946:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <main+0x1c0>)
 8001948:	4a56      	ldr	r2, [pc, #344]	; (8001aa4 <main+0x1c4>)
 800194a:	4957      	ldr	r1, [pc, #348]	; (8001aa8 <main+0x1c8>)
 800194c:	4857      	ldr	r0, [pc, #348]	; (8001aac <main+0x1cc>)
 800194e:	f000 fd1f 	bl	8002390 <PID>
  PID_SetMode(&myPIDultra, _PID_MODE_AUTOMATIC);
 8001952:	2101      	movs	r1, #1
 8001954:	4855      	ldr	r0, [pc, #340]	; (8001aac <main+0x1cc>)
 8001956:	f000 fd67 	bl	8002428 <PID_SetMode>
  PID_SetSampleTime(&myPIDultra, 50);
 800195a:	2132      	movs	r1, #50	; 0x32
 800195c:	4853      	ldr	r0, [pc, #332]	; (8001aac <main+0x1cc>)
 800195e:	f000 fed7 	bl	8002710 <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDultra, -500, 500);
 8001962:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001a68 <main+0x188>
 8001966:	ed9f 0b42 	vldr	d0, [pc, #264]	; 8001a70 <main+0x190>
 800196a:	4850      	ldr	r0, [pc, #320]	; (8001aac <main+0x1cc>)
 800196c:	f000 fd7a 	bl	8002464 <PID_SetOutputLimits>

  PID(&myPIDdistance, &Inputdistance, &Outputdistance, &Setpointdistance,  0.8, 200, 15, _PID_P_ON_E, _PID_CD_DIRECT);
 8001970:	2300      	movs	r3, #0
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	2301      	movs	r3, #1
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	ed9f 2b3f 	vldr	d2, [pc, #252]	; 8001a78 <main+0x198>
 800197c:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8001a80 <main+0x1a0>
 8001980:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8001a88 <main+0x1a8>
 8001984:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <main+0x1d0>)
 8001986:	4a4b      	ldr	r2, [pc, #300]	; (8001ab4 <main+0x1d4>)
 8001988:	494b      	ldr	r1, [pc, #300]	; (8001ab8 <main+0x1d8>)
 800198a:	484c      	ldr	r0, [pc, #304]	; (8001abc <main+0x1dc>)
 800198c:	f000 fd00 	bl	8002390 <PID>
  PID_SetMode(&myPIDdistance, _PID_MODE_AUTOMATIC);
 8001990:	2101      	movs	r1, #1
 8001992:	484a      	ldr	r0, [pc, #296]	; (8001abc <main+0x1dc>)
 8001994:	f000 fd48 	bl	8002428 <PID_SetMode>
  PID_SetSampleTime(&myPIDdistance, 50);
 8001998:	2132      	movs	r1, #50	; 0x32
 800199a:	4848      	ldr	r0, [pc, #288]	; (8001abc <main+0x1dc>)
 800199c:	f000 feb8 	bl	8002710 <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDdistance, -20, 20);
 80019a0:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001a60 <main+0x180>
 80019a4:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 8001a90 <main+0x1b0>
 80019a8:	4844      	ldr	r0, [pc, #272]	; (8001abc <main+0x1dc>)
 80019aa:	f000 fd5b 	bl	8002464 <PID_SetOutputLimits>

  //start TIM1 PWM generator
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019ae:	2100      	movs	r1, #0
 80019b0:	4843      	ldr	r0, [pc, #268]	; (8001ac0 <main+0x1e0>)
 80019b2:	f002 ff05 	bl	80047c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Machine Arm: 0(normal) and 180(putting)
 80019b6:	2104      	movs	r1, #4
 80019b8:	4841      	ldr	r0, [pc, #260]	; (8001ac0 <main+0x1e0>)
 80019ba:	f002 ff01 	bl	80047c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // Bule servo(top): 90
 80019be:	2108      	movs	r1, #8
 80019c0:	483f      	ldr	r0, [pc, #252]	; (8001ac0 <main+0x1e0>)
 80019c2:	f002 fefd 	bl	80047c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Bule servo(openmv): 110(rectangle) and 65(45 degree)
 80019c6:	210c      	movs	r1, #12
 80019c8:	483d      	ldr	r0, [pc, #244]	; (8001ac0 <main+0x1e0>)
 80019ca:	f002 fef9 	bl	80047c0 <HAL_TIM_PWM_Start>
  //start TIM5 IT left and right sensor
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80019ce:	2100      	movs	r1, #0
 80019d0:	483c      	ldr	r0, [pc, #240]	; (8001ac4 <main+0x1e4>)
 80019d2:	f003 f869 	bl	8004aa8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 80019d6:	2104      	movs	r1, #4
 80019d8:	483a      	ldr	r0, [pc, #232]	; (8001ac4 <main+0x1e4>)
 80019da:	f003 f865 	bl	8004aa8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80019de:	2100      	movs	r1, #0
 80019e0:	4839      	ldr	r0, [pc, #228]	; (8001ac8 <main+0x1e8>)
 80019e2:	f003 f861 	bl	8004aa8 <HAL_TIM_IC_Start_IT>

  //Servo initial position
  Set_angle(&htim1,TIM_CHANNEL_2, 0,20000,20);
 80019e6:	2314      	movs	r3, #20
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80019ee:	2200      	movs	r2, #0
 80019f0:	2104      	movs	r1, #4
 80019f2:	4833      	ldr	r0, [pc, #204]	; (8001ac0 <main+0x1e0>)
 80019f4:	f7ff fe7a 	bl	80016ec <Set_angle>
  Set_angle(&htim1,TIM_CHANNEL_3, 90,20000,20);
 80019f8:	2314      	movs	r3, #20
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001a00:	225a      	movs	r2, #90	; 0x5a
 8001a02:	2108      	movs	r1, #8
 8001a04:	482e      	ldr	r0, [pc, #184]	; (8001ac0 <main+0x1e0>)
 8001a06:	f7ff fe71 	bl	80016ec <Set_angle>
  Set_angle(&htim1,TIM_CHANNEL_4, 110,20000,20);
 8001a0a:	2314      	movs	r3, #20
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001a12:	226e      	movs	r2, #110	; 0x6e
 8001a14:	210c      	movs	r1, #12
 8001a16:	482a      	ldr	r0, [pc, #168]	; (8001ac0 <main+0x1e0>)
 8001a18:	f7ff fe68 	bl	80016ec <Set_angle>

  //Recode initial Pitch
  ATKPrcess();
 8001a1c:	f7ff fd64 	bl	80014e8 <ATKPrcess>
  initial_Pitch = pitch;
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <main+0x1ec>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a2a      	ldr	r2, [pc, #168]	; (8001ad0 <main+0x1f0>)
 8001a26:	6013      	str	r3, [r2, #0]
  initial_selfAngelint = selfAngelint;
 8001a28:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <main+0x1f4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ad8 <main+0x1f8>)
 8001a2e:	6013      	str	r3, [r2, #0]

  int openmvAngle = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
  printf("Initialized. \r\n");
 8001a34:	4829      	ldr	r0, [pc, #164]	; (8001adc <main+0x1fc>)
 8001a36:	f006 f9fd 	bl	8007e34 <puts>
    // toggleLD2(100);
    // while ()
    // {
    //   /* code */
    // }
    turn_Angle(90,1);
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	205a      	movs	r0, #90	; 0x5a
 8001a3e:	f7ff fecd 	bl	80017dc <turn_Angle>
    HAL_Delay(5000);
 8001a42:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a46:	f001 fadd 	bl	8003004 <HAL_Delay>
    turn_Angle(90,1);
 8001a4a:	e7f6      	b.n	8001a3a <main+0x15a>
 8001a4c:	f3af 8000 	nop.w
 8001a50:	00000000 	.word	0x00000000
 8001a54:	3ff00000 	.word	0x3ff00000
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	40440000 	.word	0x40440000
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40340000 	.word	0x40340000
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	407f4000 	.word	0x407f4000
 8001a70:	00000000 	.word	0x00000000
 8001a74:	c07f4000 	.word	0xc07f4000
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	402e0000 	.word	0x402e0000
 8001a80:	00000000 	.word	0x00000000
 8001a84:	40690000 	.word	0x40690000
 8001a88:	9999999a 	.word	0x9999999a
 8001a8c:	3fe99999 	.word	0x3fe99999
 8001a90:	00000000 	.word	0x00000000
 8001a94:	c0340000 	.word	0xc0340000
 8001a98:	200003b4 	.word	0x200003b4
 8001a9c:	20000444 	.word	0x20000444
 8001aa0:	20000620 	.word	0x20000620
 8001aa4:	20000618 	.word	0x20000618
 8001aa8:	20000610 	.word	0x20000610
 8001aac:	20000638 	.word	0x20000638
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000630 	.word	0x20000630
 8001ab8:	20000628 	.word	0x20000628
 8001abc:	200006a8 	.word	0x200006a8
 8001ac0:	200004d4 	.word	0x200004d4
 8001ac4:	2000056c 	.word	0x2000056c
 8001ac8:	20000520 	.word	0x20000520
 8001acc:	20000724 	.word	0x20000724
 8001ad0:	2000072c 	.word	0x2000072c
 8001ad4:	20000728 	.word	0x20000728
 8001ad8:	20000730 	.word	0x20000730
 8001adc:	0800a0b0 	.word	0x0800a0b0

08001ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b094      	sub	sp, #80	; 0x50
 8001ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	2238      	movs	r2, #56	; 0x38
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f005 fcc0 	bl	8007474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f001 fd6e 	bl	80035e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b12:	2340      	movs	r3, #64	; 0x40
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b16:	2302      	movs	r3, #2
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b22:	2355      	movs	r3, #85	; 0x55
 8001b24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 fe08 	bl	800374c <HAL_RCC_OscConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b42:	f000 fbe5 	bl	8002310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b46:	230f      	movs	r3, #15
 8001b48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 f90c 	bl	8003d7c <HAL_RCC_ClockConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b6a:	f000 fbd1 	bl	8002310 <Error_Handler>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3750      	adds	r7, #80	; 0x50
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b7e:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <MX_LPUART1_UART_Init+0x90>)
 8001b80:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b88:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001bba:	4812      	ldr	r0, [pc, #72]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001bbc:	f004 fcc2 	bl	8006544 <HAL_UART_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bc6:	f000 fba3 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001bce:	f005 fb5d 	bl	800728c <HAL_UARTEx_SetTxFifoThreshold>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001bd8:	f000 fb9a 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001be0:	f005 fb92 	bl	8007308 <HAL_UARTEx_SetRxFifoThreshold>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001bea:	f000 fb91 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_LPUART1_UART_Init+0x8c>)
 8001bf0:	f005 fb13 	bl	800721a <HAL_UARTEx_DisableFifoMode>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001bfa:	f000 fb89 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000204 	.word	0x20000204
 8001c08:	40008000 	.word	0x40008000

08001c0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c12:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <MX_UART4_Init+0x94>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c54:	4811      	ldr	r0, [pc, #68]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c56:	f004 fc75 	bl	8006544 <HAL_UART_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001c60:	f000 fb56 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c64:	2100      	movs	r1, #0
 8001c66:	480d      	ldr	r0, [pc, #52]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c68:	f005 fb10 	bl	800728c <HAL_UARTEx_SetTxFifoThreshold>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001c72:	f000 fb4d 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c76:	2100      	movs	r1, #0
 8001c78:	4808      	ldr	r0, [pc, #32]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c7a:	f005 fb45 	bl	8007308 <HAL_UARTEx_SetRxFifoThreshold>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001c84:	f000 fb44 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c8a:	f005 fac6 	bl	800721a <HAL_UARTEx_DisableFifoMode>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001c94:	f000 fb3c 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000294 	.word	0x20000294
 8001ca0:	40004c00 	.word	0x40004c00

08001ca4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <MX_UART5_Init+0x90>)
 8001caa:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <MX_UART5_Init+0x94>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <MX_UART5_Init+0x90>)
 8001cb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cb4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <MX_UART5_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <MX_UART5_Init+0x90>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_UART5_Init+0x90>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <MX_UART5_Init+0x90>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <MX_UART5_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_UART5_Init+0x90>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <MX_UART5_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_UART5_Init+0x90>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <MX_UART5_Init+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001cec:	4811      	ldr	r0, [pc, #68]	; (8001d34 <MX_UART5_Init+0x90>)
 8001cee:	f004 fc29 	bl	8006544 <HAL_UART_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001cf8:	f000 fb0a 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	480d      	ldr	r0, [pc, #52]	; (8001d34 <MX_UART5_Init+0x90>)
 8001d00:	f005 fac4 	bl	800728c <HAL_UARTEx_SetTxFifoThreshold>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001d0a:	f000 fb01 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4808      	ldr	r0, [pc, #32]	; (8001d34 <MX_UART5_Init+0x90>)
 8001d12:	f005 faf9 	bl	8007308 <HAL_UARTEx_SetRxFifoThreshold>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001d1c:	f000 faf8 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001d20:	4804      	ldr	r0, [pc, #16]	; (8001d34 <MX_UART5_Init+0x90>)
 8001d22:	f005 fa7a 	bl	800721a <HAL_UARTEx_DisableFifoMode>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001d2c:	f000 faf0 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000324 	.word	0x20000324
 8001d38:	40005000 	.word	0x40005000

08001d3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d42:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <MX_USART1_UART_Init+0x94>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d84:	4811      	ldr	r0, [pc, #68]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d86:	f004 fbdd 	bl	8006544 <HAL_UART_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d90:	f000 fabe 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d94:	2100      	movs	r1, #0
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001d98:	f005 fa78 	bl	800728c <HAL_UARTEx_SetTxFifoThreshold>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001da2:	f000 fab5 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da6:	2100      	movs	r1, #0
 8001da8:	4808      	ldr	r0, [pc, #32]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001daa:	f005 faad 	bl	8007308 <HAL_UARTEx_SetRxFifoThreshold>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001db4:	f000 faac 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001db8:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MX_USART1_UART_Init+0x90>)
 8001dba:	f005 fa2e 	bl	800721a <HAL_UARTEx_DisableFifoMode>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001dc4:	f000 faa4 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200003b4 	.word	0x200003b4
 8001dd0:	40013800 	.word	0x40013800

08001dd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001dda:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <MX_USART3_UART_Init+0x94>)
 8001ddc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e1c:	4811      	ldr	r0, [pc, #68]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001e1e:	f004 fb91 	bl	8006544 <HAL_UART_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e28:	f000 fa72 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	480d      	ldr	r0, [pc, #52]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001e30:	f005 fa2c 	bl	800728c <HAL_UARTEx_SetTxFifoThreshold>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e3a:	f000 fa69 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4808      	ldr	r0, [pc, #32]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001e42:	f005 fa61 	bl	8007308 <HAL_UARTEx_SetRxFifoThreshold>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e4c:	f000 fa60 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_USART3_UART_Init+0x90>)
 8001e52:	f005 f9e2 	bl	800721a <HAL_UARTEx_DisableFifoMode>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e5c:	f000 fa58 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000444 	.word	0x20000444
 8001e68:	40004800 	.word	0x40004800

08001e6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b09c      	sub	sp, #112	; 0x70
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e72:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	615a      	str	r2, [r3, #20]
 8001e9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2234      	movs	r2, #52	; 0x34
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 fae4 	bl	8007474 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001eae:	4a5a      	ldr	r2, [pc, #360]	; (8002018 <MX_TIM1_Init+0x1ac>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1699;
 8001eb2:	4b58      	ldr	r3, [pc, #352]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001eb4:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001eb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3499;
 8001ec0:	4b54      	ldr	r3, [pc, #336]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001ec2:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001ec6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec8:	4b52      	ldr	r3, [pc, #328]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ece:	4b51      	ldr	r3, [pc, #324]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eda:	484e      	ldr	r0, [pc, #312]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001edc:	f002 fbb8 	bl	8004650 <HAL_TIM_Base_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001ee6:	f000 fa13 	bl	8002310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eee:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ef0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4847      	ldr	r0, [pc, #284]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001ef8:	f003 fa56 	bl	80053a8 <HAL_TIM_ConfigClockSource>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001f02:	f000 fa05 	bl	8002310 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f06:	4843      	ldr	r0, [pc, #268]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001f08:	f002 fbf9 	bl	80046fe <HAL_TIM_PWM_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001f12:	f000 f9fd 	bl	8002310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f26:	4619      	mov	r1, r3
 8001f28:	483a      	ldr	r0, [pc, #232]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001f2a:	f004 f97d 	bl	8006228 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001f34:	f000 f9ec 	bl	8002310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f38:	2360      	movs	r3, #96	; 0x60
 8001f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f40:	2300      	movs	r3, #0
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f44:	2300      	movs	r3, #0
 8001f46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f50:	2300      	movs	r3, #0
 8001f52:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	482d      	ldr	r0, [pc, #180]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001f5e:	f003 f90f 	bl	8005180 <HAL_TIM_PWM_ConfigChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001f68:	f000 f9d2 	bl	8002310 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f70:	2204      	movs	r2, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4827      	ldr	r0, [pc, #156]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001f76:	f003 f903 	bl	8005180 <HAL_TIM_PWM_ConfigChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001f80:	f000 f9c6 	bl	8002310 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4820      	ldr	r0, [pc, #128]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001f92:	f003 f8f5 	bl	8005180 <HAL_TIM_PWM_ConfigChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001f9c:	f000 f9b8 	bl	8002310 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fa4:	220c      	movs	r2, #12
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	481a      	ldr	r0, [pc, #104]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001faa:	f003 f8e9 	bl	8005180 <HAL_TIM_PWM_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001fb4:	f000 f9ac 	bl	8002310 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8001ff6:	f004 f9ad 	bl	8006354 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 8002000:	f000 f986 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002004:	4803      	ldr	r0, [pc, #12]	; (8002014 <MX_TIM1_Init+0x1a8>)
 8002006:	f000 fe0d 	bl	8002c24 <HAL_TIM_MspPostInit>

}
 800200a:	bf00      	nop
 800200c:	3770      	adds	r7, #112	; 0x70
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200004d4 	.word	0x200004d4
 8002018:	40012c00 	.word	0x40012c00

0800201c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002022:	f107 0320 	add.w	r3, r7, #32
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <MX_TIM4_Init+0xdc>)
 800204a:	4a2c      	ldr	r2, [pc, #176]	; (80020fc <MX_TIM4_Init+0xe0>)
 800204c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 33999;
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <MX_TIM4_Init+0xdc>)
 8002050:	f248 42cf 	movw	r2, #33999	; 0x84cf
 8002054:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <MX_TIM4_Init+0xdc>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800205c:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <MX_TIM4_Init+0xdc>)
 800205e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002062:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <MX_TIM4_Init+0xdc>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <MX_TIM4_Init+0xdc>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002070:	4821      	ldr	r0, [pc, #132]	; (80020f8 <MX_TIM4_Init+0xdc>)
 8002072:	f002 faed 	bl	8004650 <HAL_TIM_Base_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800207c:	f000 f948 	bl	8002310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002084:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002086:	f107 0320 	add.w	r3, r7, #32
 800208a:	4619      	mov	r1, r3
 800208c:	481a      	ldr	r0, [pc, #104]	; (80020f8 <MX_TIM4_Init+0xdc>)
 800208e:	f003 f98b 	bl	80053a8 <HAL_TIM_ConfigClockSource>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002098:	f000 f93a 	bl	8002310 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800209c:	4816      	ldr	r0, [pc, #88]	; (80020f8 <MX_TIM4_Init+0xdc>)
 800209e:	f002 fca1 	bl	80049e4 <HAL_TIM_IC_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80020a8:	f000 f932 	bl	8002310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	480f      	ldr	r0, [pc, #60]	; (80020f8 <MX_TIM4_Init+0xdc>)
 80020bc:	f004 f8b4 	bl	8006228 <HAL_TIMEx_MasterConfigSynchronization>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80020c6:	f000 f923 	bl	8002310 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80020ca:	230a      	movs	r3, #10
 80020cc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020ce:	2301      	movs	r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2200      	movs	r2, #0
 80020de:	4619      	mov	r1, r3
 80020e0:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_TIM4_Init+0xdc>)
 80020e2:	f002 ffb0 	bl	8005046 <HAL_TIM_IC_ConfigChannel>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80020ec:	f000 f910 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	3730      	adds	r7, #48	; 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000520 	.word	0x20000520
 80020fc:	40000800 	.word	0x40000800

08002100 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	; 0x30
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002106:	f107 0320 	add.w	r3, r7, #32
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <MX_TIM5_Init+0xf0>)
 800212e:	4a31      	ldr	r2, [pc, #196]	; (80021f4 <MX_TIM5_Init+0xf4>)
 8002130:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002132:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <MX_TIM5_Init+0xf0>)
 8002134:	22a9      	movs	r2, #169	; 0xa9
 8002136:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <MX_TIM5_Init+0xf0>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 800213e:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <MX_TIM5_Init+0xf0>)
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <MX_TIM5_Init+0xf0>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214c:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <MX_TIM5_Init+0xf0>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002152:	4827      	ldr	r0, [pc, #156]	; (80021f0 <MX_TIM5_Init+0xf0>)
 8002154:	f002 fa7c 	bl	8004650 <HAL_TIM_Base_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800215e:	f000 f8d7 	bl	8002310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002166:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002168:	f107 0320 	add.w	r3, r7, #32
 800216c:	4619      	mov	r1, r3
 800216e:	4820      	ldr	r0, [pc, #128]	; (80021f0 <MX_TIM5_Init+0xf0>)
 8002170:	f003 f91a 	bl	80053a8 <HAL_TIM_ConfigClockSource>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800217a:	f000 f8c9 	bl	8002310 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800217e:	481c      	ldr	r0, [pc, #112]	; (80021f0 <MX_TIM5_Init+0xf0>)
 8002180:	f002 fc30 	bl	80049e4 <HAL_TIM_IC_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800218a:	f000 f8c1 	bl	8002310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4814      	ldr	r0, [pc, #80]	; (80021f0 <MX_TIM5_Init+0xf0>)
 800219e:	f004 f843 	bl	8006228 <HAL_TIMEx_MasterConfigSynchronization>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80021a8:	f000 f8b2 	bl	8002310 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80021ac:	230a      	movs	r3, #10
 80021ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021b0:	2301      	movs	r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	2200      	movs	r2, #0
 80021c0:	4619      	mov	r1, r3
 80021c2:	480b      	ldr	r0, [pc, #44]	; (80021f0 <MX_TIM5_Init+0xf0>)
 80021c4:	f002 ff3f 	bl	8005046 <HAL_TIM_IC_ConfigChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 80021ce:	f000 f89f 	bl	8002310 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	2204      	movs	r2, #4
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_TIM5_Init+0xf0>)
 80021da:	f002 ff34 	bl	8005046 <HAL_TIM_IC_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 80021e4:	f000 f894 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3730      	adds	r7, #48	; 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000056c 	.word	0x2000056c
 80021f4:	40000c00 	.word	0x40000c00

080021f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800220e:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <MX_GPIO_Init+0xec>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	4a34      	ldr	r2, [pc, #208]	; (80022e4 <MX_GPIO_Init+0xec>)
 8002214:	f043 0304 	orr.w	r3, r3, #4
 8002218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221a:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <MX_GPIO_Init+0xec>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002226:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <MX_GPIO_Init+0xec>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	4a2e      	ldr	r2, [pc, #184]	; (80022e4 <MX_GPIO_Init+0xec>)
 800222c:	f043 0320 	orr.w	r3, r3, #32
 8002230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002232:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <MX_GPIO_Init+0xec>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <MX_GPIO_Init+0xec>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002242:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <MX_GPIO_Init+0xec>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <MX_GPIO_Init+0xec>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <MX_GPIO_Init+0xec>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <MX_GPIO_Init+0xec>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <MX_GPIO_Init+0xec>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <MX_GPIO_Init+0xec>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <MX_GPIO_Init+0xec>)
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <MX_GPIO_Init+0xec>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	2120      	movs	r1, #32
 800228a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800228e:	f001 f96d 	bl	800356c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002298:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800229c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	480f      	ldr	r0, [pc, #60]	; (80022e8 <MX_GPIO_Init+0xf0>)
 80022aa:	f000 ffdd 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022ae:	2320      	movs	r3, #32
 80022b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b2:	2301      	movs	r3, #1
 80022b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c8:	f000 ffce 	bl	8003268 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2028      	movs	r0, #40	; 0x28
 80022d2:	f000 ff94 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022d6:	2028      	movs	r0, #40	; 0x28
 80022d8:	f000 ffab 	bl	8003232 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022dc:	bf00      	nop
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	48000800 	.word	0x48000800

080022ec <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80022f4:	1d39      	adds	r1, r7, #4
 80022f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022fa:	2201      	movs	r2, #1
 80022fc:	4803      	ldr	r0, [pc, #12]	; (800230c <__io_putchar+0x20>)
 80022fe:	f004 f971 	bl	80065e4 <HAL_UART_Transmit>

  return ch;
 8002302:	687b      	ldr	r3, [r7, #4]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000204 	.word	0x20000204

08002310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002314:	b672      	cpsid	i
}
 8002316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002318:	e7fe      	b.n	8002318 <Error_Handler+0x8>

0800231a <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800234a:	f7fe fc0d 	bl	8000b68 <__aeabi_dcmpgt>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8002360:	e011      	b.n	8002386 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800236e:	f7fe fbdd 	bl	8000b2c <__aeabi_dcmplt>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d100      	bne.n	800237a <PID_Init+0x60>
}
 8002378:	e005      	b.n	8002386 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6278      	str	r0, [r7, #36]	; 0x24
 8002398:	6239      	str	r1, [r7, #32]
 800239a:	61fa      	str	r2, [r7, #28]
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	ed87 0b04 	vstr	d0, [r7, #16]
 80023a2:	ed87 1b02 	vstr	d1, [r7, #8]
 80023a6:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	6a3a      	ldr	r2, [r7, #32]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	2200      	movs	r2, #0
 80023c0:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80023c2:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002418 <PID+0x88>
 80023c6:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002420 <PID+0x90>
 80023ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023cc:	f000 f84a 	bl	8002464 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	2264      	movs	r2, #100	; 0x64
 80023d4:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 80023d6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023da:	4619      	mov	r1, r3
 80023dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023de:	f000 f957 	bl	8002690 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80023e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80023e6:	4619      	mov	r1, r3
 80023e8:	ed97 2b00 	vldr	d2, [r7]
 80023ec:	ed97 1b02 	vldr	d1, [r7, #8]
 80023f0:	ed97 0b04 	vldr	d0, [r7, #16]
 80023f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023f6:	f000 f8a3 	bl	8002540 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80023fa:	f000 fdf7 	bl	8002fec <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	1ad2      	subs	r2, r2, r3
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	605a      	str	r2, [r3, #4]
	
}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	; 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	f3af 8000 	nop.w
 8002418:	00000000 	.word	0x00000000
 800241c:	406fe000 	.word	0x406fe000
	...

08002428 <PID_SetMode>:
	
}

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	2b01      	cmp	r3, #1
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <PID_SetMode+0x2e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	785b      	ldrb	r3, [r3, #1]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff62 	bl	800231a <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	705a      	strb	r2, [r3, #1]
	
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6178      	str	r0, [r7, #20]
 800246c:	ed87 0b02 	vstr	d0, [r7, #8]
 8002470:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002478:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800247c:	f7fe fb6a 	bl	8000b54 <__aeabi_dcmpge>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d158      	bne.n	8002538 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8002486:	6979      	ldr	r1, [r7, #20]
 8002488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800248c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8002490:	6979      	ldr	r1, [r7, #20]
 8002492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002496:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	785b      	ldrb	r3, [r3, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d04b      	beq.n	800253a <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80024b0:	f7fe fb5a 	bl	8000b68 <__aeabi_dcmpgt>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80024c4:	e9c1 2300 	strd	r2, r3, [r1]
 80024c8:	e012      	b.n	80024f0 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80024d8:	f7fe fb28 	bl	8000b2c <__aeabi_dcmplt>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d006      	beq.n	80024f0 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80024ec:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80024fc:	f7fe fb34 	bl	8000b68 <__aeabi_dcmpgt>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800250c:	6979      	ldr	r1, [r7, #20]
 800250e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002512:	e012      	b.n	800253a <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002520:	f7fe fb04 	bl	8000b2c <__aeabi_dcmplt>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002530:	6979      	ldr	r1, [r7, #20]
 8002532:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002536:	e000      	b.n	800253a <PID_SetOutputLimits+0xd6>
		return;
 8002538:	bf00      	nop
		}
		else { }
		
	}
	
}
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	61f8      	str	r0, [r7, #28]
 8002548:	ed87 0b04 	vstr	d0, [r7, #16]
 800254c:	ed87 1b02 	vstr	d1, [r7, #8]
 8002550:	ed87 2b00 	vstr	d2, [r7]
 8002554:	460b      	mov	r3, r1
 8002556:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002564:	f7fe fae2 	bl	8000b2c <__aeabi_dcmplt>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 8089 	bne.w	8002682 <PID_SetTunings2+0x142>
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800257c:	f7fe fad6 	bl	8000b2c <__aeabi_dcmplt>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d17d      	bne.n	8002682 <PID_SetTunings2+0x142>
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002592:	f7fe facb 	bl	8000b2c <__aeabi_dcmplt>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d172      	bne.n	8002682 <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	7efa      	ldrb	r2, [r7, #27]
 80025a0:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80025a2:	7efb      	ldrb	r3, [r7, #27]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80025b4:	69f9      	ldr	r1, [r7, #28]
 80025b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80025be:	69f9      	ldr	r1, [r7, #28]
 80025c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80025c8:	69f9      	ldr	r1, [r7, #28]
 80025ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffbc 	bl	8000554 <__aeabi_ui2d>
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	4b2a      	ldr	r3, [pc, #168]	; (800268c <PID_SetTunings2+0x14c>)
 80025e2:	f7fe f95b 	bl	800089c <__aeabi_ddiv>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 80025ee:	69f9      	ldr	r1, [r7, #28]
 80025f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025f4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80025f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002600:	f7fe f822 	bl	8000648 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	69f9      	ldr	r1, [r7, #28]
 800260a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800260e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002612:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002616:	f7fe f941 	bl	800089c <__aeabi_ddiv>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	69f9      	ldr	r1, [r7, #28]
 8002620:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	78db      	ldrb	r3, [r3, #3]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d12b      	bne.n	8002684 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002632:	f04f 0000 	mov.w	r0, #0
 8002636:	f04f 0100 	mov.w	r1, #0
 800263a:	f7fd fe4d 	bl	80002d8 <__aeabi_dsub>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	69f9      	ldr	r1, [r7, #28]
 8002644:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800264e:	f04f 0000 	mov.w	r0, #0
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	f7fd fe3f 	bl	80002d8 <__aeabi_dsub>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	69f9      	ldr	r1, [r7, #28]
 8002660:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800266a:	f04f 0000 	mov.w	r0, #0
 800266e:	f04f 0100 	mov.w	r1, #0
 8002672:	f7fd fe31 	bl	80002d8 <__aeabi_dsub>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	69f9      	ldr	r1, [r7, #28]
 800267c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002680:	e000      	b.n	8002684 <PID_SetTunings2+0x144>
		return;
 8002682:	bf00      	nop
		
	}
	
}
 8002684:	3728      	adds	r7, #40	; 0x28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	408f4000 	.word	0x408f4000

08002690 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d02e      	beq.n	8002702 <PID_SetControllerDirection+0x72>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	78db      	ldrb	r3, [r3, #3]
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d029      	beq.n	8002702 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80026b4:	f04f 0000 	mov.w	r0, #0
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	f7fd fe0c 	bl	80002d8 <__aeabi_dsub>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80026d0:	f04f 0000 	mov.w	r0, #0
 80026d4:	f04f 0100 	mov.w	r1, #0
 80026d8:	f7fd fdfe 	bl	80002d8 <__aeabi_dsub>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80026ec:	f04f 0000 	mov.w	r0, #0
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	f7fd fdf0 	bl	80002d8 <__aeabi_dsub>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	70da      	strb	r2, [r3, #3]
	
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	dd2e      	ble.n	800277e <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002720:	6838      	ldr	r0, [r7, #0]
 8002722:	f7fd ff27 	bl	8000574 <__aeabi_i2d>
 8002726:	4604      	mov	r4, r0
 8002728:	460d      	mov	r5, r1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd ff10 	bl	8000554 <__aeabi_ui2d>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4620      	mov	r0, r4
 800273a:	4629      	mov	r1, r5
 800273c:	f7fe f8ae 	bl	800089c <__aeabi_ddiv>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800274e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002752:	f7fd ff79 	bl	8000648 <__aeabi_dmul>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800276a:	f7fe f897 	bl	800089c <__aeabi_ddiv>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	609a      	str	r2, [r3, #8]
		
	}
	
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_MspInit+0x44>)
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_MspInit+0x44>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6613      	str	r3, [r2, #96]	; 0x60
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_MspInit+0x44>)
 800279c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_MspInit+0x44>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <HAL_MspInit+0x44>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6593      	str	r3, [r2, #88]	; 0x58
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_MspInit+0x44>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80027be:	f000 ffb5 	bl	800372c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b0a8      	sub	sp, #160	; 0xa0
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027ec:	2254      	movs	r2, #84	; 0x54
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f004 fe3f 	bl	8007474 <memset>
  if(huart->Instance==LPUART1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4ab5      	ldr	r2, [pc, #724]	; (8002ad0 <HAL_UART_MspInit+0x300>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d13c      	bne.n	800287a <HAL_UART_MspInit+0xaa>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002800:	2320      	movs	r3, #32
 8002802:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002804:	2300      	movs	r3, #0
 8002806:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800280c:	4618      	mov	r0, r3
 800280e:	f001 fcd1 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002818:	f7ff fd7a 	bl	8002310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800281c:	4bad      	ldr	r3, [pc, #692]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	4aac      	ldr	r2, [pc, #688]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002828:	4baa      	ldr	r3, [pc, #680]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
 8002832:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	4ba7      	ldr	r3, [pc, #668]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002838:	4aa6      	ldr	r2, [pc, #664]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002840:	4ba4      	ldr	r3, [pc, #656]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800284c:	230c      	movs	r3, #12
 800284e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002864:	230c      	movs	r3, #12
 8002866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800286e:	4619      	mov	r1, r3
 8002870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002874:	f000 fcf8 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002878:	e126      	b.n	8002ac8 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==UART4)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a96      	ldr	r2, [pc, #600]	; (8002ad8 <HAL_UART_MspInit+0x308>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d13c      	bne.n	80028fe <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002884:	2308      	movs	r3, #8
 8002886:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002888:	2300      	movs	r3, #0
 800288a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800288c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002890:	4618      	mov	r0, r3
 8002892:	f001 fc8f 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800289c:	f7ff fd38 	bl	8002310 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80028a0:	4b8c      	ldr	r3, [pc, #560]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	4a8b      	ldr	r2, [pc, #556]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 80028a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028aa:	6593      	str	r3, [r2, #88]	; 0x58
 80028ac:	4b89      	ldr	r3, [pc, #548]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b8:	4b86      	ldr	r3, [pc, #536]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	4a85      	ldr	r2, [pc, #532]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028c4:	4b83      	ldr	r3, [pc, #524]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 80028c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80028ea:	2305      	movs	r3, #5
 80028ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80028f4:	4619      	mov	r1, r3
 80028f6:	4879      	ldr	r0, [pc, #484]	; (8002adc <HAL_UART_MspInit+0x30c>)
 80028f8:	f000 fcb6 	bl	8003268 <HAL_GPIO_Init>
}
 80028fc:	e0e4      	b.n	8002ac8 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==UART5)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a77      	ldr	r2, [pc, #476]	; (8002ae0 <HAL_UART_MspInit+0x310>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d15d      	bne.n	80029c4 <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002908:	2310      	movs	r3, #16
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800290c:	2300      	movs	r3, #0
 800290e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002910:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002914:	4618      	mov	r0, r3
 8002916:	f001 fc4d 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_UART_MspInit+0x154>
      Error_Handler();
 8002920:	f7ff fcf6 	bl	8002310 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002924:	4b6b      	ldr	r3, [pc, #428]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	4a6a      	ldr	r2, [pc, #424]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 800292a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800292e:	6593      	str	r3, [r2, #88]	; 0x58
 8002930:	4b68      	ldr	r3, [pc, #416]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800293c:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 800293e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002940:	4a64      	ldr	r2, [pc, #400]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002942:	f043 0304 	orr.w	r3, r3, #4
 8002946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002948:	4b62      	ldr	r3, [pc, #392]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 800294a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002954:	4b5f      	ldr	r3, [pc, #380]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	4a5e      	ldr	r2, [pc, #376]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002960:	4b5c      	ldr	r3, [pc, #368]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	61fb      	str	r3, [r7, #28]
 800296a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800296c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002986:	2305      	movs	r3, #5
 8002988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002990:	4619      	mov	r1, r3
 8002992:	4852      	ldr	r0, [pc, #328]	; (8002adc <HAL_UART_MspInit+0x30c>)
 8002994:	f000 fc68 	bl	8003268 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002998:	2304      	movs	r3, #4
 800299a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80029b0:	2305      	movs	r3, #5
 80029b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80029ba:	4619      	mov	r1, r3
 80029bc:	4849      	ldr	r0, [pc, #292]	; (8002ae4 <HAL_UART_MspInit+0x314>)
 80029be:	f000 fc53 	bl	8003268 <HAL_GPIO_Init>
}
 80029c2:	e081      	b.n	8002ac8 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==USART1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a47      	ldr	r2, [pc, #284]	; (8002ae8 <HAL_UART_MspInit+0x318>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d13b      	bne.n	8002a46 <HAL_UART_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029d2:	2300      	movs	r3, #0
 80029d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029da:	4618      	mov	r0, r3
 80029dc:	f001 fbea 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_UART_MspInit+0x21a>
      Error_Handler();
 80029e6:	f7ff fc93 	bl	8002310 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ea:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 80029ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ee:	4a39      	ldr	r2, [pc, #228]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6613      	str	r3, [r2, #96]	; 0x60
 80029f6:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 80029f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a02:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	4a33      	ldr	r2, [pc, #204]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a0e:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a1a:	2330      	movs	r3, #48	; 0x30
 8002a1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a32:	2307      	movs	r3, #7
 8002a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4827      	ldr	r0, [pc, #156]	; (8002adc <HAL_UART_MspInit+0x30c>)
 8002a40:	f000 fc12 	bl	8003268 <HAL_GPIO_Init>
}
 8002a44:	e040      	b.n	8002ac8 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==USART3)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a28      	ldr	r2, [pc, #160]	; (8002aec <HAL_UART_MspInit+0x31c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d13b      	bne.n	8002ac8 <HAL_UART_MspInit+0x2f8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a50:	2304      	movs	r3, #4
 8002a52:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a54:	2300      	movs	r3, #0
 8002a56:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 fba9 	bl	80041b4 <HAL_RCCEx_PeriphCLKConfig>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_UART_MspInit+0x29c>
      Error_Handler();
 8002a68:	f7ff fc52 	bl	8002310 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002a72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a76:	6593      	str	r3, [r2, #88]	; 0x58
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a88:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a90:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_UART_MspInit+0x304>)
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002aa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	480b      	ldr	r0, [pc, #44]	; (8002af0 <HAL_UART_MspInit+0x320>)
 8002ac4:	f000 fbd0 	bl	8003268 <HAL_GPIO_Init>
}
 8002ac8:	bf00      	nop
 8002aca:	37a0      	adds	r7, #160	; 0xa0
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40008000 	.word	0x40008000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40004c00 	.word	0x40004c00
 8002adc:	48000800 	.word	0x48000800
 8002ae0:	40005000 	.word	0x40005000
 8002ae4:	48000c00 	.word	0x48000c00
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40004800 	.word	0x40004800
 8002af0:	48000400 	.word	0x48000400

08002af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a40      	ldr	r2, [pc, #256]	; (8002c14 <HAL_TIM_Base_MspInit+0x120>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10c      	bne.n	8002b30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	4b40      	ldr	r3, [pc, #256]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	4a3f      	ldr	r2, [pc, #252]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b20:	6613      	str	r3, [r2, #96]	; 0x60
 8002b22:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b2e:	e06d      	b.n	8002c0c <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM4)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a39      	ldr	r2, [pc, #228]	; (8002c1c <HAL_TIM_Base_MspInit+0x128>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d132      	bne.n	8002ba0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b3a:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	4a36      	ldr	r2, [pc, #216]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	6593      	str	r3, [r2, #88]	; 0x58
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	4a30      	ldr	r2, [pc, #192]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002b7c:	230a      	movs	r3, #10
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b80:	f107 031c 	add.w	r3, r7, #28
 8002b84:	4619      	mov	r1, r3
 8002b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8a:	f000 fb6d 	bl	8003268 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	201e      	movs	r0, #30
 8002b94:	f000 fb33 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b98:	201e      	movs	r0, #30
 8002b9a:	f000 fb4a 	bl	8003232 <HAL_NVIC_EnableIRQ>
}
 8002b9e:	e035      	b.n	8002c0c <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM5)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <HAL_TIM_Base_MspInit+0x12c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d130      	bne.n	8002c0c <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002baa:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002bb0:	f043 0308 	orr.w	r3, r3, #8
 8002bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_TIM_Base_MspInit+0x124>)
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ul_Pin|ur_Pin;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002bea:	2302      	movs	r3, #2
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 031c 	add.w	r3, r7, #28
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf8:	f000 fb36 	bl	8003268 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2032      	movs	r0, #50	; 0x32
 8002c02:	f000 fafc 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c06:	2032      	movs	r0, #50	; 0x32
 8002c08:	f000 fb13 	bl	8003232 <HAL_NVIC_EnableIRQ>
}
 8002c0c:	bf00      	nop
 8002c0e:	3730      	adds	r7, #48	; 0x30
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40012c00 	.word	0x40012c00
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40000800 	.word	0x40000800
 8002c20:	40000c00 	.word	0x40000c00

08002c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <HAL_TIM_MspPostInit+0x64>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d11b      	bne.n	8002c7e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_TIM_MspPostInit+0x68>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <HAL_TIM_MspPostInit+0x68>)
 8002c4c:	f043 0304 	orr.w	r3, r3, #4
 8002c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_TIM_MspPostInit+0x68>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = uen_Pin|metal_Pin|bluea_Pin|blueb_Pin;
 8002c5e:	230f      	movs	r3, #15
 8002c60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c72:	f107 030c 	add.w	r3, r7, #12
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	; (8002c90 <HAL_TIM_MspPostInit+0x6c>)
 8002c7a:	f000 faf5 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c7e:	bf00      	nop
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	48000800 	.word	0x48000800

08002c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <NMI_Handler+0x4>

08002c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <HardFault_Handler+0x4>

08002ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <MemManage_Handler+0x4>

08002ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002caa:	e7fe      	b.n	8002caa <BusFault_Handler+0x4>

08002cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <UsageFault_Handler+0x4>

08002cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce0:	f000 f972 	bl	8002fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <TIM4_IRQHandler+0x10>)
 8002cee:	f002 f82b 	bl	8004d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000520 	.word	0x20000520

08002cfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002d00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d04:	f000 fc4a 	bl	800359c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <TIM5_IRQHandler+0x10>)
 8002d12:	f002 f819 	bl	8004d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	2000056c 	.word	0x2000056c

08002d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return 1;
 8002d24:	2301      	movs	r3, #1
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_kill>:

int _kill(int pid, int sig)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d3a:	f004 fb71 	bl	8007420 <__errno>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2216      	movs	r2, #22
 8002d42:	601a      	str	r2, [r3, #0]
  return -1;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_exit>:

void _exit (int status)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ffe7 	bl	8002d30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d62:	e7fe      	b.n	8002d62 <_exit+0x12>

08002d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e00a      	b.n	8002d8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d76:	f3af 8000 	nop.w
 8002d7a:	4601      	mov	r1, r0
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	60ba      	str	r2, [r7, #8]
 8002d82:	b2ca      	uxtb	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	dbf0      	blt.n	8002d76 <_read+0x12>
  }

  return len;
 8002d94:	687b      	ldr	r3, [r7, #4]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e009      	b.n	8002dc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	60ba      	str	r2, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fa97 	bl	80022ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	dbf1      	blt.n	8002db0 <_write+0x12>
  }
  return len;
 8002dcc:	687b      	ldr	r3, [r7, #4]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <_close>:

int _close(int file)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dfe:	605a      	str	r2, [r3, #4]
  return 0;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_isatty>:

int _isatty(int file)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e16:	2301      	movs	r3, #1
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e48:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <_sbrk+0x5c>)
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <_sbrk+0x60>)
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <_sbrk+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <_sbrk+0x64>)
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <_sbrk+0x68>)
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d207      	bcs.n	8002e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e70:	f004 fad6 	bl	8007420 <__errno>
 8002e74:	4603      	mov	r3, r0
 8002e76:	220c      	movs	r2, #12
 8002e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e009      	b.n	8002e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <_sbrk+0x64>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e86:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <_sbrk+0x64>)
 8002e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20020000 	.word	0x20020000
 8002ea0:	00000400 	.word	0x00000400
 8002ea4:	20000734 	.word	0x20000734
 8002ea8:	20000750 	.word	0x20000750

08002eac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <SystemInit+0x20>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <SystemInit+0x20>)
 8002eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ed0:	480d      	ldr	r0, [pc, #52]	; (8002f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ed2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ed4:	480d      	ldr	r0, [pc, #52]	; (8002f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8002ed6:	490e      	ldr	r1, [pc, #56]	; (8002f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ed8:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <LoopForever+0xe>)
  movs r3, #0
 8002eda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002edc:	e002      	b.n	8002ee4 <LoopCopyDataInit>

08002ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ee2:	3304      	adds	r3, #4

08002ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee8:	d3f9      	bcc.n	8002ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eea:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002eec:	4c0b      	ldr	r4, [pc, #44]	; (8002f1c <LoopForever+0x16>)
  movs r3, #0
 8002eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef0:	e001      	b.n	8002ef6 <LoopFillZerobss>

08002ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef4:	3204      	adds	r2, #4

08002ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef8:	d3fb      	bcc.n	8002ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002efa:	f7ff ffd7 	bl	8002eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002efe:	f004 fa95 	bl	800742c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f02:	f7fe fced 	bl	80018e0 <main>

08002f06 <LoopForever>:

LoopForever:
    b LoopForever
 8002f06:	e7fe      	b.n	8002f06 <LoopForever>
  ldr   r0, =_estack
 8002f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f10:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002f14:	0800a4ec 	.word	0x0800a4ec
  ldr r2, =_sbss
 8002f18:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002f1c:	2000074c 	.word	0x2000074c

08002f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f20:	e7fe      	b.n	8002f20 <ADC1_2_IRQHandler>

08002f22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f000 f95b 	bl	80031e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f32:	2000      	movs	r0, #0
 8002f34:	f000 f80e 	bl	8002f54 <HAL_InitTick>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	71fb      	strb	r3, [r7, #7]
 8002f42:	e001      	b.n	8002f48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f44:	f7ff fc20 	bl	8002788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f48:	79fb      	ldrb	r3, [r7, #7]

}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f60:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_InitTick+0x68>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d022      	beq.n	8002fae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f68:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_InitTick+0x6c>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_InitTick+0x68>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f966 	bl	800324e <HAL_SYSTICK_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10f      	bne.n	8002fa8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d809      	bhi.n	8002fa2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	f04f 30ff 	mov.w	r0, #4294967295
 8002f96:	f000 f932 	bl	80031fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_InitTick+0x70>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e007      	b.n	8002fb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	e004      	b.n	8002fb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	e001      	b.n	8002fb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000010 	.word	0x20000010
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	2000000c 	.word	0x2000000c

08002fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_IncTick+0x1c>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_IncTick+0x20>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4a03      	ldr	r2, [pc, #12]	; (8002fe4 <HAL_IncTick+0x1c>)
 8002fd8:	6013      	str	r3, [r2, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	20000738 	.word	0x20000738
 8002fe8:	20000010 	.word	0x20000010

08002fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_GetTick+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000738 	.word	0x20000738

08003004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff ffee 	bl	8002fec <HAL_GetTick>
 8003010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d004      	beq.n	8003028 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_Delay+0x40>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4413      	add	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003028:	bf00      	nop
 800302a:	f7ff ffdf 	bl	8002fec <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	429a      	cmp	r2, r3
 8003038:	d8f7      	bhi.n	800302a <HAL_Delay+0x26>
  {
  }
}
 800303a:	bf00      	nop
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000010 	.word	0x20000010

08003048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003064:	4013      	ands	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307a:	4a04      	ldr	r2, [pc, #16]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	60d3      	str	r3, [r2, #12]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 0307 	and.w	r3, r3, #7
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db0b      	blt.n	80030d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4907      	ldr	r1, [pc, #28]	; (80030e4 <__NVIC_EnableIRQ+0x38>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2001      	movs	r0, #1
 80030ce:	fa00 f202 	lsl.w	r2, r0, r2
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100

080030e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	db0a      	blt.n	8003112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	490c      	ldr	r1, [pc, #48]	; (8003134 <__NVIC_SetPriority+0x4c>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	440b      	add	r3, r1
 800310c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003110:	e00a      	b.n	8003128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4908      	ldr	r1, [pc, #32]	; (8003138 <__NVIC_SetPriority+0x50>)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	3b04      	subs	r3, #4
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	440b      	add	r3, r1
 8003126:	761a      	strb	r2, [r3, #24]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000e100 	.word	0xe000e100
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f1c3 0307 	rsb	r3, r3, #7
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf28      	it	cs
 800315a:	2304      	movcs	r3, #4
 800315c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3304      	adds	r3, #4
 8003162:	2b06      	cmp	r3, #6
 8003164:	d902      	bls.n	800316c <NVIC_EncodePriority+0x30>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3b03      	subs	r3, #3
 800316a:	e000      	b.n	800316e <NVIC_EncodePriority+0x32>
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	401a      	ands	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003184:	f04f 31ff 	mov.w	r1, #4294967295
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43d9      	mvns	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	4313      	orrs	r3, r2
         );
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b4:	d301      	bcc.n	80031ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00f      	b.n	80031da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <SysTick_Config+0x40>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c2:	210f      	movs	r1, #15
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	f7ff ff8e 	bl	80030e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <SysTick_Config+0x40>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <SysTick_Config+0x40>)
 80031d4:	2207      	movs	r2, #7
 80031d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	e000e010 	.word	0xe000e010

080031e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ff29 	bl	8003048 <__NVIC_SetPriorityGrouping>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800320c:	f7ff ff40 	bl	8003090 <__NVIC_GetPriorityGrouping>
 8003210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	6978      	ldr	r0, [r7, #20]
 8003218:	f7ff ff90 	bl	800313c <NVIC_EncodePriority>
 800321c:	4602      	mov	r2, r0
 800321e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff5f 	bl	80030e8 <__NVIC_SetPriority>
}
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800323c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff33 	bl	80030ac <__NVIC_EnableIRQ>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ffa4 	bl	80031a4 <SysTick_Config>
 800325c:	4603      	mov	r3, r0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003276:	e15a      	b.n	800352e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2101      	movs	r1, #1
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	fa01 f303 	lsl.w	r3, r1, r3
 8003284:	4013      	ands	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 814c 	beq.w	8003528 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d005      	beq.n	80032a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d130      	bne.n	800330a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	2203      	movs	r2, #3
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032de:	2201      	movs	r2, #1
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	f003 0201 	and.w	r2, r3, #1
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b03      	cmp	r3, #3
 8003314:	d017      	beq.n	8003346 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2203      	movs	r2, #3
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d123      	bne.n	800339a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	08da      	lsrs	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3208      	adds	r2, #8
 800335a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	08da      	lsrs	r2, r3, #3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3208      	adds	r2, #8
 8003394:	6939      	ldr	r1, [r7, #16]
 8003396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2203      	movs	r2, #3
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0203 	and.w	r2, r3, #3
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80a6 	beq.w	8003528 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033dc:	4b5b      	ldr	r3, [pc, #364]	; (800354c <HAL_GPIO_Init+0x2e4>)
 80033de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e0:	4a5a      	ldr	r2, [pc, #360]	; (800354c <HAL_GPIO_Init+0x2e4>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6613      	str	r3, [r2, #96]	; 0x60
 80033e8:	4b58      	ldr	r3, [pc, #352]	; (800354c <HAL_GPIO_Init+0x2e4>)
 80033ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f4:	4a56      	ldr	r2, [pc, #344]	; (8003550 <HAL_GPIO_Init+0x2e8>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	089b      	lsrs	r3, r3, #2
 80033fa:	3302      	adds	r3, #2
 80033fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	220f      	movs	r2, #15
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800341e:	d01f      	beq.n	8003460 <HAL_GPIO_Init+0x1f8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a4c      	ldr	r2, [pc, #304]	; (8003554 <HAL_GPIO_Init+0x2ec>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d019      	beq.n	800345c <HAL_GPIO_Init+0x1f4>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a4b      	ldr	r2, [pc, #300]	; (8003558 <HAL_GPIO_Init+0x2f0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d013      	beq.n	8003458 <HAL_GPIO_Init+0x1f0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a4a      	ldr	r2, [pc, #296]	; (800355c <HAL_GPIO_Init+0x2f4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00d      	beq.n	8003454 <HAL_GPIO_Init+0x1ec>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a49      	ldr	r2, [pc, #292]	; (8003560 <HAL_GPIO_Init+0x2f8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <HAL_GPIO_Init+0x1e8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a48      	ldr	r2, [pc, #288]	; (8003564 <HAL_GPIO_Init+0x2fc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d101      	bne.n	800344c <HAL_GPIO_Init+0x1e4>
 8003448:	2305      	movs	r3, #5
 800344a:	e00a      	b.n	8003462 <HAL_GPIO_Init+0x1fa>
 800344c:	2306      	movs	r3, #6
 800344e:	e008      	b.n	8003462 <HAL_GPIO_Init+0x1fa>
 8003450:	2304      	movs	r3, #4
 8003452:	e006      	b.n	8003462 <HAL_GPIO_Init+0x1fa>
 8003454:	2303      	movs	r3, #3
 8003456:	e004      	b.n	8003462 <HAL_GPIO_Init+0x1fa>
 8003458:	2302      	movs	r3, #2
 800345a:	e002      	b.n	8003462 <HAL_GPIO_Init+0x1fa>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_GPIO_Init+0x1fa>
 8003460:	2300      	movs	r3, #0
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	f002 0203 	and.w	r2, r2, #3
 8003468:	0092      	lsls	r2, r2, #2
 800346a:	4093      	lsls	r3, r2
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003472:	4937      	ldr	r1, [pc, #220]	; (8003550 <HAL_GPIO_Init+0x2e8>)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	3302      	adds	r3, #2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003480:	4b39      	ldr	r3, [pc, #228]	; (8003568 <HAL_GPIO_Init+0x300>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	43db      	mvns	r3, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034a4:	4a30      	ldr	r2, [pc, #192]	; (8003568 <HAL_GPIO_Init+0x300>)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034aa:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <HAL_GPIO_Init+0x300>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034ce:	4a26      	ldr	r2, [pc, #152]	; (8003568 <HAL_GPIO_Init+0x300>)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80034d4:	4b24      	ldr	r3, [pc, #144]	; (8003568 <HAL_GPIO_Init+0x300>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034f8:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <HAL_GPIO_Init+0x300>)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_GPIO_Init+0x300>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003522:	4a11      	ldr	r2, [pc, #68]	; (8003568 <HAL_GPIO_Init+0x300>)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3301      	adds	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	f47f ae9d 	bne.w	8003278 <HAL_GPIO_Init+0x10>
  }
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40021000 	.word	0x40021000
 8003550:	40010000 	.word	0x40010000
 8003554:	48000400 	.word	0x48000400
 8003558:	48000800 	.word	0x48000800
 800355c:	48000c00 	.word	0x48000c00
 8003560:	48001000 	.word	0x48001000
 8003564:	48001400 	.word	0x48001400
 8003568:	40010400 	.word	0x40010400

0800356c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	807b      	strh	r3, [r7, #2]
 8003578:	4613      	mov	r3, r2
 800357a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800357c:	787b      	ldrb	r3, [r7, #1]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003582:	887a      	ldrh	r2, [r7, #2]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003588:	e002      	b.n	8003590 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d006      	beq.n	80035c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035b2:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f806 	bl	80035cc <HAL_GPIO_EXTI_Callback>
  }
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40010400 	.word	0x40010400

080035cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d141      	bne.n	8003676 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035f2:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fe:	d131      	bne.n	8003664 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003600:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003606:	4a46      	ldr	r2, [pc, #280]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800360c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003610:	4b43      	ldr	r3, [pc, #268]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003618:	4a41      	ldr	r2, [pc, #260]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800361e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003620:	4b40      	ldr	r3, [pc, #256]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2232      	movs	r2, #50	; 0x32
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	4a3f      	ldr	r2, [pc, #252]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	0c9b      	lsrs	r3, r3, #18
 8003632:	3301      	adds	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003636:	e002      	b.n	800363e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3b01      	subs	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364a:	d102      	bne.n	8003652 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f2      	bne.n	8003638 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365e:	d158      	bne.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e057      	b.n	8003714 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003664:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366a:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003670:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003674:	e04d      	b.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367c:	d141      	bne.n	8003702 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800367e:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368a:	d131      	bne.n	80036f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003692:	4a23      	ldr	r2, [pc, #140]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003698:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800369c:	4b20      	ldr	r3, [pc, #128]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036a4:	4a1e      	ldr	r2, [pc, #120]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2232      	movs	r2, #50	; 0x32
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	4a1c      	ldr	r2, [pc, #112]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	0c9b      	lsrs	r3, r3, #18
 80036be:	3301      	adds	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c2:	e002      	b.n	80036ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d102      	bne.n	80036de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f2      	bne.n	80036c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ea:	d112      	bne.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e011      	b.n	8003714 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003700:	e007      	b.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800370a:	4a05      	ldr	r2, [pc, #20]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003710:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40007000 	.word	0x40007000
 8003724:	20000008 	.word	0x20000008
 8003728:	431bde83 	.word	0x431bde83

0800372c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800373a:	6093      	str	r3, [r2, #8]
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40007000 	.word	0x40007000

0800374c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e306      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d075      	beq.n	8003856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376a:	4b97      	ldr	r3, [pc, #604]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003774:	4b94      	ldr	r3, [pc, #592]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	2b0c      	cmp	r3, #12
 8003782:	d102      	bne.n	800378a <HAL_RCC_OscConfig+0x3e>
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d002      	beq.n	8003790 <HAL_RCC_OscConfig+0x44>
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d10b      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003790:	4b8d      	ldr	r3, [pc, #564]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d05b      	beq.n	8003854 <HAL_RCC_OscConfig+0x108>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d157      	bne.n	8003854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e2e1      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b0:	d106      	bne.n	80037c0 <HAL_RCC_OscConfig+0x74>
 80037b2:	4b85      	ldr	r3, [pc, #532]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a84      	ldr	r2, [pc, #528]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e01d      	b.n	80037fc <HAL_RCC_OscConfig+0xb0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x98>
 80037ca:	4b7f      	ldr	r3, [pc, #508]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a7e      	ldr	r2, [pc, #504]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80037d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b7c      	ldr	r3, [pc, #496]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7b      	ldr	r2, [pc, #492]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0xb0>
 80037e4:	4b78      	ldr	r3, [pc, #480]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a77      	ldr	r2, [pc, #476]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b75      	ldr	r3, [pc, #468]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a74      	ldr	r2, [pc, #464]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7ff fbf2 	bl	8002fec <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7ff fbee 	bl	8002fec <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e2a6      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381e:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0xc0>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7ff fbde 	bl	8002fec <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7ff fbda 	bl	8002fec <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	; 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e292      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003846:	4b60      	ldr	r3, [pc, #384]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0xe8>
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d075      	beq.n	800394e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003862:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800386c:	4b56      	ldr	r3, [pc, #344]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b0c      	cmp	r3, #12
 800387a:	d102      	bne.n	8003882 <HAL_RCC_OscConfig+0x136>
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d002      	beq.n	8003888 <HAL_RCC_OscConfig+0x13c>
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d11f      	bne.n	80038c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_OscConfig+0x154>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e265      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	4946      	ldr	r1, [pc, #280]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038b4:	4b45      	ldr	r3, [pc, #276]	; (80039cc <HAL_RCC_OscConfig+0x280>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fb4b 	bl	8002f54 <HAL_InitTick>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d043      	beq.n	800394c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e251      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d023      	beq.n	8003918 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d0:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a3c      	ldr	r2, [pc, #240]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80038d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7ff fb86 	bl	8002fec <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e4:	f7ff fb82 	bl	8002fec <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e23a      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f6:	4b34      	ldr	r3, [pc, #208]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003902:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	061b      	lsls	r3, r3, #24
 8003910:	492d      	ldr	r1, [pc, #180]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
 8003916:	e01a      	b.n	800394e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003918:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 800391e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7ff fb62 	bl	8002fec <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392c:	f7ff fb5e 	bl	8002fec <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e216      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800393e:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x1e0>
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d041      	beq.n	80039de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01c      	beq.n	800399c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003968:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7ff fb3b 	bl	8002fec <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397a:	f7ff fb37 	bl	8002fec <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e1ef      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 800398e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0ef      	beq.n	800397a <HAL_RCC_OscConfig+0x22e>
 800399a:	e020      	b.n	80039de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7ff fb1e 	bl	8002fec <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b2:	e00d      	b.n	80039d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b4:	f7ff fb1a 	bl	8002fec <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d906      	bls.n	80039d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1d2      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d0:	4b8c      	ldr	r3, [pc, #560]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 80039d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1ea      	bne.n	80039b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80a6 	beq.w	8003b38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039f0:	4b84      	ldr	r3, [pc, #528]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2b4>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x2b6>
 8003a00:	2300      	movs	r3, #0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00d      	beq.n	8003a22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	4b7f      	ldr	r3, [pc, #508]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0a:	4a7e      	ldr	r2, [pc, #504]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a10:	6593      	str	r3, [r2, #88]	; 0x58
 8003a12:	4b7c      	ldr	r3, [pc, #496]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a22:	4b79      	ldr	r3, [pc, #484]	; (8003c08 <HAL_RCC_OscConfig+0x4bc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d118      	bne.n	8003a60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2e:	4b76      	ldr	r3, [pc, #472]	; (8003c08 <HAL_RCC_OscConfig+0x4bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a75      	ldr	r2, [pc, #468]	; (8003c08 <HAL_RCC_OscConfig+0x4bc>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3a:	f7ff fad7 	bl	8002fec <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7ff fad3 	bl	8002fec <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e18b      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a54:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <HAL_RCC_OscConfig+0x4bc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d108      	bne.n	8003a7a <HAL_RCC_OscConfig+0x32e>
 8003a68:	4b66      	ldr	r3, [pc, #408]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	4a65      	ldr	r2, [pc, #404]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a78:	e024      	b.n	8003ac4 <HAL_RCC_OscConfig+0x378>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d110      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x358>
 8003a82:	4b60      	ldr	r3, [pc, #384]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	4a5e      	ldr	r2, [pc, #376]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003a8a:	f043 0304 	orr.w	r3, r3, #4
 8003a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a92:	4b5c      	ldr	r3, [pc, #368]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a98:	4a5a      	ldr	r2, [pc, #360]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa2:	e00f      	b.n	8003ac4 <HAL_RCC_OscConfig+0x378>
 8003aa4:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	4a56      	ldr	r2, [pc, #344]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab4:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	4a52      	ldr	r2, [pc, #328]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d016      	beq.n	8003afa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7ff fa8e 	bl	8002fec <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad4:	f7ff fa8a 	bl	8002fec <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e140      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aea:	4b46      	ldr	r3, [pc, #280]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ed      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x388>
 8003af8:	e015      	b.n	8003b26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afa:	f7ff fa77 	bl	8002fec <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7ff fa73 	bl	8002fec <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e129      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b18:	4b3a      	ldr	r3, [pc, #232]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1ed      	bne.n	8003b02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b26:	7ffb      	ldrb	r3, [r7, #31]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2c:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	4a34      	ldr	r2, [pc, #208]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d03c      	beq.n	8003bbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b4c:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b52:	4a2c      	ldr	r2, [pc, #176]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7ff fa46 	bl	8002fec <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b64:	f7ff fa42 	bl	8002fec <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e0fa      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b76:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ef      	beq.n	8003b64 <HAL_RCC_OscConfig+0x418>
 8003b84:	e01b      	b.n	8003bbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b86:	4b1f      	ldr	r3, [pc, #124]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b96:	f7ff fa29 	bl	8002fec <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b9e:	f7ff fa25 	bl	8002fec <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0dd      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1ef      	bne.n	8003b9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80d1 	beq.w	8003d6a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b0c      	cmp	r3, #12
 8003bd2:	f000 808b 	beq.w	8003cec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d15e      	bne.n	8003c9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <HAL_RCC_OscConfig+0x4b8>)
 8003be4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7ff f9ff 	bl	8002fec <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf0:	e00c      	b.n	8003c0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7ff f9fb 	bl	8002fec <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d905      	bls.n	8003c0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e0b3      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c0c:	4b59      	ldr	r3, [pc, #356]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ec      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c18:	4b56      	ldr	r3, [pc, #344]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	4b56      	ldr	r3, [pc, #344]	; (8003d78 <HAL_RCC_OscConfig+0x62c>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6a11      	ldr	r1, [r2, #32]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c28:	3a01      	subs	r2, #1
 8003c2a:	0112      	lsls	r2, r2, #4
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c32:	0212      	lsls	r2, r2, #8
 8003c34:	4311      	orrs	r1, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c3a:	0852      	lsrs	r2, r2, #1
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	0552      	lsls	r2, r2, #21
 8003c40:	4311      	orrs	r1, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c46:	0852      	lsrs	r2, r2, #1
 8003c48:	3a01      	subs	r2, #1
 8003c4a:	0652      	lsls	r2, r2, #25
 8003c4c:	4311      	orrs	r1, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c52:	06d2      	lsls	r2, r2, #27
 8003c54:	430a      	orrs	r2, r1
 8003c56:	4947      	ldr	r1, [pc, #284]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c5c:	4b45      	ldr	r3, [pc, #276]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a44      	ldr	r2, [pc, #272]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c68:	4b42      	ldr	r3, [pc, #264]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a41      	ldr	r2, [pc, #260]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7ff f9ba 	bl	8002fec <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7ff f9b6 	bl	8002fec <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e06e      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8e:	4b39      	ldr	r3, [pc, #228]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x530>
 8003c9a:	e066      	b.n	8003d6a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a34      	ldr	r2, [pc, #208]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ca8:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a31      	ldr	r2, [pc, #196]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cb4:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a2e      	ldr	r2, [pc, #184]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003cba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7ff f992 	bl	8002fec <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7ff f98e 	bl	8002fec <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e046      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cde:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x580>
 8003cea:	e03e      	b.n	8003d6a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e039      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <HAL_RCC_OscConfig+0x628>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0203 	and.w	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d12c      	bne.n	8003d66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	3b01      	subs	r3, #1
 8003d18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d123      	bne.n	8003d66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d11b      	bne.n	8003d66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d113      	bne.n	8003d66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40021000 	.word	0x40021000
 8003d78:	019f800c 	.word	0x019f800c

08003d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e11e      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d94:	4b91      	ldr	r3, [pc, #580]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d910      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b8e      	ldr	r3, [pc, #568]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 020f 	bic.w	r2, r3, #15
 8003daa:	498c      	ldr	r1, [pc, #560]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b8a      	ldr	r3, [pc, #552]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e106      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d073      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d129      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd8:	4b81      	ldr	r3, [pc, #516]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0f4      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003de8:	f000 f99e 	bl	8004128 <RCC_GetSysClockFreqFromPLLSource>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4a7c      	ldr	r2, [pc, #496]	; (8003fe4 <HAL_RCC_ClockConfig+0x268>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d93f      	bls.n	8003e76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003df6:	4b7a      	ldr	r3, [pc, #488]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d033      	beq.n	8003e76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d12f      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e16:	4b72      	ldr	r3, [pc, #456]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1e:	4a70      	ldr	r2, [pc, #448]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	e024      	b.n	8003e76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e34:	4b6a      	ldr	r3, [pc, #424]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0c6      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e44:	4b66      	ldr	r3, [pc, #408]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0be      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e54:	f000 f8ce 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4a61      	ldr	r2, [pc, #388]	; (8003fe4 <HAL_RCC_ClockConfig+0x268>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d909      	bls.n	8003e76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e62:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e6a:	4a5d      	ldr	r2, [pc, #372]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e72:	2380      	movs	r3, #128	; 0x80
 8003e74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e76:	4b5a      	ldr	r3, [pc, #360]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 0203 	bic.w	r2, r3, #3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4957      	ldr	r1, [pc, #348]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e88:	f7ff f8b0 	bl	8002fec <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e90:	f7ff f8ac 	bl	8002fec <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e095      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea6:	4b4e      	ldr	r3, [pc, #312]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 020c 	and.w	r2, r3, #12
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d1eb      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d023      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed0:	4b43      	ldr	r3, [pc, #268]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a42      	ldr	r2, [pc, #264]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003ed6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ee8:	4b3d      	ldr	r3, [pc, #244]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ef0:	4a3b      	ldr	r2, [pc, #236]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ef6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b39      	ldr	r3, [pc, #228]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4936      	ldr	r1, [pc, #216]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d105      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f12:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	4a32      	ldr	r2, [pc, #200]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1e:	4b2f      	ldr	r3, [pc, #188]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d21d      	bcs.n	8003f68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f023 020f 	bic.w	r2, r3, #15
 8003f34:	4929      	ldr	r1, [pc, #164]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f3c:	f7ff f856 	bl	8002fec <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f44:	f7ff f852 	bl	8002fec <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e03b      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <HAL_RCC_ClockConfig+0x260>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1ed      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4917      	ldr	r1, [pc, #92]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f92:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	490f      	ldr	r1, [pc, #60]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fa6:	f000 f825 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8003faa:	4602      	mov	r2, r0
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <HAL_RCC_ClockConfig+0x264>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	490c      	ldr	r1, [pc, #48]	; (8003fe8 <HAL_RCC_ClockConfig+0x26c>)
 8003fb8:	5ccb      	ldrb	r3, [r1, r3]
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <HAL_RCC_ClockConfig+0x270>)
 8003fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <HAL_RCC_ClockConfig+0x274>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe ffc2 	bl	8002f54 <HAL_InitTick>
 8003fd0:	4603      	mov	r3, r0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40022000 	.word	0x40022000
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	04c4b400 	.word	0x04c4b400
 8003fe8:	0800a0c0 	.word	0x0800a0c0
 8003fec:	20000008 	.word	0x20000008
 8003ff0:	2000000c 	.word	0x2000000c

08003ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ffa:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	2b04      	cmp	r3, #4
 8004004:	d102      	bne.n	800400c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004006:	4b2a      	ldr	r3, [pc, #168]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	e047      	b.n	800409c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	2b08      	cmp	r3, #8
 8004016:	d102      	bne.n	800401e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004018:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	e03e      	b.n	800409c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800401e:	4b23      	ldr	r3, [pc, #140]	; (80040ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d136      	bne.n	8004098 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	3301      	adds	r3, #1
 8004040:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d10c      	bne.n	8004062 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004048:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	4a16      	ldr	r2, [pc, #88]	; (80040ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004052:	68d2      	ldr	r2, [r2, #12]
 8004054:	0a12      	lsrs	r2, r2, #8
 8004056:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	617b      	str	r3, [r7, #20]
      break;
 8004060:	e00c      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004062:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800406c:	68d2      	ldr	r2, [r2, #12]
 800406e:	0a12      	lsrs	r2, r2, #8
 8004070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004074:	fb02 f303 	mul.w	r3, r2, r3
 8004078:	617b      	str	r3, [r7, #20]
      break;
 800407a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	0e5b      	lsrs	r3, r3, #25
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	3301      	adds	r3, #1
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	e001      	b.n	800409c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800409c:	693b      	ldr	r3, [r7, #16]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	016e3600 	.word	0x016e3600

080040b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <HAL_RCC_GetHCLKFreq+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000008 	.word	0x20000008

080040d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040d4:	f7ff fff0 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4904      	ldr	r1, [pc, #16]	; (80040f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000
 80040f8:	0800a0d0 	.word	0x0800a0d0

080040fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004100:	f7ff ffda 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8004104:	4602      	mov	r2, r0
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	0adb      	lsrs	r3, r3, #11
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	4904      	ldr	r1, [pc, #16]	; (8004124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004112:	5ccb      	ldrb	r3, [r1, r3]
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	0800a0d0 	.word	0x0800a0d0

08004128 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800412e:	4b1e      	ldr	r3, [pc, #120]	; (80041a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004138:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b03      	cmp	r3, #3
 800414a:	d10c      	bne.n	8004166 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800414c:	4a17      	ldr	r2, [pc, #92]	; (80041ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	fbb2 f3f3 	udiv	r3, r2, r3
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004156:	68d2      	ldr	r2, [r2, #12]
 8004158:	0a12      	lsrs	r2, r2, #8
 800415a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800415e:	fb02 f303 	mul.w	r3, r2, r3
 8004162:	617b      	str	r3, [r7, #20]
    break;
 8004164:	e00c      	b.n	8004180 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004166:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004170:	68d2      	ldr	r2, [r2, #12]
 8004172:	0a12      	lsrs	r2, r2, #8
 8004174:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004178:	fb02 f303 	mul.w	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]
    break;
 800417e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	0e5b      	lsrs	r3, r3, #25
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	3301      	adds	r3, #1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800419a:	687b      	ldr	r3, [r7, #4]
}
 800419c:	4618      	mov	r0, r3
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40021000 	.word	0x40021000
 80041ac:	016e3600 	.word	0x016e3600
 80041b0:	00f42400 	.word	0x00f42400

080041b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041bc:	2300      	movs	r3, #0
 80041be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041c0:	2300      	movs	r3, #0
 80041c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8098 	beq.w	8004302 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d6:	4b43      	ldr	r3, [pc, #268]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10d      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e2:	4b40      	ldr	r3, [pc, #256]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	4a3f      	ldr	r2, [pc, #252]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6593      	str	r3, [r2, #88]	; 0x58
 80041ee:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fa:	2301      	movs	r3, #1
 80041fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041fe:	4b3a      	ldr	r3, [pc, #232]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a39      	ldr	r2, [pc, #228]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800420a:	f7fe feef 	bl	8002fec <HAL_GetTick>
 800420e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004210:	e009      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004212:	f7fe feeb 	bl	8002fec <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d902      	bls.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	74fb      	strb	r3, [r7, #19]
        break;
 8004224:	e005      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004226:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0ef      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004232:	7cfb      	ldrb	r3, [r7, #19]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d159      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004238:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004242:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01e      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	429a      	cmp	r2, r3
 8004252:	d019      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004254:	4b23      	ldr	r3, [pc, #140]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004260:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004270:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	4a1b      	ldr	r2, [pc, #108]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004280:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fe feab 	bl	8002fec <HAL_GetTick>
 8004296:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004298:	e00b      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fe fea7 	bl	8002fec <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d902      	bls.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	74fb      	strb	r3, [r7, #19]
            break;
 80042b0:	e006      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b2:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ec      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d4:	4903      	ldr	r1, [pc, #12]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042dc:	e008      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	74bb      	strb	r3, [r7, #18]
 80042e2:	e005      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f0:	7c7b      	ldrb	r3, [r7, #17]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d105      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f6:	4ba7      	ldr	r3, [pc, #668]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	4aa6      	ldr	r2, [pc, #664]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004300:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800430e:	4ba1      	ldr	r3, [pc, #644]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	f023 0203 	bic.w	r2, r3, #3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	499d      	ldr	r1, [pc, #628]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004330:	4b98      	ldr	r3, [pc, #608]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f023 020c 	bic.w	r2, r3, #12
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	4995      	ldr	r1, [pc, #596]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004352:	4b90      	ldr	r3, [pc, #576]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	498c      	ldr	r1, [pc, #560]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004374:	4b87      	ldr	r3, [pc, #540]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	4984      	ldr	r1, [pc, #528]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004396:	4b7f      	ldr	r3, [pc, #508]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	497b      	ldr	r1, [pc, #492]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043b8:	4b76      	ldr	r3, [pc, #472]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	4973      	ldr	r1, [pc, #460]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043da:	4b6e      	ldr	r3, [pc, #440]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	496a      	ldr	r1, [pc, #424]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043fc:	4b65      	ldr	r3, [pc, #404]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004402:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4962      	ldr	r1, [pc, #392]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800441e:	4b5d      	ldr	r3, [pc, #372]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004424:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	4959      	ldr	r1, [pc, #356]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004440:	4b54      	ldr	r3, [pc, #336]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004442:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	4951      	ldr	r1, [pc, #324]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004462:	4b4c      	ldr	r3, [pc, #304]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	4948      	ldr	r1, [pc, #288]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004484:	4b43      	ldr	r3, [pc, #268]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	4940      	ldr	r1, [pc, #256]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a2:	d105      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a4:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a3a      	ldr	r2, [pc, #232]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d015      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044bc:	4b35      	ldr	r3, [pc, #212]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ca:	4932      	ldr	r1, [pc, #200]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044da:	d105      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044dc:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d015      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044f4:	4b27      	ldr	r3, [pc, #156]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	4924      	ldr	r1, [pc, #144]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004512:	d105      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004514:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4a1e      	ldr	r2, [pc, #120]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800451e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d015      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800452c:	4b19      	ldr	r3, [pc, #100]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	4916      	ldr	r1, [pc, #88]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454a:	d105      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800454c:	4b11      	ldr	r3, [pc, #68]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a10      	ldr	r2, [pc, #64]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004556:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d019      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	4908      	ldr	r1, [pc, #32]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004582:	d109      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a02      	ldr	r2, [pc, #8]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800458e:	60d3      	str	r3, [r2, #12]
 8004590:	e002      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d015      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045a4:	4b29      	ldr	r3, [pc, #164]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	4926      	ldr	r1, [pc, #152]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c2:	d105      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a20      	ldr	r2, [pc, #128]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d015      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045dc:	4b1b      	ldr	r3, [pc, #108]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ea:	4918      	ldr	r1, [pc, #96]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fa:	d105      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045fc:	4b13      	ldr	r3, [pc, #76]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4a12      	ldr	r2, [pc, #72]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004606:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d015      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004614:	4b0d      	ldr	r3, [pc, #52]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800461a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004622:	490a      	ldr	r1, [pc, #40]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004632:	d105      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4a04      	ldr	r2, [pc, #16]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800463e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004640:	7cbb      	ldrb	r3, [r7, #18]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000

08004650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e049      	b.n	80046f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fe fa3c 	bl	8002af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f001 f80c 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e049      	b.n	80047a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f841 	bl	80047ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f000 ffb5 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d109      	bne.n	80047e4 <HAL_TIM_PWM_Start+0x24>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e03c      	b.n	800485e <HAL_TIM_PWM_Start+0x9e>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d109      	bne.n	80047fe <HAL_TIM_PWM_Start+0x3e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	bf14      	ite	ne
 80047f6:	2301      	movne	r3, #1
 80047f8:	2300      	moveq	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	e02f      	b.n	800485e <HAL_TIM_PWM_Start+0x9e>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d109      	bne.n	8004818 <HAL_TIM_PWM_Start+0x58>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	bf14      	ite	ne
 8004810:	2301      	movne	r3, #1
 8004812:	2300      	moveq	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e022      	b.n	800485e <HAL_TIM_PWM_Start+0x9e>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d109      	bne.n	8004832 <HAL_TIM_PWM_Start+0x72>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	bf14      	ite	ne
 800482a:	2301      	movne	r3, #1
 800482c:	2300      	moveq	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	e015      	b.n	800485e <HAL_TIM_PWM_Start+0x9e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b10      	cmp	r3, #16
 8004836:	d109      	bne.n	800484c <HAL_TIM_PWM_Start+0x8c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e008      	b.n	800485e <HAL_TIM_PWM_Start+0x9e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0a6      	b.n	80049b4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Start+0xb6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004874:	e023      	b.n	80048be <HAL_TIM_PWM_Start+0xfe>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_Start+0xc6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004884:	e01b      	b.n	80048be <HAL_TIM_PWM_Start+0xfe>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d104      	bne.n	8004896 <HAL_TIM_PWM_Start+0xd6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004894:	e013      	b.n	80048be <HAL_TIM_PWM_Start+0xfe>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b0c      	cmp	r3, #12
 800489a:	d104      	bne.n	80048a6 <HAL_TIM_PWM_Start+0xe6>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a4:	e00b      	b.n	80048be <HAL_TIM_PWM_Start+0xfe>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_PWM_Start+0xf6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b4:	e003      	b.n	80048be <HAL_TIM_PWM_Start+0xfe>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2201      	movs	r2, #1
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 fc88 	bl	80061dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a3a      	ldr	r2, [pc, #232]	; (80049bc <HAL_TIM_PWM_Start+0x1fc>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d018      	beq.n	8004908 <HAL_TIM_PWM_Start+0x148>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a39      	ldr	r2, [pc, #228]	; (80049c0 <HAL_TIM_PWM_Start+0x200>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d013      	beq.n	8004908 <HAL_TIM_PWM_Start+0x148>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a37      	ldr	r2, [pc, #220]	; (80049c4 <HAL_TIM_PWM_Start+0x204>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00e      	beq.n	8004908 <HAL_TIM_PWM_Start+0x148>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a36      	ldr	r2, [pc, #216]	; (80049c8 <HAL_TIM_PWM_Start+0x208>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_TIM_PWM_Start+0x148>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a34      	ldr	r2, [pc, #208]	; (80049cc <HAL_TIM_PWM_Start+0x20c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_TIM_PWM_Start+0x148>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a33      	ldr	r2, [pc, #204]	; (80049d0 <HAL_TIM_PWM_Start+0x210>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <HAL_TIM_PWM_Start+0x14c>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <HAL_TIM_PWM_Start+0x14e>
 800490c:	2300      	movs	r3, #0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a25      	ldr	r2, [pc, #148]	; (80049bc <HAL_TIM_PWM_Start+0x1fc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_TIM_PWM_Start+0x1b2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d01d      	beq.n	8004972 <HAL_TIM_PWM_Start+0x1b2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <HAL_TIM_PWM_Start+0x214>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_TIM_PWM_Start+0x1b2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <HAL_TIM_PWM_Start+0x218>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_TIM_PWM_Start+0x1b2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a23      	ldr	r2, [pc, #140]	; (80049dc <HAL_TIM_PWM_Start+0x21c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_TIM_PWM_Start+0x1b2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_TIM_PWM_Start+0x200>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_TIM_PWM_Start+0x1b2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a18      	ldr	r2, [pc, #96]	; (80049c4 <HAL_TIM_PWM_Start+0x204>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIM_PWM_Start+0x1b2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a18      	ldr	r2, [pc, #96]	; (80049d0 <HAL_TIM_PWM_Start+0x210>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d115      	bne.n	800499e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_TIM_PWM_Start+0x220>)
 800497a:	4013      	ands	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b06      	cmp	r3, #6
 8004982:	d015      	beq.n	80049b0 <HAL_TIM_PWM_Start+0x1f0>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498a:	d011      	beq.n	80049b0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499c:	e008      	b.n	80049b0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0201 	orr.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e000      	b.n	80049b2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	40013400 	.word	0x40013400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800
 80049d0:	40015000 	.word	0x40015000
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	00010007 	.word	0x00010007

080049e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e049      	b.n	8004a8a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f841 	bl	8004a92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4619      	mov	r1, r3
 8004a22:	4610      	mov	r0, r2
 8004a24:	f000 fe42 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <HAL_TIM_IC_Start_IT+0x1e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	e023      	b.n	8004b0e <HAL_TIM_IC_Start_IT+0x66>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_IC_Start_IT+0x2e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e01b      	b.n	8004b0e <HAL_TIM_IC_Start_IT+0x66>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_IC_Start_IT+0x3e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	e013      	b.n	8004b0e <HAL_TIM_IC_Start_IT+0x66>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_IC_Start_IT+0x4e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	e00b      	b.n	8004b0e <HAL_TIM_IC_Start_IT+0x66>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b10      	cmp	r3, #16
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_IC_Start_IT+0x5e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	e003      	b.n	8004b0e <HAL_TIM_IC_Start_IT+0x66>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <HAL_TIM_IC_Start_IT+0x78>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e013      	b.n	8004b48 <HAL_TIM_IC_Start_IT+0xa0>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d104      	bne.n	8004b30 <HAL_TIM_IC_Start_IT+0x88>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e00b      	b.n	8004b48 <HAL_TIM_IC_Start_IT+0xa0>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d104      	bne.n	8004b40 <HAL_TIM_IC_Start_IT+0x98>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e003      	b.n	8004b48 <HAL_TIM_IC_Start_IT+0xa0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b4a:	7bbb      	ldrb	r3, [r7, #14]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d102      	bne.n	8004b56 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b50:	7b7b      	ldrb	r3, [r7, #13]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d001      	beq.n	8004b5a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e0e2      	b.n	8004d20 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_IC_Start_IT+0xc2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b68:	e023      	b.n	8004bb2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_IC_Start_IT+0xd2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b78:	e01b      	b.n	8004bb2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_IC_Start_IT+0xe2>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b88:	e013      	b.n	8004bb2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b0c      	cmp	r3, #12
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_IC_Start_IT+0xf2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b98:	e00b      	b.n	8004bb2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_IC_Start_IT+0x102>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba8:	e003      	b.n	8004bb2 <HAL_TIM_IC_Start_IT+0x10a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_IC_Start_IT+0x11a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc0:	e013      	b.n	8004bea <HAL_TIM_IC_Start_IT+0x142>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_IC_Start_IT+0x12a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bd0:	e00b      	b.n	8004bea <HAL_TIM_IC_Start_IT+0x142>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_IC_Start_IT+0x13a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004be0:	e003      	b.n	8004bea <HAL_TIM_IC_Start_IT+0x142>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b0c      	cmp	r3, #12
 8004bee:	d841      	bhi.n	8004c74 <HAL_TIM_IC_Start_IT+0x1cc>
 8004bf0:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <HAL_TIM_IC_Start_IT+0x150>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c2d 	.word	0x08004c2d
 8004bfc:	08004c75 	.word	0x08004c75
 8004c00:	08004c75 	.word	0x08004c75
 8004c04:	08004c75 	.word	0x08004c75
 8004c08:	08004c3f 	.word	0x08004c3f
 8004c0c:	08004c75 	.word	0x08004c75
 8004c10:	08004c75 	.word	0x08004c75
 8004c14:	08004c75 	.word	0x08004c75
 8004c18:	08004c51 	.word	0x08004c51
 8004c1c:	08004c75 	.word	0x08004c75
 8004c20:	08004c75 	.word	0x08004c75
 8004c24:	08004c75 	.word	0x08004c75
 8004c28:	08004c63 	.word	0x08004c63
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0202 	orr.w	r2, r2, #2
 8004c3a:	60da      	str	r2, [r3, #12]
      break;
 8004c3c:	e01d      	b.n	8004c7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0204 	orr.w	r2, r2, #4
 8004c4c:	60da      	str	r2, [r3, #12]
      break;
 8004c4e:	e014      	b.n	8004c7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0208 	orr.w	r2, r2, #8
 8004c5e:	60da      	str	r2, [r3, #12]
      break;
 8004c60:	e00b      	b.n	8004c7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0210 	orr.w	r2, r2, #16
 8004c70:	60da      	str	r2, [r3, #12]
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	73fb      	strb	r3, [r7, #15]
      break;
 8004c78:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d14e      	bne.n	8004d1e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2201      	movs	r2, #1
 8004c86:	6839      	ldr	r1, [r7, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 faa7 	bl	80061dc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a25      	ldr	r2, [pc, #148]	; (8004d28 <HAL_TIM_IC_Start_IT+0x280>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_TIM_IC_Start_IT+0x236>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca0:	d01d      	beq.n	8004cde <HAL_TIM_IC_Start_IT+0x236>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <HAL_TIM_IC_Start_IT+0x284>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_TIM_IC_Start_IT+0x236>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <HAL_TIM_IC_Start_IT+0x288>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_TIM_IC_Start_IT+0x236>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <HAL_TIM_IC_Start_IT+0x28c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIM_IC_Start_IT+0x236>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <HAL_TIM_IC_Start_IT+0x290>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_TIM_IC_Start_IT+0x236>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1b      	ldr	r2, [pc, #108]	; (8004d3c <HAL_TIM_IC_Start_IT+0x294>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIM_IC_Start_IT+0x236>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <HAL_TIM_IC_Start_IT+0x298>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d115      	bne.n	8004d0a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	4b17      	ldr	r3, [pc, #92]	; (8004d44 <HAL_TIM_IC_Start_IT+0x29c>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	d015      	beq.n	8004d1c <HAL_TIM_IC_Start_IT+0x274>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf6:	d011      	beq.n	8004d1c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d08:	e008      	b.n	8004d1c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0201 	orr.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e000      	b.n	8004d1e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40013400 	.word	0x40013400
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40015000 	.word	0x40015000
 8004d44:	00010007 	.word	0x00010007

08004d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d122      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d11b      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0202 	mvn.w	r2, #2
 8004d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc f91c 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fc6c 	bl	8005670 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fc73 	bl	8005684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d122      	bne.n	8004df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d11b      	bne.n	8004df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0204 	mvn.w	r2, #4
 8004dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc f8f2 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004de4:	e005      	b.n	8004df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fc42 	bl	8005670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fc49 	bl	8005684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d122      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d11b      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0208 	mvn.w	r2, #8
 8004e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc f8c8 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004e38:	e005      	b.n	8004e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fc18 	bl	8005670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fc1f 	bl	8005684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d122      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d11b      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0210 	mvn.w	r2, #16
 8004e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2208      	movs	r2, #8
 8004e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc f89e 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fbee 	bl	8005670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fbf5 	bl	8005684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d10e      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0201 	mvn.w	r2, #1
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fbc8 	bl	800565c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d107      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f001 faea 	bl	80064cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f06:	d10e      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d107      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f001 fadd 	bl	80064e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d10e      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b40      	cmp	r3, #64	; 0x40
 8004f40:	d107      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fba3 	bl	8005698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d10e      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d107      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f06f 0220 	mvn.w	r2, #32
 8004f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f001 fa9d 	bl	80064b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f8c:	d10f      	bne.n	8004fae <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9c:	d107      	bne.n	8004fae <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f001 faa3 	bl	80064f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fbc:	d10f      	bne.n	8004fde <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fcc:	d107      	bne.n	8004fde <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 fa95 	bl	8006508 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fec:	d10f      	bne.n	800500e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ffc:	d107      	bne.n	800500e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f001 fa87 	bl	800651c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800501c:	d10f      	bne.n	800503e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005028:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800502c:	d107      	bne.n	800503e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f001 fa79 	bl	8006530 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b086      	sub	sp, #24
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005060:	2302      	movs	r3, #2
 8005062:	e088      	b.n	8005176 <HAL_TIM_IC_ConfigChannel+0x130>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d11b      	bne.n	80050aa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f000 fee5 	bl	8005e50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 020c 	bic.w	r2, r2, #12
 8005094:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6999      	ldr	r1, [r3, #24]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	619a      	str	r2, [r3, #24]
 80050a8:	e060      	b.n	800516c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d11c      	bne.n	80050ea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6819      	ldr	r1, [r3, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f000 ff69 	bl	8005f96 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050d2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6999      	ldr	r1, [r3, #24]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	021a      	lsls	r2, r3, #8
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	619a      	str	r2, [r3, #24]
 80050e8:	e040      	b.n	800516c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d11b      	bne.n	8005128 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	6819      	ldr	r1, [r3, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f000 ffb6 	bl	8006070 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69da      	ldr	r2, [r3, #28]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 020c 	bic.w	r2, r2, #12
 8005112:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69d9      	ldr	r1, [r3, #28]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	61da      	str	r2, [r3, #28]
 8005126:	e021      	b.n	800516c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d11c      	bne.n	8005168 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6819      	ldr	r1, [r3, #0]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f000 ffd3 	bl	80060e8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005150:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69d9      	ldr	r1, [r3, #28]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	021a      	lsls	r2, r3, #8
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	61da      	str	r2, [r3, #28]
 8005166:	e001      	b.n	800516c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800519a:	2302      	movs	r3, #2
 800519c:	e0ff      	b.n	800539e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b14      	cmp	r3, #20
 80051aa:	f200 80f0 	bhi.w	800538e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	08005209 	.word	0x08005209
 80051b8:	0800538f 	.word	0x0800538f
 80051bc:	0800538f 	.word	0x0800538f
 80051c0:	0800538f 	.word	0x0800538f
 80051c4:	08005249 	.word	0x08005249
 80051c8:	0800538f 	.word	0x0800538f
 80051cc:	0800538f 	.word	0x0800538f
 80051d0:	0800538f 	.word	0x0800538f
 80051d4:	0800528b 	.word	0x0800528b
 80051d8:	0800538f 	.word	0x0800538f
 80051dc:	0800538f 	.word	0x0800538f
 80051e0:	0800538f 	.word	0x0800538f
 80051e4:	080052cb 	.word	0x080052cb
 80051e8:	0800538f 	.word	0x0800538f
 80051ec:	0800538f 	.word	0x0800538f
 80051f0:	0800538f 	.word	0x0800538f
 80051f4:	0800530d 	.word	0x0800530d
 80051f8:	0800538f 	.word	0x0800538f
 80051fc:	0800538f 	.word	0x0800538f
 8005200:	0800538f 	.word	0x0800538f
 8005204:	0800534d 	.word	0x0800534d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 faf4 	bl	80057fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0208 	orr.w	r2, r2, #8
 8005222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0204 	bic.w	r2, r2, #4
 8005232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6999      	ldr	r1, [r3, #24]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	619a      	str	r2, [r3, #24]
      break;
 8005246:	e0a5      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fb6e 	bl	8005930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6999      	ldr	r1, [r3, #24]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	021a      	lsls	r2, r3, #8
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	619a      	str	r2, [r3, #24]
      break;
 8005288:	e084      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fbe1 	bl	8005a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0208 	orr.w	r2, r2, #8
 80052a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0204 	bic.w	r2, r2, #4
 80052b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69d9      	ldr	r1, [r3, #28]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	61da      	str	r2, [r3, #28]
      break;
 80052c8:	e064      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fc53 	bl	8005b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69d9      	ldr	r1, [r3, #28]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	021a      	lsls	r2, r3, #8
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	61da      	str	r2, [r3, #28]
      break;
 800530a:	e043      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fcc6 	bl	8005ca4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0208 	orr.w	r2, r2, #8
 8005326:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0204 	bic.w	r2, r2, #4
 8005336:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800534a:	e023      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fd10 	bl	8005d78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005366:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005376:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	021a      	lsls	r2, r3, #8
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800538c:	e002      	b.n	8005394 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	75fb      	strb	r3, [r7, #23]
      break;
 8005392:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop

080053a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_TIM_ConfigClockSource+0x1c>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e0f6      	b.n	80055b2 <HAL_TIM_ConfigClockSource+0x20a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80053e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a6f      	ldr	r2, [pc, #444]	; (80055bc <HAL_TIM_ConfigClockSource+0x214>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	f000 80c1 	beq.w	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 8005404:	4a6d      	ldr	r2, [pc, #436]	; (80055bc <HAL_TIM_ConfigClockSource+0x214>)
 8005406:	4293      	cmp	r3, r2
 8005408:	f200 80c6 	bhi.w	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 800540c:	4a6c      	ldr	r2, [pc, #432]	; (80055c0 <HAL_TIM_ConfigClockSource+0x218>)
 800540e:	4293      	cmp	r3, r2
 8005410:	f000 80b9 	beq.w	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 8005414:	4a6a      	ldr	r2, [pc, #424]	; (80055c0 <HAL_TIM_ConfigClockSource+0x218>)
 8005416:	4293      	cmp	r3, r2
 8005418:	f200 80be 	bhi.w	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 800541c:	4a69      	ldr	r2, [pc, #420]	; (80055c4 <HAL_TIM_ConfigClockSource+0x21c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	f000 80b1 	beq.w	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 8005424:	4a67      	ldr	r2, [pc, #412]	; (80055c4 <HAL_TIM_ConfigClockSource+0x21c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	f200 80b6 	bhi.w	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 800542c:	4a66      	ldr	r2, [pc, #408]	; (80055c8 <HAL_TIM_ConfigClockSource+0x220>)
 800542e:	4293      	cmp	r3, r2
 8005430:	f000 80a9 	beq.w	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 8005434:	4a64      	ldr	r2, [pc, #400]	; (80055c8 <HAL_TIM_ConfigClockSource+0x220>)
 8005436:	4293      	cmp	r3, r2
 8005438:	f200 80ae 	bhi.w	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 800543c:	4a63      	ldr	r2, [pc, #396]	; (80055cc <HAL_TIM_ConfigClockSource+0x224>)
 800543e:	4293      	cmp	r3, r2
 8005440:	f000 80a1 	beq.w	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 8005444:	4a61      	ldr	r2, [pc, #388]	; (80055cc <HAL_TIM_ConfigClockSource+0x224>)
 8005446:	4293      	cmp	r3, r2
 8005448:	f200 80a6 	bhi.w	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 800544c:	4a60      	ldr	r2, [pc, #384]	; (80055d0 <HAL_TIM_ConfigClockSource+0x228>)
 800544e:	4293      	cmp	r3, r2
 8005450:	f000 8099 	beq.w	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 8005454:	4a5e      	ldr	r2, [pc, #376]	; (80055d0 <HAL_TIM_ConfigClockSource+0x228>)
 8005456:	4293      	cmp	r3, r2
 8005458:	f200 809e 	bhi.w	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 800545c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005460:	f000 8091 	beq.w	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 8005464:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005468:	f200 8096 	bhi.w	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 800546c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005470:	f000 8089 	beq.w	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 8005474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005478:	f200 808e 	bhi.w	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 800547c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005480:	d03e      	beq.n	8005500 <HAL_TIM_ConfigClockSource+0x158>
 8005482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005486:	f200 8087 	bhi.w	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 800548a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548e:	f000 8086 	beq.w	800559e <HAL_TIM_ConfigClockSource+0x1f6>
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005496:	d87f      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 8005498:	2b70      	cmp	r3, #112	; 0x70
 800549a:	d01a      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0x12a>
 800549c:	2b70      	cmp	r3, #112	; 0x70
 800549e:	d87b      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 80054a0:	2b60      	cmp	r3, #96	; 0x60
 80054a2:	d050      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x19e>
 80054a4:	2b60      	cmp	r3, #96	; 0x60
 80054a6:	d877      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 80054a8:	2b50      	cmp	r3, #80	; 0x50
 80054aa:	d03c      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x17e>
 80054ac:	2b50      	cmp	r3, #80	; 0x50
 80054ae:	d873      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d058      	beq.n	8005566 <HAL_TIM_ConfigClockSource+0x1be>
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d86f      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 80054b8:	2b30      	cmp	r3, #48	; 0x30
 80054ba:	d064      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 80054bc:	2b30      	cmp	r3, #48	; 0x30
 80054be:	d86b      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d060      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d867      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d05c      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d05a      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x1de>
 80054d0:	e062      	b.n	8005598 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6899      	ldr	r1, [r3, #8]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f000 fe5b 	bl	800619c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	609a      	str	r2, [r3, #8]
      break;
 80054fe:	e04f      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	6899      	ldr	r1, [r3, #8]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f000 fe44 	bl	800619c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005522:	609a      	str	r2, [r3, #8]
      break;
 8005524:	e03c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6859      	ldr	r1, [r3, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	461a      	mov	r2, r3
 8005534:	f000 fd00 	bl	8005f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2150      	movs	r1, #80	; 0x50
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fe0f 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 8005544:	e02c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6859      	ldr	r1, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	461a      	mov	r2, r3
 8005554:	f000 fd5c 	bl	8006010 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2160      	movs	r1, #96	; 0x60
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fdff 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 8005564:	e01c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6859      	ldr	r1, [r3, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	461a      	mov	r2, r3
 8005574:	f000 fce0 	bl	8005f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2140      	movs	r1, #64	; 0x40
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fdef 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 8005584:	e00c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f000 fde6 	bl	8006162 <TIM_ITRx_SetConfig>
      break;
 8005596:	e003      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
      break;
 800559c:	e000      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800559e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	00100070 	.word	0x00100070
 80055c0:	00100060 	.word	0x00100060
 80055c4:	00100050 	.word	0x00100050
 80055c8:	00100040 	.word	0x00100040
 80055cc:	00100030 	.word	0x00100030
 80055d0:	00100020 	.word	0x00100020

080055d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b0c      	cmp	r3, #12
 80055e6:	d831      	bhi.n	800564c <HAL_TIM_ReadCapturedValue+0x78>
 80055e8:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005625 	.word	0x08005625
 80055f4:	0800564d 	.word	0x0800564d
 80055f8:	0800564d 	.word	0x0800564d
 80055fc:	0800564d 	.word	0x0800564d
 8005600:	0800562f 	.word	0x0800562f
 8005604:	0800564d 	.word	0x0800564d
 8005608:	0800564d 	.word	0x0800564d
 800560c:	0800564d 	.word	0x0800564d
 8005610:	08005639 	.word	0x08005639
 8005614:	0800564d 	.word	0x0800564d
 8005618:	0800564d 	.word	0x0800564d
 800561c:	0800564d 	.word	0x0800564d
 8005620:	08005643 	.word	0x08005643
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	60fb      	str	r3, [r7, #12]

      break;
 800562c:	e00f      	b.n	800564e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	60fb      	str	r3, [r7, #12]

      break;
 8005636:	e00a      	b.n	800564e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	60fb      	str	r3, [r7, #12]

      break;
 8005640:	e005      	b.n	800564e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	60fb      	str	r3, [r7, #12]

      break;
 800564a:	e000      	b.n	800564e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800564c:	bf00      	nop
  }

  return tmpreg;
 800564e:	68fb      	ldr	r3, [r7, #12]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a46      	ldr	r2, [pc, #280]	; (80057d8 <TIM_Base_SetConfig+0x12c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d017      	beq.n	80056f4 <TIM_Base_SetConfig+0x48>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d013      	beq.n	80056f4 <TIM_Base_SetConfig+0x48>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a43      	ldr	r2, [pc, #268]	; (80057dc <TIM_Base_SetConfig+0x130>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00f      	beq.n	80056f4 <TIM_Base_SetConfig+0x48>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a42      	ldr	r2, [pc, #264]	; (80057e0 <TIM_Base_SetConfig+0x134>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00b      	beq.n	80056f4 <TIM_Base_SetConfig+0x48>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a41      	ldr	r2, [pc, #260]	; (80057e4 <TIM_Base_SetConfig+0x138>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d007      	beq.n	80056f4 <TIM_Base_SetConfig+0x48>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a40      	ldr	r2, [pc, #256]	; (80057e8 <TIM_Base_SetConfig+0x13c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_Base_SetConfig+0x48>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a3f      	ldr	r2, [pc, #252]	; (80057ec <TIM_Base_SetConfig+0x140>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d108      	bne.n	8005706 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a33      	ldr	r2, [pc, #204]	; (80057d8 <TIM_Base_SetConfig+0x12c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d023      	beq.n	8005756 <TIM_Base_SetConfig+0xaa>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005714:	d01f      	beq.n	8005756 <TIM_Base_SetConfig+0xaa>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a30      	ldr	r2, [pc, #192]	; (80057dc <TIM_Base_SetConfig+0x130>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01b      	beq.n	8005756 <TIM_Base_SetConfig+0xaa>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2f      	ldr	r2, [pc, #188]	; (80057e0 <TIM_Base_SetConfig+0x134>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d017      	beq.n	8005756 <TIM_Base_SetConfig+0xaa>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2e      	ldr	r2, [pc, #184]	; (80057e4 <TIM_Base_SetConfig+0x138>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <TIM_Base_SetConfig+0xaa>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2d      	ldr	r2, [pc, #180]	; (80057e8 <TIM_Base_SetConfig+0x13c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00f      	beq.n	8005756 <TIM_Base_SetConfig+0xaa>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2d      	ldr	r2, [pc, #180]	; (80057f0 <TIM_Base_SetConfig+0x144>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_Base_SetConfig+0xaa>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2c      	ldr	r2, [pc, #176]	; (80057f4 <TIM_Base_SetConfig+0x148>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d007      	beq.n	8005756 <TIM_Base_SetConfig+0xaa>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2b      	ldr	r2, [pc, #172]	; (80057f8 <TIM_Base_SetConfig+0x14c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_Base_SetConfig+0xaa>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a26      	ldr	r2, [pc, #152]	; (80057ec <TIM_Base_SetConfig+0x140>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d108      	bne.n	8005768 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <TIM_Base_SetConfig+0x12c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d013      	beq.n	80057bc <TIM_Base_SetConfig+0x110>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <TIM_Base_SetConfig+0x13c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00f      	beq.n	80057bc <TIM_Base_SetConfig+0x110>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a14      	ldr	r2, [pc, #80]	; (80057f0 <TIM_Base_SetConfig+0x144>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00b      	beq.n	80057bc <TIM_Base_SetConfig+0x110>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <TIM_Base_SetConfig+0x148>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d007      	beq.n	80057bc <TIM_Base_SetConfig+0x110>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a12      	ldr	r2, [pc, #72]	; (80057f8 <TIM_Base_SetConfig+0x14c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_Base_SetConfig+0x110>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a0d      	ldr	r2, [pc, #52]	; (80057ec <TIM_Base_SetConfig+0x140>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d103      	bne.n	80057c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	615a      	str	r2, [r3, #20]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40015000 	.word	0x40015000
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800

080057fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	f023 0201 	bic.w	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f023 0302 	bic.w	r3, r3, #2
 8005848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a30      	ldr	r2, [pc, #192]	; (8005918 <TIM_OC1_SetConfig+0x11c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <TIM_OC1_SetConfig+0x88>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a2f      	ldr	r2, [pc, #188]	; (800591c <TIM_OC1_SetConfig+0x120>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00f      	beq.n	8005884 <TIM_OC1_SetConfig+0x88>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a2e      	ldr	r2, [pc, #184]	; (8005920 <TIM_OC1_SetConfig+0x124>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00b      	beq.n	8005884 <TIM_OC1_SetConfig+0x88>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a2d      	ldr	r2, [pc, #180]	; (8005924 <TIM_OC1_SetConfig+0x128>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d007      	beq.n	8005884 <TIM_OC1_SetConfig+0x88>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a2c      	ldr	r2, [pc, #176]	; (8005928 <TIM_OC1_SetConfig+0x12c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_OC1_SetConfig+0x88>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a2b      	ldr	r2, [pc, #172]	; (800592c <TIM_OC1_SetConfig+0x130>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d10c      	bne.n	800589e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f023 0308 	bic.w	r3, r3, #8
 800588a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f023 0304 	bic.w	r3, r3, #4
 800589c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a1d      	ldr	r2, [pc, #116]	; (8005918 <TIM_OC1_SetConfig+0x11c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <TIM_OC1_SetConfig+0xd2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1c      	ldr	r2, [pc, #112]	; (800591c <TIM_OC1_SetConfig+0x120>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00f      	beq.n	80058ce <TIM_OC1_SetConfig+0xd2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <TIM_OC1_SetConfig+0x124>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_OC1_SetConfig+0xd2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1a      	ldr	r2, [pc, #104]	; (8005924 <TIM_OC1_SetConfig+0x128>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <TIM_OC1_SetConfig+0xd2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a19      	ldr	r2, [pc, #100]	; (8005928 <TIM_OC1_SetConfig+0x12c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_OC1_SetConfig+0xd2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a18      	ldr	r2, [pc, #96]	; (800592c <TIM_OC1_SetConfig+0x130>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d111      	bne.n	80058f2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	621a      	str	r2, [r3, #32]
}
 800590c:	bf00      	nop
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40013400 	.word	0x40013400
 8005920:	40014000 	.word	0x40014000
 8005924:	40014400 	.word	0x40014400
 8005928:	40014800 	.word	0x40014800
 800592c:	40015000 	.word	0x40015000

08005930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0210 	bic.w	r2, r3, #16
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800595e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800596a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0320 	bic.w	r3, r3, #32
 800597e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a2c      	ldr	r2, [pc, #176]	; (8005a40 <TIM_OC2_SetConfig+0x110>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d007      	beq.n	80059a4 <TIM_OC2_SetConfig+0x74>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a2b      	ldr	r2, [pc, #172]	; (8005a44 <TIM_OC2_SetConfig+0x114>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_OC2_SetConfig+0x74>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a2a      	ldr	r2, [pc, #168]	; (8005a48 <TIM_OC2_SetConfig+0x118>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d10d      	bne.n	80059c0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a1f      	ldr	r2, [pc, #124]	; (8005a40 <TIM_OC2_SetConfig+0x110>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <TIM_OC2_SetConfig+0xc0>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <TIM_OC2_SetConfig+0x114>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00f      	beq.n	80059f0 <TIM_OC2_SetConfig+0xc0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a1e      	ldr	r2, [pc, #120]	; (8005a4c <TIM_OC2_SetConfig+0x11c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <TIM_OC2_SetConfig+0xc0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <TIM_OC2_SetConfig+0x120>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <TIM_OC2_SetConfig+0xc0>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <TIM_OC2_SetConfig+0x124>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_OC2_SetConfig+0xc0>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <TIM_OC2_SetConfig+0x118>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d113      	bne.n	8005a18 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	621a      	str	r2, [r3, #32]
}
 8005a32:	bf00      	nop
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40013400 	.word	0x40013400
 8005a48:	40015000 	.word	0x40015000
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800

08005a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <TIM_OC3_SetConfig+0x10c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d007      	beq.n	8005aca <TIM_OC3_SetConfig+0x72>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2a      	ldr	r2, [pc, #168]	; (8005b68 <TIM_OC3_SetConfig+0x110>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <TIM_OC3_SetConfig+0x72>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a29      	ldr	r2, [pc, #164]	; (8005b6c <TIM_OC3_SetConfig+0x114>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d10d      	bne.n	8005ae6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1e      	ldr	r2, [pc, #120]	; (8005b64 <TIM_OC3_SetConfig+0x10c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d013      	beq.n	8005b16 <TIM_OC3_SetConfig+0xbe>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1d      	ldr	r2, [pc, #116]	; (8005b68 <TIM_OC3_SetConfig+0x110>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <TIM_OC3_SetConfig+0xbe>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a1d      	ldr	r2, [pc, #116]	; (8005b70 <TIM_OC3_SetConfig+0x118>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_OC3_SetConfig+0xbe>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1c      	ldr	r2, [pc, #112]	; (8005b74 <TIM_OC3_SetConfig+0x11c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_OC3_SetConfig+0xbe>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1b      	ldr	r2, [pc, #108]	; (8005b78 <TIM_OC3_SetConfig+0x120>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_OC3_SetConfig+0xbe>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a16      	ldr	r2, [pc, #88]	; (8005b6c <TIM_OC3_SetConfig+0x114>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d113      	bne.n	8005b3e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	621a      	str	r2, [r3, #32]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40013400 	.word	0x40013400
 8005b6c:	40015000 	.word	0x40015000
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	031b      	lsls	r3, r3, #12
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a2c      	ldr	r2, [pc, #176]	; (8005c8c <TIM_OC4_SetConfig+0x110>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_OC4_SetConfig+0x74>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a2b      	ldr	r2, [pc, #172]	; (8005c90 <TIM_OC4_SetConfig+0x114>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC4_SetConfig+0x74>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a2a      	ldr	r2, [pc, #168]	; (8005c94 <TIM_OC4_SetConfig+0x118>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10d      	bne.n	8005c0c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	031b      	lsls	r3, r3, #12
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a1f      	ldr	r2, [pc, #124]	; (8005c8c <TIM_OC4_SetConfig+0x110>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d013      	beq.n	8005c3c <TIM_OC4_SetConfig+0xc0>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a1e      	ldr	r2, [pc, #120]	; (8005c90 <TIM_OC4_SetConfig+0x114>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00f      	beq.n	8005c3c <TIM_OC4_SetConfig+0xc0>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <TIM_OC4_SetConfig+0x11c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <TIM_OC4_SetConfig+0xc0>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a1d      	ldr	r2, [pc, #116]	; (8005c9c <TIM_OC4_SetConfig+0x120>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_OC4_SetConfig+0xc0>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ca0 <TIM_OC4_SetConfig+0x124>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC4_SetConfig+0xc0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a17      	ldr	r2, [pc, #92]	; (8005c94 <TIM_OC4_SetConfig+0x118>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d113      	bne.n	8005c64 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	019b      	lsls	r3, r3, #6
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	019b      	lsls	r3, r3, #6
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40013400 	.word	0x40013400
 8005c94:	40015000 	.word	0x40015000
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800

08005ca4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ce8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	041b      	lsls	r3, r3, #16
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a19      	ldr	r2, [pc, #100]	; (8005d60 <TIM_OC5_SetConfig+0xbc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d013      	beq.n	8005d26 <TIM_OC5_SetConfig+0x82>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <TIM_OC5_SetConfig+0xc0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00f      	beq.n	8005d26 <TIM_OC5_SetConfig+0x82>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <TIM_OC5_SetConfig+0xc4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00b      	beq.n	8005d26 <TIM_OC5_SetConfig+0x82>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a16      	ldr	r2, [pc, #88]	; (8005d6c <TIM_OC5_SetConfig+0xc8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d007      	beq.n	8005d26 <TIM_OC5_SetConfig+0x82>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <TIM_OC5_SetConfig+0xcc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d003      	beq.n	8005d26 <TIM_OC5_SetConfig+0x82>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a14      	ldr	r2, [pc, #80]	; (8005d74 <TIM_OC5_SetConfig+0xd0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d109      	bne.n	8005d3a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40013400 	.word	0x40013400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800
 8005d74:	40015000 	.word	0x40015000

08005d78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	051b      	lsls	r3, r3, #20
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <TIM_OC6_SetConfig+0xc0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <TIM_OC6_SetConfig+0x84>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <TIM_OC6_SetConfig+0xc4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00f      	beq.n	8005dfc <TIM_OC6_SetConfig+0x84>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <TIM_OC6_SetConfig+0xc8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00b      	beq.n	8005dfc <TIM_OC6_SetConfig+0x84>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <TIM_OC6_SetConfig+0xcc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d007      	beq.n	8005dfc <TIM_OC6_SetConfig+0x84>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a16      	ldr	r2, [pc, #88]	; (8005e48 <TIM_OC6_SetConfig+0xd0>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_OC6_SetConfig+0x84>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a15      	ldr	r2, [pc, #84]	; (8005e4c <TIM_OC6_SetConfig+0xd4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d109      	bne.n	8005e10 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	029b      	lsls	r3, r3, #10
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40013400 	.word	0x40013400
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40014400 	.word	0x40014400
 8005e48:	40014800 	.word	0x40014800
 8005e4c:	40015000 	.word	0x40015000

08005e50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f023 0201 	bic.w	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a28      	ldr	r2, [pc, #160]	; (8005f1c <TIM_TI1_SetConfig+0xcc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01b      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d017      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4a25      	ldr	r2, [pc, #148]	; (8005f20 <TIM_TI1_SetConfig+0xd0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4a24      	ldr	r2, [pc, #144]	; (8005f24 <TIM_TI1_SetConfig+0xd4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00f      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a23      	ldr	r2, [pc, #140]	; (8005f28 <TIM_TI1_SetConfig+0xd8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00b      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4a22      	ldr	r2, [pc, #136]	; (8005f2c <TIM_TI1_SetConfig+0xdc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d007      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <TIM_TI1_SetConfig+0xe0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x66>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4a20      	ldr	r2, [pc, #128]	; (8005f34 <TIM_TI1_SetConfig+0xe4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <TIM_TI1_SetConfig+0x6a>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <TIM_TI1_SetConfig+0x6c>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	e003      	b.n	8005eda <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ee0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f023 030a 	bic.w	r3, r3, #10
 8005ef4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f003 030a 	and.w	r3, r3, #10
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40013400 	.word	0x40013400
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40015000 	.word	0x40015000

08005f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f023 0201 	bic.w	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f023 030a 	bic.w	r3, r3, #10
 8005f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b087      	sub	sp, #28
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f023 0210 	bic.w	r2, r3, #16
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	031b      	lsls	r3, r3, #12
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fe8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f023 0210 	bic.w	r2, r3, #16
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800603a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	031b      	lsls	r3, r3, #12
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800604c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	621a      	str	r2, [r3, #32]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f023 0303 	bic.w	r3, r3, #3
 800609c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80060c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	621a      	str	r2, [r3, #32]
}
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006114:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006126:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	031b      	lsls	r3, r3, #12
 800612c:	b29b      	uxth	r3, r3
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800613a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	031b      	lsls	r3, r3, #12
 8006140:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	f043 0307 	orr.w	r3, r3, #7
 8006188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	609a      	str	r2, [r3, #8]
}
 8006190:	bf00      	nop
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	021a      	lsls	r2, r3, #8
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	431a      	orrs	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	609a      	str	r2, [r3, #8]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	2201      	movs	r2, #1
 80061f0:	fa02 f303 	lsl.w	r3, r2, r3
 80061f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a1a      	ldr	r2, [r3, #32]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	43db      	mvns	r3, r3
 80061fe:	401a      	ands	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1a      	ldr	r2, [r3, #32]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	fa01 f303 	lsl.w	r3, r1, r3
 8006214:	431a      	orrs	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
	...

08006228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800623c:	2302      	movs	r3, #2
 800623e:	e074      	b.n	800632a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a34      	ldr	r2, [pc, #208]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a33      	ldr	r2, [pc, #204]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a31      	ldr	r2, [pc, #196]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d108      	bne.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006284:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a21      	ldr	r2, [pc, #132]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d022      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c0:	d01d      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1f      	ldr	r2, [pc, #124]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d018      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1c      	ldr	r2, [pc, #112]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00e      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a15      	ldr	r2, [pc, #84]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a18      	ldr	r2, [pc, #96]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a11      	ldr	r2, [pc, #68]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d10c      	bne.n	8006318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	4313      	orrs	r3, r2
 800630e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40012c00 	.word	0x40012c00
 800633c:	40013400 	.word	0x40013400
 8006340:	40015000 	.word	0x40015000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40014000 	.word	0x40014000

08006354 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800636c:	2302      	movs	r3, #2
 800636e:	e096      	b.n	800649e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	041b      	lsls	r3, r3, #16
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a2f      	ldr	r2, [pc, #188]	; (80064ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d009      	beq.n	8006408 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a2d      	ldr	r2, [pc, #180]	; (80064b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d004      	beq.n	8006408 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a2c      	ldr	r2, [pc, #176]	; (80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d106      	bne.n	8006416 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a24      	ldr	r2, [pc, #144]	; (80064ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d009      	beq.n	8006434 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d12b      	bne.n	800648c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	051b      	lsls	r3, r3, #20
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a11      	ldr	r2, [pc, #68]	; (80064ac <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d009      	beq.n	800647e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a10      	ldr	r2, [pc, #64]	; (80064b0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d004      	beq.n	800647e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a0e      	ldr	r2, [pc, #56]	; (80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d106      	bne.n	800648c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	4313      	orrs	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40012c00 	.word	0x40012c00
 80064b0:	40013400 	.word	0x40013400
 80064b4:	40015000 	.word	0x40015000

080064b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e042      	b.n	80065dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800655c:	2b00      	cmp	r3, #0
 800655e:	d106      	bne.n	800656e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7fc f931 	bl	80027d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2224      	movs	r2, #36	; 0x24
 8006572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0201 	bic.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f996 	bl	80068b8 <UART_SetConfig>
 800658c:	4603      	mov	r3, r0
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e022      	b.n	80065dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fc86 	bl	8006eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fd0d 	bl	8006ff4 <UART_CheckIdleState>
 80065da:	4603      	mov	r3, r0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	f040 8083 	bne.w	8006706 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <HAL_UART_Transmit+0x28>
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e07b      	b.n	8006708 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_UART_Transmit+0x3a>
 800661a:	2302      	movs	r3, #2
 800661c:	e074      	b.n	8006708 <HAL_UART_Transmit+0x124>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2221      	movs	r2, #33	; 0x21
 8006632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006636:	f7fc fcd9 	bl	8002fec <HAL_GetTick>
 800663a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	88fa      	ldrh	r2, [r7, #6]
 8006640:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	88fa      	ldrh	r2, [r7, #6]
 8006648:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006654:	d108      	bne.n	8006668 <HAL_UART_Transmit+0x84>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	e003      	b.n	8006670 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006678:	e02c      	b.n	80066d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	2180      	movs	r1, #128	; 0x80
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fd00 	bl	800708a <UART_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e039      	b.n	8006708 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10b      	bne.n	80066b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	3302      	adds	r3, #2
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	e007      	b.n	80066c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	781a      	ldrb	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	3301      	adds	r3, #1
 80066c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066da:	b29b      	uxth	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1cc      	bne.n	800667a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2200      	movs	r2, #0
 80066e8:	2140      	movs	r1, #64	; 0x40
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 fccd 	bl	800708a <UART_WaitOnFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e006      	b.n	8006708 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	e000      	b.n	8006708 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006706:	2302      	movs	r3, #2
  }
}
 8006708:	4618      	mov	r0, r3
 800670a:	3720      	adds	r7, #32
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08a      	sub	sp, #40	; 0x28
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006726:	2b20      	cmp	r3, #32
 8006728:	f040 80c0 	bne.w	80068ac <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_UART_Receive+0x28>
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e0b8      	b.n	80068ae <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_UART_Receive+0x3a>
 8006746:	2302      	movs	r3, #2
 8006748:	e0b1      	b.n	80068ae <HAL_UART_Receive+0x19e>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2222      	movs	r2, #34	; 0x22
 800675e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006768:	f7fc fc40 	bl	8002fec <HAL_GetTick>
 800676c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	88fa      	ldrh	r2, [r7, #6]
 8006772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	88fa      	ldrh	r2, [r7, #6]
 800677a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006786:	d10e      	bne.n	80067a6 <HAL_UART_Receive+0x96>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d105      	bne.n	800679c <HAL_UART_Receive+0x8c>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006796:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800679a:	e02d      	b.n	80067f8 <HAL_UART_Receive+0xe8>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	22ff      	movs	r2, #255	; 0xff
 80067a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067a4:	e028      	b.n	80067f8 <HAL_UART_Receive+0xe8>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10d      	bne.n	80067ca <HAL_UART_Receive+0xba>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <HAL_UART_Receive+0xb0>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	22ff      	movs	r2, #255	; 0xff
 80067ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067be:	e01b      	b.n	80067f8 <HAL_UART_Receive+0xe8>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	227f      	movs	r2, #127	; 0x7f
 80067c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067c8:	e016      	b.n	80067f8 <HAL_UART_Receive+0xe8>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067d2:	d10d      	bne.n	80067f0 <HAL_UART_Receive+0xe0>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <HAL_UART_Receive+0xd6>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	227f      	movs	r2, #127	; 0x7f
 80067e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067e4:	e008      	b.n	80067f8 <HAL_UART_Receive+0xe8>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	223f      	movs	r2, #63	; 0x3f
 80067ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067ee:	e003      	b.n	80067f8 <HAL_UART_Receive+0xe8>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067fe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006808:	d108      	bne.n	800681c <HAL_UART_Receive+0x10c>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d104      	bne.n	800681c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	e003      	b.n	8006824 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006820:	2300      	movs	r3, #0
 8006822:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800682c:	e032      	b.n	8006894 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2200      	movs	r2, #0
 8006836:	2120      	movs	r1, #32
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fc26 	bl	800708a <UART_WaitOnFlagUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e032      	b.n	80068ae <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10c      	bne.n	8006868 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	b29a      	uxth	r2, r3
 8006856:	8a7b      	ldrh	r3, [r7, #18]
 8006858:	4013      	ands	r3, r2
 800685a:	b29a      	uxth	r2, r3
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	3302      	adds	r3, #2
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	e00c      	b.n	8006882 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	b2da      	uxtb	r2, r3
 8006870:	8a7b      	ldrh	r3, [r7, #18]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	4013      	ands	r3, r2
 8006876:	b2da      	uxtb	r2, r3
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	3301      	adds	r3, #1
 8006880:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1c6      	bne.n	800682e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	e000      	b.n	80068ae <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80068ac:	2302      	movs	r3, #2
  }
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068bc:	b08c      	sub	sp, #48	; 0x30
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	431a      	orrs	r2, r3
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	431a      	orrs	r2, r3
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	4313      	orrs	r3, r2
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4baa      	ldr	r3, [pc, #680]	; (8006b90 <UART_SetConfig+0x2d8>)
 80068e8:	4013      	ands	r3, r2
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	6812      	ldr	r2, [r2, #0]
 80068ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068f0:	430b      	orrs	r3, r1
 80068f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a9f      	ldr	r2, [pc, #636]	; (8006b94 <UART_SetConfig+0x2dc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d004      	beq.n	8006924 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006920:	4313      	orrs	r3, r2
 8006922:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800692e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	6812      	ldr	r2, [r2, #0]
 8006936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006938:	430b      	orrs	r3, r1
 800693a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	f023 010f 	bic.w	r1, r3, #15
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a90      	ldr	r2, [pc, #576]	; (8006b98 <UART_SetConfig+0x2e0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d125      	bne.n	80069a8 <UART_SetConfig+0xf0>
 800695c:	4b8f      	ldr	r3, [pc, #572]	; (8006b9c <UART_SetConfig+0x2e4>)
 800695e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	2b03      	cmp	r3, #3
 8006968:	d81a      	bhi.n	80069a0 <UART_SetConfig+0xe8>
 800696a:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <UART_SetConfig+0xb8>)
 800696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006970:	08006981 	.word	0x08006981
 8006974:	08006991 	.word	0x08006991
 8006978:	08006989 	.word	0x08006989
 800697c:	08006999 	.word	0x08006999
 8006980:	2301      	movs	r3, #1
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006986:	e116      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006988:	2302      	movs	r3, #2
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800698e:	e112      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006990:	2304      	movs	r3, #4
 8006992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006996:	e10e      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006998:	2308      	movs	r3, #8
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800699e:	e10a      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 80069a0:	2310      	movs	r3, #16
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a6:	e106      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a7c      	ldr	r2, [pc, #496]	; (8006ba0 <UART_SetConfig+0x2e8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d138      	bne.n	8006a24 <UART_SetConfig+0x16c>
 80069b2:	4b7a      	ldr	r3, [pc, #488]	; (8006b9c <UART_SetConfig+0x2e4>)
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b8:	f003 030c 	and.w	r3, r3, #12
 80069bc:	2b0c      	cmp	r3, #12
 80069be:	d82d      	bhi.n	8006a1c <UART_SetConfig+0x164>
 80069c0:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <UART_SetConfig+0x110>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	080069fd 	.word	0x080069fd
 80069cc:	08006a1d 	.word	0x08006a1d
 80069d0:	08006a1d 	.word	0x08006a1d
 80069d4:	08006a1d 	.word	0x08006a1d
 80069d8:	08006a0d 	.word	0x08006a0d
 80069dc:	08006a1d 	.word	0x08006a1d
 80069e0:	08006a1d 	.word	0x08006a1d
 80069e4:	08006a1d 	.word	0x08006a1d
 80069e8:	08006a05 	.word	0x08006a05
 80069ec:	08006a1d 	.word	0x08006a1d
 80069f0:	08006a1d 	.word	0x08006a1d
 80069f4:	08006a1d 	.word	0x08006a1d
 80069f8:	08006a15 	.word	0x08006a15
 80069fc:	2300      	movs	r3, #0
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a02:	e0d8      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006a04:	2302      	movs	r3, #2
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a0a:	e0d4      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006a0c:	2304      	movs	r3, #4
 8006a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a12:	e0d0      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006a14:	2308      	movs	r3, #8
 8006a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a1a:	e0cc      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a22:	e0c8      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a5e      	ldr	r2, [pc, #376]	; (8006ba4 <UART_SetConfig+0x2ec>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d125      	bne.n	8006a7a <UART_SetConfig+0x1c2>
 8006a2e:	4b5b      	ldr	r3, [pc, #364]	; (8006b9c <UART_SetConfig+0x2e4>)
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a38:	2b30      	cmp	r3, #48	; 0x30
 8006a3a:	d016      	beq.n	8006a6a <UART_SetConfig+0x1b2>
 8006a3c:	2b30      	cmp	r3, #48	; 0x30
 8006a3e:	d818      	bhi.n	8006a72 <UART_SetConfig+0x1ba>
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	d00a      	beq.n	8006a5a <UART_SetConfig+0x1a2>
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d814      	bhi.n	8006a72 <UART_SetConfig+0x1ba>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <UART_SetConfig+0x19a>
 8006a4c:	2b10      	cmp	r3, #16
 8006a4e:	d008      	beq.n	8006a62 <UART_SetConfig+0x1aa>
 8006a50:	e00f      	b.n	8006a72 <UART_SetConfig+0x1ba>
 8006a52:	2300      	movs	r3, #0
 8006a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a58:	e0ad      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a60:	e0a9      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006a62:	2304      	movs	r3, #4
 8006a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a68:	e0a5      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006a6a:	2308      	movs	r3, #8
 8006a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a70:	e0a1      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006a72:	2310      	movs	r3, #16
 8006a74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a78:	e09d      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a4a      	ldr	r2, [pc, #296]	; (8006ba8 <UART_SetConfig+0x2f0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d125      	bne.n	8006ad0 <UART_SetConfig+0x218>
 8006a84:	4b45      	ldr	r3, [pc, #276]	; (8006b9c <UART_SetConfig+0x2e4>)
 8006a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8006a90:	d016      	beq.n	8006ac0 <UART_SetConfig+0x208>
 8006a92:	2bc0      	cmp	r3, #192	; 0xc0
 8006a94:	d818      	bhi.n	8006ac8 <UART_SetConfig+0x210>
 8006a96:	2b80      	cmp	r3, #128	; 0x80
 8006a98:	d00a      	beq.n	8006ab0 <UART_SetConfig+0x1f8>
 8006a9a:	2b80      	cmp	r3, #128	; 0x80
 8006a9c:	d814      	bhi.n	8006ac8 <UART_SetConfig+0x210>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <UART_SetConfig+0x1f0>
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d008      	beq.n	8006ab8 <UART_SetConfig+0x200>
 8006aa6:	e00f      	b.n	8006ac8 <UART_SetConfig+0x210>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aae:	e082      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ab6:	e07e      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006abe:	e07a      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac6:	e076      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ace:	e072      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a35      	ldr	r2, [pc, #212]	; (8006bac <UART_SetConfig+0x2f4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d12a      	bne.n	8006b30 <UART_SetConfig+0x278>
 8006ada:	4b30      	ldr	r3, [pc, #192]	; (8006b9c <UART_SetConfig+0x2e4>)
 8006adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ae8:	d01a      	beq.n	8006b20 <UART_SetConfig+0x268>
 8006aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aee:	d81b      	bhi.n	8006b28 <UART_SetConfig+0x270>
 8006af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af4:	d00c      	beq.n	8006b10 <UART_SetConfig+0x258>
 8006af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006afa:	d815      	bhi.n	8006b28 <UART_SetConfig+0x270>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <UART_SetConfig+0x250>
 8006b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b04:	d008      	beq.n	8006b18 <UART_SetConfig+0x260>
 8006b06:	e00f      	b.n	8006b28 <UART_SetConfig+0x270>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b0e:	e052      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006b10:	2302      	movs	r3, #2
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b16:	e04e      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b1e:	e04a      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006b20:	2308      	movs	r3, #8
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b26:	e046      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b2e:	e042      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a17      	ldr	r2, [pc, #92]	; (8006b94 <UART_SetConfig+0x2dc>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d13a      	bne.n	8006bb0 <UART_SetConfig+0x2f8>
 8006b3a:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <UART_SetConfig+0x2e4>)
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b48:	d01a      	beq.n	8006b80 <UART_SetConfig+0x2c8>
 8006b4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b4e:	d81b      	bhi.n	8006b88 <UART_SetConfig+0x2d0>
 8006b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b54:	d00c      	beq.n	8006b70 <UART_SetConfig+0x2b8>
 8006b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b5a:	d815      	bhi.n	8006b88 <UART_SetConfig+0x2d0>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <UART_SetConfig+0x2b0>
 8006b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b64:	d008      	beq.n	8006b78 <UART_SetConfig+0x2c0>
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x2d0>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6e:	e022      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006b70:	2302      	movs	r3, #2
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b76:	e01e      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7e:	e01a      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006b80:	2308      	movs	r3, #8
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b86:	e016      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8e:	e012      	b.n	8006bb6 <UART_SetConfig+0x2fe>
 8006b90:	cfff69f3 	.word	0xcfff69f3
 8006b94:	40008000 	.word	0x40008000
 8006b98:	40013800 	.word	0x40013800
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	40004400 	.word	0x40004400
 8006ba4:	40004800 	.word	0x40004800
 8006ba8:	40004c00 	.word	0x40004c00
 8006bac:	40005000 	.word	0x40005000
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4aae      	ldr	r2, [pc, #696]	; (8006e74 <UART_SetConfig+0x5bc>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	f040 8097 	bne.w	8006cf0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d823      	bhi.n	8006c12 <UART_SetConfig+0x35a>
 8006bca:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <UART_SetConfig+0x318>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006bf5 	.word	0x08006bf5
 8006bd4:	08006c13 	.word	0x08006c13
 8006bd8:	08006bfd 	.word	0x08006bfd
 8006bdc:	08006c13 	.word	0x08006c13
 8006be0:	08006c03 	.word	0x08006c03
 8006be4:	08006c13 	.word	0x08006c13
 8006be8:	08006c13 	.word	0x08006c13
 8006bec:	08006c13 	.word	0x08006c13
 8006bf0:	08006c0b 	.word	0x08006c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf4:	f7fd fa6c 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8006bf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bfa:	e010      	b.n	8006c1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bfc:	4b9e      	ldr	r3, [pc, #632]	; (8006e78 <UART_SetConfig+0x5c0>)
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c00:	e00d      	b.n	8006c1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c02:	f7fd f9f7 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8006c06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c08:	e009      	b.n	8006c1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c10:	e005      	b.n	8006c1e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8130 	beq.w	8006e86 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	4a94      	ldr	r2, [pc, #592]	; (8006e7c <UART_SetConfig+0x5c4>)
 8006c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	4413      	add	r3, r2
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d305      	bcc.n	8006c56 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d903      	bls.n	8006c5e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c5c:	e113      	b.n	8006e86 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	2200      	movs	r2, #0
 8006c62:	60bb      	str	r3, [r7, #8]
 8006c64:	60fa      	str	r2, [r7, #12]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	4a84      	ldr	r2, [pc, #528]	; (8006e7c <UART_SetConfig+0x5c4>)
 8006c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2200      	movs	r2, #0
 8006c74:	603b      	str	r3, [r7, #0]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c80:	f7f9 ffda 	bl	8000c38 <__aeabi_uldivmod>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	020b      	lsls	r3, r1, #8
 8006c96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c9a:	0202      	lsls	r2, r0, #8
 8006c9c:	6979      	ldr	r1, [r7, #20]
 8006c9e:	6849      	ldr	r1, [r1, #4]
 8006ca0:	0849      	lsrs	r1, r1, #1
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	eb12 0804 	adds.w	r8, r2, r4
 8006cac:	eb43 0905 	adc.w	r9, r3, r5
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	469a      	mov	sl, r3
 8006cb8:	4693      	mov	fp, r2
 8006cba:	4652      	mov	r2, sl
 8006cbc:	465b      	mov	r3, fp
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	4649      	mov	r1, r9
 8006cc2:	f7f9 ffb9 	bl	8000c38 <__aeabi_uldivmod>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4613      	mov	r3, r2
 8006ccc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cd4:	d308      	bcc.n	8006ce8 <UART_SetConfig+0x430>
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cdc:	d204      	bcs.n	8006ce8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6a3a      	ldr	r2, [r7, #32]
 8006ce4:	60da      	str	r2, [r3, #12]
 8006ce6:	e0ce      	b.n	8006e86 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006cee:	e0ca      	b.n	8006e86 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf8:	d166      	bne.n	8006dc8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cfe:	2b08      	cmp	r3, #8
 8006d00:	d827      	bhi.n	8006d52 <UART_SetConfig+0x49a>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <UART_SetConfig+0x450>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d35 	.word	0x08006d35
 8006d10:	08006d3d 	.word	0x08006d3d
 8006d14:	08006d53 	.word	0x08006d53
 8006d18:	08006d43 	.word	0x08006d43
 8006d1c:	08006d53 	.word	0x08006d53
 8006d20:	08006d53 	.word	0x08006d53
 8006d24:	08006d53 	.word	0x08006d53
 8006d28:	08006d4b 	.word	0x08006d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d2c:	f7fd f9d0 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8006d30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d32:	e014      	b.n	8006d5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d34:	f7fd f9e2 	bl	80040fc <HAL_RCC_GetPCLK2Freq>
 8006d38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d3a:	e010      	b.n	8006d5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d3c:	4b4e      	ldr	r3, [pc, #312]	; (8006e78 <UART_SetConfig+0x5c0>)
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d40:	e00d      	b.n	8006d5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d42:	f7fd f957 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8006d46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d48:	e009      	b.n	8006d5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d50:	e005      	b.n	8006d5e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8090 	beq.w	8006e86 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	4a44      	ldr	r2, [pc, #272]	; (8006e7c <UART_SetConfig+0x5c4>)
 8006d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d70:	461a      	mov	r2, r3
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d78:	005a      	lsls	r2, r3, #1
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	085b      	lsrs	r3, r3, #1
 8006d80:	441a      	add	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	2b0f      	cmp	r3, #15
 8006d90:	d916      	bls.n	8006dc0 <UART_SetConfig+0x508>
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d98:	d212      	bcs.n	8006dc0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f023 030f 	bic.w	r3, r3, #15
 8006da2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	085b      	lsrs	r3, r3, #1
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	8bfb      	ldrh	r3, [r7, #30]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	8bfa      	ldrh	r2, [r7, #30]
 8006dbc:	60da      	str	r2, [r3, #12]
 8006dbe:	e062      	b.n	8006e86 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006dc6:	e05e      	b.n	8006e86 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d828      	bhi.n	8006e22 <UART_SetConfig+0x56a>
 8006dd0:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <UART_SetConfig+0x520>)
 8006dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd6:	bf00      	nop
 8006dd8:	08006dfd 	.word	0x08006dfd
 8006ddc:	08006e05 	.word	0x08006e05
 8006de0:	08006e0d 	.word	0x08006e0d
 8006de4:	08006e23 	.word	0x08006e23
 8006de8:	08006e13 	.word	0x08006e13
 8006dec:	08006e23 	.word	0x08006e23
 8006df0:	08006e23 	.word	0x08006e23
 8006df4:	08006e23 	.word	0x08006e23
 8006df8:	08006e1b 	.word	0x08006e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dfc:	f7fd f968 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8006e00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e02:	e014      	b.n	8006e2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e04:	f7fd f97a 	bl	80040fc <HAL_RCC_GetPCLK2Freq>
 8006e08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e0a:	e010      	b.n	8006e2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e0c:	4b1a      	ldr	r3, [pc, #104]	; (8006e78 <UART_SetConfig+0x5c0>)
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e10:	e00d      	b.n	8006e2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e12:	f7fd f8ef 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8006e16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e18:	e009      	b.n	8006e2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e20:	e005      	b.n	8006e2e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e2c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d028      	beq.n	8006e86 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	4a10      	ldr	r2, [pc, #64]	; (8006e7c <UART_SetConfig+0x5c4>)
 8006e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	441a      	add	r2, r3
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	2b0f      	cmp	r3, #15
 8006e5c:	d910      	bls.n	8006e80 <UART_SetConfig+0x5c8>
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e64:	d20c      	bcs.n	8006e80 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60da      	str	r2, [r3, #12]
 8006e70:	e009      	b.n	8006e86 <UART_SetConfig+0x5ce>
 8006e72:	bf00      	nop
 8006e74:	40008000 	.word	0x40008000
 8006e78:	00f42400 	.word	0x00f42400
 8006e7c:	0800a0d8 	.word	0x0800a0d8
      }
      else
      {
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006ea2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3730      	adds	r7, #48	; 0x30
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01a      	beq.n	8006fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fae:	d10a      	bne.n	8006fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	605a      	str	r2, [r3, #4]
  }
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007004:	f7fb fff2 	bl	8002fec <HAL_GetTick>
 8007008:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b08      	cmp	r3, #8
 8007016:	d10e      	bne.n	8007036 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f82f 	bl	800708a <UART_WaitOnFlagUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e025      	b.n	8007082 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b04      	cmp	r3, #4
 8007042:	d10e      	bne.n	8007062 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f819 	bl	800708a <UART_WaitOnFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e00f      	b.n	8007082 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2220      	movs	r2, #32
 800706e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b09c      	sub	sp, #112	; 0x70
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800709a:	e0a9      	b.n	80071f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800709c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	f000 80a5 	beq.w	80071f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a6:	f7fb ffa1 	bl	8002fec <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d302      	bcc.n	80070bc <UART_WaitOnFlagUntilTimeout+0x32>
 80070b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d140      	bne.n	800713e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070d0:	667b      	str	r3, [r7, #100]	; 0x64
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e6      	bne.n	80070bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3308      	adds	r3, #8
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	663b      	str	r3, [r7, #96]	; 0x60
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3308      	adds	r3, #8
 800710c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800710e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007110:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800711c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e5      	bne.n	80070ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e069      	b.n	8007212 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d051      	beq.n	80071f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800715a:	d149      	bne.n	80071f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007164:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800717a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007184:	637b      	str	r3, [r7, #52]	; 0x34
 8007186:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800718a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e6      	bne.n	8007166 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3308      	adds	r3, #8
 800719e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	e853 3f00 	ldrex	r3, [r3]
 80071a6:	613b      	str	r3, [r7, #16]
   return(result);
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f023 0301 	bic.w	r3, r3, #1
 80071ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3308      	adds	r3, #8
 80071b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071b8:	623a      	str	r2, [r7, #32]
 80071ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	69f9      	ldr	r1, [r7, #28]
 80071be:	6a3a      	ldr	r2, [r7, #32]
 80071c0:	e841 2300 	strex	r3, r2, [r1]
 80071c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e5      	bne.n	8007198 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e010      	b.n	8007212 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69da      	ldr	r2, [r3, #28]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	4013      	ands	r3, r2
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	bf0c      	ite	eq
 8007200:	2301      	moveq	r3, #1
 8007202:	2300      	movne	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	461a      	mov	r2, r3
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	429a      	cmp	r2, r3
 800720c:	f43f af46 	beq.w	800709c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3770      	adds	r7, #112	; 0x70
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_UARTEx_DisableFifoMode+0x16>
 800722c:	2302      	movs	r3, #2
 800722e:	e027      	b.n	8007280 <HAL_UARTEx_DisableFifoMode+0x66>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2224      	movs	r2, #36	; 0x24
 800723c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0201 	bic.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800725e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e02d      	b.n	8007300 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2224      	movs	r2, #36	; 0x24
 80072b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0201 	bic.w	r2, r2, #1
 80072ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f84f 	bl	8007384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e02d      	b.n	800737c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2224      	movs	r2, #36	; 0x24
 800732c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0201 	bic.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f811 	bl	8007384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007390:	2b00      	cmp	r3, #0
 8007392:	d108      	bne.n	80073a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073a4:	e031      	b.n	800740a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073a6:	2308      	movs	r3, #8
 80073a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073aa:	2308      	movs	r3, #8
 80073ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	0e5b      	lsrs	r3, r3, #25
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	0f5b      	lsrs	r3, r3, #29
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	7b3a      	ldrb	r2, [r7, #12]
 80073d2:	4911      	ldr	r1, [pc, #68]	; (8007418 <UARTEx_SetNbDataToProcess+0x94>)
 80073d4:	5c8a      	ldrb	r2, [r1, r2]
 80073d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073da:	7b3a      	ldrb	r2, [r7, #12]
 80073dc:	490f      	ldr	r1, [pc, #60]	; (800741c <UARTEx_SetNbDataToProcess+0x98>)
 80073de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	7b7a      	ldrb	r2, [r7, #13]
 80073f0:	4909      	ldr	r1, [pc, #36]	; (8007418 <UARTEx_SetNbDataToProcess+0x94>)
 80073f2:	5c8a      	ldrb	r2, [r1, r2]
 80073f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073f8:	7b7a      	ldrb	r2, [r7, #13]
 80073fa:	4908      	ldr	r1, [pc, #32]	; (800741c <UARTEx_SetNbDataToProcess+0x98>)
 80073fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800740a:	bf00      	nop
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	0800a0f0 	.word	0x0800a0f0
 800741c:	0800a0f8 	.word	0x0800a0f8

08007420 <__errno>:
 8007420:	4b01      	ldr	r3, [pc, #4]	; (8007428 <__errno+0x8>)
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	20000014 	.word	0x20000014

0800742c <__libc_init_array>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	4d0d      	ldr	r5, [pc, #52]	; (8007464 <__libc_init_array+0x38>)
 8007430:	4c0d      	ldr	r4, [pc, #52]	; (8007468 <__libc_init_array+0x3c>)
 8007432:	1b64      	subs	r4, r4, r5
 8007434:	10a4      	asrs	r4, r4, #2
 8007436:	2600      	movs	r6, #0
 8007438:	42a6      	cmp	r6, r4
 800743a:	d109      	bne.n	8007450 <__libc_init_array+0x24>
 800743c:	4d0b      	ldr	r5, [pc, #44]	; (800746c <__libc_init_array+0x40>)
 800743e:	4c0c      	ldr	r4, [pc, #48]	; (8007470 <__libc_init_array+0x44>)
 8007440:	f002 fdac 	bl	8009f9c <_init>
 8007444:	1b64      	subs	r4, r4, r5
 8007446:	10a4      	asrs	r4, r4, #2
 8007448:	2600      	movs	r6, #0
 800744a:	42a6      	cmp	r6, r4
 800744c:	d105      	bne.n	800745a <__libc_init_array+0x2e>
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	f855 3b04 	ldr.w	r3, [r5], #4
 8007454:	4798      	blx	r3
 8007456:	3601      	adds	r6, #1
 8007458:	e7ee      	b.n	8007438 <__libc_init_array+0xc>
 800745a:	f855 3b04 	ldr.w	r3, [r5], #4
 800745e:	4798      	blx	r3
 8007460:	3601      	adds	r6, #1
 8007462:	e7f2      	b.n	800744a <__libc_init_array+0x1e>
 8007464:	0800a4e4 	.word	0x0800a4e4
 8007468:	0800a4e4 	.word	0x0800a4e4
 800746c:	0800a4e4 	.word	0x0800a4e4
 8007470:	0800a4e8 	.word	0x0800a4e8

08007474 <memset>:
 8007474:	4402      	add	r2, r0
 8007476:	4603      	mov	r3, r0
 8007478:	4293      	cmp	r3, r2
 800747a:	d100      	bne.n	800747e <memset+0xa>
 800747c:	4770      	bx	lr
 800747e:	f803 1b01 	strb.w	r1, [r3], #1
 8007482:	e7f9      	b.n	8007478 <memset+0x4>

08007484 <__cvt>:
 8007484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	ec55 4b10 	vmov	r4, r5, d0
 800748c:	2d00      	cmp	r5, #0
 800748e:	460e      	mov	r6, r1
 8007490:	4619      	mov	r1, r3
 8007492:	462b      	mov	r3, r5
 8007494:	bfbb      	ittet	lt
 8007496:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800749a:	461d      	movlt	r5, r3
 800749c:	2300      	movge	r3, #0
 800749e:	232d      	movlt	r3, #45	; 0x2d
 80074a0:	700b      	strb	r3, [r1, #0]
 80074a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074a8:	4691      	mov	r9, r2
 80074aa:	f023 0820 	bic.w	r8, r3, #32
 80074ae:	bfbc      	itt	lt
 80074b0:	4622      	movlt	r2, r4
 80074b2:	4614      	movlt	r4, r2
 80074b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074b8:	d005      	beq.n	80074c6 <__cvt+0x42>
 80074ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074be:	d100      	bne.n	80074c2 <__cvt+0x3e>
 80074c0:	3601      	adds	r6, #1
 80074c2:	2102      	movs	r1, #2
 80074c4:	e000      	b.n	80074c8 <__cvt+0x44>
 80074c6:	2103      	movs	r1, #3
 80074c8:	ab03      	add	r3, sp, #12
 80074ca:	9301      	str	r3, [sp, #4]
 80074cc:	ab02      	add	r3, sp, #8
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	ec45 4b10 	vmov	d0, r4, r5
 80074d4:	4653      	mov	r3, sl
 80074d6:	4632      	mov	r2, r6
 80074d8:	f000 fe02 	bl	80080e0 <_dtoa_r>
 80074dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074e0:	4607      	mov	r7, r0
 80074e2:	d102      	bne.n	80074ea <__cvt+0x66>
 80074e4:	f019 0f01 	tst.w	r9, #1
 80074e8:	d022      	beq.n	8007530 <__cvt+0xac>
 80074ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074ee:	eb07 0906 	add.w	r9, r7, r6
 80074f2:	d110      	bne.n	8007516 <__cvt+0x92>
 80074f4:	783b      	ldrb	r3, [r7, #0]
 80074f6:	2b30      	cmp	r3, #48	; 0x30
 80074f8:	d10a      	bne.n	8007510 <__cvt+0x8c>
 80074fa:	2200      	movs	r2, #0
 80074fc:	2300      	movs	r3, #0
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	f7f9 fb09 	bl	8000b18 <__aeabi_dcmpeq>
 8007506:	b918      	cbnz	r0, 8007510 <__cvt+0x8c>
 8007508:	f1c6 0601 	rsb	r6, r6, #1
 800750c:	f8ca 6000 	str.w	r6, [sl]
 8007510:	f8da 3000 	ldr.w	r3, [sl]
 8007514:	4499      	add	r9, r3
 8007516:	2200      	movs	r2, #0
 8007518:	2300      	movs	r3, #0
 800751a:	4620      	mov	r0, r4
 800751c:	4629      	mov	r1, r5
 800751e:	f7f9 fafb 	bl	8000b18 <__aeabi_dcmpeq>
 8007522:	b108      	cbz	r0, 8007528 <__cvt+0xa4>
 8007524:	f8cd 900c 	str.w	r9, [sp, #12]
 8007528:	2230      	movs	r2, #48	; 0x30
 800752a:	9b03      	ldr	r3, [sp, #12]
 800752c:	454b      	cmp	r3, r9
 800752e:	d307      	bcc.n	8007540 <__cvt+0xbc>
 8007530:	9b03      	ldr	r3, [sp, #12]
 8007532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007534:	1bdb      	subs	r3, r3, r7
 8007536:	4638      	mov	r0, r7
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	b004      	add	sp, #16
 800753c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007540:	1c59      	adds	r1, r3, #1
 8007542:	9103      	str	r1, [sp, #12]
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	e7f0      	b.n	800752a <__cvt+0xa6>

08007548 <__exponent>:
 8007548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800754a:	4603      	mov	r3, r0
 800754c:	2900      	cmp	r1, #0
 800754e:	bfb8      	it	lt
 8007550:	4249      	neglt	r1, r1
 8007552:	f803 2b02 	strb.w	r2, [r3], #2
 8007556:	bfb4      	ite	lt
 8007558:	222d      	movlt	r2, #45	; 0x2d
 800755a:	222b      	movge	r2, #43	; 0x2b
 800755c:	2909      	cmp	r1, #9
 800755e:	7042      	strb	r2, [r0, #1]
 8007560:	dd2a      	ble.n	80075b8 <__exponent+0x70>
 8007562:	f10d 0407 	add.w	r4, sp, #7
 8007566:	46a4      	mov	ip, r4
 8007568:	270a      	movs	r7, #10
 800756a:	46a6      	mov	lr, r4
 800756c:	460a      	mov	r2, r1
 800756e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007572:	fb07 1516 	mls	r5, r7, r6, r1
 8007576:	3530      	adds	r5, #48	; 0x30
 8007578:	2a63      	cmp	r2, #99	; 0x63
 800757a:	f104 34ff 	add.w	r4, r4, #4294967295
 800757e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007582:	4631      	mov	r1, r6
 8007584:	dcf1      	bgt.n	800756a <__exponent+0x22>
 8007586:	3130      	adds	r1, #48	; 0x30
 8007588:	f1ae 0502 	sub.w	r5, lr, #2
 800758c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007590:	1c44      	adds	r4, r0, #1
 8007592:	4629      	mov	r1, r5
 8007594:	4561      	cmp	r1, ip
 8007596:	d30a      	bcc.n	80075ae <__exponent+0x66>
 8007598:	f10d 0209 	add.w	r2, sp, #9
 800759c:	eba2 020e 	sub.w	r2, r2, lr
 80075a0:	4565      	cmp	r5, ip
 80075a2:	bf88      	it	hi
 80075a4:	2200      	movhi	r2, #0
 80075a6:	4413      	add	r3, r2
 80075a8:	1a18      	subs	r0, r3, r0
 80075aa:	b003      	add	sp, #12
 80075ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80075b6:	e7ed      	b.n	8007594 <__exponent+0x4c>
 80075b8:	2330      	movs	r3, #48	; 0x30
 80075ba:	3130      	adds	r1, #48	; 0x30
 80075bc:	7083      	strb	r3, [r0, #2]
 80075be:	70c1      	strb	r1, [r0, #3]
 80075c0:	1d03      	adds	r3, r0, #4
 80075c2:	e7f1      	b.n	80075a8 <__exponent+0x60>

080075c4 <_printf_float>:
 80075c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c8:	ed2d 8b02 	vpush	{d8}
 80075cc:	b08d      	sub	sp, #52	; 0x34
 80075ce:	460c      	mov	r4, r1
 80075d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075d4:	4616      	mov	r6, r2
 80075d6:	461f      	mov	r7, r3
 80075d8:	4605      	mov	r5, r0
 80075da:	f001 fd27 	bl	800902c <_localeconv_r>
 80075de:	f8d0 a000 	ldr.w	sl, [r0]
 80075e2:	4650      	mov	r0, sl
 80075e4:	f7f8 fe1c 	bl	8000220 <strlen>
 80075e8:	2300      	movs	r3, #0
 80075ea:	930a      	str	r3, [sp, #40]	; 0x28
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	9305      	str	r3, [sp, #20]
 80075f0:	f8d8 3000 	ldr.w	r3, [r8]
 80075f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80075f8:	3307      	adds	r3, #7
 80075fa:	f023 0307 	bic.w	r3, r3, #7
 80075fe:	f103 0208 	add.w	r2, r3, #8
 8007602:	f8c8 2000 	str.w	r2, [r8]
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800760e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007612:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007616:	9307      	str	r3, [sp, #28]
 8007618:	f8cd 8018 	str.w	r8, [sp, #24]
 800761c:	ee08 0a10 	vmov	s16, r0
 8007620:	4b9f      	ldr	r3, [pc, #636]	; (80078a0 <_printf_float+0x2dc>)
 8007622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007626:	f04f 32ff 	mov.w	r2, #4294967295
 800762a:	f7f9 faa7 	bl	8000b7c <__aeabi_dcmpun>
 800762e:	bb88      	cbnz	r0, 8007694 <_printf_float+0xd0>
 8007630:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007634:	4b9a      	ldr	r3, [pc, #616]	; (80078a0 <_printf_float+0x2dc>)
 8007636:	f04f 32ff 	mov.w	r2, #4294967295
 800763a:	f7f9 fa81 	bl	8000b40 <__aeabi_dcmple>
 800763e:	bb48      	cbnz	r0, 8007694 <_printf_float+0xd0>
 8007640:	2200      	movs	r2, #0
 8007642:	2300      	movs	r3, #0
 8007644:	4640      	mov	r0, r8
 8007646:	4649      	mov	r1, r9
 8007648:	f7f9 fa70 	bl	8000b2c <__aeabi_dcmplt>
 800764c:	b110      	cbz	r0, 8007654 <_printf_float+0x90>
 800764e:	232d      	movs	r3, #45	; 0x2d
 8007650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007654:	4b93      	ldr	r3, [pc, #588]	; (80078a4 <_printf_float+0x2e0>)
 8007656:	4894      	ldr	r0, [pc, #592]	; (80078a8 <_printf_float+0x2e4>)
 8007658:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800765c:	bf94      	ite	ls
 800765e:	4698      	movls	r8, r3
 8007660:	4680      	movhi	r8, r0
 8007662:	2303      	movs	r3, #3
 8007664:	6123      	str	r3, [r4, #16]
 8007666:	9b05      	ldr	r3, [sp, #20]
 8007668:	f023 0204 	bic.w	r2, r3, #4
 800766c:	6022      	str	r2, [r4, #0]
 800766e:	f04f 0900 	mov.w	r9, #0
 8007672:	9700      	str	r7, [sp, #0]
 8007674:	4633      	mov	r3, r6
 8007676:	aa0b      	add	r2, sp, #44	; 0x2c
 8007678:	4621      	mov	r1, r4
 800767a:	4628      	mov	r0, r5
 800767c:	f000 f9d8 	bl	8007a30 <_printf_common>
 8007680:	3001      	adds	r0, #1
 8007682:	f040 8090 	bne.w	80077a6 <_printf_float+0x1e2>
 8007686:	f04f 30ff 	mov.w	r0, #4294967295
 800768a:	b00d      	add	sp, #52	; 0x34
 800768c:	ecbd 8b02 	vpop	{d8}
 8007690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007694:	4642      	mov	r2, r8
 8007696:	464b      	mov	r3, r9
 8007698:	4640      	mov	r0, r8
 800769a:	4649      	mov	r1, r9
 800769c:	f7f9 fa6e 	bl	8000b7c <__aeabi_dcmpun>
 80076a0:	b140      	cbz	r0, 80076b4 <_printf_float+0xf0>
 80076a2:	464b      	mov	r3, r9
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bfbc      	itt	lt
 80076a8:	232d      	movlt	r3, #45	; 0x2d
 80076aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076ae:	487f      	ldr	r0, [pc, #508]	; (80078ac <_printf_float+0x2e8>)
 80076b0:	4b7f      	ldr	r3, [pc, #508]	; (80078b0 <_printf_float+0x2ec>)
 80076b2:	e7d1      	b.n	8007658 <_printf_float+0x94>
 80076b4:	6863      	ldr	r3, [r4, #4]
 80076b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076ba:	9206      	str	r2, [sp, #24]
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	d13f      	bne.n	8007740 <_printf_float+0x17c>
 80076c0:	2306      	movs	r3, #6
 80076c2:	6063      	str	r3, [r4, #4]
 80076c4:	9b05      	ldr	r3, [sp, #20]
 80076c6:	6861      	ldr	r1, [r4, #4]
 80076c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076cc:	2300      	movs	r3, #0
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	ab0a      	add	r3, sp, #40	; 0x28
 80076d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076d6:	ab09      	add	r3, sp, #36	; 0x24
 80076d8:	ec49 8b10 	vmov	d0, r8, r9
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076e4:	4628      	mov	r0, r5
 80076e6:	f7ff fecd 	bl	8007484 <__cvt>
 80076ea:	9b06      	ldr	r3, [sp, #24]
 80076ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076ee:	2b47      	cmp	r3, #71	; 0x47
 80076f0:	4680      	mov	r8, r0
 80076f2:	d108      	bne.n	8007706 <_printf_float+0x142>
 80076f4:	1cc8      	adds	r0, r1, #3
 80076f6:	db02      	blt.n	80076fe <_printf_float+0x13a>
 80076f8:	6863      	ldr	r3, [r4, #4]
 80076fa:	4299      	cmp	r1, r3
 80076fc:	dd41      	ble.n	8007782 <_printf_float+0x1be>
 80076fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8007702:	fa5f fb8b 	uxtb.w	fp, fp
 8007706:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800770a:	d820      	bhi.n	800774e <_printf_float+0x18a>
 800770c:	3901      	subs	r1, #1
 800770e:	465a      	mov	r2, fp
 8007710:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007714:	9109      	str	r1, [sp, #36]	; 0x24
 8007716:	f7ff ff17 	bl	8007548 <__exponent>
 800771a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800771c:	1813      	adds	r3, r2, r0
 800771e:	2a01      	cmp	r2, #1
 8007720:	4681      	mov	r9, r0
 8007722:	6123      	str	r3, [r4, #16]
 8007724:	dc02      	bgt.n	800772c <_printf_float+0x168>
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	07d2      	lsls	r2, r2, #31
 800772a:	d501      	bpl.n	8007730 <_printf_float+0x16c>
 800772c:	3301      	adds	r3, #1
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007734:	2b00      	cmp	r3, #0
 8007736:	d09c      	beq.n	8007672 <_printf_float+0xae>
 8007738:	232d      	movs	r3, #45	; 0x2d
 800773a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800773e:	e798      	b.n	8007672 <_printf_float+0xae>
 8007740:	9a06      	ldr	r2, [sp, #24]
 8007742:	2a47      	cmp	r2, #71	; 0x47
 8007744:	d1be      	bne.n	80076c4 <_printf_float+0x100>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1bc      	bne.n	80076c4 <_printf_float+0x100>
 800774a:	2301      	movs	r3, #1
 800774c:	e7b9      	b.n	80076c2 <_printf_float+0xfe>
 800774e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007752:	d118      	bne.n	8007786 <_printf_float+0x1c2>
 8007754:	2900      	cmp	r1, #0
 8007756:	6863      	ldr	r3, [r4, #4]
 8007758:	dd0b      	ble.n	8007772 <_printf_float+0x1ae>
 800775a:	6121      	str	r1, [r4, #16]
 800775c:	b913      	cbnz	r3, 8007764 <_printf_float+0x1a0>
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	07d0      	lsls	r0, r2, #31
 8007762:	d502      	bpl.n	800776a <_printf_float+0x1a6>
 8007764:	3301      	adds	r3, #1
 8007766:	440b      	add	r3, r1
 8007768:	6123      	str	r3, [r4, #16]
 800776a:	65a1      	str	r1, [r4, #88]	; 0x58
 800776c:	f04f 0900 	mov.w	r9, #0
 8007770:	e7de      	b.n	8007730 <_printf_float+0x16c>
 8007772:	b913      	cbnz	r3, 800777a <_printf_float+0x1b6>
 8007774:	6822      	ldr	r2, [r4, #0]
 8007776:	07d2      	lsls	r2, r2, #31
 8007778:	d501      	bpl.n	800777e <_printf_float+0x1ba>
 800777a:	3302      	adds	r3, #2
 800777c:	e7f4      	b.n	8007768 <_printf_float+0x1a4>
 800777e:	2301      	movs	r3, #1
 8007780:	e7f2      	b.n	8007768 <_printf_float+0x1a4>
 8007782:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007788:	4299      	cmp	r1, r3
 800778a:	db05      	blt.n	8007798 <_printf_float+0x1d4>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	6121      	str	r1, [r4, #16]
 8007790:	07d8      	lsls	r0, r3, #31
 8007792:	d5ea      	bpl.n	800776a <_printf_float+0x1a6>
 8007794:	1c4b      	adds	r3, r1, #1
 8007796:	e7e7      	b.n	8007768 <_printf_float+0x1a4>
 8007798:	2900      	cmp	r1, #0
 800779a:	bfd4      	ite	le
 800779c:	f1c1 0202 	rsble	r2, r1, #2
 80077a0:	2201      	movgt	r2, #1
 80077a2:	4413      	add	r3, r2
 80077a4:	e7e0      	b.n	8007768 <_printf_float+0x1a4>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	055a      	lsls	r2, r3, #21
 80077aa:	d407      	bmi.n	80077bc <_printf_float+0x1f8>
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	4642      	mov	r2, r8
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	d12c      	bne.n	8007814 <_printf_float+0x250>
 80077ba:	e764      	b.n	8007686 <_printf_float+0xc2>
 80077bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077c0:	f240 80e0 	bls.w	8007984 <_printf_float+0x3c0>
 80077c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077c8:	2200      	movs	r2, #0
 80077ca:	2300      	movs	r3, #0
 80077cc:	f7f9 f9a4 	bl	8000b18 <__aeabi_dcmpeq>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d034      	beq.n	800783e <_printf_float+0x27a>
 80077d4:	4a37      	ldr	r2, [pc, #220]	; (80078b4 <_printf_float+0x2f0>)
 80077d6:	2301      	movs	r3, #1
 80077d8:	4631      	mov	r1, r6
 80077da:	4628      	mov	r0, r5
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	f43f af51 	beq.w	8007686 <_printf_float+0xc2>
 80077e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077e8:	429a      	cmp	r2, r3
 80077ea:	db02      	blt.n	80077f2 <_printf_float+0x22e>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	07d8      	lsls	r0, r3, #31
 80077f0:	d510      	bpl.n	8007814 <_printf_float+0x250>
 80077f2:	ee18 3a10 	vmov	r3, s16
 80077f6:	4652      	mov	r2, sl
 80077f8:	4631      	mov	r1, r6
 80077fa:	4628      	mov	r0, r5
 80077fc:	47b8      	blx	r7
 80077fe:	3001      	adds	r0, #1
 8007800:	f43f af41 	beq.w	8007686 <_printf_float+0xc2>
 8007804:	f04f 0800 	mov.w	r8, #0
 8007808:	f104 091a 	add.w	r9, r4, #26
 800780c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800780e:	3b01      	subs	r3, #1
 8007810:	4543      	cmp	r3, r8
 8007812:	dc09      	bgt.n	8007828 <_printf_float+0x264>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	079b      	lsls	r3, r3, #30
 8007818:	f100 8105 	bmi.w	8007a26 <_printf_float+0x462>
 800781c:	68e0      	ldr	r0, [r4, #12]
 800781e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007820:	4298      	cmp	r0, r3
 8007822:	bfb8      	it	lt
 8007824:	4618      	movlt	r0, r3
 8007826:	e730      	b.n	800768a <_printf_float+0xc6>
 8007828:	2301      	movs	r3, #1
 800782a:	464a      	mov	r2, r9
 800782c:	4631      	mov	r1, r6
 800782e:	4628      	mov	r0, r5
 8007830:	47b8      	blx	r7
 8007832:	3001      	adds	r0, #1
 8007834:	f43f af27 	beq.w	8007686 <_printf_float+0xc2>
 8007838:	f108 0801 	add.w	r8, r8, #1
 800783c:	e7e6      	b.n	800780c <_printf_float+0x248>
 800783e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007840:	2b00      	cmp	r3, #0
 8007842:	dc39      	bgt.n	80078b8 <_printf_float+0x2f4>
 8007844:	4a1b      	ldr	r2, [pc, #108]	; (80078b4 <_printf_float+0x2f0>)
 8007846:	2301      	movs	r3, #1
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	f43f af19 	beq.w	8007686 <_printf_float+0xc2>
 8007854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007858:	4313      	orrs	r3, r2
 800785a:	d102      	bne.n	8007862 <_printf_float+0x29e>
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	07d9      	lsls	r1, r3, #31
 8007860:	d5d8      	bpl.n	8007814 <_printf_float+0x250>
 8007862:	ee18 3a10 	vmov	r3, s16
 8007866:	4652      	mov	r2, sl
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	f43f af09 	beq.w	8007686 <_printf_float+0xc2>
 8007874:	f04f 0900 	mov.w	r9, #0
 8007878:	f104 0a1a 	add.w	sl, r4, #26
 800787c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787e:	425b      	negs	r3, r3
 8007880:	454b      	cmp	r3, r9
 8007882:	dc01      	bgt.n	8007888 <_printf_float+0x2c4>
 8007884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007886:	e792      	b.n	80077ae <_printf_float+0x1ea>
 8007888:	2301      	movs	r3, #1
 800788a:	4652      	mov	r2, sl
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	f43f aef7 	beq.w	8007686 <_printf_float+0xc2>
 8007898:	f109 0901 	add.w	r9, r9, #1
 800789c:	e7ee      	b.n	800787c <_printf_float+0x2b8>
 800789e:	bf00      	nop
 80078a0:	7fefffff 	.word	0x7fefffff
 80078a4:	0800a104 	.word	0x0800a104
 80078a8:	0800a108 	.word	0x0800a108
 80078ac:	0800a110 	.word	0x0800a110
 80078b0:	0800a10c 	.word	0x0800a10c
 80078b4:	0800a114 	.word	0x0800a114
 80078b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078bc:	429a      	cmp	r2, r3
 80078be:	bfa8      	it	ge
 80078c0:	461a      	movge	r2, r3
 80078c2:	2a00      	cmp	r2, #0
 80078c4:	4691      	mov	r9, r2
 80078c6:	dc37      	bgt.n	8007938 <_printf_float+0x374>
 80078c8:	f04f 0b00 	mov.w	fp, #0
 80078cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078d0:	f104 021a 	add.w	r2, r4, #26
 80078d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078d6:	9305      	str	r3, [sp, #20]
 80078d8:	eba3 0309 	sub.w	r3, r3, r9
 80078dc:	455b      	cmp	r3, fp
 80078de:	dc33      	bgt.n	8007948 <_printf_float+0x384>
 80078e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078e4:	429a      	cmp	r2, r3
 80078e6:	db3b      	blt.n	8007960 <_printf_float+0x39c>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	07da      	lsls	r2, r3, #31
 80078ec:	d438      	bmi.n	8007960 <_printf_float+0x39c>
 80078ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f0:	9a05      	ldr	r2, [sp, #20]
 80078f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078f4:	1a9a      	subs	r2, r3, r2
 80078f6:	eba3 0901 	sub.w	r9, r3, r1
 80078fa:	4591      	cmp	r9, r2
 80078fc:	bfa8      	it	ge
 80078fe:	4691      	movge	r9, r2
 8007900:	f1b9 0f00 	cmp.w	r9, #0
 8007904:	dc35      	bgt.n	8007972 <_printf_float+0x3ae>
 8007906:	f04f 0800 	mov.w	r8, #0
 800790a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800790e:	f104 0a1a 	add.w	sl, r4, #26
 8007912:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007916:	1a9b      	subs	r3, r3, r2
 8007918:	eba3 0309 	sub.w	r3, r3, r9
 800791c:	4543      	cmp	r3, r8
 800791e:	f77f af79 	ble.w	8007814 <_printf_float+0x250>
 8007922:	2301      	movs	r3, #1
 8007924:	4652      	mov	r2, sl
 8007926:	4631      	mov	r1, r6
 8007928:	4628      	mov	r0, r5
 800792a:	47b8      	blx	r7
 800792c:	3001      	adds	r0, #1
 800792e:	f43f aeaa 	beq.w	8007686 <_printf_float+0xc2>
 8007932:	f108 0801 	add.w	r8, r8, #1
 8007936:	e7ec      	b.n	8007912 <_printf_float+0x34e>
 8007938:	4613      	mov	r3, r2
 800793a:	4631      	mov	r1, r6
 800793c:	4642      	mov	r2, r8
 800793e:	4628      	mov	r0, r5
 8007940:	47b8      	blx	r7
 8007942:	3001      	adds	r0, #1
 8007944:	d1c0      	bne.n	80078c8 <_printf_float+0x304>
 8007946:	e69e      	b.n	8007686 <_printf_float+0xc2>
 8007948:	2301      	movs	r3, #1
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	9205      	str	r2, [sp, #20]
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f ae97 	beq.w	8007686 <_printf_float+0xc2>
 8007958:	9a05      	ldr	r2, [sp, #20]
 800795a:	f10b 0b01 	add.w	fp, fp, #1
 800795e:	e7b9      	b.n	80078d4 <_printf_float+0x310>
 8007960:	ee18 3a10 	vmov	r3, s16
 8007964:	4652      	mov	r2, sl
 8007966:	4631      	mov	r1, r6
 8007968:	4628      	mov	r0, r5
 800796a:	47b8      	blx	r7
 800796c:	3001      	adds	r0, #1
 800796e:	d1be      	bne.n	80078ee <_printf_float+0x32a>
 8007970:	e689      	b.n	8007686 <_printf_float+0xc2>
 8007972:	9a05      	ldr	r2, [sp, #20]
 8007974:	464b      	mov	r3, r9
 8007976:	4442      	add	r2, r8
 8007978:	4631      	mov	r1, r6
 800797a:	4628      	mov	r0, r5
 800797c:	47b8      	blx	r7
 800797e:	3001      	adds	r0, #1
 8007980:	d1c1      	bne.n	8007906 <_printf_float+0x342>
 8007982:	e680      	b.n	8007686 <_printf_float+0xc2>
 8007984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007986:	2a01      	cmp	r2, #1
 8007988:	dc01      	bgt.n	800798e <_printf_float+0x3ca>
 800798a:	07db      	lsls	r3, r3, #31
 800798c:	d538      	bpl.n	8007a00 <_printf_float+0x43c>
 800798e:	2301      	movs	r3, #1
 8007990:	4642      	mov	r2, r8
 8007992:	4631      	mov	r1, r6
 8007994:	4628      	mov	r0, r5
 8007996:	47b8      	blx	r7
 8007998:	3001      	adds	r0, #1
 800799a:	f43f ae74 	beq.w	8007686 <_printf_float+0xc2>
 800799e:	ee18 3a10 	vmov	r3, s16
 80079a2:	4652      	mov	r2, sl
 80079a4:	4631      	mov	r1, r6
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b8      	blx	r7
 80079aa:	3001      	adds	r0, #1
 80079ac:	f43f ae6b 	beq.w	8007686 <_printf_float+0xc2>
 80079b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079b4:	2200      	movs	r2, #0
 80079b6:	2300      	movs	r3, #0
 80079b8:	f7f9 f8ae 	bl	8000b18 <__aeabi_dcmpeq>
 80079bc:	b9d8      	cbnz	r0, 80079f6 <_printf_float+0x432>
 80079be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c0:	f108 0201 	add.w	r2, r8, #1
 80079c4:	3b01      	subs	r3, #1
 80079c6:	4631      	mov	r1, r6
 80079c8:	4628      	mov	r0, r5
 80079ca:	47b8      	blx	r7
 80079cc:	3001      	adds	r0, #1
 80079ce:	d10e      	bne.n	80079ee <_printf_float+0x42a>
 80079d0:	e659      	b.n	8007686 <_printf_float+0xc2>
 80079d2:	2301      	movs	r3, #1
 80079d4:	4652      	mov	r2, sl
 80079d6:	4631      	mov	r1, r6
 80079d8:	4628      	mov	r0, r5
 80079da:	47b8      	blx	r7
 80079dc:	3001      	adds	r0, #1
 80079de:	f43f ae52 	beq.w	8007686 <_printf_float+0xc2>
 80079e2:	f108 0801 	add.w	r8, r8, #1
 80079e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e8:	3b01      	subs	r3, #1
 80079ea:	4543      	cmp	r3, r8
 80079ec:	dcf1      	bgt.n	80079d2 <_printf_float+0x40e>
 80079ee:	464b      	mov	r3, r9
 80079f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80079f4:	e6dc      	b.n	80077b0 <_printf_float+0x1ec>
 80079f6:	f04f 0800 	mov.w	r8, #0
 80079fa:	f104 0a1a 	add.w	sl, r4, #26
 80079fe:	e7f2      	b.n	80079e6 <_printf_float+0x422>
 8007a00:	2301      	movs	r3, #1
 8007a02:	4642      	mov	r2, r8
 8007a04:	e7df      	b.n	80079c6 <_printf_float+0x402>
 8007a06:	2301      	movs	r3, #1
 8007a08:	464a      	mov	r2, r9
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	47b8      	blx	r7
 8007a10:	3001      	adds	r0, #1
 8007a12:	f43f ae38 	beq.w	8007686 <_printf_float+0xc2>
 8007a16:	f108 0801 	add.w	r8, r8, #1
 8007a1a:	68e3      	ldr	r3, [r4, #12]
 8007a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a1e:	1a5b      	subs	r3, r3, r1
 8007a20:	4543      	cmp	r3, r8
 8007a22:	dcf0      	bgt.n	8007a06 <_printf_float+0x442>
 8007a24:	e6fa      	b.n	800781c <_printf_float+0x258>
 8007a26:	f04f 0800 	mov.w	r8, #0
 8007a2a:	f104 0919 	add.w	r9, r4, #25
 8007a2e:	e7f4      	b.n	8007a1a <_printf_float+0x456>

08007a30 <_printf_common>:
 8007a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a34:	4616      	mov	r6, r2
 8007a36:	4699      	mov	r9, r3
 8007a38:	688a      	ldr	r2, [r1, #8]
 8007a3a:	690b      	ldr	r3, [r1, #16]
 8007a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a40:	4293      	cmp	r3, r2
 8007a42:	bfb8      	it	lt
 8007a44:	4613      	movlt	r3, r2
 8007a46:	6033      	str	r3, [r6, #0]
 8007a48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	b10a      	cbz	r2, 8007a56 <_printf_common+0x26>
 8007a52:	3301      	adds	r3, #1
 8007a54:	6033      	str	r3, [r6, #0]
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	0699      	lsls	r1, r3, #26
 8007a5a:	bf42      	ittt	mi
 8007a5c:	6833      	ldrmi	r3, [r6, #0]
 8007a5e:	3302      	addmi	r3, #2
 8007a60:	6033      	strmi	r3, [r6, #0]
 8007a62:	6825      	ldr	r5, [r4, #0]
 8007a64:	f015 0506 	ands.w	r5, r5, #6
 8007a68:	d106      	bne.n	8007a78 <_printf_common+0x48>
 8007a6a:	f104 0a19 	add.w	sl, r4, #25
 8007a6e:	68e3      	ldr	r3, [r4, #12]
 8007a70:	6832      	ldr	r2, [r6, #0]
 8007a72:	1a9b      	subs	r3, r3, r2
 8007a74:	42ab      	cmp	r3, r5
 8007a76:	dc26      	bgt.n	8007ac6 <_printf_common+0x96>
 8007a78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a7c:	1e13      	subs	r3, r2, #0
 8007a7e:	6822      	ldr	r2, [r4, #0]
 8007a80:	bf18      	it	ne
 8007a82:	2301      	movne	r3, #1
 8007a84:	0692      	lsls	r2, r2, #26
 8007a86:	d42b      	bmi.n	8007ae0 <_printf_common+0xb0>
 8007a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	4638      	mov	r0, r7
 8007a90:	47c0      	blx	r8
 8007a92:	3001      	adds	r0, #1
 8007a94:	d01e      	beq.n	8007ad4 <_printf_common+0xa4>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	68e5      	ldr	r5, [r4, #12]
 8007a9a:	6832      	ldr	r2, [r6, #0]
 8007a9c:	f003 0306 	and.w	r3, r3, #6
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	bf08      	it	eq
 8007aa4:	1aad      	subeq	r5, r5, r2
 8007aa6:	68a3      	ldr	r3, [r4, #8]
 8007aa8:	6922      	ldr	r2, [r4, #16]
 8007aaa:	bf0c      	ite	eq
 8007aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ab0:	2500      	movne	r5, #0
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	bfc4      	itt	gt
 8007ab6:	1a9b      	subgt	r3, r3, r2
 8007ab8:	18ed      	addgt	r5, r5, r3
 8007aba:	2600      	movs	r6, #0
 8007abc:	341a      	adds	r4, #26
 8007abe:	42b5      	cmp	r5, r6
 8007ac0:	d11a      	bne.n	8007af8 <_printf_common+0xc8>
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	e008      	b.n	8007ad8 <_printf_common+0xa8>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4652      	mov	r2, sl
 8007aca:	4649      	mov	r1, r9
 8007acc:	4638      	mov	r0, r7
 8007ace:	47c0      	blx	r8
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d103      	bne.n	8007adc <_printf_common+0xac>
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007adc:	3501      	adds	r5, #1
 8007ade:	e7c6      	b.n	8007a6e <_printf_common+0x3e>
 8007ae0:	18e1      	adds	r1, r4, r3
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	2030      	movs	r0, #48	; 0x30
 8007ae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007aea:	4422      	add	r2, r4
 8007aec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007af4:	3302      	adds	r3, #2
 8007af6:	e7c7      	b.n	8007a88 <_printf_common+0x58>
 8007af8:	2301      	movs	r3, #1
 8007afa:	4622      	mov	r2, r4
 8007afc:	4649      	mov	r1, r9
 8007afe:	4638      	mov	r0, r7
 8007b00:	47c0      	blx	r8
 8007b02:	3001      	adds	r0, #1
 8007b04:	d0e6      	beq.n	8007ad4 <_printf_common+0xa4>
 8007b06:	3601      	adds	r6, #1
 8007b08:	e7d9      	b.n	8007abe <_printf_common+0x8e>
	...

08007b0c <_printf_i>:
 8007b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b10:	7e0f      	ldrb	r7, [r1, #24]
 8007b12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b14:	2f78      	cmp	r7, #120	; 0x78
 8007b16:	4691      	mov	r9, r2
 8007b18:	4680      	mov	r8, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	469a      	mov	sl, r3
 8007b1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b22:	d807      	bhi.n	8007b34 <_printf_i+0x28>
 8007b24:	2f62      	cmp	r7, #98	; 0x62
 8007b26:	d80a      	bhi.n	8007b3e <_printf_i+0x32>
 8007b28:	2f00      	cmp	r7, #0
 8007b2a:	f000 80d8 	beq.w	8007cde <_printf_i+0x1d2>
 8007b2e:	2f58      	cmp	r7, #88	; 0x58
 8007b30:	f000 80a3 	beq.w	8007c7a <_printf_i+0x16e>
 8007b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b3c:	e03a      	b.n	8007bb4 <_printf_i+0xa8>
 8007b3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b42:	2b15      	cmp	r3, #21
 8007b44:	d8f6      	bhi.n	8007b34 <_printf_i+0x28>
 8007b46:	a101      	add	r1, pc, #4	; (adr r1, 8007b4c <_printf_i+0x40>)
 8007b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b4c:	08007ba5 	.word	0x08007ba5
 8007b50:	08007bb9 	.word	0x08007bb9
 8007b54:	08007b35 	.word	0x08007b35
 8007b58:	08007b35 	.word	0x08007b35
 8007b5c:	08007b35 	.word	0x08007b35
 8007b60:	08007b35 	.word	0x08007b35
 8007b64:	08007bb9 	.word	0x08007bb9
 8007b68:	08007b35 	.word	0x08007b35
 8007b6c:	08007b35 	.word	0x08007b35
 8007b70:	08007b35 	.word	0x08007b35
 8007b74:	08007b35 	.word	0x08007b35
 8007b78:	08007cc5 	.word	0x08007cc5
 8007b7c:	08007be9 	.word	0x08007be9
 8007b80:	08007ca7 	.word	0x08007ca7
 8007b84:	08007b35 	.word	0x08007b35
 8007b88:	08007b35 	.word	0x08007b35
 8007b8c:	08007ce7 	.word	0x08007ce7
 8007b90:	08007b35 	.word	0x08007b35
 8007b94:	08007be9 	.word	0x08007be9
 8007b98:	08007b35 	.word	0x08007b35
 8007b9c:	08007b35 	.word	0x08007b35
 8007ba0:	08007caf 	.word	0x08007caf
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	1d1a      	adds	r2, r3, #4
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	602a      	str	r2, [r5, #0]
 8007bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e0a3      	b.n	8007d00 <_printf_i+0x1f4>
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	6829      	ldr	r1, [r5, #0]
 8007bbc:	0606      	lsls	r6, r0, #24
 8007bbe:	f101 0304 	add.w	r3, r1, #4
 8007bc2:	d50a      	bpl.n	8007bda <_printf_i+0xce>
 8007bc4:	680e      	ldr	r6, [r1, #0]
 8007bc6:	602b      	str	r3, [r5, #0]
 8007bc8:	2e00      	cmp	r6, #0
 8007bca:	da03      	bge.n	8007bd4 <_printf_i+0xc8>
 8007bcc:	232d      	movs	r3, #45	; 0x2d
 8007bce:	4276      	negs	r6, r6
 8007bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bd4:	485e      	ldr	r0, [pc, #376]	; (8007d50 <_printf_i+0x244>)
 8007bd6:	230a      	movs	r3, #10
 8007bd8:	e019      	b.n	8007c0e <_printf_i+0x102>
 8007bda:	680e      	ldr	r6, [r1, #0]
 8007bdc:	602b      	str	r3, [r5, #0]
 8007bde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007be2:	bf18      	it	ne
 8007be4:	b236      	sxthne	r6, r6
 8007be6:	e7ef      	b.n	8007bc8 <_printf_i+0xbc>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	6820      	ldr	r0, [r4, #0]
 8007bec:	1d19      	adds	r1, r3, #4
 8007bee:	6029      	str	r1, [r5, #0]
 8007bf0:	0601      	lsls	r1, r0, #24
 8007bf2:	d501      	bpl.n	8007bf8 <_printf_i+0xec>
 8007bf4:	681e      	ldr	r6, [r3, #0]
 8007bf6:	e002      	b.n	8007bfe <_printf_i+0xf2>
 8007bf8:	0646      	lsls	r6, r0, #25
 8007bfa:	d5fb      	bpl.n	8007bf4 <_printf_i+0xe8>
 8007bfc:	881e      	ldrh	r6, [r3, #0]
 8007bfe:	4854      	ldr	r0, [pc, #336]	; (8007d50 <_printf_i+0x244>)
 8007c00:	2f6f      	cmp	r7, #111	; 0x6f
 8007c02:	bf0c      	ite	eq
 8007c04:	2308      	moveq	r3, #8
 8007c06:	230a      	movne	r3, #10
 8007c08:	2100      	movs	r1, #0
 8007c0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c0e:	6865      	ldr	r5, [r4, #4]
 8007c10:	60a5      	str	r5, [r4, #8]
 8007c12:	2d00      	cmp	r5, #0
 8007c14:	bfa2      	ittt	ge
 8007c16:	6821      	ldrge	r1, [r4, #0]
 8007c18:	f021 0104 	bicge.w	r1, r1, #4
 8007c1c:	6021      	strge	r1, [r4, #0]
 8007c1e:	b90e      	cbnz	r6, 8007c24 <_printf_i+0x118>
 8007c20:	2d00      	cmp	r5, #0
 8007c22:	d04d      	beq.n	8007cc0 <_printf_i+0x1b4>
 8007c24:	4615      	mov	r5, r2
 8007c26:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c2a:	fb03 6711 	mls	r7, r3, r1, r6
 8007c2e:	5dc7      	ldrb	r7, [r0, r7]
 8007c30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c34:	4637      	mov	r7, r6
 8007c36:	42bb      	cmp	r3, r7
 8007c38:	460e      	mov	r6, r1
 8007c3a:	d9f4      	bls.n	8007c26 <_printf_i+0x11a>
 8007c3c:	2b08      	cmp	r3, #8
 8007c3e:	d10b      	bne.n	8007c58 <_printf_i+0x14c>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	07de      	lsls	r6, r3, #31
 8007c44:	d508      	bpl.n	8007c58 <_printf_i+0x14c>
 8007c46:	6923      	ldr	r3, [r4, #16]
 8007c48:	6861      	ldr	r1, [r4, #4]
 8007c4a:	4299      	cmp	r1, r3
 8007c4c:	bfde      	ittt	le
 8007c4e:	2330      	movle	r3, #48	; 0x30
 8007c50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c58:	1b52      	subs	r2, r2, r5
 8007c5a:	6122      	str	r2, [r4, #16]
 8007c5c:	f8cd a000 	str.w	sl, [sp]
 8007c60:	464b      	mov	r3, r9
 8007c62:	aa03      	add	r2, sp, #12
 8007c64:	4621      	mov	r1, r4
 8007c66:	4640      	mov	r0, r8
 8007c68:	f7ff fee2 	bl	8007a30 <_printf_common>
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d14c      	bne.n	8007d0a <_printf_i+0x1fe>
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295
 8007c74:	b004      	add	sp, #16
 8007c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7a:	4835      	ldr	r0, [pc, #212]	; (8007d50 <_printf_i+0x244>)
 8007c7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c80:	6829      	ldr	r1, [r5, #0]
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c88:	6029      	str	r1, [r5, #0]
 8007c8a:	061d      	lsls	r5, r3, #24
 8007c8c:	d514      	bpl.n	8007cb8 <_printf_i+0x1ac>
 8007c8e:	07df      	lsls	r7, r3, #31
 8007c90:	bf44      	itt	mi
 8007c92:	f043 0320 	orrmi.w	r3, r3, #32
 8007c96:	6023      	strmi	r3, [r4, #0]
 8007c98:	b91e      	cbnz	r6, 8007ca2 <_printf_i+0x196>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	f023 0320 	bic.w	r3, r3, #32
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	2310      	movs	r3, #16
 8007ca4:	e7b0      	b.n	8007c08 <_printf_i+0xfc>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	f043 0320 	orr.w	r3, r3, #32
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	2378      	movs	r3, #120	; 0x78
 8007cb0:	4828      	ldr	r0, [pc, #160]	; (8007d54 <_printf_i+0x248>)
 8007cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cb6:	e7e3      	b.n	8007c80 <_printf_i+0x174>
 8007cb8:	0659      	lsls	r1, r3, #25
 8007cba:	bf48      	it	mi
 8007cbc:	b2b6      	uxthmi	r6, r6
 8007cbe:	e7e6      	b.n	8007c8e <_printf_i+0x182>
 8007cc0:	4615      	mov	r5, r2
 8007cc2:	e7bb      	b.n	8007c3c <_printf_i+0x130>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	6826      	ldr	r6, [r4, #0]
 8007cc8:	6961      	ldr	r1, [r4, #20]
 8007cca:	1d18      	adds	r0, r3, #4
 8007ccc:	6028      	str	r0, [r5, #0]
 8007cce:	0635      	lsls	r5, r6, #24
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	d501      	bpl.n	8007cd8 <_printf_i+0x1cc>
 8007cd4:	6019      	str	r1, [r3, #0]
 8007cd6:	e002      	b.n	8007cde <_printf_i+0x1d2>
 8007cd8:	0670      	lsls	r0, r6, #25
 8007cda:	d5fb      	bpl.n	8007cd4 <_printf_i+0x1c8>
 8007cdc:	8019      	strh	r1, [r3, #0]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6123      	str	r3, [r4, #16]
 8007ce2:	4615      	mov	r5, r2
 8007ce4:	e7ba      	b.n	8007c5c <_printf_i+0x150>
 8007ce6:	682b      	ldr	r3, [r5, #0]
 8007ce8:	1d1a      	adds	r2, r3, #4
 8007cea:	602a      	str	r2, [r5, #0]
 8007cec:	681d      	ldr	r5, [r3, #0]
 8007cee:	6862      	ldr	r2, [r4, #4]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f7f8 fa9c 	bl	8000230 <memchr>
 8007cf8:	b108      	cbz	r0, 8007cfe <_printf_i+0x1f2>
 8007cfa:	1b40      	subs	r0, r0, r5
 8007cfc:	6060      	str	r0, [r4, #4]
 8007cfe:	6863      	ldr	r3, [r4, #4]
 8007d00:	6123      	str	r3, [r4, #16]
 8007d02:	2300      	movs	r3, #0
 8007d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d08:	e7a8      	b.n	8007c5c <_printf_i+0x150>
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	4649      	mov	r1, r9
 8007d10:	4640      	mov	r0, r8
 8007d12:	47d0      	blx	sl
 8007d14:	3001      	adds	r0, #1
 8007d16:	d0ab      	beq.n	8007c70 <_printf_i+0x164>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	079b      	lsls	r3, r3, #30
 8007d1c:	d413      	bmi.n	8007d46 <_printf_i+0x23a>
 8007d1e:	68e0      	ldr	r0, [r4, #12]
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	4298      	cmp	r0, r3
 8007d24:	bfb8      	it	lt
 8007d26:	4618      	movlt	r0, r3
 8007d28:	e7a4      	b.n	8007c74 <_printf_i+0x168>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4640      	mov	r0, r8
 8007d32:	47d0      	blx	sl
 8007d34:	3001      	adds	r0, #1
 8007d36:	d09b      	beq.n	8007c70 <_printf_i+0x164>
 8007d38:	3501      	adds	r5, #1
 8007d3a:	68e3      	ldr	r3, [r4, #12]
 8007d3c:	9903      	ldr	r1, [sp, #12]
 8007d3e:	1a5b      	subs	r3, r3, r1
 8007d40:	42ab      	cmp	r3, r5
 8007d42:	dcf2      	bgt.n	8007d2a <_printf_i+0x21e>
 8007d44:	e7eb      	b.n	8007d1e <_printf_i+0x212>
 8007d46:	2500      	movs	r5, #0
 8007d48:	f104 0619 	add.w	r6, r4, #25
 8007d4c:	e7f5      	b.n	8007d3a <_printf_i+0x22e>
 8007d4e:	bf00      	nop
 8007d50:	0800a116 	.word	0x0800a116
 8007d54:	0800a127 	.word	0x0800a127

08007d58 <_puts_r>:
 8007d58:	b570      	push	{r4, r5, r6, lr}
 8007d5a:	460e      	mov	r6, r1
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	b118      	cbz	r0, 8007d68 <_puts_r+0x10>
 8007d60:	6983      	ldr	r3, [r0, #24]
 8007d62:	b90b      	cbnz	r3, 8007d68 <_puts_r+0x10>
 8007d64:	f001 f8c4 	bl	8008ef0 <__sinit>
 8007d68:	69ab      	ldr	r3, [r5, #24]
 8007d6a:	68ac      	ldr	r4, [r5, #8]
 8007d6c:	b913      	cbnz	r3, 8007d74 <_puts_r+0x1c>
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f001 f8be 	bl	8008ef0 <__sinit>
 8007d74:	4b2c      	ldr	r3, [pc, #176]	; (8007e28 <_puts_r+0xd0>)
 8007d76:	429c      	cmp	r4, r3
 8007d78:	d120      	bne.n	8007dbc <_puts_r+0x64>
 8007d7a:	686c      	ldr	r4, [r5, #4]
 8007d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d7e:	07db      	lsls	r3, r3, #31
 8007d80:	d405      	bmi.n	8007d8e <_puts_r+0x36>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	0598      	lsls	r0, r3, #22
 8007d86:	d402      	bmi.n	8007d8e <_puts_r+0x36>
 8007d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d8a:	f001 f954 	bl	8009036 <__retarget_lock_acquire_recursive>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	0719      	lsls	r1, r3, #28
 8007d92:	d51d      	bpl.n	8007dd0 <_puts_r+0x78>
 8007d94:	6923      	ldr	r3, [r4, #16]
 8007d96:	b1db      	cbz	r3, 8007dd0 <_puts_r+0x78>
 8007d98:	3e01      	subs	r6, #1
 8007d9a:	68a3      	ldr	r3, [r4, #8]
 8007d9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007da0:	3b01      	subs	r3, #1
 8007da2:	60a3      	str	r3, [r4, #8]
 8007da4:	bb39      	cbnz	r1, 8007df6 <_puts_r+0x9e>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	da38      	bge.n	8007e1c <_puts_r+0xc4>
 8007daa:	4622      	mov	r2, r4
 8007dac:	210a      	movs	r1, #10
 8007dae:	4628      	mov	r0, r5
 8007db0:	f000 f848 	bl	8007e44 <__swbuf_r>
 8007db4:	3001      	adds	r0, #1
 8007db6:	d011      	beq.n	8007ddc <_puts_r+0x84>
 8007db8:	250a      	movs	r5, #10
 8007dba:	e011      	b.n	8007de0 <_puts_r+0x88>
 8007dbc:	4b1b      	ldr	r3, [pc, #108]	; (8007e2c <_puts_r+0xd4>)
 8007dbe:	429c      	cmp	r4, r3
 8007dc0:	d101      	bne.n	8007dc6 <_puts_r+0x6e>
 8007dc2:	68ac      	ldr	r4, [r5, #8]
 8007dc4:	e7da      	b.n	8007d7c <_puts_r+0x24>
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <_puts_r+0xd8>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	bf08      	it	eq
 8007dcc:	68ec      	ldreq	r4, [r5, #12]
 8007dce:	e7d5      	b.n	8007d7c <_puts_r+0x24>
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 f888 	bl	8007ee8 <__swsetup_r>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d0dd      	beq.n	8007d98 <_puts_r+0x40>
 8007ddc:	f04f 35ff 	mov.w	r5, #4294967295
 8007de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de2:	07da      	lsls	r2, r3, #31
 8007de4:	d405      	bmi.n	8007df2 <_puts_r+0x9a>
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	059b      	lsls	r3, r3, #22
 8007dea:	d402      	bmi.n	8007df2 <_puts_r+0x9a>
 8007dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dee:	f001 f923 	bl	8009038 <__retarget_lock_release_recursive>
 8007df2:	4628      	mov	r0, r5
 8007df4:	bd70      	pop	{r4, r5, r6, pc}
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	da04      	bge.n	8007e04 <_puts_r+0xac>
 8007dfa:	69a2      	ldr	r2, [r4, #24]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	dc06      	bgt.n	8007e0e <_puts_r+0xb6>
 8007e00:	290a      	cmp	r1, #10
 8007e02:	d004      	beq.n	8007e0e <_puts_r+0xb6>
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	6022      	str	r2, [r4, #0]
 8007e0a:	7019      	strb	r1, [r3, #0]
 8007e0c:	e7c5      	b.n	8007d9a <_puts_r+0x42>
 8007e0e:	4622      	mov	r2, r4
 8007e10:	4628      	mov	r0, r5
 8007e12:	f000 f817 	bl	8007e44 <__swbuf_r>
 8007e16:	3001      	adds	r0, #1
 8007e18:	d1bf      	bne.n	8007d9a <_puts_r+0x42>
 8007e1a:	e7df      	b.n	8007ddc <_puts_r+0x84>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	250a      	movs	r5, #10
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	6022      	str	r2, [r4, #0]
 8007e24:	701d      	strb	r5, [r3, #0]
 8007e26:	e7db      	b.n	8007de0 <_puts_r+0x88>
 8007e28:	0800a1e8 	.word	0x0800a1e8
 8007e2c:	0800a208 	.word	0x0800a208
 8007e30:	0800a1c8 	.word	0x0800a1c8

08007e34 <puts>:
 8007e34:	4b02      	ldr	r3, [pc, #8]	; (8007e40 <puts+0xc>)
 8007e36:	4601      	mov	r1, r0
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	f7ff bf8d 	b.w	8007d58 <_puts_r>
 8007e3e:	bf00      	nop
 8007e40:	20000014 	.word	0x20000014

08007e44 <__swbuf_r>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	460e      	mov	r6, r1
 8007e48:	4614      	mov	r4, r2
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	b118      	cbz	r0, 8007e56 <__swbuf_r+0x12>
 8007e4e:	6983      	ldr	r3, [r0, #24]
 8007e50:	b90b      	cbnz	r3, 8007e56 <__swbuf_r+0x12>
 8007e52:	f001 f84d 	bl	8008ef0 <__sinit>
 8007e56:	4b21      	ldr	r3, [pc, #132]	; (8007edc <__swbuf_r+0x98>)
 8007e58:	429c      	cmp	r4, r3
 8007e5a:	d12b      	bne.n	8007eb4 <__swbuf_r+0x70>
 8007e5c:	686c      	ldr	r4, [r5, #4]
 8007e5e:	69a3      	ldr	r3, [r4, #24]
 8007e60:	60a3      	str	r3, [r4, #8]
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	071a      	lsls	r2, r3, #28
 8007e66:	d52f      	bpl.n	8007ec8 <__swbuf_r+0x84>
 8007e68:	6923      	ldr	r3, [r4, #16]
 8007e6a:	b36b      	cbz	r3, 8007ec8 <__swbuf_r+0x84>
 8007e6c:	6923      	ldr	r3, [r4, #16]
 8007e6e:	6820      	ldr	r0, [r4, #0]
 8007e70:	1ac0      	subs	r0, r0, r3
 8007e72:	6963      	ldr	r3, [r4, #20]
 8007e74:	b2f6      	uxtb	r6, r6
 8007e76:	4283      	cmp	r3, r0
 8007e78:	4637      	mov	r7, r6
 8007e7a:	dc04      	bgt.n	8007e86 <__swbuf_r+0x42>
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 ffa2 	bl	8008dc8 <_fflush_r>
 8007e84:	bb30      	cbnz	r0, 8007ed4 <__swbuf_r+0x90>
 8007e86:	68a3      	ldr	r3, [r4, #8]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	60a3      	str	r3, [r4, #8]
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	6022      	str	r2, [r4, #0]
 8007e92:	701e      	strb	r6, [r3, #0]
 8007e94:	6963      	ldr	r3, [r4, #20]
 8007e96:	3001      	adds	r0, #1
 8007e98:	4283      	cmp	r3, r0
 8007e9a:	d004      	beq.n	8007ea6 <__swbuf_r+0x62>
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	07db      	lsls	r3, r3, #31
 8007ea0:	d506      	bpl.n	8007eb0 <__swbuf_r+0x6c>
 8007ea2:	2e0a      	cmp	r6, #10
 8007ea4:	d104      	bne.n	8007eb0 <__swbuf_r+0x6c>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f000 ff8d 	bl	8008dc8 <_fflush_r>
 8007eae:	b988      	cbnz	r0, 8007ed4 <__swbuf_r+0x90>
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb4:	4b0a      	ldr	r3, [pc, #40]	; (8007ee0 <__swbuf_r+0x9c>)
 8007eb6:	429c      	cmp	r4, r3
 8007eb8:	d101      	bne.n	8007ebe <__swbuf_r+0x7a>
 8007eba:	68ac      	ldr	r4, [r5, #8]
 8007ebc:	e7cf      	b.n	8007e5e <__swbuf_r+0x1a>
 8007ebe:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <__swbuf_r+0xa0>)
 8007ec0:	429c      	cmp	r4, r3
 8007ec2:	bf08      	it	eq
 8007ec4:	68ec      	ldreq	r4, [r5, #12]
 8007ec6:	e7ca      	b.n	8007e5e <__swbuf_r+0x1a>
 8007ec8:	4621      	mov	r1, r4
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f000 f80c 	bl	8007ee8 <__swsetup_r>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d0cb      	beq.n	8007e6c <__swbuf_r+0x28>
 8007ed4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ed8:	e7ea      	b.n	8007eb0 <__swbuf_r+0x6c>
 8007eda:	bf00      	nop
 8007edc:	0800a1e8 	.word	0x0800a1e8
 8007ee0:	0800a208 	.word	0x0800a208
 8007ee4:	0800a1c8 	.word	0x0800a1c8

08007ee8 <__swsetup_r>:
 8007ee8:	4b32      	ldr	r3, [pc, #200]	; (8007fb4 <__swsetup_r+0xcc>)
 8007eea:	b570      	push	{r4, r5, r6, lr}
 8007eec:	681d      	ldr	r5, [r3, #0]
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	b125      	cbz	r5, 8007efe <__swsetup_r+0x16>
 8007ef4:	69ab      	ldr	r3, [r5, #24]
 8007ef6:	b913      	cbnz	r3, 8007efe <__swsetup_r+0x16>
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f000 fff9 	bl	8008ef0 <__sinit>
 8007efe:	4b2e      	ldr	r3, [pc, #184]	; (8007fb8 <__swsetup_r+0xd0>)
 8007f00:	429c      	cmp	r4, r3
 8007f02:	d10f      	bne.n	8007f24 <__swsetup_r+0x3c>
 8007f04:	686c      	ldr	r4, [r5, #4]
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f0c:	0719      	lsls	r1, r3, #28
 8007f0e:	d42c      	bmi.n	8007f6a <__swsetup_r+0x82>
 8007f10:	06dd      	lsls	r5, r3, #27
 8007f12:	d411      	bmi.n	8007f38 <__swsetup_r+0x50>
 8007f14:	2309      	movs	r3, #9
 8007f16:	6033      	str	r3, [r6, #0]
 8007f18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f1c:	81a3      	strh	r3, [r4, #12]
 8007f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f22:	e03e      	b.n	8007fa2 <__swsetup_r+0xba>
 8007f24:	4b25      	ldr	r3, [pc, #148]	; (8007fbc <__swsetup_r+0xd4>)
 8007f26:	429c      	cmp	r4, r3
 8007f28:	d101      	bne.n	8007f2e <__swsetup_r+0x46>
 8007f2a:	68ac      	ldr	r4, [r5, #8]
 8007f2c:	e7eb      	b.n	8007f06 <__swsetup_r+0x1e>
 8007f2e:	4b24      	ldr	r3, [pc, #144]	; (8007fc0 <__swsetup_r+0xd8>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	bf08      	it	eq
 8007f34:	68ec      	ldreq	r4, [r5, #12]
 8007f36:	e7e6      	b.n	8007f06 <__swsetup_r+0x1e>
 8007f38:	0758      	lsls	r0, r3, #29
 8007f3a:	d512      	bpl.n	8007f62 <__swsetup_r+0x7a>
 8007f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f3e:	b141      	cbz	r1, 8007f52 <__swsetup_r+0x6a>
 8007f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f44:	4299      	cmp	r1, r3
 8007f46:	d002      	beq.n	8007f4e <__swsetup_r+0x66>
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f001 fc8b 	bl	8009864 <_free_r>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6363      	str	r3, [r4, #52]	; 0x34
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f58:	81a3      	strh	r3, [r4, #12]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	6063      	str	r3, [r4, #4]
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	f043 0308 	orr.w	r3, r3, #8
 8007f68:	81a3      	strh	r3, [r4, #12]
 8007f6a:	6923      	ldr	r3, [r4, #16]
 8007f6c:	b94b      	cbnz	r3, 8007f82 <__swsetup_r+0x9a>
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f78:	d003      	beq.n	8007f82 <__swsetup_r+0x9a>
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f001 f881 	bl	8009084 <__smakebuf_r>
 8007f82:	89a0      	ldrh	r0, [r4, #12]
 8007f84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f88:	f010 0301 	ands.w	r3, r0, #1
 8007f8c:	d00a      	beq.n	8007fa4 <__swsetup_r+0xbc>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60a3      	str	r3, [r4, #8]
 8007f92:	6963      	ldr	r3, [r4, #20]
 8007f94:	425b      	negs	r3, r3
 8007f96:	61a3      	str	r3, [r4, #24]
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	b943      	cbnz	r3, 8007fae <__swsetup_r+0xc6>
 8007f9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fa0:	d1ba      	bne.n	8007f18 <__swsetup_r+0x30>
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	0781      	lsls	r1, r0, #30
 8007fa6:	bf58      	it	pl
 8007fa8:	6963      	ldrpl	r3, [r4, #20]
 8007faa:	60a3      	str	r3, [r4, #8]
 8007fac:	e7f4      	b.n	8007f98 <__swsetup_r+0xb0>
 8007fae:	2000      	movs	r0, #0
 8007fb0:	e7f7      	b.n	8007fa2 <__swsetup_r+0xba>
 8007fb2:	bf00      	nop
 8007fb4:	20000014 	.word	0x20000014
 8007fb8:	0800a1e8 	.word	0x0800a1e8
 8007fbc:	0800a208 	.word	0x0800a208
 8007fc0:	0800a1c8 	.word	0x0800a1c8

08007fc4 <quorem>:
 8007fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	6903      	ldr	r3, [r0, #16]
 8007fca:	690c      	ldr	r4, [r1, #16]
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	4607      	mov	r7, r0
 8007fd0:	f2c0 8081 	blt.w	80080d6 <quorem+0x112>
 8007fd4:	3c01      	subs	r4, #1
 8007fd6:	f101 0814 	add.w	r8, r1, #20
 8007fda:	f100 0514 	add.w	r5, r0, #20
 8007fde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fec:	3301      	adds	r3, #1
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ff8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ffc:	d331      	bcc.n	8008062 <quorem+0x9e>
 8007ffe:	f04f 0e00 	mov.w	lr, #0
 8008002:	4640      	mov	r0, r8
 8008004:	46ac      	mov	ip, r5
 8008006:	46f2      	mov	sl, lr
 8008008:	f850 2b04 	ldr.w	r2, [r0], #4
 800800c:	b293      	uxth	r3, r2
 800800e:	fb06 e303 	mla	r3, r6, r3, lr
 8008012:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008016:	b29b      	uxth	r3, r3
 8008018:	ebaa 0303 	sub.w	r3, sl, r3
 800801c:	f8dc a000 	ldr.w	sl, [ip]
 8008020:	0c12      	lsrs	r2, r2, #16
 8008022:	fa13 f38a 	uxtah	r3, r3, sl
 8008026:	fb06 e202 	mla	r2, r6, r2, lr
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	9b00      	ldr	r3, [sp, #0]
 800802e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008032:	b292      	uxth	r2, r2
 8008034:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008038:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800803c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008040:	4581      	cmp	r9, r0
 8008042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008046:	f84c 3b04 	str.w	r3, [ip], #4
 800804a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800804e:	d2db      	bcs.n	8008008 <quorem+0x44>
 8008050:	f855 300b 	ldr.w	r3, [r5, fp]
 8008054:	b92b      	cbnz	r3, 8008062 <quorem+0x9e>
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	3b04      	subs	r3, #4
 800805a:	429d      	cmp	r5, r3
 800805c:	461a      	mov	r2, r3
 800805e:	d32e      	bcc.n	80080be <quorem+0xfa>
 8008060:	613c      	str	r4, [r7, #16]
 8008062:	4638      	mov	r0, r7
 8008064:	f001 fae6 	bl	8009634 <__mcmp>
 8008068:	2800      	cmp	r0, #0
 800806a:	db24      	blt.n	80080b6 <quorem+0xf2>
 800806c:	3601      	adds	r6, #1
 800806e:	4628      	mov	r0, r5
 8008070:	f04f 0c00 	mov.w	ip, #0
 8008074:	f858 2b04 	ldr.w	r2, [r8], #4
 8008078:	f8d0 e000 	ldr.w	lr, [r0]
 800807c:	b293      	uxth	r3, r2
 800807e:	ebac 0303 	sub.w	r3, ip, r3
 8008082:	0c12      	lsrs	r2, r2, #16
 8008084:	fa13 f38e 	uxtah	r3, r3, lr
 8008088:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800808c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008090:	b29b      	uxth	r3, r3
 8008092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008096:	45c1      	cmp	r9, r8
 8008098:	f840 3b04 	str.w	r3, [r0], #4
 800809c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080a0:	d2e8      	bcs.n	8008074 <quorem+0xb0>
 80080a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080aa:	b922      	cbnz	r2, 80080b6 <quorem+0xf2>
 80080ac:	3b04      	subs	r3, #4
 80080ae:	429d      	cmp	r5, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	d30a      	bcc.n	80080ca <quorem+0x106>
 80080b4:	613c      	str	r4, [r7, #16]
 80080b6:	4630      	mov	r0, r6
 80080b8:	b003      	add	sp, #12
 80080ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	3b04      	subs	r3, #4
 80080c2:	2a00      	cmp	r2, #0
 80080c4:	d1cc      	bne.n	8008060 <quorem+0x9c>
 80080c6:	3c01      	subs	r4, #1
 80080c8:	e7c7      	b.n	800805a <quorem+0x96>
 80080ca:	6812      	ldr	r2, [r2, #0]
 80080cc:	3b04      	subs	r3, #4
 80080ce:	2a00      	cmp	r2, #0
 80080d0:	d1f0      	bne.n	80080b4 <quorem+0xf0>
 80080d2:	3c01      	subs	r4, #1
 80080d4:	e7eb      	b.n	80080ae <quorem+0xea>
 80080d6:	2000      	movs	r0, #0
 80080d8:	e7ee      	b.n	80080b8 <quorem+0xf4>
 80080da:	0000      	movs	r0, r0
 80080dc:	0000      	movs	r0, r0
	...

080080e0 <_dtoa_r>:
 80080e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e4:	ed2d 8b04 	vpush	{d8-d9}
 80080e8:	ec57 6b10 	vmov	r6, r7, d0
 80080ec:	b093      	sub	sp, #76	; 0x4c
 80080ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080f4:	9106      	str	r1, [sp, #24]
 80080f6:	ee10 aa10 	vmov	sl, s0
 80080fa:	4604      	mov	r4, r0
 80080fc:	9209      	str	r2, [sp, #36]	; 0x24
 80080fe:	930c      	str	r3, [sp, #48]	; 0x30
 8008100:	46bb      	mov	fp, r7
 8008102:	b975      	cbnz	r5, 8008122 <_dtoa_r+0x42>
 8008104:	2010      	movs	r0, #16
 8008106:	f000 fffd 	bl	8009104 <malloc>
 800810a:	4602      	mov	r2, r0
 800810c:	6260      	str	r0, [r4, #36]	; 0x24
 800810e:	b920      	cbnz	r0, 800811a <_dtoa_r+0x3a>
 8008110:	4ba7      	ldr	r3, [pc, #668]	; (80083b0 <_dtoa_r+0x2d0>)
 8008112:	21ea      	movs	r1, #234	; 0xea
 8008114:	48a7      	ldr	r0, [pc, #668]	; (80083b4 <_dtoa_r+0x2d4>)
 8008116:	f001 fe45 	bl	8009da4 <__assert_func>
 800811a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800811e:	6005      	str	r5, [r0, #0]
 8008120:	60c5      	str	r5, [r0, #12]
 8008122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008124:	6819      	ldr	r1, [r3, #0]
 8008126:	b151      	cbz	r1, 800813e <_dtoa_r+0x5e>
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	604a      	str	r2, [r1, #4]
 800812c:	2301      	movs	r3, #1
 800812e:	4093      	lsls	r3, r2
 8008130:	608b      	str	r3, [r1, #8]
 8008132:	4620      	mov	r0, r4
 8008134:	f001 f83c 	bl	80091b0 <_Bfree>
 8008138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	1e3b      	subs	r3, r7, #0
 8008140:	bfaa      	itet	ge
 8008142:	2300      	movge	r3, #0
 8008144:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008148:	f8c8 3000 	strge.w	r3, [r8]
 800814c:	4b9a      	ldr	r3, [pc, #616]	; (80083b8 <_dtoa_r+0x2d8>)
 800814e:	bfbc      	itt	lt
 8008150:	2201      	movlt	r2, #1
 8008152:	f8c8 2000 	strlt.w	r2, [r8]
 8008156:	ea33 030b 	bics.w	r3, r3, fp
 800815a:	d11b      	bne.n	8008194 <_dtoa_r+0xb4>
 800815c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800815e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008168:	4333      	orrs	r3, r6
 800816a:	f000 8592 	beq.w	8008c92 <_dtoa_r+0xbb2>
 800816e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008170:	b963      	cbnz	r3, 800818c <_dtoa_r+0xac>
 8008172:	4b92      	ldr	r3, [pc, #584]	; (80083bc <_dtoa_r+0x2dc>)
 8008174:	e022      	b.n	80081bc <_dtoa_r+0xdc>
 8008176:	4b92      	ldr	r3, [pc, #584]	; (80083c0 <_dtoa_r+0x2e0>)
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	3308      	adds	r3, #8
 800817c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	9801      	ldr	r0, [sp, #4]
 8008182:	b013      	add	sp, #76	; 0x4c
 8008184:	ecbd 8b04 	vpop	{d8-d9}
 8008188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818c:	4b8b      	ldr	r3, [pc, #556]	; (80083bc <_dtoa_r+0x2dc>)
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	3303      	adds	r3, #3
 8008192:	e7f3      	b.n	800817c <_dtoa_r+0x9c>
 8008194:	2200      	movs	r2, #0
 8008196:	2300      	movs	r3, #0
 8008198:	4650      	mov	r0, sl
 800819a:	4659      	mov	r1, fp
 800819c:	f7f8 fcbc 	bl	8000b18 <__aeabi_dcmpeq>
 80081a0:	ec4b ab19 	vmov	d9, sl, fp
 80081a4:	4680      	mov	r8, r0
 80081a6:	b158      	cbz	r0, 80081c0 <_dtoa_r+0xe0>
 80081a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081aa:	2301      	movs	r3, #1
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 856b 	beq.w	8008c8c <_dtoa_r+0xbac>
 80081b6:	4883      	ldr	r0, [pc, #524]	; (80083c4 <_dtoa_r+0x2e4>)
 80081b8:	6018      	str	r0, [r3, #0]
 80081ba:	1e43      	subs	r3, r0, #1
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	e7df      	b.n	8008180 <_dtoa_r+0xa0>
 80081c0:	ec4b ab10 	vmov	d0, sl, fp
 80081c4:	aa10      	add	r2, sp, #64	; 0x40
 80081c6:	a911      	add	r1, sp, #68	; 0x44
 80081c8:	4620      	mov	r0, r4
 80081ca:	f001 fad9 	bl	8009780 <__d2b>
 80081ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80081d2:	ee08 0a10 	vmov	s16, r0
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	f000 8084 	beq.w	80082e4 <_dtoa_r+0x204>
 80081dc:	ee19 3a90 	vmov	r3, s19
 80081e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80081e8:	4656      	mov	r6, sl
 80081ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80081ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80081f6:	4b74      	ldr	r3, [pc, #464]	; (80083c8 <_dtoa_r+0x2e8>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	4630      	mov	r0, r6
 80081fc:	4639      	mov	r1, r7
 80081fe:	f7f8 f86b 	bl	80002d8 <__aeabi_dsub>
 8008202:	a365      	add	r3, pc, #404	; (adr r3, 8008398 <_dtoa_r+0x2b8>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 fa1e 	bl	8000648 <__aeabi_dmul>
 800820c:	a364      	add	r3, pc, #400	; (adr r3, 80083a0 <_dtoa_r+0x2c0>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 f863 	bl	80002dc <__adddf3>
 8008216:	4606      	mov	r6, r0
 8008218:	4628      	mov	r0, r5
 800821a:	460f      	mov	r7, r1
 800821c:	f7f8 f9aa 	bl	8000574 <__aeabi_i2d>
 8008220:	a361      	add	r3, pc, #388	; (adr r3, 80083a8 <_dtoa_r+0x2c8>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 fa0f 	bl	8000648 <__aeabi_dmul>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4630      	mov	r0, r6
 8008230:	4639      	mov	r1, r7
 8008232:	f7f8 f853 	bl	80002dc <__adddf3>
 8008236:	4606      	mov	r6, r0
 8008238:	460f      	mov	r7, r1
 800823a:	f7f8 fcb5 	bl	8000ba8 <__aeabi_d2iz>
 800823e:	2200      	movs	r2, #0
 8008240:	9000      	str	r0, [sp, #0]
 8008242:	2300      	movs	r3, #0
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	f7f8 fc70 	bl	8000b2c <__aeabi_dcmplt>
 800824c:	b150      	cbz	r0, 8008264 <_dtoa_r+0x184>
 800824e:	9800      	ldr	r0, [sp, #0]
 8008250:	f7f8 f990 	bl	8000574 <__aeabi_i2d>
 8008254:	4632      	mov	r2, r6
 8008256:	463b      	mov	r3, r7
 8008258:	f7f8 fc5e 	bl	8000b18 <__aeabi_dcmpeq>
 800825c:	b910      	cbnz	r0, 8008264 <_dtoa_r+0x184>
 800825e:	9b00      	ldr	r3, [sp, #0]
 8008260:	3b01      	subs	r3, #1
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	9b00      	ldr	r3, [sp, #0]
 8008266:	2b16      	cmp	r3, #22
 8008268:	d85a      	bhi.n	8008320 <_dtoa_r+0x240>
 800826a:	9a00      	ldr	r2, [sp, #0]
 800826c:	4b57      	ldr	r3, [pc, #348]	; (80083cc <_dtoa_r+0x2ec>)
 800826e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	ec51 0b19 	vmov	r0, r1, d9
 800827a:	f7f8 fc57 	bl	8000b2c <__aeabi_dcmplt>
 800827e:	2800      	cmp	r0, #0
 8008280:	d050      	beq.n	8008324 <_dtoa_r+0x244>
 8008282:	9b00      	ldr	r3, [sp, #0]
 8008284:	3b01      	subs	r3, #1
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	2300      	movs	r3, #0
 800828a:	930b      	str	r3, [sp, #44]	; 0x2c
 800828c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800828e:	1b5d      	subs	r5, r3, r5
 8008290:	1e6b      	subs	r3, r5, #1
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	bf45      	ittet	mi
 8008296:	f1c5 0301 	rsbmi	r3, r5, #1
 800829a:	9304      	strmi	r3, [sp, #16]
 800829c:	2300      	movpl	r3, #0
 800829e:	2300      	movmi	r3, #0
 80082a0:	bf4c      	ite	mi
 80082a2:	9305      	strmi	r3, [sp, #20]
 80082a4:	9304      	strpl	r3, [sp, #16]
 80082a6:	9b00      	ldr	r3, [sp, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	db3d      	blt.n	8008328 <_dtoa_r+0x248>
 80082ac:	9b05      	ldr	r3, [sp, #20]
 80082ae:	9a00      	ldr	r2, [sp, #0]
 80082b0:	920a      	str	r2, [sp, #40]	; 0x28
 80082b2:	4413      	add	r3, r2
 80082b4:	9305      	str	r3, [sp, #20]
 80082b6:	2300      	movs	r3, #0
 80082b8:	9307      	str	r3, [sp, #28]
 80082ba:	9b06      	ldr	r3, [sp, #24]
 80082bc:	2b09      	cmp	r3, #9
 80082be:	f200 8089 	bhi.w	80083d4 <_dtoa_r+0x2f4>
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	bfc4      	itt	gt
 80082c6:	3b04      	subgt	r3, #4
 80082c8:	9306      	strgt	r3, [sp, #24]
 80082ca:	9b06      	ldr	r3, [sp, #24]
 80082cc:	f1a3 0302 	sub.w	r3, r3, #2
 80082d0:	bfcc      	ite	gt
 80082d2:	2500      	movgt	r5, #0
 80082d4:	2501      	movle	r5, #1
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	f200 8087 	bhi.w	80083ea <_dtoa_r+0x30a>
 80082dc:	e8df f003 	tbb	[pc, r3]
 80082e0:	59383a2d 	.word	0x59383a2d
 80082e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80082e8:	441d      	add	r5, r3
 80082ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	bfc1      	itttt	gt
 80082f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80082fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80082fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008302:	bfda      	itte	le
 8008304:	f1c3 0320 	rsble	r3, r3, #32
 8008308:	fa06 f003 	lslle.w	r0, r6, r3
 800830c:	4318      	orrgt	r0, r3
 800830e:	f7f8 f921 	bl	8000554 <__aeabi_ui2d>
 8008312:	2301      	movs	r3, #1
 8008314:	4606      	mov	r6, r0
 8008316:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800831a:	3d01      	subs	r5, #1
 800831c:	930e      	str	r3, [sp, #56]	; 0x38
 800831e:	e76a      	b.n	80081f6 <_dtoa_r+0x116>
 8008320:	2301      	movs	r3, #1
 8008322:	e7b2      	b.n	800828a <_dtoa_r+0x1aa>
 8008324:	900b      	str	r0, [sp, #44]	; 0x2c
 8008326:	e7b1      	b.n	800828c <_dtoa_r+0x1ac>
 8008328:	9b04      	ldr	r3, [sp, #16]
 800832a:	9a00      	ldr	r2, [sp, #0]
 800832c:	1a9b      	subs	r3, r3, r2
 800832e:	9304      	str	r3, [sp, #16]
 8008330:	4253      	negs	r3, r2
 8008332:	9307      	str	r3, [sp, #28]
 8008334:	2300      	movs	r3, #0
 8008336:	930a      	str	r3, [sp, #40]	; 0x28
 8008338:	e7bf      	b.n	80082ba <_dtoa_r+0x1da>
 800833a:	2300      	movs	r3, #0
 800833c:	9308      	str	r3, [sp, #32]
 800833e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008340:	2b00      	cmp	r3, #0
 8008342:	dc55      	bgt.n	80083f0 <_dtoa_r+0x310>
 8008344:	2301      	movs	r3, #1
 8008346:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800834a:	461a      	mov	r2, r3
 800834c:	9209      	str	r2, [sp, #36]	; 0x24
 800834e:	e00c      	b.n	800836a <_dtoa_r+0x28a>
 8008350:	2301      	movs	r3, #1
 8008352:	e7f3      	b.n	800833c <_dtoa_r+0x25c>
 8008354:	2300      	movs	r3, #0
 8008356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008358:	9308      	str	r3, [sp, #32]
 800835a:	9b00      	ldr	r3, [sp, #0]
 800835c:	4413      	add	r3, r2
 800835e:	9302      	str	r3, [sp, #8]
 8008360:	3301      	adds	r3, #1
 8008362:	2b01      	cmp	r3, #1
 8008364:	9303      	str	r3, [sp, #12]
 8008366:	bfb8      	it	lt
 8008368:	2301      	movlt	r3, #1
 800836a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800836c:	2200      	movs	r2, #0
 800836e:	6042      	str	r2, [r0, #4]
 8008370:	2204      	movs	r2, #4
 8008372:	f102 0614 	add.w	r6, r2, #20
 8008376:	429e      	cmp	r6, r3
 8008378:	6841      	ldr	r1, [r0, #4]
 800837a:	d93d      	bls.n	80083f8 <_dtoa_r+0x318>
 800837c:	4620      	mov	r0, r4
 800837e:	f000 fed7 	bl	8009130 <_Balloc>
 8008382:	9001      	str	r0, [sp, #4]
 8008384:	2800      	cmp	r0, #0
 8008386:	d13b      	bne.n	8008400 <_dtoa_r+0x320>
 8008388:	4b11      	ldr	r3, [pc, #68]	; (80083d0 <_dtoa_r+0x2f0>)
 800838a:	4602      	mov	r2, r0
 800838c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008390:	e6c0      	b.n	8008114 <_dtoa_r+0x34>
 8008392:	2301      	movs	r3, #1
 8008394:	e7df      	b.n	8008356 <_dtoa_r+0x276>
 8008396:	bf00      	nop
 8008398:	636f4361 	.word	0x636f4361
 800839c:	3fd287a7 	.word	0x3fd287a7
 80083a0:	8b60c8b3 	.word	0x8b60c8b3
 80083a4:	3fc68a28 	.word	0x3fc68a28
 80083a8:	509f79fb 	.word	0x509f79fb
 80083ac:	3fd34413 	.word	0x3fd34413
 80083b0:	0800a145 	.word	0x0800a145
 80083b4:	0800a15c 	.word	0x0800a15c
 80083b8:	7ff00000 	.word	0x7ff00000
 80083bc:	0800a141 	.word	0x0800a141
 80083c0:	0800a138 	.word	0x0800a138
 80083c4:	0800a115 	.word	0x0800a115
 80083c8:	3ff80000 	.word	0x3ff80000
 80083cc:	0800a2b0 	.word	0x0800a2b0
 80083d0:	0800a1b7 	.word	0x0800a1b7
 80083d4:	2501      	movs	r5, #1
 80083d6:	2300      	movs	r3, #0
 80083d8:	9306      	str	r3, [sp, #24]
 80083da:	9508      	str	r5, [sp, #32]
 80083dc:	f04f 33ff 	mov.w	r3, #4294967295
 80083e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083e4:	2200      	movs	r2, #0
 80083e6:	2312      	movs	r3, #18
 80083e8:	e7b0      	b.n	800834c <_dtoa_r+0x26c>
 80083ea:	2301      	movs	r3, #1
 80083ec:	9308      	str	r3, [sp, #32]
 80083ee:	e7f5      	b.n	80083dc <_dtoa_r+0x2fc>
 80083f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083f6:	e7b8      	b.n	800836a <_dtoa_r+0x28a>
 80083f8:	3101      	adds	r1, #1
 80083fa:	6041      	str	r1, [r0, #4]
 80083fc:	0052      	lsls	r2, r2, #1
 80083fe:	e7b8      	b.n	8008372 <_dtoa_r+0x292>
 8008400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008402:	9a01      	ldr	r2, [sp, #4]
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	9b03      	ldr	r3, [sp, #12]
 8008408:	2b0e      	cmp	r3, #14
 800840a:	f200 809d 	bhi.w	8008548 <_dtoa_r+0x468>
 800840e:	2d00      	cmp	r5, #0
 8008410:	f000 809a 	beq.w	8008548 <_dtoa_r+0x468>
 8008414:	9b00      	ldr	r3, [sp, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	dd32      	ble.n	8008480 <_dtoa_r+0x3a0>
 800841a:	4ab7      	ldr	r2, [pc, #732]	; (80086f8 <_dtoa_r+0x618>)
 800841c:	f003 030f 	and.w	r3, r3, #15
 8008420:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008424:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008428:	9b00      	ldr	r3, [sp, #0]
 800842a:	05d8      	lsls	r0, r3, #23
 800842c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008430:	d516      	bpl.n	8008460 <_dtoa_r+0x380>
 8008432:	4bb2      	ldr	r3, [pc, #712]	; (80086fc <_dtoa_r+0x61c>)
 8008434:	ec51 0b19 	vmov	r0, r1, d9
 8008438:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800843c:	f7f8 fa2e 	bl	800089c <__aeabi_ddiv>
 8008440:	f007 070f 	and.w	r7, r7, #15
 8008444:	4682      	mov	sl, r0
 8008446:	468b      	mov	fp, r1
 8008448:	2503      	movs	r5, #3
 800844a:	4eac      	ldr	r6, [pc, #688]	; (80086fc <_dtoa_r+0x61c>)
 800844c:	b957      	cbnz	r7, 8008464 <_dtoa_r+0x384>
 800844e:	4642      	mov	r2, r8
 8008450:	464b      	mov	r3, r9
 8008452:	4650      	mov	r0, sl
 8008454:	4659      	mov	r1, fp
 8008456:	f7f8 fa21 	bl	800089c <__aeabi_ddiv>
 800845a:	4682      	mov	sl, r0
 800845c:	468b      	mov	fp, r1
 800845e:	e028      	b.n	80084b2 <_dtoa_r+0x3d2>
 8008460:	2502      	movs	r5, #2
 8008462:	e7f2      	b.n	800844a <_dtoa_r+0x36a>
 8008464:	07f9      	lsls	r1, r7, #31
 8008466:	d508      	bpl.n	800847a <_dtoa_r+0x39a>
 8008468:	4640      	mov	r0, r8
 800846a:	4649      	mov	r1, r9
 800846c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008470:	f7f8 f8ea 	bl	8000648 <__aeabi_dmul>
 8008474:	3501      	adds	r5, #1
 8008476:	4680      	mov	r8, r0
 8008478:	4689      	mov	r9, r1
 800847a:	107f      	asrs	r7, r7, #1
 800847c:	3608      	adds	r6, #8
 800847e:	e7e5      	b.n	800844c <_dtoa_r+0x36c>
 8008480:	f000 809b 	beq.w	80085ba <_dtoa_r+0x4da>
 8008484:	9b00      	ldr	r3, [sp, #0]
 8008486:	4f9d      	ldr	r7, [pc, #628]	; (80086fc <_dtoa_r+0x61c>)
 8008488:	425e      	negs	r6, r3
 800848a:	4b9b      	ldr	r3, [pc, #620]	; (80086f8 <_dtoa_r+0x618>)
 800848c:	f006 020f 	and.w	r2, r6, #15
 8008490:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	ec51 0b19 	vmov	r0, r1, d9
 800849c:	f7f8 f8d4 	bl	8000648 <__aeabi_dmul>
 80084a0:	1136      	asrs	r6, r6, #4
 80084a2:	4682      	mov	sl, r0
 80084a4:	468b      	mov	fp, r1
 80084a6:	2300      	movs	r3, #0
 80084a8:	2502      	movs	r5, #2
 80084aa:	2e00      	cmp	r6, #0
 80084ac:	d17a      	bne.n	80085a4 <_dtoa_r+0x4c4>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1d3      	bne.n	800845a <_dtoa_r+0x37a>
 80084b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 8082 	beq.w	80085be <_dtoa_r+0x4de>
 80084ba:	4b91      	ldr	r3, [pc, #580]	; (8008700 <_dtoa_r+0x620>)
 80084bc:	2200      	movs	r2, #0
 80084be:	4650      	mov	r0, sl
 80084c0:	4659      	mov	r1, fp
 80084c2:	f7f8 fb33 	bl	8000b2c <__aeabi_dcmplt>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d079      	beq.n	80085be <_dtoa_r+0x4de>
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d076      	beq.n	80085be <_dtoa_r+0x4de>
 80084d0:	9b02      	ldr	r3, [sp, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	dd36      	ble.n	8008544 <_dtoa_r+0x464>
 80084d6:	9b00      	ldr	r3, [sp, #0]
 80084d8:	4650      	mov	r0, sl
 80084da:	4659      	mov	r1, fp
 80084dc:	1e5f      	subs	r7, r3, #1
 80084de:	2200      	movs	r2, #0
 80084e0:	4b88      	ldr	r3, [pc, #544]	; (8008704 <_dtoa_r+0x624>)
 80084e2:	f7f8 f8b1 	bl	8000648 <__aeabi_dmul>
 80084e6:	9e02      	ldr	r6, [sp, #8]
 80084e8:	4682      	mov	sl, r0
 80084ea:	468b      	mov	fp, r1
 80084ec:	3501      	adds	r5, #1
 80084ee:	4628      	mov	r0, r5
 80084f0:	f7f8 f840 	bl	8000574 <__aeabi_i2d>
 80084f4:	4652      	mov	r2, sl
 80084f6:	465b      	mov	r3, fp
 80084f8:	f7f8 f8a6 	bl	8000648 <__aeabi_dmul>
 80084fc:	4b82      	ldr	r3, [pc, #520]	; (8008708 <_dtoa_r+0x628>)
 80084fe:	2200      	movs	r2, #0
 8008500:	f7f7 feec 	bl	80002dc <__adddf3>
 8008504:	46d0      	mov	r8, sl
 8008506:	46d9      	mov	r9, fp
 8008508:	4682      	mov	sl, r0
 800850a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800850e:	2e00      	cmp	r6, #0
 8008510:	d158      	bne.n	80085c4 <_dtoa_r+0x4e4>
 8008512:	4b7e      	ldr	r3, [pc, #504]	; (800870c <_dtoa_r+0x62c>)
 8008514:	2200      	movs	r2, #0
 8008516:	4640      	mov	r0, r8
 8008518:	4649      	mov	r1, r9
 800851a:	f7f7 fedd 	bl	80002d8 <__aeabi_dsub>
 800851e:	4652      	mov	r2, sl
 8008520:	465b      	mov	r3, fp
 8008522:	4680      	mov	r8, r0
 8008524:	4689      	mov	r9, r1
 8008526:	f7f8 fb1f 	bl	8000b68 <__aeabi_dcmpgt>
 800852a:	2800      	cmp	r0, #0
 800852c:	f040 8295 	bne.w	8008a5a <_dtoa_r+0x97a>
 8008530:	4652      	mov	r2, sl
 8008532:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008536:	4640      	mov	r0, r8
 8008538:	4649      	mov	r1, r9
 800853a:	f7f8 faf7 	bl	8000b2c <__aeabi_dcmplt>
 800853e:	2800      	cmp	r0, #0
 8008540:	f040 8289 	bne.w	8008a56 <_dtoa_r+0x976>
 8008544:	ec5b ab19 	vmov	sl, fp, d9
 8008548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800854a:	2b00      	cmp	r3, #0
 800854c:	f2c0 8148 	blt.w	80087e0 <_dtoa_r+0x700>
 8008550:	9a00      	ldr	r2, [sp, #0]
 8008552:	2a0e      	cmp	r2, #14
 8008554:	f300 8144 	bgt.w	80087e0 <_dtoa_r+0x700>
 8008558:	4b67      	ldr	r3, [pc, #412]	; (80086f8 <_dtoa_r+0x618>)
 800855a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800855e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008564:	2b00      	cmp	r3, #0
 8008566:	f280 80d5 	bge.w	8008714 <_dtoa_r+0x634>
 800856a:	9b03      	ldr	r3, [sp, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f300 80d1 	bgt.w	8008714 <_dtoa_r+0x634>
 8008572:	f040 826f 	bne.w	8008a54 <_dtoa_r+0x974>
 8008576:	4b65      	ldr	r3, [pc, #404]	; (800870c <_dtoa_r+0x62c>)
 8008578:	2200      	movs	r2, #0
 800857a:	4640      	mov	r0, r8
 800857c:	4649      	mov	r1, r9
 800857e:	f7f8 f863 	bl	8000648 <__aeabi_dmul>
 8008582:	4652      	mov	r2, sl
 8008584:	465b      	mov	r3, fp
 8008586:	f7f8 fae5 	bl	8000b54 <__aeabi_dcmpge>
 800858a:	9e03      	ldr	r6, [sp, #12]
 800858c:	4637      	mov	r7, r6
 800858e:	2800      	cmp	r0, #0
 8008590:	f040 8245 	bne.w	8008a1e <_dtoa_r+0x93e>
 8008594:	9d01      	ldr	r5, [sp, #4]
 8008596:	2331      	movs	r3, #49	; 0x31
 8008598:	f805 3b01 	strb.w	r3, [r5], #1
 800859c:	9b00      	ldr	r3, [sp, #0]
 800859e:	3301      	adds	r3, #1
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	e240      	b.n	8008a26 <_dtoa_r+0x946>
 80085a4:	07f2      	lsls	r2, r6, #31
 80085a6:	d505      	bpl.n	80085b4 <_dtoa_r+0x4d4>
 80085a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ac:	f7f8 f84c 	bl	8000648 <__aeabi_dmul>
 80085b0:	3501      	adds	r5, #1
 80085b2:	2301      	movs	r3, #1
 80085b4:	1076      	asrs	r6, r6, #1
 80085b6:	3708      	adds	r7, #8
 80085b8:	e777      	b.n	80084aa <_dtoa_r+0x3ca>
 80085ba:	2502      	movs	r5, #2
 80085bc:	e779      	b.n	80084b2 <_dtoa_r+0x3d2>
 80085be:	9f00      	ldr	r7, [sp, #0]
 80085c0:	9e03      	ldr	r6, [sp, #12]
 80085c2:	e794      	b.n	80084ee <_dtoa_r+0x40e>
 80085c4:	9901      	ldr	r1, [sp, #4]
 80085c6:	4b4c      	ldr	r3, [pc, #304]	; (80086f8 <_dtoa_r+0x618>)
 80085c8:	4431      	add	r1, r6
 80085ca:	910d      	str	r1, [sp, #52]	; 0x34
 80085cc:	9908      	ldr	r1, [sp, #32]
 80085ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085d6:	2900      	cmp	r1, #0
 80085d8:	d043      	beq.n	8008662 <_dtoa_r+0x582>
 80085da:	494d      	ldr	r1, [pc, #308]	; (8008710 <_dtoa_r+0x630>)
 80085dc:	2000      	movs	r0, #0
 80085de:	f7f8 f95d 	bl	800089c <__aeabi_ddiv>
 80085e2:	4652      	mov	r2, sl
 80085e4:	465b      	mov	r3, fp
 80085e6:	f7f7 fe77 	bl	80002d8 <__aeabi_dsub>
 80085ea:	9d01      	ldr	r5, [sp, #4]
 80085ec:	4682      	mov	sl, r0
 80085ee:	468b      	mov	fp, r1
 80085f0:	4649      	mov	r1, r9
 80085f2:	4640      	mov	r0, r8
 80085f4:	f7f8 fad8 	bl	8000ba8 <__aeabi_d2iz>
 80085f8:	4606      	mov	r6, r0
 80085fa:	f7f7 ffbb 	bl	8000574 <__aeabi_i2d>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	4640      	mov	r0, r8
 8008604:	4649      	mov	r1, r9
 8008606:	f7f7 fe67 	bl	80002d8 <__aeabi_dsub>
 800860a:	3630      	adds	r6, #48	; 0x30
 800860c:	f805 6b01 	strb.w	r6, [r5], #1
 8008610:	4652      	mov	r2, sl
 8008612:	465b      	mov	r3, fp
 8008614:	4680      	mov	r8, r0
 8008616:	4689      	mov	r9, r1
 8008618:	f7f8 fa88 	bl	8000b2c <__aeabi_dcmplt>
 800861c:	2800      	cmp	r0, #0
 800861e:	d163      	bne.n	80086e8 <_dtoa_r+0x608>
 8008620:	4642      	mov	r2, r8
 8008622:	464b      	mov	r3, r9
 8008624:	4936      	ldr	r1, [pc, #216]	; (8008700 <_dtoa_r+0x620>)
 8008626:	2000      	movs	r0, #0
 8008628:	f7f7 fe56 	bl	80002d8 <__aeabi_dsub>
 800862c:	4652      	mov	r2, sl
 800862e:	465b      	mov	r3, fp
 8008630:	f7f8 fa7c 	bl	8000b2c <__aeabi_dcmplt>
 8008634:	2800      	cmp	r0, #0
 8008636:	f040 80b5 	bne.w	80087a4 <_dtoa_r+0x6c4>
 800863a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800863c:	429d      	cmp	r5, r3
 800863e:	d081      	beq.n	8008544 <_dtoa_r+0x464>
 8008640:	4b30      	ldr	r3, [pc, #192]	; (8008704 <_dtoa_r+0x624>)
 8008642:	2200      	movs	r2, #0
 8008644:	4650      	mov	r0, sl
 8008646:	4659      	mov	r1, fp
 8008648:	f7f7 fffe 	bl	8000648 <__aeabi_dmul>
 800864c:	4b2d      	ldr	r3, [pc, #180]	; (8008704 <_dtoa_r+0x624>)
 800864e:	4682      	mov	sl, r0
 8008650:	468b      	mov	fp, r1
 8008652:	4640      	mov	r0, r8
 8008654:	4649      	mov	r1, r9
 8008656:	2200      	movs	r2, #0
 8008658:	f7f7 fff6 	bl	8000648 <__aeabi_dmul>
 800865c:	4680      	mov	r8, r0
 800865e:	4689      	mov	r9, r1
 8008660:	e7c6      	b.n	80085f0 <_dtoa_r+0x510>
 8008662:	4650      	mov	r0, sl
 8008664:	4659      	mov	r1, fp
 8008666:	f7f7 ffef 	bl	8000648 <__aeabi_dmul>
 800866a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800866c:	9d01      	ldr	r5, [sp, #4]
 800866e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008670:	4682      	mov	sl, r0
 8008672:	468b      	mov	fp, r1
 8008674:	4649      	mov	r1, r9
 8008676:	4640      	mov	r0, r8
 8008678:	f7f8 fa96 	bl	8000ba8 <__aeabi_d2iz>
 800867c:	4606      	mov	r6, r0
 800867e:	f7f7 ff79 	bl	8000574 <__aeabi_i2d>
 8008682:	3630      	adds	r6, #48	; 0x30
 8008684:	4602      	mov	r2, r0
 8008686:	460b      	mov	r3, r1
 8008688:	4640      	mov	r0, r8
 800868a:	4649      	mov	r1, r9
 800868c:	f7f7 fe24 	bl	80002d8 <__aeabi_dsub>
 8008690:	f805 6b01 	strb.w	r6, [r5], #1
 8008694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008696:	429d      	cmp	r5, r3
 8008698:	4680      	mov	r8, r0
 800869a:	4689      	mov	r9, r1
 800869c:	f04f 0200 	mov.w	r2, #0
 80086a0:	d124      	bne.n	80086ec <_dtoa_r+0x60c>
 80086a2:	4b1b      	ldr	r3, [pc, #108]	; (8008710 <_dtoa_r+0x630>)
 80086a4:	4650      	mov	r0, sl
 80086a6:	4659      	mov	r1, fp
 80086a8:	f7f7 fe18 	bl	80002dc <__adddf3>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4640      	mov	r0, r8
 80086b2:	4649      	mov	r1, r9
 80086b4:	f7f8 fa58 	bl	8000b68 <__aeabi_dcmpgt>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d173      	bne.n	80087a4 <_dtoa_r+0x6c4>
 80086bc:	4652      	mov	r2, sl
 80086be:	465b      	mov	r3, fp
 80086c0:	4913      	ldr	r1, [pc, #76]	; (8008710 <_dtoa_r+0x630>)
 80086c2:	2000      	movs	r0, #0
 80086c4:	f7f7 fe08 	bl	80002d8 <__aeabi_dsub>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4640      	mov	r0, r8
 80086ce:	4649      	mov	r1, r9
 80086d0:	f7f8 fa2c 	bl	8000b2c <__aeabi_dcmplt>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	f43f af35 	beq.w	8008544 <_dtoa_r+0x464>
 80086da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086dc:	1e6b      	subs	r3, r5, #1
 80086de:	930f      	str	r3, [sp, #60]	; 0x3c
 80086e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086e4:	2b30      	cmp	r3, #48	; 0x30
 80086e6:	d0f8      	beq.n	80086da <_dtoa_r+0x5fa>
 80086e8:	9700      	str	r7, [sp, #0]
 80086ea:	e049      	b.n	8008780 <_dtoa_r+0x6a0>
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <_dtoa_r+0x624>)
 80086ee:	f7f7 ffab 	bl	8000648 <__aeabi_dmul>
 80086f2:	4680      	mov	r8, r0
 80086f4:	4689      	mov	r9, r1
 80086f6:	e7bd      	b.n	8008674 <_dtoa_r+0x594>
 80086f8:	0800a2b0 	.word	0x0800a2b0
 80086fc:	0800a288 	.word	0x0800a288
 8008700:	3ff00000 	.word	0x3ff00000
 8008704:	40240000 	.word	0x40240000
 8008708:	401c0000 	.word	0x401c0000
 800870c:	40140000 	.word	0x40140000
 8008710:	3fe00000 	.word	0x3fe00000
 8008714:	9d01      	ldr	r5, [sp, #4]
 8008716:	4656      	mov	r6, sl
 8008718:	465f      	mov	r7, fp
 800871a:	4642      	mov	r2, r8
 800871c:	464b      	mov	r3, r9
 800871e:	4630      	mov	r0, r6
 8008720:	4639      	mov	r1, r7
 8008722:	f7f8 f8bb 	bl	800089c <__aeabi_ddiv>
 8008726:	f7f8 fa3f 	bl	8000ba8 <__aeabi_d2iz>
 800872a:	4682      	mov	sl, r0
 800872c:	f7f7 ff22 	bl	8000574 <__aeabi_i2d>
 8008730:	4642      	mov	r2, r8
 8008732:	464b      	mov	r3, r9
 8008734:	f7f7 ff88 	bl	8000648 <__aeabi_dmul>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	4630      	mov	r0, r6
 800873e:	4639      	mov	r1, r7
 8008740:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008744:	f7f7 fdc8 	bl	80002d8 <__aeabi_dsub>
 8008748:	f805 6b01 	strb.w	r6, [r5], #1
 800874c:	9e01      	ldr	r6, [sp, #4]
 800874e:	9f03      	ldr	r7, [sp, #12]
 8008750:	1bae      	subs	r6, r5, r6
 8008752:	42b7      	cmp	r7, r6
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	d135      	bne.n	80087c6 <_dtoa_r+0x6e6>
 800875a:	f7f7 fdbf 	bl	80002dc <__adddf3>
 800875e:	4642      	mov	r2, r8
 8008760:	464b      	mov	r3, r9
 8008762:	4606      	mov	r6, r0
 8008764:	460f      	mov	r7, r1
 8008766:	f7f8 f9ff 	bl	8000b68 <__aeabi_dcmpgt>
 800876a:	b9d0      	cbnz	r0, 80087a2 <_dtoa_r+0x6c2>
 800876c:	4642      	mov	r2, r8
 800876e:	464b      	mov	r3, r9
 8008770:	4630      	mov	r0, r6
 8008772:	4639      	mov	r1, r7
 8008774:	f7f8 f9d0 	bl	8000b18 <__aeabi_dcmpeq>
 8008778:	b110      	cbz	r0, 8008780 <_dtoa_r+0x6a0>
 800877a:	f01a 0f01 	tst.w	sl, #1
 800877e:	d110      	bne.n	80087a2 <_dtoa_r+0x6c2>
 8008780:	4620      	mov	r0, r4
 8008782:	ee18 1a10 	vmov	r1, s16
 8008786:	f000 fd13 	bl	80091b0 <_Bfree>
 800878a:	2300      	movs	r3, #0
 800878c:	9800      	ldr	r0, [sp, #0]
 800878e:	702b      	strb	r3, [r5, #0]
 8008790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008792:	3001      	adds	r0, #1
 8008794:	6018      	str	r0, [r3, #0]
 8008796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008798:	2b00      	cmp	r3, #0
 800879a:	f43f acf1 	beq.w	8008180 <_dtoa_r+0xa0>
 800879e:	601d      	str	r5, [r3, #0]
 80087a0:	e4ee      	b.n	8008180 <_dtoa_r+0xa0>
 80087a2:	9f00      	ldr	r7, [sp, #0]
 80087a4:	462b      	mov	r3, r5
 80087a6:	461d      	mov	r5, r3
 80087a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ac:	2a39      	cmp	r2, #57	; 0x39
 80087ae:	d106      	bne.n	80087be <_dtoa_r+0x6de>
 80087b0:	9a01      	ldr	r2, [sp, #4]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d1f7      	bne.n	80087a6 <_dtoa_r+0x6c6>
 80087b6:	9901      	ldr	r1, [sp, #4]
 80087b8:	2230      	movs	r2, #48	; 0x30
 80087ba:	3701      	adds	r7, #1
 80087bc:	700a      	strb	r2, [r1, #0]
 80087be:	781a      	ldrb	r2, [r3, #0]
 80087c0:	3201      	adds	r2, #1
 80087c2:	701a      	strb	r2, [r3, #0]
 80087c4:	e790      	b.n	80086e8 <_dtoa_r+0x608>
 80087c6:	4ba6      	ldr	r3, [pc, #664]	; (8008a60 <_dtoa_r+0x980>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	f7f7 ff3d 	bl	8000648 <__aeabi_dmul>
 80087ce:	2200      	movs	r2, #0
 80087d0:	2300      	movs	r3, #0
 80087d2:	4606      	mov	r6, r0
 80087d4:	460f      	mov	r7, r1
 80087d6:	f7f8 f99f 	bl	8000b18 <__aeabi_dcmpeq>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d09d      	beq.n	800871a <_dtoa_r+0x63a>
 80087de:	e7cf      	b.n	8008780 <_dtoa_r+0x6a0>
 80087e0:	9a08      	ldr	r2, [sp, #32]
 80087e2:	2a00      	cmp	r2, #0
 80087e4:	f000 80d7 	beq.w	8008996 <_dtoa_r+0x8b6>
 80087e8:	9a06      	ldr	r2, [sp, #24]
 80087ea:	2a01      	cmp	r2, #1
 80087ec:	f300 80ba 	bgt.w	8008964 <_dtoa_r+0x884>
 80087f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	f000 80b2 	beq.w	800895c <_dtoa_r+0x87c>
 80087f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087fc:	9e07      	ldr	r6, [sp, #28]
 80087fe:	9d04      	ldr	r5, [sp, #16]
 8008800:	9a04      	ldr	r2, [sp, #16]
 8008802:	441a      	add	r2, r3
 8008804:	9204      	str	r2, [sp, #16]
 8008806:	9a05      	ldr	r2, [sp, #20]
 8008808:	2101      	movs	r1, #1
 800880a:	441a      	add	r2, r3
 800880c:	4620      	mov	r0, r4
 800880e:	9205      	str	r2, [sp, #20]
 8008810:	f000 fd86 	bl	8009320 <__i2b>
 8008814:	4607      	mov	r7, r0
 8008816:	2d00      	cmp	r5, #0
 8008818:	dd0c      	ble.n	8008834 <_dtoa_r+0x754>
 800881a:	9b05      	ldr	r3, [sp, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd09      	ble.n	8008834 <_dtoa_r+0x754>
 8008820:	42ab      	cmp	r3, r5
 8008822:	9a04      	ldr	r2, [sp, #16]
 8008824:	bfa8      	it	ge
 8008826:	462b      	movge	r3, r5
 8008828:	1ad2      	subs	r2, r2, r3
 800882a:	9204      	str	r2, [sp, #16]
 800882c:	9a05      	ldr	r2, [sp, #20]
 800882e:	1aed      	subs	r5, r5, r3
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	9305      	str	r3, [sp, #20]
 8008834:	9b07      	ldr	r3, [sp, #28]
 8008836:	b31b      	cbz	r3, 8008880 <_dtoa_r+0x7a0>
 8008838:	9b08      	ldr	r3, [sp, #32]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80af 	beq.w	800899e <_dtoa_r+0x8be>
 8008840:	2e00      	cmp	r6, #0
 8008842:	dd13      	ble.n	800886c <_dtoa_r+0x78c>
 8008844:	4639      	mov	r1, r7
 8008846:	4632      	mov	r2, r6
 8008848:	4620      	mov	r0, r4
 800884a:	f000 fe29 	bl	80094a0 <__pow5mult>
 800884e:	ee18 2a10 	vmov	r2, s16
 8008852:	4601      	mov	r1, r0
 8008854:	4607      	mov	r7, r0
 8008856:	4620      	mov	r0, r4
 8008858:	f000 fd78 	bl	800934c <__multiply>
 800885c:	ee18 1a10 	vmov	r1, s16
 8008860:	4680      	mov	r8, r0
 8008862:	4620      	mov	r0, r4
 8008864:	f000 fca4 	bl	80091b0 <_Bfree>
 8008868:	ee08 8a10 	vmov	s16, r8
 800886c:	9b07      	ldr	r3, [sp, #28]
 800886e:	1b9a      	subs	r2, r3, r6
 8008870:	d006      	beq.n	8008880 <_dtoa_r+0x7a0>
 8008872:	ee18 1a10 	vmov	r1, s16
 8008876:	4620      	mov	r0, r4
 8008878:	f000 fe12 	bl	80094a0 <__pow5mult>
 800887c:	ee08 0a10 	vmov	s16, r0
 8008880:	2101      	movs	r1, #1
 8008882:	4620      	mov	r0, r4
 8008884:	f000 fd4c 	bl	8009320 <__i2b>
 8008888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888a:	2b00      	cmp	r3, #0
 800888c:	4606      	mov	r6, r0
 800888e:	f340 8088 	ble.w	80089a2 <_dtoa_r+0x8c2>
 8008892:	461a      	mov	r2, r3
 8008894:	4601      	mov	r1, r0
 8008896:	4620      	mov	r0, r4
 8008898:	f000 fe02 	bl	80094a0 <__pow5mult>
 800889c:	9b06      	ldr	r3, [sp, #24]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	4606      	mov	r6, r0
 80088a2:	f340 8081 	ble.w	80089a8 <_dtoa_r+0x8c8>
 80088a6:	f04f 0800 	mov.w	r8, #0
 80088aa:	6933      	ldr	r3, [r6, #16]
 80088ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088b0:	6918      	ldr	r0, [r3, #16]
 80088b2:	f000 fce5 	bl	8009280 <__hi0bits>
 80088b6:	f1c0 0020 	rsb	r0, r0, #32
 80088ba:	9b05      	ldr	r3, [sp, #20]
 80088bc:	4418      	add	r0, r3
 80088be:	f010 001f 	ands.w	r0, r0, #31
 80088c2:	f000 8092 	beq.w	80089ea <_dtoa_r+0x90a>
 80088c6:	f1c0 0320 	rsb	r3, r0, #32
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	f340 808a 	ble.w	80089e4 <_dtoa_r+0x904>
 80088d0:	f1c0 001c 	rsb	r0, r0, #28
 80088d4:	9b04      	ldr	r3, [sp, #16]
 80088d6:	4403      	add	r3, r0
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	9b05      	ldr	r3, [sp, #20]
 80088dc:	4403      	add	r3, r0
 80088de:	4405      	add	r5, r0
 80088e0:	9305      	str	r3, [sp, #20]
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	dd07      	ble.n	80088f8 <_dtoa_r+0x818>
 80088e8:	ee18 1a10 	vmov	r1, s16
 80088ec:	461a      	mov	r2, r3
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 fe30 	bl	8009554 <__lshift>
 80088f4:	ee08 0a10 	vmov	s16, r0
 80088f8:	9b05      	ldr	r3, [sp, #20]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	dd05      	ble.n	800890a <_dtoa_r+0x82a>
 80088fe:	4631      	mov	r1, r6
 8008900:	461a      	mov	r2, r3
 8008902:	4620      	mov	r0, r4
 8008904:	f000 fe26 	bl	8009554 <__lshift>
 8008908:	4606      	mov	r6, r0
 800890a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800890c:	2b00      	cmp	r3, #0
 800890e:	d06e      	beq.n	80089ee <_dtoa_r+0x90e>
 8008910:	ee18 0a10 	vmov	r0, s16
 8008914:	4631      	mov	r1, r6
 8008916:	f000 fe8d 	bl	8009634 <__mcmp>
 800891a:	2800      	cmp	r0, #0
 800891c:	da67      	bge.n	80089ee <_dtoa_r+0x90e>
 800891e:	9b00      	ldr	r3, [sp, #0]
 8008920:	3b01      	subs	r3, #1
 8008922:	ee18 1a10 	vmov	r1, s16
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	220a      	movs	r2, #10
 800892a:	2300      	movs	r3, #0
 800892c:	4620      	mov	r0, r4
 800892e:	f000 fc61 	bl	80091f4 <__multadd>
 8008932:	9b08      	ldr	r3, [sp, #32]
 8008934:	ee08 0a10 	vmov	s16, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 81b1 	beq.w	8008ca0 <_dtoa_r+0xbc0>
 800893e:	2300      	movs	r3, #0
 8008940:	4639      	mov	r1, r7
 8008942:	220a      	movs	r2, #10
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fc55 	bl	80091f4 <__multadd>
 800894a:	9b02      	ldr	r3, [sp, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	4607      	mov	r7, r0
 8008950:	f300 808e 	bgt.w	8008a70 <_dtoa_r+0x990>
 8008954:	9b06      	ldr	r3, [sp, #24]
 8008956:	2b02      	cmp	r3, #2
 8008958:	dc51      	bgt.n	80089fe <_dtoa_r+0x91e>
 800895a:	e089      	b.n	8008a70 <_dtoa_r+0x990>
 800895c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800895e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008962:	e74b      	b.n	80087fc <_dtoa_r+0x71c>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	1e5e      	subs	r6, r3, #1
 8008968:	9b07      	ldr	r3, [sp, #28]
 800896a:	42b3      	cmp	r3, r6
 800896c:	bfbf      	itttt	lt
 800896e:	9b07      	ldrlt	r3, [sp, #28]
 8008970:	9607      	strlt	r6, [sp, #28]
 8008972:	1af2      	sublt	r2, r6, r3
 8008974:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008976:	bfb6      	itet	lt
 8008978:	189b      	addlt	r3, r3, r2
 800897a:	1b9e      	subge	r6, r3, r6
 800897c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800897e:	9b03      	ldr	r3, [sp, #12]
 8008980:	bfb8      	it	lt
 8008982:	2600      	movlt	r6, #0
 8008984:	2b00      	cmp	r3, #0
 8008986:	bfb7      	itett	lt
 8008988:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800898c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008990:	1a9d      	sublt	r5, r3, r2
 8008992:	2300      	movlt	r3, #0
 8008994:	e734      	b.n	8008800 <_dtoa_r+0x720>
 8008996:	9e07      	ldr	r6, [sp, #28]
 8008998:	9d04      	ldr	r5, [sp, #16]
 800899a:	9f08      	ldr	r7, [sp, #32]
 800899c:	e73b      	b.n	8008816 <_dtoa_r+0x736>
 800899e:	9a07      	ldr	r2, [sp, #28]
 80089a0:	e767      	b.n	8008872 <_dtoa_r+0x792>
 80089a2:	9b06      	ldr	r3, [sp, #24]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	dc18      	bgt.n	80089da <_dtoa_r+0x8fa>
 80089a8:	f1ba 0f00 	cmp.w	sl, #0
 80089ac:	d115      	bne.n	80089da <_dtoa_r+0x8fa>
 80089ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089b2:	b993      	cbnz	r3, 80089da <_dtoa_r+0x8fa>
 80089b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089b8:	0d1b      	lsrs	r3, r3, #20
 80089ba:	051b      	lsls	r3, r3, #20
 80089bc:	b183      	cbz	r3, 80089e0 <_dtoa_r+0x900>
 80089be:	9b04      	ldr	r3, [sp, #16]
 80089c0:	3301      	adds	r3, #1
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	9b05      	ldr	r3, [sp, #20]
 80089c6:	3301      	adds	r3, #1
 80089c8:	9305      	str	r3, [sp, #20]
 80089ca:	f04f 0801 	mov.w	r8, #1
 80089ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f47f af6a 	bne.w	80088aa <_dtoa_r+0x7ca>
 80089d6:	2001      	movs	r0, #1
 80089d8:	e76f      	b.n	80088ba <_dtoa_r+0x7da>
 80089da:	f04f 0800 	mov.w	r8, #0
 80089de:	e7f6      	b.n	80089ce <_dtoa_r+0x8ee>
 80089e0:	4698      	mov	r8, r3
 80089e2:	e7f4      	b.n	80089ce <_dtoa_r+0x8ee>
 80089e4:	f43f af7d 	beq.w	80088e2 <_dtoa_r+0x802>
 80089e8:	4618      	mov	r0, r3
 80089ea:	301c      	adds	r0, #28
 80089ec:	e772      	b.n	80088d4 <_dtoa_r+0x7f4>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	dc37      	bgt.n	8008a64 <_dtoa_r+0x984>
 80089f4:	9b06      	ldr	r3, [sp, #24]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	dd34      	ble.n	8008a64 <_dtoa_r+0x984>
 80089fa:	9b03      	ldr	r3, [sp, #12]
 80089fc:	9302      	str	r3, [sp, #8]
 80089fe:	9b02      	ldr	r3, [sp, #8]
 8008a00:	b96b      	cbnz	r3, 8008a1e <_dtoa_r+0x93e>
 8008a02:	4631      	mov	r1, r6
 8008a04:	2205      	movs	r2, #5
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 fbf4 	bl	80091f4 <__multadd>
 8008a0c:	4601      	mov	r1, r0
 8008a0e:	4606      	mov	r6, r0
 8008a10:	ee18 0a10 	vmov	r0, s16
 8008a14:	f000 fe0e 	bl	8009634 <__mcmp>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	f73f adbb 	bgt.w	8008594 <_dtoa_r+0x4b4>
 8008a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a20:	9d01      	ldr	r5, [sp, #4]
 8008a22:	43db      	mvns	r3, r3
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	f04f 0800 	mov.w	r8, #0
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f000 fbbf 	bl	80091b0 <_Bfree>
 8008a32:	2f00      	cmp	r7, #0
 8008a34:	f43f aea4 	beq.w	8008780 <_dtoa_r+0x6a0>
 8008a38:	f1b8 0f00 	cmp.w	r8, #0
 8008a3c:	d005      	beq.n	8008a4a <_dtoa_r+0x96a>
 8008a3e:	45b8      	cmp	r8, r7
 8008a40:	d003      	beq.n	8008a4a <_dtoa_r+0x96a>
 8008a42:	4641      	mov	r1, r8
 8008a44:	4620      	mov	r0, r4
 8008a46:	f000 fbb3 	bl	80091b0 <_Bfree>
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 fbaf 	bl	80091b0 <_Bfree>
 8008a52:	e695      	b.n	8008780 <_dtoa_r+0x6a0>
 8008a54:	2600      	movs	r6, #0
 8008a56:	4637      	mov	r7, r6
 8008a58:	e7e1      	b.n	8008a1e <_dtoa_r+0x93e>
 8008a5a:	9700      	str	r7, [sp, #0]
 8008a5c:	4637      	mov	r7, r6
 8008a5e:	e599      	b.n	8008594 <_dtoa_r+0x4b4>
 8008a60:	40240000 	.word	0x40240000
 8008a64:	9b08      	ldr	r3, [sp, #32]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 80ca 	beq.w	8008c00 <_dtoa_r+0xb20>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	9302      	str	r3, [sp, #8]
 8008a70:	2d00      	cmp	r5, #0
 8008a72:	dd05      	ble.n	8008a80 <_dtoa_r+0x9a0>
 8008a74:	4639      	mov	r1, r7
 8008a76:	462a      	mov	r2, r5
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f000 fd6b 	bl	8009554 <__lshift>
 8008a7e:	4607      	mov	r7, r0
 8008a80:	f1b8 0f00 	cmp.w	r8, #0
 8008a84:	d05b      	beq.n	8008b3e <_dtoa_r+0xa5e>
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fb51 	bl	8009130 <_Balloc>
 8008a8e:	4605      	mov	r5, r0
 8008a90:	b928      	cbnz	r0, 8008a9e <_dtoa_r+0x9be>
 8008a92:	4b87      	ldr	r3, [pc, #540]	; (8008cb0 <_dtoa_r+0xbd0>)
 8008a94:	4602      	mov	r2, r0
 8008a96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a9a:	f7ff bb3b 	b.w	8008114 <_dtoa_r+0x34>
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	3202      	adds	r2, #2
 8008aa2:	0092      	lsls	r2, r2, #2
 8008aa4:	f107 010c 	add.w	r1, r7, #12
 8008aa8:	300c      	adds	r0, #12
 8008aaa:	f000 fb33 	bl	8009114 <memcpy>
 8008aae:	2201      	movs	r2, #1
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 fd4e 	bl	8009554 <__lshift>
 8008ab8:	9b01      	ldr	r3, [sp, #4]
 8008aba:	f103 0901 	add.w	r9, r3, #1
 8008abe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	9305      	str	r3, [sp, #20]
 8008ac6:	f00a 0301 	and.w	r3, sl, #1
 8008aca:	46b8      	mov	r8, r7
 8008acc:	9304      	str	r3, [sp, #16]
 8008ace:	4607      	mov	r7, r0
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	ee18 0a10 	vmov	r0, s16
 8008ad6:	f7ff fa75 	bl	8007fc4 <quorem>
 8008ada:	4641      	mov	r1, r8
 8008adc:	9002      	str	r0, [sp, #8]
 8008ade:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ae2:	ee18 0a10 	vmov	r0, s16
 8008ae6:	f000 fda5 	bl	8009634 <__mcmp>
 8008aea:	463a      	mov	r2, r7
 8008aec:	9003      	str	r0, [sp, #12]
 8008aee:	4631      	mov	r1, r6
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fdbb 	bl	800966c <__mdiff>
 8008af6:	68c2      	ldr	r2, [r0, #12]
 8008af8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008afc:	4605      	mov	r5, r0
 8008afe:	bb02      	cbnz	r2, 8008b42 <_dtoa_r+0xa62>
 8008b00:	4601      	mov	r1, r0
 8008b02:	ee18 0a10 	vmov	r0, s16
 8008b06:	f000 fd95 	bl	8009634 <__mcmp>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	4620      	mov	r0, r4
 8008b10:	9207      	str	r2, [sp, #28]
 8008b12:	f000 fb4d 	bl	80091b0 <_Bfree>
 8008b16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b1a:	ea43 0102 	orr.w	r1, r3, r2
 8008b1e:	9b04      	ldr	r3, [sp, #16]
 8008b20:	430b      	orrs	r3, r1
 8008b22:	464d      	mov	r5, r9
 8008b24:	d10f      	bne.n	8008b46 <_dtoa_r+0xa66>
 8008b26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b2a:	d02a      	beq.n	8008b82 <_dtoa_r+0xaa2>
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	dd02      	ble.n	8008b38 <_dtoa_r+0xa58>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b38:	f88b a000 	strb.w	sl, [fp]
 8008b3c:	e775      	b.n	8008a2a <_dtoa_r+0x94a>
 8008b3e:	4638      	mov	r0, r7
 8008b40:	e7ba      	b.n	8008ab8 <_dtoa_r+0x9d8>
 8008b42:	2201      	movs	r2, #1
 8008b44:	e7e2      	b.n	8008b0c <_dtoa_r+0xa2c>
 8008b46:	9b03      	ldr	r3, [sp, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	db04      	blt.n	8008b56 <_dtoa_r+0xa76>
 8008b4c:	9906      	ldr	r1, [sp, #24]
 8008b4e:	430b      	orrs	r3, r1
 8008b50:	9904      	ldr	r1, [sp, #16]
 8008b52:	430b      	orrs	r3, r1
 8008b54:	d122      	bne.n	8008b9c <_dtoa_r+0xabc>
 8008b56:	2a00      	cmp	r2, #0
 8008b58:	ddee      	ble.n	8008b38 <_dtoa_r+0xa58>
 8008b5a:	ee18 1a10 	vmov	r1, s16
 8008b5e:	2201      	movs	r2, #1
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 fcf7 	bl	8009554 <__lshift>
 8008b66:	4631      	mov	r1, r6
 8008b68:	ee08 0a10 	vmov	s16, r0
 8008b6c:	f000 fd62 	bl	8009634 <__mcmp>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	dc03      	bgt.n	8008b7c <_dtoa_r+0xa9c>
 8008b74:	d1e0      	bne.n	8008b38 <_dtoa_r+0xa58>
 8008b76:	f01a 0f01 	tst.w	sl, #1
 8008b7a:	d0dd      	beq.n	8008b38 <_dtoa_r+0xa58>
 8008b7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b80:	d1d7      	bne.n	8008b32 <_dtoa_r+0xa52>
 8008b82:	2339      	movs	r3, #57	; 0x39
 8008b84:	f88b 3000 	strb.w	r3, [fp]
 8008b88:	462b      	mov	r3, r5
 8008b8a:	461d      	mov	r5, r3
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b92:	2a39      	cmp	r2, #57	; 0x39
 8008b94:	d071      	beq.n	8008c7a <_dtoa_r+0xb9a>
 8008b96:	3201      	adds	r2, #1
 8008b98:	701a      	strb	r2, [r3, #0]
 8008b9a:	e746      	b.n	8008a2a <_dtoa_r+0x94a>
 8008b9c:	2a00      	cmp	r2, #0
 8008b9e:	dd07      	ble.n	8008bb0 <_dtoa_r+0xad0>
 8008ba0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ba4:	d0ed      	beq.n	8008b82 <_dtoa_r+0xaa2>
 8008ba6:	f10a 0301 	add.w	r3, sl, #1
 8008baa:	f88b 3000 	strb.w	r3, [fp]
 8008bae:	e73c      	b.n	8008a2a <_dtoa_r+0x94a>
 8008bb0:	9b05      	ldr	r3, [sp, #20]
 8008bb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008bb6:	4599      	cmp	r9, r3
 8008bb8:	d047      	beq.n	8008c4a <_dtoa_r+0xb6a>
 8008bba:	ee18 1a10 	vmov	r1, s16
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	220a      	movs	r2, #10
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f000 fb16 	bl	80091f4 <__multadd>
 8008bc8:	45b8      	cmp	r8, r7
 8008bca:	ee08 0a10 	vmov	s16, r0
 8008bce:	f04f 0300 	mov.w	r3, #0
 8008bd2:	f04f 020a 	mov.w	r2, #10
 8008bd6:	4641      	mov	r1, r8
 8008bd8:	4620      	mov	r0, r4
 8008bda:	d106      	bne.n	8008bea <_dtoa_r+0xb0a>
 8008bdc:	f000 fb0a 	bl	80091f4 <__multadd>
 8008be0:	4680      	mov	r8, r0
 8008be2:	4607      	mov	r7, r0
 8008be4:	f109 0901 	add.w	r9, r9, #1
 8008be8:	e772      	b.n	8008ad0 <_dtoa_r+0x9f0>
 8008bea:	f000 fb03 	bl	80091f4 <__multadd>
 8008bee:	4639      	mov	r1, r7
 8008bf0:	4680      	mov	r8, r0
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	220a      	movs	r2, #10
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 fafc 	bl	80091f4 <__multadd>
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	e7f1      	b.n	8008be4 <_dtoa_r+0xb04>
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	9302      	str	r3, [sp, #8]
 8008c04:	9d01      	ldr	r5, [sp, #4]
 8008c06:	ee18 0a10 	vmov	r0, s16
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	f7ff f9da 	bl	8007fc4 <quorem>
 8008c10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c14:	9b01      	ldr	r3, [sp, #4]
 8008c16:	f805 ab01 	strb.w	sl, [r5], #1
 8008c1a:	1aea      	subs	r2, r5, r3
 8008c1c:	9b02      	ldr	r3, [sp, #8]
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	dd09      	ble.n	8008c36 <_dtoa_r+0xb56>
 8008c22:	ee18 1a10 	vmov	r1, s16
 8008c26:	2300      	movs	r3, #0
 8008c28:	220a      	movs	r2, #10
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 fae2 	bl	80091f4 <__multadd>
 8008c30:	ee08 0a10 	vmov	s16, r0
 8008c34:	e7e7      	b.n	8008c06 <_dtoa_r+0xb26>
 8008c36:	9b02      	ldr	r3, [sp, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfc8      	it	gt
 8008c3c:	461d      	movgt	r5, r3
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	bfd8      	it	le
 8008c42:	2501      	movle	r5, #1
 8008c44:	441d      	add	r5, r3
 8008c46:	f04f 0800 	mov.w	r8, #0
 8008c4a:	ee18 1a10 	vmov	r1, s16
 8008c4e:	2201      	movs	r2, #1
 8008c50:	4620      	mov	r0, r4
 8008c52:	f000 fc7f 	bl	8009554 <__lshift>
 8008c56:	4631      	mov	r1, r6
 8008c58:	ee08 0a10 	vmov	s16, r0
 8008c5c:	f000 fcea 	bl	8009634 <__mcmp>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	dc91      	bgt.n	8008b88 <_dtoa_r+0xaa8>
 8008c64:	d102      	bne.n	8008c6c <_dtoa_r+0xb8c>
 8008c66:	f01a 0f01 	tst.w	sl, #1
 8008c6a:	d18d      	bne.n	8008b88 <_dtoa_r+0xaa8>
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	461d      	mov	r5, r3
 8008c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c74:	2a30      	cmp	r2, #48	; 0x30
 8008c76:	d0fa      	beq.n	8008c6e <_dtoa_r+0xb8e>
 8008c78:	e6d7      	b.n	8008a2a <_dtoa_r+0x94a>
 8008c7a:	9a01      	ldr	r2, [sp, #4]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d184      	bne.n	8008b8a <_dtoa_r+0xaaa>
 8008c80:	9b00      	ldr	r3, [sp, #0]
 8008c82:	3301      	adds	r3, #1
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	2331      	movs	r3, #49	; 0x31
 8008c88:	7013      	strb	r3, [r2, #0]
 8008c8a:	e6ce      	b.n	8008a2a <_dtoa_r+0x94a>
 8008c8c:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <_dtoa_r+0xbd4>)
 8008c8e:	f7ff ba95 	b.w	80081bc <_dtoa_r+0xdc>
 8008c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f47f aa6e 	bne.w	8008176 <_dtoa_r+0x96>
 8008c9a:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <_dtoa_r+0xbd8>)
 8008c9c:	f7ff ba8e 	b.w	80081bc <_dtoa_r+0xdc>
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dcae      	bgt.n	8008c04 <_dtoa_r+0xb24>
 8008ca6:	9b06      	ldr	r3, [sp, #24]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	f73f aea8 	bgt.w	80089fe <_dtoa_r+0x91e>
 8008cae:	e7a9      	b.n	8008c04 <_dtoa_r+0xb24>
 8008cb0:	0800a1b7 	.word	0x0800a1b7
 8008cb4:	0800a114 	.word	0x0800a114
 8008cb8:	0800a138 	.word	0x0800a138

08008cbc <__sflush_r>:
 8008cbc:	898a      	ldrh	r2, [r1, #12]
 8008cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	0710      	lsls	r0, r2, #28
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	d458      	bmi.n	8008d7c <__sflush_r+0xc0>
 8008cca:	684b      	ldr	r3, [r1, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	dc05      	bgt.n	8008cdc <__sflush_r+0x20>
 8008cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dc02      	bgt.n	8008cdc <__sflush_r+0x20>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cde:	2e00      	cmp	r6, #0
 8008ce0:	d0f9      	beq.n	8008cd6 <__sflush_r+0x1a>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ce8:	682f      	ldr	r7, [r5, #0]
 8008cea:	602b      	str	r3, [r5, #0]
 8008cec:	d032      	beq.n	8008d54 <__sflush_r+0x98>
 8008cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	075a      	lsls	r2, r3, #29
 8008cf4:	d505      	bpl.n	8008d02 <__sflush_r+0x46>
 8008cf6:	6863      	ldr	r3, [r4, #4]
 8008cf8:	1ac0      	subs	r0, r0, r3
 8008cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cfc:	b10b      	cbz	r3, 8008d02 <__sflush_r+0x46>
 8008cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d00:	1ac0      	subs	r0, r0, r3
 8008d02:	2300      	movs	r3, #0
 8008d04:	4602      	mov	r2, r0
 8008d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d08:	6a21      	ldr	r1, [r4, #32]
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	47b0      	blx	r6
 8008d0e:	1c43      	adds	r3, r0, #1
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	d106      	bne.n	8008d22 <__sflush_r+0x66>
 8008d14:	6829      	ldr	r1, [r5, #0]
 8008d16:	291d      	cmp	r1, #29
 8008d18:	d82c      	bhi.n	8008d74 <__sflush_r+0xb8>
 8008d1a:	4a2a      	ldr	r2, [pc, #168]	; (8008dc4 <__sflush_r+0x108>)
 8008d1c:	40ca      	lsrs	r2, r1
 8008d1e:	07d6      	lsls	r6, r2, #31
 8008d20:	d528      	bpl.n	8008d74 <__sflush_r+0xb8>
 8008d22:	2200      	movs	r2, #0
 8008d24:	6062      	str	r2, [r4, #4]
 8008d26:	04d9      	lsls	r1, r3, #19
 8008d28:	6922      	ldr	r2, [r4, #16]
 8008d2a:	6022      	str	r2, [r4, #0]
 8008d2c:	d504      	bpl.n	8008d38 <__sflush_r+0x7c>
 8008d2e:	1c42      	adds	r2, r0, #1
 8008d30:	d101      	bne.n	8008d36 <__sflush_r+0x7a>
 8008d32:	682b      	ldr	r3, [r5, #0]
 8008d34:	b903      	cbnz	r3, 8008d38 <__sflush_r+0x7c>
 8008d36:	6560      	str	r0, [r4, #84]	; 0x54
 8008d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d3a:	602f      	str	r7, [r5, #0]
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d0ca      	beq.n	8008cd6 <__sflush_r+0x1a>
 8008d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d44:	4299      	cmp	r1, r3
 8008d46:	d002      	beq.n	8008d4e <__sflush_r+0x92>
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f000 fd8b 	bl	8009864 <_free_r>
 8008d4e:	2000      	movs	r0, #0
 8008d50:	6360      	str	r0, [r4, #52]	; 0x34
 8008d52:	e7c1      	b.n	8008cd8 <__sflush_r+0x1c>
 8008d54:	6a21      	ldr	r1, [r4, #32]
 8008d56:	2301      	movs	r3, #1
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b0      	blx	r6
 8008d5c:	1c41      	adds	r1, r0, #1
 8008d5e:	d1c7      	bne.n	8008cf0 <__sflush_r+0x34>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0c4      	beq.n	8008cf0 <__sflush_r+0x34>
 8008d66:	2b1d      	cmp	r3, #29
 8008d68:	d001      	beq.n	8008d6e <__sflush_r+0xb2>
 8008d6a:	2b16      	cmp	r3, #22
 8008d6c:	d101      	bne.n	8008d72 <__sflush_r+0xb6>
 8008d6e:	602f      	str	r7, [r5, #0]
 8008d70:	e7b1      	b.n	8008cd6 <__sflush_r+0x1a>
 8008d72:	89a3      	ldrh	r3, [r4, #12]
 8008d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d78:	81a3      	strh	r3, [r4, #12]
 8008d7a:	e7ad      	b.n	8008cd8 <__sflush_r+0x1c>
 8008d7c:	690f      	ldr	r7, [r1, #16]
 8008d7e:	2f00      	cmp	r7, #0
 8008d80:	d0a9      	beq.n	8008cd6 <__sflush_r+0x1a>
 8008d82:	0793      	lsls	r3, r2, #30
 8008d84:	680e      	ldr	r6, [r1, #0]
 8008d86:	bf08      	it	eq
 8008d88:	694b      	ldreq	r3, [r1, #20]
 8008d8a:	600f      	str	r7, [r1, #0]
 8008d8c:	bf18      	it	ne
 8008d8e:	2300      	movne	r3, #0
 8008d90:	eba6 0807 	sub.w	r8, r6, r7
 8008d94:	608b      	str	r3, [r1, #8]
 8008d96:	f1b8 0f00 	cmp.w	r8, #0
 8008d9a:	dd9c      	ble.n	8008cd6 <__sflush_r+0x1a>
 8008d9c:	6a21      	ldr	r1, [r4, #32]
 8008d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008da0:	4643      	mov	r3, r8
 8008da2:	463a      	mov	r2, r7
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b0      	blx	r6
 8008da8:	2800      	cmp	r0, #0
 8008daa:	dc06      	bgt.n	8008dba <__sflush_r+0xfe>
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db2:	81a3      	strh	r3, [r4, #12]
 8008db4:	f04f 30ff 	mov.w	r0, #4294967295
 8008db8:	e78e      	b.n	8008cd8 <__sflush_r+0x1c>
 8008dba:	4407      	add	r7, r0
 8008dbc:	eba8 0800 	sub.w	r8, r8, r0
 8008dc0:	e7e9      	b.n	8008d96 <__sflush_r+0xda>
 8008dc2:	bf00      	nop
 8008dc4:	20400001 	.word	0x20400001

08008dc8 <_fflush_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	690b      	ldr	r3, [r1, #16]
 8008dcc:	4605      	mov	r5, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	b913      	cbnz	r3, 8008dd8 <_fflush_r+0x10>
 8008dd2:	2500      	movs	r5, #0
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	bd38      	pop	{r3, r4, r5, pc}
 8008dd8:	b118      	cbz	r0, 8008de2 <_fflush_r+0x1a>
 8008dda:	6983      	ldr	r3, [r0, #24]
 8008ddc:	b90b      	cbnz	r3, 8008de2 <_fflush_r+0x1a>
 8008dde:	f000 f887 	bl	8008ef0 <__sinit>
 8008de2:	4b14      	ldr	r3, [pc, #80]	; (8008e34 <_fflush_r+0x6c>)
 8008de4:	429c      	cmp	r4, r3
 8008de6:	d11b      	bne.n	8008e20 <_fflush_r+0x58>
 8008de8:	686c      	ldr	r4, [r5, #4]
 8008dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0ef      	beq.n	8008dd2 <_fflush_r+0xa>
 8008df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008df4:	07d0      	lsls	r0, r2, #31
 8008df6:	d404      	bmi.n	8008e02 <_fflush_r+0x3a>
 8008df8:	0599      	lsls	r1, r3, #22
 8008dfa:	d402      	bmi.n	8008e02 <_fflush_r+0x3a>
 8008dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dfe:	f000 f91a 	bl	8009036 <__retarget_lock_acquire_recursive>
 8008e02:	4628      	mov	r0, r5
 8008e04:	4621      	mov	r1, r4
 8008e06:	f7ff ff59 	bl	8008cbc <__sflush_r>
 8008e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e0c:	07da      	lsls	r2, r3, #31
 8008e0e:	4605      	mov	r5, r0
 8008e10:	d4e0      	bmi.n	8008dd4 <_fflush_r+0xc>
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	059b      	lsls	r3, r3, #22
 8008e16:	d4dd      	bmi.n	8008dd4 <_fflush_r+0xc>
 8008e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e1a:	f000 f90d 	bl	8009038 <__retarget_lock_release_recursive>
 8008e1e:	e7d9      	b.n	8008dd4 <_fflush_r+0xc>
 8008e20:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <_fflush_r+0x70>)
 8008e22:	429c      	cmp	r4, r3
 8008e24:	d101      	bne.n	8008e2a <_fflush_r+0x62>
 8008e26:	68ac      	ldr	r4, [r5, #8]
 8008e28:	e7df      	b.n	8008dea <_fflush_r+0x22>
 8008e2a:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <_fflush_r+0x74>)
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	bf08      	it	eq
 8008e30:	68ec      	ldreq	r4, [r5, #12]
 8008e32:	e7da      	b.n	8008dea <_fflush_r+0x22>
 8008e34:	0800a1e8 	.word	0x0800a1e8
 8008e38:	0800a208 	.word	0x0800a208
 8008e3c:	0800a1c8 	.word	0x0800a1c8

08008e40 <std>:
 8008e40:	2300      	movs	r3, #0
 8008e42:	b510      	push	{r4, lr}
 8008e44:	4604      	mov	r4, r0
 8008e46:	e9c0 3300 	strd	r3, r3, [r0]
 8008e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e4e:	6083      	str	r3, [r0, #8]
 8008e50:	8181      	strh	r1, [r0, #12]
 8008e52:	6643      	str	r3, [r0, #100]	; 0x64
 8008e54:	81c2      	strh	r2, [r0, #14]
 8008e56:	6183      	str	r3, [r0, #24]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	2208      	movs	r2, #8
 8008e5c:	305c      	adds	r0, #92	; 0x5c
 8008e5e:	f7fe fb09 	bl	8007474 <memset>
 8008e62:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <std+0x38>)
 8008e64:	6263      	str	r3, [r4, #36]	; 0x24
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <std+0x3c>)
 8008e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <std+0x40>)
 8008e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e6e:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <std+0x44>)
 8008e70:	6224      	str	r4, [r4, #32]
 8008e72:	6323      	str	r3, [r4, #48]	; 0x30
 8008e74:	bd10      	pop	{r4, pc}
 8008e76:	bf00      	nop
 8008e78:	08009cf9 	.word	0x08009cf9
 8008e7c:	08009d1b 	.word	0x08009d1b
 8008e80:	08009d53 	.word	0x08009d53
 8008e84:	08009d77 	.word	0x08009d77

08008e88 <_cleanup_r>:
 8008e88:	4901      	ldr	r1, [pc, #4]	; (8008e90 <_cleanup_r+0x8>)
 8008e8a:	f000 b8af 	b.w	8008fec <_fwalk_reent>
 8008e8e:	bf00      	nop
 8008e90:	08008dc9 	.word	0x08008dc9

08008e94 <__sfmoreglue>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	2268      	movs	r2, #104	; 0x68
 8008e98:	1e4d      	subs	r5, r1, #1
 8008e9a:	4355      	muls	r5, r2
 8008e9c:	460e      	mov	r6, r1
 8008e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ea2:	f000 fd4b 	bl	800993c <_malloc_r>
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	b140      	cbz	r0, 8008ebc <__sfmoreglue+0x28>
 8008eaa:	2100      	movs	r1, #0
 8008eac:	e9c0 1600 	strd	r1, r6, [r0]
 8008eb0:	300c      	adds	r0, #12
 8008eb2:	60a0      	str	r0, [r4, #8]
 8008eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008eb8:	f7fe fadc 	bl	8007474 <memset>
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}

08008ec0 <__sfp_lock_acquire>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	; (8008ec8 <__sfp_lock_acquire+0x8>)
 8008ec2:	f000 b8b8 	b.w	8009036 <__retarget_lock_acquire_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	2000073d 	.word	0x2000073d

08008ecc <__sfp_lock_release>:
 8008ecc:	4801      	ldr	r0, [pc, #4]	; (8008ed4 <__sfp_lock_release+0x8>)
 8008ece:	f000 b8b3 	b.w	8009038 <__retarget_lock_release_recursive>
 8008ed2:	bf00      	nop
 8008ed4:	2000073d 	.word	0x2000073d

08008ed8 <__sinit_lock_acquire>:
 8008ed8:	4801      	ldr	r0, [pc, #4]	; (8008ee0 <__sinit_lock_acquire+0x8>)
 8008eda:	f000 b8ac 	b.w	8009036 <__retarget_lock_acquire_recursive>
 8008ede:	bf00      	nop
 8008ee0:	2000073e 	.word	0x2000073e

08008ee4 <__sinit_lock_release>:
 8008ee4:	4801      	ldr	r0, [pc, #4]	; (8008eec <__sinit_lock_release+0x8>)
 8008ee6:	f000 b8a7 	b.w	8009038 <__retarget_lock_release_recursive>
 8008eea:	bf00      	nop
 8008eec:	2000073e 	.word	0x2000073e

08008ef0 <__sinit>:
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	f7ff fff0 	bl	8008ed8 <__sinit_lock_acquire>
 8008ef8:	69a3      	ldr	r3, [r4, #24]
 8008efa:	b11b      	cbz	r3, 8008f04 <__sinit+0x14>
 8008efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f00:	f7ff bff0 	b.w	8008ee4 <__sinit_lock_release>
 8008f04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f08:	6523      	str	r3, [r4, #80]	; 0x50
 8008f0a:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <__sinit+0x68>)
 8008f0c:	4a13      	ldr	r2, [pc, #76]	; (8008f5c <__sinit+0x6c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f12:	42a3      	cmp	r3, r4
 8008f14:	bf04      	itt	eq
 8008f16:	2301      	moveq	r3, #1
 8008f18:	61a3      	streq	r3, [r4, #24]
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 f820 	bl	8008f60 <__sfp>
 8008f20:	6060      	str	r0, [r4, #4]
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 f81c 	bl	8008f60 <__sfp>
 8008f28:	60a0      	str	r0, [r4, #8]
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 f818 	bl	8008f60 <__sfp>
 8008f30:	2200      	movs	r2, #0
 8008f32:	60e0      	str	r0, [r4, #12]
 8008f34:	2104      	movs	r1, #4
 8008f36:	6860      	ldr	r0, [r4, #4]
 8008f38:	f7ff ff82 	bl	8008e40 <std>
 8008f3c:	68a0      	ldr	r0, [r4, #8]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	2109      	movs	r1, #9
 8008f42:	f7ff ff7d 	bl	8008e40 <std>
 8008f46:	68e0      	ldr	r0, [r4, #12]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	2112      	movs	r1, #18
 8008f4c:	f7ff ff78 	bl	8008e40 <std>
 8008f50:	2301      	movs	r3, #1
 8008f52:	61a3      	str	r3, [r4, #24]
 8008f54:	e7d2      	b.n	8008efc <__sinit+0xc>
 8008f56:	bf00      	nop
 8008f58:	0800a100 	.word	0x0800a100
 8008f5c:	08008e89 	.word	0x08008e89

08008f60 <__sfp>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	4607      	mov	r7, r0
 8008f64:	f7ff ffac 	bl	8008ec0 <__sfp_lock_acquire>
 8008f68:	4b1e      	ldr	r3, [pc, #120]	; (8008fe4 <__sfp+0x84>)
 8008f6a:	681e      	ldr	r6, [r3, #0]
 8008f6c:	69b3      	ldr	r3, [r6, #24]
 8008f6e:	b913      	cbnz	r3, 8008f76 <__sfp+0x16>
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7ff ffbd 	bl	8008ef0 <__sinit>
 8008f76:	3648      	adds	r6, #72	; 0x48
 8008f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	d503      	bpl.n	8008f88 <__sfp+0x28>
 8008f80:	6833      	ldr	r3, [r6, #0]
 8008f82:	b30b      	cbz	r3, 8008fc8 <__sfp+0x68>
 8008f84:	6836      	ldr	r6, [r6, #0]
 8008f86:	e7f7      	b.n	8008f78 <__sfp+0x18>
 8008f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f8c:	b9d5      	cbnz	r5, 8008fc4 <__sfp+0x64>
 8008f8e:	4b16      	ldr	r3, [pc, #88]	; (8008fe8 <__sfp+0x88>)
 8008f90:	60e3      	str	r3, [r4, #12]
 8008f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f96:	6665      	str	r5, [r4, #100]	; 0x64
 8008f98:	f000 f84c 	bl	8009034 <__retarget_lock_init_recursive>
 8008f9c:	f7ff ff96 	bl	8008ecc <__sfp_lock_release>
 8008fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008fa8:	6025      	str	r5, [r4, #0]
 8008faa:	61a5      	str	r5, [r4, #24]
 8008fac:	2208      	movs	r2, #8
 8008fae:	4629      	mov	r1, r5
 8008fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fb4:	f7fe fa5e 	bl	8007474 <memset>
 8008fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fc4:	3468      	adds	r4, #104	; 0x68
 8008fc6:	e7d9      	b.n	8008f7c <__sfp+0x1c>
 8008fc8:	2104      	movs	r1, #4
 8008fca:	4638      	mov	r0, r7
 8008fcc:	f7ff ff62 	bl	8008e94 <__sfmoreglue>
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	6030      	str	r0, [r6, #0]
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d1d5      	bne.n	8008f84 <__sfp+0x24>
 8008fd8:	f7ff ff78 	bl	8008ecc <__sfp_lock_release>
 8008fdc:	230c      	movs	r3, #12
 8008fde:	603b      	str	r3, [r7, #0]
 8008fe0:	e7ee      	b.n	8008fc0 <__sfp+0x60>
 8008fe2:	bf00      	nop
 8008fe4:	0800a100 	.word	0x0800a100
 8008fe8:	ffff0001 	.word	0xffff0001

08008fec <_fwalk_reent>:
 8008fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	4688      	mov	r8, r1
 8008ff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ff8:	2700      	movs	r7, #0
 8008ffa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ffe:	f1b9 0901 	subs.w	r9, r9, #1
 8009002:	d505      	bpl.n	8009010 <_fwalk_reent+0x24>
 8009004:	6824      	ldr	r4, [r4, #0]
 8009006:	2c00      	cmp	r4, #0
 8009008:	d1f7      	bne.n	8008ffa <_fwalk_reent+0xe>
 800900a:	4638      	mov	r0, r7
 800900c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009010:	89ab      	ldrh	r3, [r5, #12]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d907      	bls.n	8009026 <_fwalk_reent+0x3a>
 8009016:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800901a:	3301      	adds	r3, #1
 800901c:	d003      	beq.n	8009026 <_fwalk_reent+0x3a>
 800901e:	4629      	mov	r1, r5
 8009020:	4630      	mov	r0, r6
 8009022:	47c0      	blx	r8
 8009024:	4307      	orrs	r7, r0
 8009026:	3568      	adds	r5, #104	; 0x68
 8009028:	e7e9      	b.n	8008ffe <_fwalk_reent+0x12>
	...

0800902c <_localeconv_r>:
 800902c:	4800      	ldr	r0, [pc, #0]	; (8009030 <_localeconv_r+0x4>)
 800902e:	4770      	bx	lr
 8009030:	20000168 	.word	0x20000168

08009034 <__retarget_lock_init_recursive>:
 8009034:	4770      	bx	lr

08009036 <__retarget_lock_acquire_recursive>:
 8009036:	4770      	bx	lr

08009038 <__retarget_lock_release_recursive>:
 8009038:	4770      	bx	lr

0800903a <__swhatbuf_r>:
 800903a:	b570      	push	{r4, r5, r6, lr}
 800903c:	460e      	mov	r6, r1
 800903e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009042:	2900      	cmp	r1, #0
 8009044:	b096      	sub	sp, #88	; 0x58
 8009046:	4614      	mov	r4, r2
 8009048:	461d      	mov	r5, r3
 800904a:	da08      	bge.n	800905e <__swhatbuf_r+0x24>
 800904c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	602a      	str	r2, [r5, #0]
 8009054:	061a      	lsls	r2, r3, #24
 8009056:	d410      	bmi.n	800907a <__swhatbuf_r+0x40>
 8009058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800905c:	e00e      	b.n	800907c <__swhatbuf_r+0x42>
 800905e:	466a      	mov	r2, sp
 8009060:	f000 fee0 	bl	8009e24 <_fstat_r>
 8009064:	2800      	cmp	r0, #0
 8009066:	dbf1      	blt.n	800904c <__swhatbuf_r+0x12>
 8009068:	9a01      	ldr	r2, [sp, #4]
 800906a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800906e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009072:	425a      	negs	r2, r3
 8009074:	415a      	adcs	r2, r3
 8009076:	602a      	str	r2, [r5, #0]
 8009078:	e7ee      	b.n	8009058 <__swhatbuf_r+0x1e>
 800907a:	2340      	movs	r3, #64	; 0x40
 800907c:	2000      	movs	r0, #0
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	b016      	add	sp, #88	; 0x58
 8009082:	bd70      	pop	{r4, r5, r6, pc}

08009084 <__smakebuf_r>:
 8009084:	898b      	ldrh	r3, [r1, #12]
 8009086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009088:	079d      	lsls	r5, r3, #30
 800908a:	4606      	mov	r6, r0
 800908c:	460c      	mov	r4, r1
 800908e:	d507      	bpl.n	80090a0 <__smakebuf_r+0x1c>
 8009090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	6123      	str	r3, [r4, #16]
 8009098:	2301      	movs	r3, #1
 800909a:	6163      	str	r3, [r4, #20]
 800909c:	b002      	add	sp, #8
 800909e:	bd70      	pop	{r4, r5, r6, pc}
 80090a0:	ab01      	add	r3, sp, #4
 80090a2:	466a      	mov	r2, sp
 80090a4:	f7ff ffc9 	bl	800903a <__swhatbuf_r>
 80090a8:	9900      	ldr	r1, [sp, #0]
 80090aa:	4605      	mov	r5, r0
 80090ac:	4630      	mov	r0, r6
 80090ae:	f000 fc45 	bl	800993c <_malloc_r>
 80090b2:	b948      	cbnz	r0, 80090c8 <__smakebuf_r+0x44>
 80090b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b8:	059a      	lsls	r2, r3, #22
 80090ba:	d4ef      	bmi.n	800909c <__smakebuf_r+0x18>
 80090bc:	f023 0303 	bic.w	r3, r3, #3
 80090c0:	f043 0302 	orr.w	r3, r3, #2
 80090c4:	81a3      	strh	r3, [r4, #12]
 80090c6:	e7e3      	b.n	8009090 <__smakebuf_r+0xc>
 80090c8:	4b0d      	ldr	r3, [pc, #52]	; (8009100 <__smakebuf_r+0x7c>)
 80090ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	6020      	str	r0, [r4, #0]
 80090d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d4:	81a3      	strh	r3, [r4, #12]
 80090d6:	9b00      	ldr	r3, [sp, #0]
 80090d8:	6163      	str	r3, [r4, #20]
 80090da:	9b01      	ldr	r3, [sp, #4]
 80090dc:	6120      	str	r0, [r4, #16]
 80090de:	b15b      	cbz	r3, 80090f8 <__smakebuf_r+0x74>
 80090e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090e4:	4630      	mov	r0, r6
 80090e6:	f000 feaf 	bl	8009e48 <_isatty_r>
 80090ea:	b128      	cbz	r0, 80090f8 <__smakebuf_r+0x74>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f023 0303 	bic.w	r3, r3, #3
 80090f2:	f043 0301 	orr.w	r3, r3, #1
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	89a0      	ldrh	r0, [r4, #12]
 80090fa:	4305      	orrs	r5, r0
 80090fc:	81a5      	strh	r5, [r4, #12]
 80090fe:	e7cd      	b.n	800909c <__smakebuf_r+0x18>
 8009100:	08008e89 	.word	0x08008e89

08009104 <malloc>:
 8009104:	4b02      	ldr	r3, [pc, #8]	; (8009110 <malloc+0xc>)
 8009106:	4601      	mov	r1, r0
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	f000 bc17 	b.w	800993c <_malloc_r>
 800910e:	bf00      	nop
 8009110:	20000014 	.word	0x20000014

08009114 <memcpy>:
 8009114:	440a      	add	r2, r1
 8009116:	4291      	cmp	r1, r2
 8009118:	f100 33ff 	add.w	r3, r0, #4294967295
 800911c:	d100      	bne.n	8009120 <memcpy+0xc>
 800911e:	4770      	bx	lr
 8009120:	b510      	push	{r4, lr}
 8009122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800912a:	4291      	cmp	r1, r2
 800912c:	d1f9      	bne.n	8009122 <memcpy+0xe>
 800912e:	bd10      	pop	{r4, pc}

08009130 <_Balloc>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009134:	4604      	mov	r4, r0
 8009136:	460d      	mov	r5, r1
 8009138:	b976      	cbnz	r6, 8009158 <_Balloc+0x28>
 800913a:	2010      	movs	r0, #16
 800913c:	f7ff ffe2 	bl	8009104 <malloc>
 8009140:	4602      	mov	r2, r0
 8009142:	6260      	str	r0, [r4, #36]	; 0x24
 8009144:	b920      	cbnz	r0, 8009150 <_Balloc+0x20>
 8009146:	4b18      	ldr	r3, [pc, #96]	; (80091a8 <_Balloc+0x78>)
 8009148:	4818      	ldr	r0, [pc, #96]	; (80091ac <_Balloc+0x7c>)
 800914a:	2166      	movs	r1, #102	; 0x66
 800914c:	f000 fe2a 	bl	8009da4 <__assert_func>
 8009150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009154:	6006      	str	r6, [r0, #0]
 8009156:	60c6      	str	r6, [r0, #12]
 8009158:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800915a:	68f3      	ldr	r3, [r6, #12]
 800915c:	b183      	cbz	r3, 8009180 <_Balloc+0x50>
 800915e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009166:	b9b8      	cbnz	r0, 8009198 <_Balloc+0x68>
 8009168:	2101      	movs	r1, #1
 800916a:	fa01 f605 	lsl.w	r6, r1, r5
 800916e:	1d72      	adds	r2, r6, #5
 8009170:	0092      	lsls	r2, r2, #2
 8009172:	4620      	mov	r0, r4
 8009174:	f000 fb60 	bl	8009838 <_calloc_r>
 8009178:	b160      	cbz	r0, 8009194 <_Balloc+0x64>
 800917a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800917e:	e00e      	b.n	800919e <_Balloc+0x6e>
 8009180:	2221      	movs	r2, #33	; 0x21
 8009182:	2104      	movs	r1, #4
 8009184:	4620      	mov	r0, r4
 8009186:	f000 fb57 	bl	8009838 <_calloc_r>
 800918a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800918c:	60f0      	str	r0, [r6, #12]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e4      	bne.n	800915e <_Balloc+0x2e>
 8009194:	2000      	movs	r0, #0
 8009196:	bd70      	pop	{r4, r5, r6, pc}
 8009198:	6802      	ldr	r2, [r0, #0]
 800919a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800919e:	2300      	movs	r3, #0
 80091a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091a4:	e7f7      	b.n	8009196 <_Balloc+0x66>
 80091a6:	bf00      	nop
 80091a8:	0800a145 	.word	0x0800a145
 80091ac:	0800a228 	.word	0x0800a228

080091b0 <_Bfree>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091b4:	4605      	mov	r5, r0
 80091b6:	460c      	mov	r4, r1
 80091b8:	b976      	cbnz	r6, 80091d8 <_Bfree+0x28>
 80091ba:	2010      	movs	r0, #16
 80091bc:	f7ff ffa2 	bl	8009104 <malloc>
 80091c0:	4602      	mov	r2, r0
 80091c2:	6268      	str	r0, [r5, #36]	; 0x24
 80091c4:	b920      	cbnz	r0, 80091d0 <_Bfree+0x20>
 80091c6:	4b09      	ldr	r3, [pc, #36]	; (80091ec <_Bfree+0x3c>)
 80091c8:	4809      	ldr	r0, [pc, #36]	; (80091f0 <_Bfree+0x40>)
 80091ca:	218a      	movs	r1, #138	; 0x8a
 80091cc:	f000 fdea 	bl	8009da4 <__assert_func>
 80091d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091d4:	6006      	str	r6, [r0, #0]
 80091d6:	60c6      	str	r6, [r0, #12]
 80091d8:	b13c      	cbz	r4, 80091ea <_Bfree+0x3a>
 80091da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80091dc:	6862      	ldr	r2, [r4, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091e4:	6021      	str	r1, [r4, #0]
 80091e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	0800a145 	.word	0x0800a145
 80091f0:	0800a228 	.word	0x0800a228

080091f4 <__multadd>:
 80091f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f8:	690d      	ldr	r5, [r1, #16]
 80091fa:	4607      	mov	r7, r0
 80091fc:	460c      	mov	r4, r1
 80091fe:	461e      	mov	r6, r3
 8009200:	f101 0c14 	add.w	ip, r1, #20
 8009204:	2000      	movs	r0, #0
 8009206:	f8dc 3000 	ldr.w	r3, [ip]
 800920a:	b299      	uxth	r1, r3
 800920c:	fb02 6101 	mla	r1, r2, r1, r6
 8009210:	0c1e      	lsrs	r6, r3, #16
 8009212:	0c0b      	lsrs	r3, r1, #16
 8009214:	fb02 3306 	mla	r3, r2, r6, r3
 8009218:	b289      	uxth	r1, r1
 800921a:	3001      	adds	r0, #1
 800921c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009220:	4285      	cmp	r5, r0
 8009222:	f84c 1b04 	str.w	r1, [ip], #4
 8009226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800922a:	dcec      	bgt.n	8009206 <__multadd+0x12>
 800922c:	b30e      	cbz	r6, 8009272 <__multadd+0x7e>
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	42ab      	cmp	r3, r5
 8009232:	dc19      	bgt.n	8009268 <__multadd+0x74>
 8009234:	6861      	ldr	r1, [r4, #4]
 8009236:	4638      	mov	r0, r7
 8009238:	3101      	adds	r1, #1
 800923a:	f7ff ff79 	bl	8009130 <_Balloc>
 800923e:	4680      	mov	r8, r0
 8009240:	b928      	cbnz	r0, 800924e <__multadd+0x5a>
 8009242:	4602      	mov	r2, r0
 8009244:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <__multadd+0x84>)
 8009246:	480d      	ldr	r0, [pc, #52]	; (800927c <__multadd+0x88>)
 8009248:	21b5      	movs	r1, #181	; 0xb5
 800924a:	f000 fdab 	bl	8009da4 <__assert_func>
 800924e:	6922      	ldr	r2, [r4, #16]
 8009250:	3202      	adds	r2, #2
 8009252:	f104 010c 	add.w	r1, r4, #12
 8009256:	0092      	lsls	r2, r2, #2
 8009258:	300c      	adds	r0, #12
 800925a:	f7ff ff5b 	bl	8009114 <memcpy>
 800925e:	4621      	mov	r1, r4
 8009260:	4638      	mov	r0, r7
 8009262:	f7ff ffa5 	bl	80091b0 <_Bfree>
 8009266:	4644      	mov	r4, r8
 8009268:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800926c:	3501      	adds	r5, #1
 800926e:	615e      	str	r6, [r3, #20]
 8009270:	6125      	str	r5, [r4, #16]
 8009272:	4620      	mov	r0, r4
 8009274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009278:	0800a1b7 	.word	0x0800a1b7
 800927c:	0800a228 	.word	0x0800a228

08009280 <__hi0bits>:
 8009280:	0c03      	lsrs	r3, r0, #16
 8009282:	041b      	lsls	r3, r3, #16
 8009284:	b9d3      	cbnz	r3, 80092bc <__hi0bits+0x3c>
 8009286:	0400      	lsls	r0, r0, #16
 8009288:	2310      	movs	r3, #16
 800928a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800928e:	bf04      	itt	eq
 8009290:	0200      	lsleq	r0, r0, #8
 8009292:	3308      	addeq	r3, #8
 8009294:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009298:	bf04      	itt	eq
 800929a:	0100      	lsleq	r0, r0, #4
 800929c:	3304      	addeq	r3, #4
 800929e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092a2:	bf04      	itt	eq
 80092a4:	0080      	lsleq	r0, r0, #2
 80092a6:	3302      	addeq	r3, #2
 80092a8:	2800      	cmp	r0, #0
 80092aa:	db05      	blt.n	80092b8 <__hi0bits+0x38>
 80092ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092b0:	f103 0301 	add.w	r3, r3, #1
 80092b4:	bf08      	it	eq
 80092b6:	2320      	moveq	r3, #32
 80092b8:	4618      	mov	r0, r3
 80092ba:	4770      	bx	lr
 80092bc:	2300      	movs	r3, #0
 80092be:	e7e4      	b.n	800928a <__hi0bits+0xa>

080092c0 <__lo0bits>:
 80092c0:	6803      	ldr	r3, [r0, #0]
 80092c2:	f013 0207 	ands.w	r2, r3, #7
 80092c6:	4601      	mov	r1, r0
 80092c8:	d00b      	beq.n	80092e2 <__lo0bits+0x22>
 80092ca:	07da      	lsls	r2, r3, #31
 80092cc:	d423      	bmi.n	8009316 <__lo0bits+0x56>
 80092ce:	0798      	lsls	r0, r3, #30
 80092d0:	bf49      	itett	mi
 80092d2:	085b      	lsrmi	r3, r3, #1
 80092d4:	089b      	lsrpl	r3, r3, #2
 80092d6:	2001      	movmi	r0, #1
 80092d8:	600b      	strmi	r3, [r1, #0]
 80092da:	bf5c      	itt	pl
 80092dc:	600b      	strpl	r3, [r1, #0]
 80092de:	2002      	movpl	r0, #2
 80092e0:	4770      	bx	lr
 80092e2:	b298      	uxth	r0, r3
 80092e4:	b9a8      	cbnz	r0, 8009312 <__lo0bits+0x52>
 80092e6:	0c1b      	lsrs	r3, r3, #16
 80092e8:	2010      	movs	r0, #16
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	b90a      	cbnz	r2, 80092f2 <__lo0bits+0x32>
 80092ee:	3008      	adds	r0, #8
 80092f0:	0a1b      	lsrs	r3, r3, #8
 80092f2:	071a      	lsls	r2, r3, #28
 80092f4:	bf04      	itt	eq
 80092f6:	091b      	lsreq	r3, r3, #4
 80092f8:	3004      	addeq	r0, #4
 80092fa:	079a      	lsls	r2, r3, #30
 80092fc:	bf04      	itt	eq
 80092fe:	089b      	lsreq	r3, r3, #2
 8009300:	3002      	addeq	r0, #2
 8009302:	07da      	lsls	r2, r3, #31
 8009304:	d403      	bmi.n	800930e <__lo0bits+0x4e>
 8009306:	085b      	lsrs	r3, r3, #1
 8009308:	f100 0001 	add.w	r0, r0, #1
 800930c:	d005      	beq.n	800931a <__lo0bits+0x5a>
 800930e:	600b      	str	r3, [r1, #0]
 8009310:	4770      	bx	lr
 8009312:	4610      	mov	r0, r2
 8009314:	e7e9      	b.n	80092ea <__lo0bits+0x2a>
 8009316:	2000      	movs	r0, #0
 8009318:	4770      	bx	lr
 800931a:	2020      	movs	r0, #32
 800931c:	4770      	bx	lr
	...

08009320 <__i2b>:
 8009320:	b510      	push	{r4, lr}
 8009322:	460c      	mov	r4, r1
 8009324:	2101      	movs	r1, #1
 8009326:	f7ff ff03 	bl	8009130 <_Balloc>
 800932a:	4602      	mov	r2, r0
 800932c:	b928      	cbnz	r0, 800933a <__i2b+0x1a>
 800932e:	4b05      	ldr	r3, [pc, #20]	; (8009344 <__i2b+0x24>)
 8009330:	4805      	ldr	r0, [pc, #20]	; (8009348 <__i2b+0x28>)
 8009332:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009336:	f000 fd35 	bl	8009da4 <__assert_func>
 800933a:	2301      	movs	r3, #1
 800933c:	6144      	str	r4, [r0, #20]
 800933e:	6103      	str	r3, [r0, #16]
 8009340:	bd10      	pop	{r4, pc}
 8009342:	bf00      	nop
 8009344:	0800a1b7 	.word	0x0800a1b7
 8009348:	0800a228 	.word	0x0800a228

0800934c <__multiply>:
 800934c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	4691      	mov	r9, r2
 8009352:	690a      	ldr	r2, [r1, #16]
 8009354:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009358:	429a      	cmp	r2, r3
 800935a:	bfb8      	it	lt
 800935c:	460b      	movlt	r3, r1
 800935e:	460c      	mov	r4, r1
 8009360:	bfbc      	itt	lt
 8009362:	464c      	movlt	r4, r9
 8009364:	4699      	movlt	r9, r3
 8009366:	6927      	ldr	r7, [r4, #16]
 8009368:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800936c:	68a3      	ldr	r3, [r4, #8]
 800936e:	6861      	ldr	r1, [r4, #4]
 8009370:	eb07 060a 	add.w	r6, r7, sl
 8009374:	42b3      	cmp	r3, r6
 8009376:	b085      	sub	sp, #20
 8009378:	bfb8      	it	lt
 800937a:	3101      	addlt	r1, #1
 800937c:	f7ff fed8 	bl	8009130 <_Balloc>
 8009380:	b930      	cbnz	r0, 8009390 <__multiply+0x44>
 8009382:	4602      	mov	r2, r0
 8009384:	4b44      	ldr	r3, [pc, #272]	; (8009498 <__multiply+0x14c>)
 8009386:	4845      	ldr	r0, [pc, #276]	; (800949c <__multiply+0x150>)
 8009388:	f240 115d 	movw	r1, #349	; 0x15d
 800938c:	f000 fd0a 	bl	8009da4 <__assert_func>
 8009390:	f100 0514 	add.w	r5, r0, #20
 8009394:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009398:	462b      	mov	r3, r5
 800939a:	2200      	movs	r2, #0
 800939c:	4543      	cmp	r3, r8
 800939e:	d321      	bcc.n	80093e4 <__multiply+0x98>
 80093a0:	f104 0314 	add.w	r3, r4, #20
 80093a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093a8:	f109 0314 	add.w	r3, r9, #20
 80093ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093b0:	9202      	str	r2, [sp, #8]
 80093b2:	1b3a      	subs	r2, r7, r4
 80093b4:	3a15      	subs	r2, #21
 80093b6:	f022 0203 	bic.w	r2, r2, #3
 80093ba:	3204      	adds	r2, #4
 80093bc:	f104 0115 	add.w	r1, r4, #21
 80093c0:	428f      	cmp	r7, r1
 80093c2:	bf38      	it	cc
 80093c4:	2204      	movcc	r2, #4
 80093c6:	9201      	str	r2, [sp, #4]
 80093c8:	9a02      	ldr	r2, [sp, #8]
 80093ca:	9303      	str	r3, [sp, #12]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d80c      	bhi.n	80093ea <__multiply+0x9e>
 80093d0:	2e00      	cmp	r6, #0
 80093d2:	dd03      	ble.n	80093dc <__multiply+0x90>
 80093d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d05a      	beq.n	8009492 <__multiply+0x146>
 80093dc:	6106      	str	r6, [r0, #16]
 80093de:	b005      	add	sp, #20
 80093e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e4:	f843 2b04 	str.w	r2, [r3], #4
 80093e8:	e7d8      	b.n	800939c <__multiply+0x50>
 80093ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80093ee:	f1ba 0f00 	cmp.w	sl, #0
 80093f2:	d024      	beq.n	800943e <__multiply+0xf2>
 80093f4:	f104 0e14 	add.w	lr, r4, #20
 80093f8:	46a9      	mov	r9, r5
 80093fa:	f04f 0c00 	mov.w	ip, #0
 80093fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009402:	f8d9 1000 	ldr.w	r1, [r9]
 8009406:	fa1f fb82 	uxth.w	fp, r2
 800940a:	b289      	uxth	r1, r1
 800940c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009410:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009414:	f8d9 2000 	ldr.w	r2, [r9]
 8009418:	4461      	add	r1, ip
 800941a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800941e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009422:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009426:	b289      	uxth	r1, r1
 8009428:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800942c:	4577      	cmp	r7, lr
 800942e:	f849 1b04 	str.w	r1, [r9], #4
 8009432:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009436:	d8e2      	bhi.n	80093fe <__multiply+0xb2>
 8009438:	9a01      	ldr	r2, [sp, #4]
 800943a:	f845 c002 	str.w	ip, [r5, r2]
 800943e:	9a03      	ldr	r2, [sp, #12]
 8009440:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009444:	3304      	adds	r3, #4
 8009446:	f1b9 0f00 	cmp.w	r9, #0
 800944a:	d020      	beq.n	800948e <__multiply+0x142>
 800944c:	6829      	ldr	r1, [r5, #0]
 800944e:	f104 0c14 	add.w	ip, r4, #20
 8009452:	46ae      	mov	lr, r5
 8009454:	f04f 0a00 	mov.w	sl, #0
 8009458:	f8bc b000 	ldrh.w	fp, [ip]
 800945c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009460:	fb09 220b 	mla	r2, r9, fp, r2
 8009464:	4492      	add	sl, r2
 8009466:	b289      	uxth	r1, r1
 8009468:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800946c:	f84e 1b04 	str.w	r1, [lr], #4
 8009470:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009474:	f8be 1000 	ldrh.w	r1, [lr]
 8009478:	0c12      	lsrs	r2, r2, #16
 800947a:	fb09 1102 	mla	r1, r9, r2, r1
 800947e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009482:	4567      	cmp	r7, ip
 8009484:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009488:	d8e6      	bhi.n	8009458 <__multiply+0x10c>
 800948a:	9a01      	ldr	r2, [sp, #4]
 800948c:	50a9      	str	r1, [r5, r2]
 800948e:	3504      	adds	r5, #4
 8009490:	e79a      	b.n	80093c8 <__multiply+0x7c>
 8009492:	3e01      	subs	r6, #1
 8009494:	e79c      	b.n	80093d0 <__multiply+0x84>
 8009496:	bf00      	nop
 8009498:	0800a1b7 	.word	0x0800a1b7
 800949c:	0800a228 	.word	0x0800a228

080094a0 <__pow5mult>:
 80094a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a4:	4615      	mov	r5, r2
 80094a6:	f012 0203 	ands.w	r2, r2, #3
 80094aa:	4606      	mov	r6, r0
 80094ac:	460f      	mov	r7, r1
 80094ae:	d007      	beq.n	80094c0 <__pow5mult+0x20>
 80094b0:	4c25      	ldr	r4, [pc, #148]	; (8009548 <__pow5mult+0xa8>)
 80094b2:	3a01      	subs	r2, #1
 80094b4:	2300      	movs	r3, #0
 80094b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094ba:	f7ff fe9b 	bl	80091f4 <__multadd>
 80094be:	4607      	mov	r7, r0
 80094c0:	10ad      	asrs	r5, r5, #2
 80094c2:	d03d      	beq.n	8009540 <__pow5mult+0xa0>
 80094c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094c6:	b97c      	cbnz	r4, 80094e8 <__pow5mult+0x48>
 80094c8:	2010      	movs	r0, #16
 80094ca:	f7ff fe1b 	bl	8009104 <malloc>
 80094ce:	4602      	mov	r2, r0
 80094d0:	6270      	str	r0, [r6, #36]	; 0x24
 80094d2:	b928      	cbnz	r0, 80094e0 <__pow5mult+0x40>
 80094d4:	4b1d      	ldr	r3, [pc, #116]	; (800954c <__pow5mult+0xac>)
 80094d6:	481e      	ldr	r0, [pc, #120]	; (8009550 <__pow5mult+0xb0>)
 80094d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80094dc:	f000 fc62 	bl	8009da4 <__assert_func>
 80094e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094e4:	6004      	str	r4, [r0, #0]
 80094e6:	60c4      	str	r4, [r0, #12]
 80094e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094f0:	b94c      	cbnz	r4, 8009506 <__pow5mult+0x66>
 80094f2:	f240 2171 	movw	r1, #625	; 0x271
 80094f6:	4630      	mov	r0, r6
 80094f8:	f7ff ff12 	bl	8009320 <__i2b>
 80094fc:	2300      	movs	r3, #0
 80094fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009502:	4604      	mov	r4, r0
 8009504:	6003      	str	r3, [r0, #0]
 8009506:	f04f 0900 	mov.w	r9, #0
 800950a:	07eb      	lsls	r3, r5, #31
 800950c:	d50a      	bpl.n	8009524 <__pow5mult+0x84>
 800950e:	4639      	mov	r1, r7
 8009510:	4622      	mov	r2, r4
 8009512:	4630      	mov	r0, r6
 8009514:	f7ff ff1a 	bl	800934c <__multiply>
 8009518:	4639      	mov	r1, r7
 800951a:	4680      	mov	r8, r0
 800951c:	4630      	mov	r0, r6
 800951e:	f7ff fe47 	bl	80091b0 <_Bfree>
 8009522:	4647      	mov	r7, r8
 8009524:	106d      	asrs	r5, r5, #1
 8009526:	d00b      	beq.n	8009540 <__pow5mult+0xa0>
 8009528:	6820      	ldr	r0, [r4, #0]
 800952a:	b938      	cbnz	r0, 800953c <__pow5mult+0x9c>
 800952c:	4622      	mov	r2, r4
 800952e:	4621      	mov	r1, r4
 8009530:	4630      	mov	r0, r6
 8009532:	f7ff ff0b 	bl	800934c <__multiply>
 8009536:	6020      	str	r0, [r4, #0]
 8009538:	f8c0 9000 	str.w	r9, [r0]
 800953c:	4604      	mov	r4, r0
 800953e:	e7e4      	b.n	800950a <__pow5mult+0x6a>
 8009540:	4638      	mov	r0, r7
 8009542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009546:	bf00      	nop
 8009548:	0800a378 	.word	0x0800a378
 800954c:	0800a145 	.word	0x0800a145
 8009550:	0800a228 	.word	0x0800a228

08009554 <__lshift>:
 8009554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009558:	460c      	mov	r4, r1
 800955a:	6849      	ldr	r1, [r1, #4]
 800955c:	6923      	ldr	r3, [r4, #16]
 800955e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009562:	68a3      	ldr	r3, [r4, #8]
 8009564:	4607      	mov	r7, r0
 8009566:	4691      	mov	r9, r2
 8009568:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800956c:	f108 0601 	add.w	r6, r8, #1
 8009570:	42b3      	cmp	r3, r6
 8009572:	db0b      	blt.n	800958c <__lshift+0x38>
 8009574:	4638      	mov	r0, r7
 8009576:	f7ff fddb 	bl	8009130 <_Balloc>
 800957a:	4605      	mov	r5, r0
 800957c:	b948      	cbnz	r0, 8009592 <__lshift+0x3e>
 800957e:	4602      	mov	r2, r0
 8009580:	4b2a      	ldr	r3, [pc, #168]	; (800962c <__lshift+0xd8>)
 8009582:	482b      	ldr	r0, [pc, #172]	; (8009630 <__lshift+0xdc>)
 8009584:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009588:	f000 fc0c 	bl	8009da4 <__assert_func>
 800958c:	3101      	adds	r1, #1
 800958e:	005b      	lsls	r3, r3, #1
 8009590:	e7ee      	b.n	8009570 <__lshift+0x1c>
 8009592:	2300      	movs	r3, #0
 8009594:	f100 0114 	add.w	r1, r0, #20
 8009598:	f100 0210 	add.w	r2, r0, #16
 800959c:	4618      	mov	r0, r3
 800959e:	4553      	cmp	r3, sl
 80095a0:	db37      	blt.n	8009612 <__lshift+0xbe>
 80095a2:	6920      	ldr	r0, [r4, #16]
 80095a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095a8:	f104 0314 	add.w	r3, r4, #20
 80095ac:	f019 091f 	ands.w	r9, r9, #31
 80095b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80095b8:	d02f      	beq.n	800961a <__lshift+0xc6>
 80095ba:	f1c9 0e20 	rsb	lr, r9, #32
 80095be:	468a      	mov	sl, r1
 80095c0:	f04f 0c00 	mov.w	ip, #0
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	fa02 f209 	lsl.w	r2, r2, r9
 80095ca:	ea42 020c 	orr.w	r2, r2, ip
 80095ce:	f84a 2b04 	str.w	r2, [sl], #4
 80095d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d6:	4298      	cmp	r0, r3
 80095d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80095dc:	d8f2      	bhi.n	80095c4 <__lshift+0x70>
 80095de:	1b03      	subs	r3, r0, r4
 80095e0:	3b15      	subs	r3, #21
 80095e2:	f023 0303 	bic.w	r3, r3, #3
 80095e6:	3304      	adds	r3, #4
 80095e8:	f104 0215 	add.w	r2, r4, #21
 80095ec:	4290      	cmp	r0, r2
 80095ee:	bf38      	it	cc
 80095f0:	2304      	movcc	r3, #4
 80095f2:	f841 c003 	str.w	ip, [r1, r3]
 80095f6:	f1bc 0f00 	cmp.w	ip, #0
 80095fa:	d001      	beq.n	8009600 <__lshift+0xac>
 80095fc:	f108 0602 	add.w	r6, r8, #2
 8009600:	3e01      	subs	r6, #1
 8009602:	4638      	mov	r0, r7
 8009604:	612e      	str	r6, [r5, #16]
 8009606:	4621      	mov	r1, r4
 8009608:	f7ff fdd2 	bl	80091b0 <_Bfree>
 800960c:	4628      	mov	r0, r5
 800960e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009612:	f842 0f04 	str.w	r0, [r2, #4]!
 8009616:	3301      	adds	r3, #1
 8009618:	e7c1      	b.n	800959e <__lshift+0x4a>
 800961a:	3904      	subs	r1, #4
 800961c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009620:	f841 2f04 	str.w	r2, [r1, #4]!
 8009624:	4298      	cmp	r0, r3
 8009626:	d8f9      	bhi.n	800961c <__lshift+0xc8>
 8009628:	e7ea      	b.n	8009600 <__lshift+0xac>
 800962a:	bf00      	nop
 800962c:	0800a1b7 	.word	0x0800a1b7
 8009630:	0800a228 	.word	0x0800a228

08009634 <__mcmp>:
 8009634:	b530      	push	{r4, r5, lr}
 8009636:	6902      	ldr	r2, [r0, #16]
 8009638:	690c      	ldr	r4, [r1, #16]
 800963a:	1b12      	subs	r2, r2, r4
 800963c:	d10e      	bne.n	800965c <__mcmp+0x28>
 800963e:	f100 0314 	add.w	r3, r0, #20
 8009642:	3114      	adds	r1, #20
 8009644:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009648:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800964c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009650:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009654:	42a5      	cmp	r5, r4
 8009656:	d003      	beq.n	8009660 <__mcmp+0x2c>
 8009658:	d305      	bcc.n	8009666 <__mcmp+0x32>
 800965a:	2201      	movs	r2, #1
 800965c:	4610      	mov	r0, r2
 800965e:	bd30      	pop	{r4, r5, pc}
 8009660:	4283      	cmp	r3, r0
 8009662:	d3f3      	bcc.n	800964c <__mcmp+0x18>
 8009664:	e7fa      	b.n	800965c <__mcmp+0x28>
 8009666:	f04f 32ff 	mov.w	r2, #4294967295
 800966a:	e7f7      	b.n	800965c <__mcmp+0x28>

0800966c <__mdiff>:
 800966c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009670:	460c      	mov	r4, r1
 8009672:	4606      	mov	r6, r0
 8009674:	4611      	mov	r1, r2
 8009676:	4620      	mov	r0, r4
 8009678:	4690      	mov	r8, r2
 800967a:	f7ff ffdb 	bl	8009634 <__mcmp>
 800967e:	1e05      	subs	r5, r0, #0
 8009680:	d110      	bne.n	80096a4 <__mdiff+0x38>
 8009682:	4629      	mov	r1, r5
 8009684:	4630      	mov	r0, r6
 8009686:	f7ff fd53 	bl	8009130 <_Balloc>
 800968a:	b930      	cbnz	r0, 800969a <__mdiff+0x2e>
 800968c:	4b3a      	ldr	r3, [pc, #232]	; (8009778 <__mdiff+0x10c>)
 800968e:	4602      	mov	r2, r0
 8009690:	f240 2132 	movw	r1, #562	; 0x232
 8009694:	4839      	ldr	r0, [pc, #228]	; (800977c <__mdiff+0x110>)
 8009696:	f000 fb85 	bl	8009da4 <__assert_func>
 800969a:	2301      	movs	r3, #1
 800969c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a4:	bfa4      	itt	ge
 80096a6:	4643      	movge	r3, r8
 80096a8:	46a0      	movge	r8, r4
 80096aa:	4630      	mov	r0, r6
 80096ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096b0:	bfa6      	itte	ge
 80096b2:	461c      	movge	r4, r3
 80096b4:	2500      	movge	r5, #0
 80096b6:	2501      	movlt	r5, #1
 80096b8:	f7ff fd3a 	bl	8009130 <_Balloc>
 80096bc:	b920      	cbnz	r0, 80096c8 <__mdiff+0x5c>
 80096be:	4b2e      	ldr	r3, [pc, #184]	; (8009778 <__mdiff+0x10c>)
 80096c0:	4602      	mov	r2, r0
 80096c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80096c6:	e7e5      	b.n	8009694 <__mdiff+0x28>
 80096c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80096cc:	6926      	ldr	r6, [r4, #16]
 80096ce:	60c5      	str	r5, [r0, #12]
 80096d0:	f104 0914 	add.w	r9, r4, #20
 80096d4:	f108 0514 	add.w	r5, r8, #20
 80096d8:	f100 0e14 	add.w	lr, r0, #20
 80096dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80096e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80096e4:	f108 0210 	add.w	r2, r8, #16
 80096e8:	46f2      	mov	sl, lr
 80096ea:	2100      	movs	r1, #0
 80096ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80096f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80096f4:	fa1f f883 	uxth.w	r8, r3
 80096f8:	fa11 f18b 	uxtah	r1, r1, fp
 80096fc:	0c1b      	lsrs	r3, r3, #16
 80096fe:	eba1 0808 	sub.w	r8, r1, r8
 8009702:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009706:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800970a:	fa1f f888 	uxth.w	r8, r8
 800970e:	1419      	asrs	r1, r3, #16
 8009710:	454e      	cmp	r6, r9
 8009712:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009716:	f84a 3b04 	str.w	r3, [sl], #4
 800971a:	d8e7      	bhi.n	80096ec <__mdiff+0x80>
 800971c:	1b33      	subs	r3, r6, r4
 800971e:	3b15      	subs	r3, #21
 8009720:	f023 0303 	bic.w	r3, r3, #3
 8009724:	3304      	adds	r3, #4
 8009726:	3415      	adds	r4, #21
 8009728:	42a6      	cmp	r6, r4
 800972a:	bf38      	it	cc
 800972c:	2304      	movcc	r3, #4
 800972e:	441d      	add	r5, r3
 8009730:	4473      	add	r3, lr
 8009732:	469e      	mov	lr, r3
 8009734:	462e      	mov	r6, r5
 8009736:	4566      	cmp	r6, ip
 8009738:	d30e      	bcc.n	8009758 <__mdiff+0xec>
 800973a:	f10c 0203 	add.w	r2, ip, #3
 800973e:	1b52      	subs	r2, r2, r5
 8009740:	f022 0203 	bic.w	r2, r2, #3
 8009744:	3d03      	subs	r5, #3
 8009746:	45ac      	cmp	ip, r5
 8009748:	bf38      	it	cc
 800974a:	2200      	movcc	r2, #0
 800974c:	441a      	add	r2, r3
 800974e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009752:	b17b      	cbz	r3, 8009774 <__mdiff+0x108>
 8009754:	6107      	str	r7, [r0, #16]
 8009756:	e7a3      	b.n	80096a0 <__mdiff+0x34>
 8009758:	f856 8b04 	ldr.w	r8, [r6], #4
 800975c:	fa11 f288 	uxtah	r2, r1, r8
 8009760:	1414      	asrs	r4, r2, #16
 8009762:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009766:	b292      	uxth	r2, r2
 8009768:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800976c:	f84e 2b04 	str.w	r2, [lr], #4
 8009770:	1421      	asrs	r1, r4, #16
 8009772:	e7e0      	b.n	8009736 <__mdiff+0xca>
 8009774:	3f01      	subs	r7, #1
 8009776:	e7ea      	b.n	800974e <__mdiff+0xe2>
 8009778:	0800a1b7 	.word	0x0800a1b7
 800977c:	0800a228 	.word	0x0800a228

08009780 <__d2b>:
 8009780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009784:	4689      	mov	r9, r1
 8009786:	2101      	movs	r1, #1
 8009788:	ec57 6b10 	vmov	r6, r7, d0
 800978c:	4690      	mov	r8, r2
 800978e:	f7ff fccf 	bl	8009130 <_Balloc>
 8009792:	4604      	mov	r4, r0
 8009794:	b930      	cbnz	r0, 80097a4 <__d2b+0x24>
 8009796:	4602      	mov	r2, r0
 8009798:	4b25      	ldr	r3, [pc, #148]	; (8009830 <__d2b+0xb0>)
 800979a:	4826      	ldr	r0, [pc, #152]	; (8009834 <__d2b+0xb4>)
 800979c:	f240 310a 	movw	r1, #778	; 0x30a
 80097a0:	f000 fb00 	bl	8009da4 <__assert_func>
 80097a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097ac:	bb35      	cbnz	r5, 80097fc <__d2b+0x7c>
 80097ae:	2e00      	cmp	r6, #0
 80097b0:	9301      	str	r3, [sp, #4]
 80097b2:	d028      	beq.n	8009806 <__d2b+0x86>
 80097b4:	4668      	mov	r0, sp
 80097b6:	9600      	str	r6, [sp, #0]
 80097b8:	f7ff fd82 	bl	80092c0 <__lo0bits>
 80097bc:	9900      	ldr	r1, [sp, #0]
 80097be:	b300      	cbz	r0, 8009802 <__d2b+0x82>
 80097c0:	9a01      	ldr	r2, [sp, #4]
 80097c2:	f1c0 0320 	rsb	r3, r0, #32
 80097c6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ca:	430b      	orrs	r3, r1
 80097cc:	40c2      	lsrs	r2, r0
 80097ce:	6163      	str	r3, [r4, #20]
 80097d0:	9201      	str	r2, [sp, #4]
 80097d2:	9b01      	ldr	r3, [sp, #4]
 80097d4:	61a3      	str	r3, [r4, #24]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	bf14      	ite	ne
 80097da:	2202      	movne	r2, #2
 80097dc:	2201      	moveq	r2, #1
 80097de:	6122      	str	r2, [r4, #16]
 80097e0:	b1d5      	cbz	r5, 8009818 <__d2b+0x98>
 80097e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80097e6:	4405      	add	r5, r0
 80097e8:	f8c9 5000 	str.w	r5, [r9]
 80097ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097f0:	f8c8 0000 	str.w	r0, [r8]
 80097f4:	4620      	mov	r0, r4
 80097f6:	b003      	add	sp, #12
 80097f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009800:	e7d5      	b.n	80097ae <__d2b+0x2e>
 8009802:	6161      	str	r1, [r4, #20]
 8009804:	e7e5      	b.n	80097d2 <__d2b+0x52>
 8009806:	a801      	add	r0, sp, #4
 8009808:	f7ff fd5a 	bl	80092c0 <__lo0bits>
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	6163      	str	r3, [r4, #20]
 8009810:	2201      	movs	r2, #1
 8009812:	6122      	str	r2, [r4, #16]
 8009814:	3020      	adds	r0, #32
 8009816:	e7e3      	b.n	80097e0 <__d2b+0x60>
 8009818:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800981c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009820:	f8c9 0000 	str.w	r0, [r9]
 8009824:	6918      	ldr	r0, [r3, #16]
 8009826:	f7ff fd2b 	bl	8009280 <__hi0bits>
 800982a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800982e:	e7df      	b.n	80097f0 <__d2b+0x70>
 8009830:	0800a1b7 	.word	0x0800a1b7
 8009834:	0800a228 	.word	0x0800a228

08009838 <_calloc_r>:
 8009838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800983a:	fba1 2402 	umull	r2, r4, r1, r2
 800983e:	b94c      	cbnz	r4, 8009854 <_calloc_r+0x1c>
 8009840:	4611      	mov	r1, r2
 8009842:	9201      	str	r2, [sp, #4]
 8009844:	f000 f87a 	bl	800993c <_malloc_r>
 8009848:	9a01      	ldr	r2, [sp, #4]
 800984a:	4605      	mov	r5, r0
 800984c:	b930      	cbnz	r0, 800985c <_calloc_r+0x24>
 800984e:	4628      	mov	r0, r5
 8009850:	b003      	add	sp, #12
 8009852:	bd30      	pop	{r4, r5, pc}
 8009854:	220c      	movs	r2, #12
 8009856:	6002      	str	r2, [r0, #0]
 8009858:	2500      	movs	r5, #0
 800985a:	e7f8      	b.n	800984e <_calloc_r+0x16>
 800985c:	4621      	mov	r1, r4
 800985e:	f7fd fe09 	bl	8007474 <memset>
 8009862:	e7f4      	b.n	800984e <_calloc_r+0x16>

08009864 <_free_r>:
 8009864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009866:	2900      	cmp	r1, #0
 8009868:	d044      	beq.n	80098f4 <_free_r+0x90>
 800986a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986e:	9001      	str	r0, [sp, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	f1a1 0404 	sub.w	r4, r1, #4
 8009876:	bfb8      	it	lt
 8009878:	18e4      	addlt	r4, r4, r3
 800987a:	f000 fb19 	bl	8009eb0 <__malloc_lock>
 800987e:	4a1e      	ldr	r2, [pc, #120]	; (80098f8 <_free_r+0x94>)
 8009880:	9801      	ldr	r0, [sp, #4]
 8009882:	6813      	ldr	r3, [r2, #0]
 8009884:	b933      	cbnz	r3, 8009894 <_free_r+0x30>
 8009886:	6063      	str	r3, [r4, #4]
 8009888:	6014      	str	r4, [r2, #0]
 800988a:	b003      	add	sp, #12
 800988c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009890:	f000 bb14 	b.w	8009ebc <__malloc_unlock>
 8009894:	42a3      	cmp	r3, r4
 8009896:	d908      	bls.n	80098aa <_free_r+0x46>
 8009898:	6825      	ldr	r5, [r4, #0]
 800989a:	1961      	adds	r1, r4, r5
 800989c:	428b      	cmp	r3, r1
 800989e:	bf01      	itttt	eq
 80098a0:	6819      	ldreq	r1, [r3, #0]
 80098a2:	685b      	ldreq	r3, [r3, #4]
 80098a4:	1949      	addeq	r1, r1, r5
 80098a6:	6021      	streq	r1, [r4, #0]
 80098a8:	e7ed      	b.n	8009886 <_free_r+0x22>
 80098aa:	461a      	mov	r2, r3
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	b10b      	cbz	r3, 80098b4 <_free_r+0x50>
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	d9fa      	bls.n	80098aa <_free_r+0x46>
 80098b4:	6811      	ldr	r1, [r2, #0]
 80098b6:	1855      	adds	r5, r2, r1
 80098b8:	42a5      	cmp	r5, r4
 80098ba:	d10b      	bne.n	80098d4 <_free_r+0x70>
 80098bc:	6824      	ldr	r4, [r4, #0]
 80098be:	4421      	add	r1, r4
 80098c0:	1854      	adds	r4, r2, r1
 80098c2:	42a3      	cmp	r3, r4
 80098c4:	6011      	str	r1, [r2, #0]
 80098c6:	d1e0      	bne.n	800988a <_free_r+0x26>
 80098c8:	681c      	ldr	r4, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	6053      	str	r3, [r2, #4]
 80098ce:	4421      	add	r1, r4
 80098d0:	6011      	str	r1, [r2, #0]
 80098d2:	e7da      	b.n	800988a <_free_r+0x26>
 80098d4:	d902      	bls.n	80098dc <_free_r+0x78>
 80098d6:	230c      	movs	r3, #12
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	e7d6      	b.n	800988a <_free_r+0x26>
 80098dc:	6825      	ldr	r5, [r4, #0]
 80098de:	1961      	adds	r1, r4, r5
 80098e0:	428b      	cmp	r3, r1
 80098e2:	bf04      	itt	eq
 80098e4:	6819      	ldreq	r1, [r3, #0]
 80098e6:	685b      	ldreq	r3, [r3, #4]
 80098e8:	6063      	str	r3, [r4, #4]
 80098ea:	bf04      	itt	eq
 80098ec:	1949      	addeq	r1, r1, r5
 80098ee:	6021      	streq	r1, [r4, #0]
 80098f0:	6054      	str	r4, [r2, #4]
 80098f2:	e7ca      	b.n	800988a <_free_r+0x26>
 80098f4:	b003      	add	sp, #12
 80098f6:	bd30      	pop	{r4, r5, pc}
 80098f8:	20000740 	.word	0x20000740

080098fc <sbrk_aligned>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	4e0e      	ldr	r6, [pc, #56]	; (8009938 <sbrk_aligned+0x3c>)
 8009900:	460c      	mov	r4, r1
 8009902:	6831      	ldr	r1, [r6, #0]
 8009904:	4605      	mov	r5, r0
 8009906:	b911      	cbnz	r1, 800990e <sbrk_aligned+0x12>
 8009908:	f000 f9e6 	bl	8009cd8 <_sbrk_r>
 800990c:	6030      	str	r0, [r6, #0]
 800990e:	4621      	mov	r1, r4
 8009910:	4628      	mov	r0, r5
 8009912:	f000 f9e1 	bl	8009cd8 <_sbrk_r>
 8009916:	1c43      	adds	r3, r0, #1
 8009918:	d00a      	beq.n	8009930 <sbrk_aligned+0x34>
 800991a:	1cc4      	adds	r4, r0, #3
 800991c:	f024 0403 	bic.w	r4, r4, #3
 8009920:	42a0      	cmp	r0, r4
 8009922:	d007      	beq.n	8009934 <sbrk_aligned+0x38>
 8009924:	1a21      	subs	r1, r4, r0
 8009926:	4628      	mov	r0, r5
 8009928:	f000 f9d6 	bl	8009cd8 <_sbrk_r>
 800992c:	3001      	adds	r0, #1
 800992e:	d101      	bne.n	8009934 <sbrk_aligned+0x38>
 8009930:	f04f 34ff 	mov.w	r4, #4294967295
 8009934:	4620      	mov	r0, r4
 8009936:	bd70      	pop	{r4, r5, r6, pc}
 8009938:	20000744 	.word	0x20000744

0800993c <_malloc_r>:
 800993c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009940:	1ccd      	adds	r5, r1, #3
 8009942:	f025 0503 	bic.w	r5, r5, #3
 8009946:	3508      	adds	r5, #8
 8009948:	2d0c      	cmp	r5, #12
 800994a:	bf38      	it	cc
 800994c:	250c      	movcc	r5, #12
 800994e:	2d00      	cmp	r5, #0
 8009950:	4607      	mov	r7, r0
 8009952:	db01      	blt.n	8009958 <_malloc_r+0x1c>
 8009954:	42a9      	cmp	r1, r5
 8009956:	d905      	bls.n	8009964 <_malloc_r+0x28>
 8009958:	230c      	movs	r3, #12
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	2600      	movs	r6, #0
 800995e:	4630      	mov	r0, r6
 8009960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009964:	4e2e      	ldr	r6, [pc, #184]	; (8009a20 <_malloc_r+0xe4>)
 8009966:	f000 faa3 	bl	8009eb0 <__malloc_lock>
 800996a:	6833      	ldr	r3, [r6, #0]
 800996c:	461c      	mov	r4, r3
 800996e:	bb34      	cbnz	r4, 80099be <_malloc_r+0x82>
 8009970:	4629      	mov	r1, r5
 8009972:	4638      	mov	r0, r7
 8009974:	f7ff ffc2 	bl	80098fc <sbrk_aligned>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	4604      	mov	r4, r0
 800997c:	d14d      	bne.n	8009a1a <_malloc_r+0xde>
 800997e:	6834      	ldr	r4, [r6, #0]
 8009980:	4626      	mov	r6, r4
 8009982:	2e00      	cmp	r6, #0
 8009984:	d140      	bne.n	8009a08 <_malloc_r+0xcc>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	4631      	mov	r1, r6
 800998a:	4638      	mov	r0, r7
 800998c:	eb04 0803 	add.w	r8, r4, r3
 8009990:	f000 f9a2 	bl	8009cd8 <_sbrk_r>
 8009994:	4580      	cmp	r8, r0
 8009996:	d13a      	bne.n	8009a0e <_malloc_r+0xd2>
 8009998:	6821      	ldr	r1, [r4, #0]
 800999a:	3503      	adds	r5, #3
 800999c:	1a6d      	subs	r5, r5, r1
 800999e:	f025 0503 	bic.w	r5, r5, #3
 80099a2:	3508      	adds	r5, #8
 80099a4:	2d0c      	cmp	r5, #12
 80099a6:	bf38      	it	cc
 80099a8:	250c      	movcc	r5, #12
 80099aa:	4629      	mov	r1, r5
 80099ac:	4638      	mov	r0, r7
 80099ae:	f7ff ffa5 	bl	80098fc <sbrk_aligned>
 80099b2:	3001      	adds	r0, #1
 80099b4:	d02b      	beq.n	8009a0e <_malloc_r+0xd2>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	442b      	add	r3, r5
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	e00e      	b.n	80099dc <_malloc_r+0xa0>
 80099be:	6822      	ldr	r2, [r4, #0]
 80099c0:	1b52      	subs	r2, r2, r5
 80099c2:	d41e      	bmi.n	8009a02 <_malloc_r+0xc6>
 80099c4:	2a0b      	cmp	r2, #11
 80099c6:	d916      	bls.n	80099f6 <_malloc_r+0xba>
 80099c8:	1961      	adds	r1, r4, r5
 80099ca:	42a3      	cmp	r3, r4
 80099cc:	6025      	str	r5, [r4, #0]
 80099ce:	bf18      	it	ne
 80099d0:	6059      	strne	r1, [r3, #4]
 80099d2:	6863      	ldr	r3, [r4, #4]
 80099d4:	bf08      	it	eq
 80099d6:	6031      	streq	r1, [r6, #0]
 80099d8:	5162      	str	r2, [r4, r5]
 80099da:	604b      	str	r3, [r1, #4]
 80099dc:	4638      	mov	r0, r7
 80099de:	f104 060b 	add.w	r6, r4, #11
 80099e2:	f000 fa6b 	bl	8009ebc <__malloc_unlock>
 80099e6:	f026 0607 	bic.w	r6, r6, #7
 80099ea:	1d23      	adds	r3, r4, #4
 80099ec:	1af2      	subs	r2, r6, r3
 80099ee:	d0b6      	beq.n	800995e <_malloc_r+0x22>
 80099f0:	1b9b      	subs	r3, r3, r6
 80099f2:	50a3      	str	r3, [r4, r2]
 80099f4:	e7b3      	b.n	800995e <_malloc_r+0x22>
 80099f6:	6862      	ldr	r2, [r4, #4]
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	bf0c      	ite	eq
 80099fc:	6032      	streq	r2, [r6, #0]
 80099fe:	605a      	strne	r2, [r3, #4]
 8009a00:	e7ec      	b.n	80099dc <_malloc_r+0xa0>
 8009a02:	4623      	mov	r3, r4
 8009a04:	6864      	ldr	r4, [r4, #4]
 8009a06:	e7b2      	b.n	800996e <_malloc_r+0x32>
 8009a08:	4634      	mov	r4, r6
 8009a0a:	6876      	ldr	r6, [r6, #4]
 8009a0c:	e7b9      	b.n	8009982 <_malloc_r+0x46>
 8009a0e:	230c      	movs	r3, #12
 8009a10:	603b      	str	r3, [r7, #0]
 8009a12:	4638      	mov	r0, r7
 8009a14:	f000 fa52 	bl	8009ebc <__malloc_unlock>
 8009a18:	e7a1      	b.n	800995e <_malloc_r+0x22>
 8009a1a:	6025      	str	r5, [r4, #0]
 8009a1c:	e7de      	b.n	80099dc <_malloc_r+0xa0>
 8009a1e:	bf00      	nop
 8009a20:	20000740 	.word	0x20000740

08009a24 <__sfputc_r>:
 8009a24:	6893      	ldr	r3, [r2, #8]
 8009a26:	3b01      	subs	r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	b410      	push	{r4}
 8009a2c:	6093      	str	r3, [r2, #8]
 8009a2e:	da08      	bge.n	8009a42 <__sfputc_r+0x1e>
 8009a30:	6994      	ldr	r4, [r2, #24]
 8009a32:	42a3      	cmp	r3, r4
 8009a34:	db01      	blt.n	8009a3a <__sfputc_r+0x16>
 8009a36:	290a      	cmp	r1, #10
 8009a38:	d103      	bne.n	8009a42 <__sfputc_r+0x1e>
 8009a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a3e:	f7fe ba01 	b.w	8007e44 <__swbuf_r>
 8009a42:	6813      	ldr	r3, [r2, #0]
 8009a44:	1c58      	adds	r0, r3, #1
 8009a46:	6010      	str	r0, [r2, #0]
 8009a48:	7019      	strb	r1, [r3, #0]
 8009a4a:	4608      	mov	r0, r1
 8009a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <__sfputs_r>:
 8009a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a54:	4606      	mov	r6, r0
 8009a56:	460f      	mov	r7, r1
 8009a58:	4614      	mov	r4, r2
 8009a5a:	18d5      	adds	r5, r2, r3
 8009a5c:	42ac      	cmp	r4, r5
 8009a5e:	d101      	bne.n	8009a64 <__sfputs_r+0x12>
 8009a60:	2000      	movs	r0, #0
 8009a62:	e007      	b.n	8009a74 <__sfputs_r+0x22>
 8009a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a68:	463a      	mov	r2, r7
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f7ff ffda 	bl	8009a24 <__sfputc_r>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d1f3      	bne.n	8009a5c <__sfputs_r+0xa>
 8009a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a78 <_vfiprintf_r>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	460d      	mov	r5, r1
 8009a7e:	b09d      	sub	sp, #116	; 0x74
 8009a80:	4614      	mov	r4, r2
 8009a82:	4698      	mov	r8, r3
 8009a84:	4606      	mov	r6, r0
 8009a86:	b118      	cbz	r0, 8009a90 <_vfiprintf_r+0x18>
 8009a88:	6983      	ldr	r3, [r0, #24]
 8009a8a:	b90b      	cbnz	r3, 8009a90 <_vfiprintf_r+0x18>
 8009a8c:	f7ff fa30 	bl	8008ef0 <__sinit>
 8009a90:	4b89      	ldr	r3, [pc, #548]	; (8009cb8 <_vfiprintf_r+0x240>)
 8009a92:	429d      	cmp	r5, r3
 8009a94:	d11b      	bne.n	8009ace <_vfiprintf_r+0x56>
 8009a96:	6875      	ldr	r5, [r6, #4]
 8009a98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a9a:	07d9      	lsls	r1, r3, #31
 8009a9c:	d405      	bmi.n	8009aaa <_vfiprintf_r+0x32>
 8009a9e:	89ab      	ldrh	r3, [r5, #12]
 8009aa0:	059a      	lsls	r2, r3, #22
 8009aa2:	d402      	bmi.n	8009aaa <_vfiprintf_r+0x32>
 8009aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aa6:	f7ff fac6 	bl	8009036 <__retarget_lock_acquire_recursive>
 8009aaa:	89ab      	ldrh	r3, [r5, #12]
 8009aac:	071b      	lsls	r3, r3, #28
 8009aae:	d501      	bpl.n	8009ab4 <_vfiprintf_r+0x3c>
 8009ab0:	692b      	ldr	r3, [r5, #16]
 8009ab2:	b9eb      	cbnz	r3, 8009af0 <_vfiprintf_r+0x78>
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f7fe fa16 	bl	8007ee8 <__swsetup_r>
 8009abc:	b1c0      	cbz	r0, 8009af0 <_vfiprintf_r+0x78>
 8009abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ac0:	07dc      	lsls	r4, r3, #31
 8009ac2:	d50e      	bpl.n	8009ae2 <_vfiprintf_r+0x6a>
 8009ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac8:	b01d      	add	sp, #116	; 0x74
 8009aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ace:	4b7b      	ldr	r3, [pc, #492]	; (8009cbc <_vfiprintf_r+0x244>)
 8009ad0:	429d      	cmp	r5, r3
 8009ad2:	d101      	bne.n	8009ad8 <_vfiprintf_r+0x60>
 8009ad4:	68b5      	ldr	r5, [r6, #8]
 8009ad6:	e7df      	b.n	8009a98 <_vfiprintf_r+0x20>
 8009ad8:	4b79      	ldr	r3, [pc, #484]	; (8009cc0 <_vfiprintf_r+0x248>)
 8009ada:	429d      	cmp	r5, r3
 8009adc:	bf08      	it	eq
 8009ade:	68f5      	ldreq	r5, [r6, #12]
 8009ae0:	e7da      	b.n	8009a98 <_vfiprintf_r+0x20>
 8009ae2:	89ab      	ldrh	r3, [r5, #12]
 8009ae4:	0598      	lsls	r0, r3, #22
 8009ae6:	d4ed      	bmi.n	8009ac4 <_vfiprintf_r+0x4c>
 8009ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aea:	f7ff faa5 	bl	8009038 <__retarget_lock_release_recursive>
 8009aee:	e7e9      	b.n	8009ac4 <_vfiprintf_r+0x4c>
 8009af0:	2300      	movs	r3, #0
 8009af2:	9309      	str	r3, [sp, #36]	; 0x24
 8009af4:	2320      	movs	r3, #32
 8009af6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009afe:	2330      	movs	r3, #48	; 0x30
 8009b00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009cc4 <_vfiprintf_r+0x24c>
 8009b04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b08:	f04f 0901 	mov.w	r9, #1
 8009b0c:	4623      	mov	r3, r4
 8009b0e:	469a      	mov	sl, r3
 8009b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b14:	b10a      	cbz	r2, 8009b1a <_vfiprintf_r+0xa2>
 8009b16:	2a25      	cmp	r2, #37	; 0x25
 8009b18:	d1f9      	bne.n	8009b0e <_vfiprintf_r+0x96>
 8009b1a:	ebba 0b04 	subs.w	fp, sl, r4
 8009b1e:	d00b      	beq.n	8009b38 <_vfiprintf_r+0xc0>
 8009b20:	465b      	mov	r3, fp
 8009b22:	4622      	mov	r2, r4
 8009b24:	4629      	mov	r1, r5
 8009b26:	4630      	mov	r0, r6
 8009b28:	f7ff ff93 	bl	8009a52 <__sfputs_r>
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	f000 80aa 	beq.w	8009c86 <_vfiprintf_r+0x20e>
 8009b32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b34:	445a      	add	r2, fp
 8009b36:	9209      	str	r2, [sp, #36]	; 0x24
 8009b38:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 80a2 	beq.w	8009c86 <_vfiprintf_r+0x20e>
 8009b42:	2300      	movs	r3, #0
 8009b44:	f04f 32ff 	mov.w	r2, #4294967295
 8009b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b4c:	f10a 0a01 	add.w	sl, sl, #1
 8009b50:	9304      	str	r3, [sp, #16]
 8009b52:	9307      	str	r3, [sp, #28]
 8009b54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b58:	931a      	str	r3, [sp, #104]	; 0x68
 8009b5a:	4654      	mov	r4, sl
 8009b5c:	2205      	movs	r2, #5
 8009b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b62:	4858      	ldr	r0, [pc, #352]	; (8009cc4 <_vfiprintf_r+0x24c>)
 8009b64:	f7f6 fb64 	bl	8000230 <memchr>
 8009b68:	9a04      	ldr	r2, [sp, #16]
 8009b6a:	b9d8      	cbnz	r0, 8009ba4 <_vfiprintf_r+0x12c>
 8009b6c:	06d1      	lsls	r1, r2, #27
 8009b6e:	bf44      	itt	mi
 8009b70:	2320      	movmi	r3, #32
 8009b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b76:	0713      	lsls	r3, r2, #28
 8009b78:	bf44      	itt	mi
 8009b7a:	232b      	movmi	r3, #43	; 0x2b
 8009b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b80:	f89a 3000 	ldrb.w	r3, [sl]
 8009b84:	2b2a      	cmp	r3, #42	; 0x2a
 8009b86:	d015      	beq.n	8009bb4 <_vfiprintf_r+0x13c>
 8009b88:	9a07      	ldr	r2, [sp, #28]
 8009b8a:	4654      	mov	r4, sl
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	f04f 0c0a 	mov.w	ip, #10
 8009b92:	4621      	mov	r1, r4
 8009b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b98:	3b30      	subs	r3, #48	; 0x30
 8009b9a:	2b09      	cmp	r3, #9
 8009b9c:	d94e      	bls.n	8009c3c <_vfiprintf_r+0x1c4>
 8009b9e:	b1b0      	cbz	r0, 8009bce <_vfiprintf_r+0x156>
 8009ba0:	9207      	str	r2, [sp, #28]
 8009ba2:	e014      	b.n	8009bce <_vfiprintf_r+0x156>
 8009ba4:	eba0 0308 	sub.w	r3, r0, r8
 8009ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8009bac:	4313      	orrs	r3, r2
 8009bae:	9304      	str	r3, [sp, #16]
 8009bb0:	46a2      	mov	sl, r4
 8009bb2:	e7d2      	b.n	8009b5a <_vfiprintf_r+0xe2>
 8009bb4:	9b03      	ldr	r3, [sp, #12]
 8009bb6:	1d19      	adds	r1, r3, #4
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	9103      	str	r1, [sp, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	bfbb      	ittet	lt
 8009bc0:	425b      	neglt	r3, r3
 8009bc2:	f042 0202 	orrlt.w	r2, r2, #2
 8009bc6:	9307      	strge	r3, [sp, #28]
 8009bc8:	9307      	strlt	r3, [sp, #28]
 8009bca:	bfb8      	it	lt
 8009bcc:	9204      	strlt	r2, [sp, #16]
 8009bce:	7823      	ldrb	r3, [r4, #0]
 8009bd0:	2b2e      	cmp	r3, #46	; 0x2e
 8009bd2:	d10c      	bne.n	8009bee <_vfiprintf_r+0x176>
 8009bd4:	7863      	ldrb	r3, [r4, #1]
 8009bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8009bd8:	d135      	bne.n	8009c46 <_vfiprintf_r+0x1ce>
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	1d1a      	adds	r2, r3, #4
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	9203      	str	r2, [sp, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	bfb8      	it	lt
 8009be6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bea:	3402      	adds	r4, #2
 8009bec:	9305      	str	r3, [sp, #20]
 8009bee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009cd4 <_vfiprintf_r+0x25c>
 8009bf2:	7821      	ldrb	r1, [r4, #0]
 8009bf4:	2203      	movs	r2, #3
 8009bf6:	4650      	mov	r0, sl
 8009bf8:	f7f6 fb1a 	bl	8000230 <memchr>
 8009bfc:	b140      	cbz	r0, 8009c10 <_vfiprintf_r+0x198>
 8009bfe:	2340      	movs	r3, #64	; 0x40
 8009c00:	eba0 000a 	sub.w	r0, r0, sl
 8009c04:	fa03 f000 	lsl.w	r0, r3, r0
 8009c08:	9b04      	ldr	r3, [sp, #16]
 8009c0a:	4303      	orrs	r3, r0
 8009c0c:	3401      	adds	r4, #1
 8009c0e:	9304      	str	r3, [sp, #16]
 8009c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c14:	482c      	ldr	r0, [pc, #176]	; (8009cc8 <_vfiprintf_r+0x250>)
 8009c16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c1a:	2206      	movs	r2, #6
 8009c1c:	f7f6 fb08 	bl	8000230 <memchr>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d03f      	beq.n	8009ca4 <_vfiprintf_r+0x22c>
 8009c24:	4b29      	ldr	r3, [pc, #164]	; (8009ccc <_vfiprintf_r+0x254>)
 8009c26:	bb1b      	cbnz	r3, 8009c70 <_vfiprintf_r+0x1f8>
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	3307      	adds	r3, #7
 8009c2c:	f023 0307 	bic.w	r3, r3, #7
 8009c30:	3308      	adds	r3, #8
 8009c32:	9303      	str	r3, [sp, #12]
 8009c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c36:	443b      	add	r3, r7
 8009c38:	9309      	str	r3, [sp, #36]	; 0x24
 8009c3a:	e767      	b.n	8009b0c <_vfiprintf_r+0x94>
 8009c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c40:	460c      	mov	r4, r1
 8009c42:	2001      	movs	r0, #1
 8009c44:	e7a5      	b.n	8009b92 <_vfiprintf_r+0x11a>
 8009c46:	2300      	movs	r3, #0
 8009c48:	3401      	adds	r4, #1
 8009c4a:	9305      	str	r3, [sp, #20]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	f04f 0c0a 	mov.w	ip, #10
 8009c52:	4620      	mov	r0, r4
 8009c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c58:	3a30      	subs	r2, #48	; 0x30
 8009c5a:	2a09      	cmp	r2, #9
 8009c5c:	d903      	bls.n	8009c66 <_vfiprintf_r+0x1ee>
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d0c5      	beq.n	8009bee <_vfiprintf_r+0x176>
 8009c62:	9105      	str	r1, [sp, #20]
 8009c64:	e7c3      	b.n	8009bee <_vfiprintf_r+0x176>
 8009c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e7f0      	b.n	8009c52 <_vfiprintf_r+0x1da>
 8009c70:	ab03      	add	r3, sp, #12
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	462a      	mov	r2, r5
 8009c76:	4b16      	ldr	r3, [pc, #88]	; (8009cd0 <_vfiprintf_r+0x258>)
 8009c78:	a904      	add	r1, sp, #16
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	f7fd fca2 	bl	80075c4 <_printf_float>
 8009c80:	4607      	mov	r7, r0
 8009c82:	1c78      	adds	r0, r7, #1
 8009c84:	d1d6      	bne.n	8009c34 <_vfiprintf_r+0x1bc>
 8009c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c88:	07d9      	lsls	r1, r3, #31
 8009c8a:	d405      	bmi.n	8009c98 <_vfiprintf_r+0x220>
 8009c8c:	89ab      	ldrh	r3, [r5, #12]
 8009c8e:	059a      	lsls	r2, r3, #22
 8009c90:	d402      	bmi.n	8009c98 <_vfiprintf_r+0x220>
 8009c92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c94:	f7ff f9d0 	bl	8009038 <__retarget_lock_release_recursive>
 8009c98:	89ab      	ldrh	r3, [r5, #12]
 8009c9a:	065b      	lsls	r3, r3, #25
 8009c9c:	f53f af12 	bmi.w	8009ac4 <_vfiprintf_r+0x4c>
 8009ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ca2:	e711      	b.n	8009ac8 <_vfiprintf_r+0x50>
 8009ca4:	ab03      	add	r3, sp, #12
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	462a      	mov	r2, r5
 8009caa:	4b09      	ldr	r3, [pc, #36]	; (8009cd0 <_vfiprintf_r+0x258>)
 8009cac:	a904      	add	r1, sp, #16
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f7fd ff2c 	bl	8007b0c <_printf_i>
 8009cb4:	e7e4      	b.n	8009c80 <_vfiprintf_r+0x208>
 8009cb6:	bf00      	nop
 8009cb8:	0800a1e8 	.word	0x0800a1e8
 8009cbc:	0800a208 	.word	0x0800a208
 8009cc0:	0800a1c8 	.word	0x0800a1c8
 8009cc4:	0800a384 	.word	0x0800a384
 8009cc8:	0800a38e 	.word	0x0800a38e
 8009ccc:	080075c5 	.word	0x080075c5
 8009cd0:	08009a53 	.word	0x08009a53
 8009cd4:	0800a38a 	.word	0x0800a38a

08009cd8 <_sbrk_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4d06      	ldr	r5, [pc, #24]	; (8009cf4 <_sbrk_r+0x1c>)
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4604      	mov	r4, r0
 8009ce0:	4608      	mov	r0, r1
 8009ce2:	602b      	str	r3, [r5, #0]
 8009ce4:	f7f9 f8ac 	bl	8002e40 <_sbrk>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d102      	bne.n	8009cf2 <_sbrk_r+0x1a>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	b103      	cbz	r3, 8009cf2 <_sbrk_r+0x1a>
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	20000748 	.word	0x20000748

08009cf8 <__sread>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d00:	f000 f8e2 	bl	8009ec8 <_read_r>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	bfab      	itete	ge
 8009d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d0c:	181b      	addge	r3, r3, r0
 8009d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d12:	bfac      	ite	ge
 8009d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d16:	81a3      	strhlt	r3, [r4, #12]
 8009d18:	bd10      	pop	{r4, pc}

08009d1a <__swrite>:
 8009d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1e:	461f      	mov	r7, r3
 8009d20:	898b      	ldrh	r3, [r1, #12]
 8009d22:	05db      	lsls	r3, r3, #23
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	4616      	mov	r6, r2
 8009d2a:	d505      	bpl.n	8009d38 <__swrite+0x1e>
 8009d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d30:	2302      	movs	r3, #2
 8009d32:	2200      	movs	r2, #0
 8009d34:	f000 f898 	bl	8009e68 <_lseek_r>
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	4632      	mov	r2, r6
 8009d46:	463b      	mov	r3, r7
 8009d48:	4628      	mov	r0, r5
 8009d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4e:	f000 b817 	b.w	8009d80 <_write_r>

08009d52 <__sseek>:
 8009d52:	b510      	push	{r4, lr}
 8009d54:	460c      	mov	r4, r1
 8009d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5a:	f000 f885 	bl	8009e68 <_lseek_r>
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	bf15      	itete	ne
 8009d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d6e:	81a3      	strheq	r3, [r4, #12]
 8009d70:	bf18      	it	ne
 8009d72:	81a3      	strhne	r3, [r4, #12]
 8009d74:	bd10      	pop	{r4, pc}

08009d76 <__sclose>:
 8009d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7a:	f000 b831 	b.w	8009de0 <_close_r>
	...

08009d80 <_write_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d07      	ldr	r5, [pc, #28]	; (8009da0 <_write_r+0x20>)
 8009d84:	4604      	mov	r4, r0
 8009d86:	4608      	mov	r0, r1
 8009d88:	4611      	mov	r1, r2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	602a      	str	r2, [r5, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f7f9 f805 	bl	8002d9e <_write>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_write_r+0x1e>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_write_r+0x1e>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	20000748 	.word	0x20000748

08009da4 <__assert_func>:
 8009da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009da6:	4614      	mov	r4, r2
 8009da8:	461a      	mov	r2, r3
 8009daa:	4b09      	ldr	r3, [pc, #36]	; (8009dd0 <__assert_func+0x2c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4605      	mov	r5, r0
 8009db0:	68d8      	ldr	r0, [r3, #12]
 8009db2:	b14c      	cbz	r4, 8009dc8 <__assert_func+0x24>
 8009db4:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <__assert_func+0x30>)
 8009db6:	9100      	str	r1, [sp, #0]
 8009db8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009dbc:	4906      	ldr	r1, [pc, #24]	; (8009dd8 <__assert_func+0x34>)
 8009dbe:	462b      	mov	r3, r5
 8009dc0:	f000 f81e 	bl	8009e00 <fiprintf>
 8009dc4:	f000 f89f 	bl	8009f06 <abort>
 8009dc8:	4b04      	ldr	r3, [pc, #16]	; (8009ddc <__assert_func+0x38>)
 8009dca:	461c      	mov	r4, r3
 8009dcc:	e7f3      	b.n	8009db6 <__assert_func+0x12>
 8009dce:	bf00      	nop
 8009dd0:	20000014 	.word	0x20000014
 8009dd4:	0800a395 	.word	0x0800a395
 8009dd8:	0800a3a2 	.word	0x0800a3a2
 8009ddc:	0800a3d0 	.word	0x0800a3d0

08009de0 <_close_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d06      	ldr	r5, [pc, #24]	; (8009dfc <_close_r+0x1c>)
 8009de4:	2300      	movs	r3, #0
 8009de6:	4604      	mov	r4, r0
 8009de8:	4608      	mov	r0, r1
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	f7f8 fff3 	bl	8002dd6 <_close>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d102      	bne.n	8009dfa <_close_r+0x1a>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b103      	cbz	r3, 8009dfa <_close_r+0x1a>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	20000748 	.word	0x20000748

08009e00 <fiprintf>:
 8009e00:	b40e      	push	{r1, r2, r3}
 8009e02:	b503      	push	{r0, r1, lr}
 8009e04:	4601      	mov	r1, r0
 8009e06:	ab03      	add	r3, sp, #12
 8009e08:	4805      	ldr	r0, [pc, #20]	; (8009e20 <fiprintf+0x20>)
 8009e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e0e:	6800      	ldr	r0, [r0, #0]
 8009e10:	9301      	str	r3, [sp, #4]
 8009e12:	f7ff fe31 	bl	8009a78 <_vfiprintf_r>
 8009e16:	b002      	add	sp, #8
 8009e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e1c:	b003      	add	sp, #12
 8009e1e:	4770      	bx	lr
 8009e20:	20000014 	.word	0x20000014

08009e24 <_fstat_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d07      	ldr	r5, [pc, #28]	; (8009e44 <_fstat_r+0x20>)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	4611      	mov	r1, r2
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	f7f8 ffdc 	bl	8002dee <_fstat>
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	d102      	bne.n	8009e40 <_fstat_r+0x1c>
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	b103      	cbz	r3, 8009e40 <_fstat_r+0x1c>
 8009e3e:	6023      	str	r3, [r4, #0]
 8009e40:	bd38      	pop	{r3, r4, r5, pc}
 8009e42:	bf00      	nop
 8009e44:	20000748 	.word	0x20000748

08009e48 <_isatty_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d06      	ldr	r5, [pc, #24]	; (8009e64 <_isatty_r+0x1c>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4604      	mov	r4, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	602b      	str	r3, [r5, #0]
 8009e54:	f7f8 ffdb 	bl	8002e0e <_isatty>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_isatty_r+0x1a>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_isatty_r+0x1a>
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	20000748 	.word	0x20000748

08009e68 <_lseek_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	4d07      	ldr	r5, [pc, #28]	; (8009e88 <_lseek_r+0x20>)
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	4608      	mov	r0, r1
 8009e70:	4611      	mov	r1, r2
 8009e72:	2200      	movs	r2, #0
 8009e74:	602a      	str	r2, [r5, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	f7f8 ffd4 	bl	8002e24 <_lseek>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_lseek_r+0x1e>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_lseek_r+0x1e>
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	20000748 	.word	0x20000748

08009e8c <__ascii_mbtowc>:
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	b901      	cbnz	r1, 8009e92 <__ascii_mbtowc+0x6>
 8009e90:	a901      	add	r1, sp, #4
 8009e92:	b142      	cbz	r2, 8009ea6 <__ascii_mbtowc+0x1a>
 8009e94:	b14b      	cbz	r3, 8009eaa <__ascii_mbtowc+0x1e>
 8009e96:	7813      	ldrb	r3, [r2, #0]
 8009e98:	600b      	str	r3, [r1, #0]
 8009e9a:	7812      	ldrb	r2, [r2, #0]
 8009e9c:	1e10      	subs	r0, r2, #0
 8009e9e:	bf18      	it	ne
 8009ea0:	2001      	movne	r0, #1
 8009ea2:	b002      	add	sp, #8
 8009ea4:	4770      	bx	lr
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	e7fb      	b.n	8009ea2 <__ascii_mbtowc+0x16>
 8009eaa:	f06f 0001 	mvn.w	r0, #1
 8009eae:	e7f8      	b.n	8009ea2 <__ascii_mbtowc+0x16>

08009eb0 <__malloc_lock>:
 8009eb0:	4801      	ldr	r0, [pc, #4]	; (8009eb8 <__malloc_lock+0x8>)
 8009eb2:	f7ff b8c0 	b.w	8009036 <__retarget_lock_acquire_recursive>
 8009eb6:	bf00      	nop
 8009eb8:	2000073c 	.word	0x2000073c

08009ebc <__malloc_unlock>:
 8009ebc:	4801      	ldr	r0, [pc, #4]	; (8009ec4 <__malloc_unlock+0x8>)
 8009ebe:	f7ff b8bb 	b.w	8009038 <__retarget_lock_release_recursive>
 8009ec2:	bf00      	nop
 8009ec4:	2000073c 	.word	0x2000073c

08009ec8 <_read_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	4d07      	ldr	r5, [pc, #28]	; (8009ee8 <_read_r+0x20>)
 8009ecc:	4604      	mov	r4, r0
 8009ece:	4608      	mov	r0, r1
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	602a      	str	r2, [r5, #0]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	f7f8 ff44 	bl	8002d64 <_read>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	d102      	bne.n	8009ee6 <_read_r+0x1e>
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	b103      	cbz	r3, 8009ee6 <_read_r+0x1e>
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	20000748 	.word	0x20000748

08009eec <__ascii_wctomb>:
 8009eec:	b149      	cbz	r1, 8009f02 <__ascii_wctomb+0x16>
 8009eee:	2aff      	cmp	r2, #255	; 0xff
 8009ef0:	bf85      	ittet	hi
 8009ef2:	238a      	movhi	r3, #138	; 0x8a
 8009ef4:	6003      	strhi	r3, [r0, #0]
 8009ef6:	700a      	strbls	r2, [r1, #0]
 8009ef8:	f04f 30ff 	movhi.w	r0, #4294967295
 8009efc:	bf98      	it	ls
 8009efe:	2001      	movls	r0, #1
 8009f00:	4770      	bx	lr
 8009f02:	4608      	mov	r0, r1
 8009f04:	4770      	bx	lr

08009f06 <abort>:
 8009f06:	b508      	push	{r3, lr}
 8009f08:	2006      	movs	r0, #6
 8009f0a:	f000 f82b 	bl	8009f64 <raise>
 8009f0e:	2001      	movs	r0, #1
 8009f10:	f7f8 ff1e 	bl	8002d50 <_exit>

08009f14 <_raise_r>:
 8009f14:	291f      	cmp	r1, #31
 8009f16:	b538      	push	{r3, r4, r5, lr}
 8009f18:	4604      	mov	r4, r0
 8009f1a:	460d      	mov	r5, r1
 8009f1c:	d904      	bls.n	8009f28 <_raise_r+0x14>
 8009f1e:	2316      	movs	r3, #22
 8009f20:	6003      	str	r3, [r0, #0]
 8009f22:	f04f 30ff 	mov.w	r0, #4294967295
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f2a:	b112      	cbz	r2, 8009f32 <_raise_r+0x1e>
 8009f2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f30:	b94b      	cbnz	r3, 8009f46 <_raise_r+0x32>
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 f830 	bl	8009f98 <_getpid_r>
 8009f38:	462a      	mov	r2, r5
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f42:	f000 b817 	b.w	8009f74 <_kill_r>
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d00a      	beq.n	8009f60 <_raise_r+0x4c>
 8009f4a:	1c59      	adds	r1, r3, #1
 8009f4c:	d103      	bne.n	8009f56 <_raise_r+0x42>
 8009f4e:	2316      	movs	r3, #22
 8009f50:	6003      	str	r3, [r0, #0]
 8009f52:	2001      	movs	r0, #1
 8009f54:	e7e7      	b.n	8009f26 <_raise_r+0x12>
 8009f56:	2400      	movs	r4, #0
 8009f58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	4798      	blx	r3
 8009f60:	2000      	movs	r0, #0
 8009f62:	e7e0      	b.n	8009f26 <_raise_r+0x12>

08009f64 <raise>:
 8009f64:	4b02      	ldr	r3, [pc, #8]	; (8009f70 <raise+0xc>)
 8009f66:	4601      	mov	r1, r0
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	f7ff bfd3 	b.w	8009f14 <_raise_r>
 8009f6e:	bf00      	nop
 8009f70:	20000014 	.word	0x20000014

08009f74 <_kill_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	4d07      	ldr	r5, [pc, #28]	; (8009f94 <_kill_r+0x20>)
 8009f78:	2300      	movs	r3, #0
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	4608      	mov	r0, r1
 8009f7e:	4611      	mov	r1, r2
 8009f80:	602b      	str	r3, [r5, #0]
 8009f82:	f7f8 fed5 	bl	8002d30 <_kill>
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	d102      	bne.n	8009f90 <_kill_r+0x1c>
 8009f8a:	682b      	ldr	r3, [r5, #0]
 8009f8c:	b103      	cbz	r3, 8009f90 <_kill_r+0x1c>
 8009f8e:	6023      	str	r3, [r4, #0]
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
 8009f92:	bf00      	nop
 8009f94:	20000748 	.word	0x20000748

08009f98 <_getpid_r>:
 8009f98:	f7f8 bec2 	b.w	8002d20 <_getpid>

08009f9c <_init>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	bf00      	nop
 8009fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa2:	bc08      	pop	{r3}
 8009fa4:	469e      	mov	lr, r3
 8009fa6:	4770      	bx	lr

08009fa8 <_fini>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	bf00      	nop
 8009fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fae:	bc08      	pop	{r3}
 8009fb0:	469e      	mov	lr, r3
 8009fb2:	4770      	bx	lr
