
mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b674  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  0800b858  0800b858  0001b858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beac  0800beac  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800beac  0800beac  0001beac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800beb4  0800beb4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beb4  0800beb4  0001beb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800beb8  0800beb8  0001beb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800bebc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  200001e8  0800c0a4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  0800c0a4  000208c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a45  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269b  00000000  00000000  00034c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000372f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  000384e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027421  00000000  00000000  00039608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014000  00000000  00000000  00060a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd963  00000000  00000000  00074a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017238c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d88  00000000  00000000  001723dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b83c 	.word	0x0800b83c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800b83c 	.word	0x0800b83c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b974 	b.w	8000f38 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468e      	mov	lr, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4694      	mov	ip, r2
 8000c7a:	d969      	bls.n	8000d50 <__udivmoddi4+0xe8>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b152      	cbz	r2, 8000c98 <__udivmoddi4+0x30>
 8000c82:	fa01 f302 	lsl.w	r3, r1, r2
 8000c86:	f1c2 0120 	rsb	r1, r2, #32
 8000c8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c92:	ea41 0e03 	orr.w	lr, r1, r3
 8000c96:	4094      	lsls	r4, r2
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	0c21      	lsrs	r1, r4, #16
 8000c9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca2:	fa1f f78c 	uxth.w	r7, ip
 8000ca6:	fb08 e316 	mls	r3, r8, r6, lr
 8000caa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cae:	fb06 f107 	mul.w	r1, r6, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cbe:	f080 811f 	bcs.w	8000f00 <__udivmoddi4+0x298>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 811c 	bls.w	8000f00 <__udivmoddi4+0x298>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 f707 	mul.w	r7, r0, r7
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x92>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cec:	f080 810a 	bcs.w	8000f04 <__udivmoddi4+0x29c>
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	f240 8107 	bls.w	8000f04 <__udivmoddi4+0x29c>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	1be4      	subs	r4, r4, r7
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa4>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xc2>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80ef 	beq.w	8000efa <__udivmoddi4+0x292>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x160>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd4>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80f9 	bhi.w	8000f2e <__udivmoddi4+0x2c6>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	469e      	mov	lr, r3
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa4>
 8000d4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xec>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 8092 	bne.w	8000e82 <__udivmoddi4+0x21a>
 8000d5e:	eba1 010c 	sub.w	r1, r1, ip
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0c20      	lsrs	r0, r4, #16
 8000d6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d72:	fb07 1113 	mls	r1, r7, r3, r1
 8000d76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7a:	fb0e f003 	mul.w	r0, lr, r3
 8000d7e:	4288      	cmp	r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x12c>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x12a>
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	f200 80cb 	bhi.w	8000f28 <__udivmoddi4+0x2c0>
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000da0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da4:	fb0e fe00 	mul.w	lr, lr, r0
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x156>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x154>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f200 80bb 	bhi.w	8000f32 <__udivmoddi4+0x2ca>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dc6:	e79c      	b.n	8000d02 <__udivmoddi4+0x9a>
 8000dc8:	f1c6 0720 	rsb	r7, r6, #32
 8000dcc:	40b3      	lsls	r3, r6
 8000dce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	431c      	orrs	r4, r3
 8000de0:	40f9      	lsrs	r1, r7
 8000de2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fb09 1118 	mls	r1, r9, r8, r1
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	fb08 f00e 	mul.w	r0, r8, lr
 8000e00:	4288      	cmp	r0, r1
 8000e02:	fa02 f206 	lsl.w	r2, r2, r6
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b8>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2bc>
 8000e14:	4288      	cmp	r0, r1
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2bc>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e28:	fb09 1110 	mls	r1, r9, r0, r1
 8000e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	458e      	cmp	lr, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1e2>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e40:	d26c      	bcs.n	8000f1c <__udivmoddi4+0x2b4>
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d96a      	bls.n	8000f1c <__udivmoddi4+0x2b4>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e52:	eba1 010e 	sub.w	r1, r1, lr
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	46c8      	mov	r8, r9
 8000e5a:	46a6      	mov	lr, r4
 8000e5c:	d356      	bcc.n	8000f0c <__udivmoddi4+0x2a4>
 8000e5e:	d053      	beq.n	8000f08 <__udivmoddi4+0x2a0>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x212>
 8000e62:	ebb3 0208 	subs.w	r2, r3, r8
 8000e66:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e72:	40f1      	lsrs	r1, r6
 8000e74:	431f      	orrs	r7, r3
 8000e76:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e90:	4091      	lsls	r1, r2
 8000e92:	4301      	orrs	r1, r0
 8000e94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e98:	fa1f fe8c 	uxth.w	lr, ip
 8000e9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea4:	0c0b      	lsrs	r3, r1, #16
 8000ea6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x260>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ebe:	d22f      	bcs.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d92d      	bls.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	b289      	uxth	r1, r1
 8000ecc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb06 f30e 	mul.w	r3, r6, lr
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x28a>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ee8:	d216      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d914      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000eee:	3e02      	subs	r6, #2
 8000ef0:	4461      	add	r1, ip
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef8:	e738      	b.n	8000d6c <__udivmoddi4+0x104>
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e705      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e3      	b.n	8000ccc <__udivmoddi4+0x64>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6f8      	b.n	8000cfa <__udivmoddi4+0x92>
 8000f08:	454b      	cmp	r3, r9
 8000f0a:	d2a9      	bcs.n	8000e60 <__udivmoddi4+0x1f8>
 8000f0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7a3      	b.n	8000e60 <__udivmoddi4+0x1f8>
 8000f18:	4646      	mov	r6, r8
 8000f1a:	e7ea      	b.n	8000ef2 <__udivmoddi4+0x28a>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	e794      	b.n	8000e4a <__udivmoddi4+0x1e2>
 8000f20:	4640      	mov	r0, r8
 8000f22:	e7d1      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f24:	46d0      	mov	r8, sl
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b8>
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e732      	b.n	8000d94 <__udivmoddi4+0x12c>
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e709      	b.n	8000d46 <__udivmoddi4+0xde>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e742      	b.n	8000dbe <__udivmoddi4+0x156>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <toggleLD2>:
// Redirect printf to UART
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

// define a function to toggle the LD2 LED in a certain pattern
void toggleLD2(uint32_t delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2120      	movs	r1, #32
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f003 ff2c 	bl	8004da8 <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f003 fc75 	bl	8004840 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2120      	movs	r1, #32
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f003 ff23 	bl	8004da8 <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f003 fc6c 	bl	8004840 <HAL_Delay>
  // printf("Working\r\n");
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_TIM_IC_CaptureCallback>:

// interrupt handler for the timer
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f74:	b090      	sub	sp, #64	; 0x40
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (htim->Instance == TIM5)
 8000f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4bb6      	ldr	r3, [pc, #728]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 80fa 	bne.w	800117a <HAL_TIM_IC_CaptureCallback+0x20a>
  {
    switch (htim->Channel)
 8000f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f88:	7f1b      	ldrb	r3, [r3, #28]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d07b      	beq.n	8001086 <HAL_TIM_IC_CaptureCallback+0x116>
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	f040 80ef 	bne.w	8001172 <HAL_TIM_IC_CaptureCallback+0x202>
    {
    case HAL_TIM_ACTIVE_CHANNEL_2: // right sensor
      if (timer_flag == 0)
 8000f94:	4bb1      	ldr	r3, [pc, #708]	; (800125c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d113      	bne.n	8000fc4 <HAL_TIM_IC_CaptureCallback+0x54>
      {
        timer_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000fa0:	f005 ff50 	bl	8006e44 <HAL_TIM_ReadCapturedValue>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8000faa:	637a      	str	r2, [r7, #52]	; 0x34
 8000fac:	4bac      	ldr	r3, [pc, #688]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8000fae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000fb2:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo right counter tr1= %d\r\n",timer_1);
        timer_flag = 1;
 8000fb6:	4ba9      	ldr	r3, [pc, #676]	; (800125c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
        timer_fin = 0;
 8000fbc:	4ba9      	ldr	r3, [pc, #676]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e05b      	b.n	800107c <HAL_TIM_IC_CaptureCallback+0x10c>
      }
      else
      {
        timer_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000fc8:	f005 ff3c 	bl	8006e44 <HAL_TIM_ReadCapturedValue>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2200      	movs	r2, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000fd4:	4ba4      	ldr	r3, [pc, #656]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8000fd6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000fda:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo right counter tr2= %d\r\n",timer_2);
        timer_flag = 0;
 8000fde:	4b9f      	ldr	r3, [pc, #636]	; (800125c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
        timer_fin = 1;
 8000fe4:	4b9f      	ldr	r3, [pc, #636]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
        if (timer_1 < timer_2) // if the timer is not overflowed
 8000fea:	4b9d      	ldr	r3, [pc, #628]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8000fec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff0:	4b9d      	ldr	r3, [pc, #628]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	4290      	cmp	r0, r2
 8000ff8:	eb71 0303 	sbcs.w	r3, r1, r3
 8000ffc:	d219      	bcs.n	8001032 <HAL_TIM_IC_CaptureCallback+0xc2>
        {
          cmr = (double)(timer_2 - timer_1) * 0.017; // 340*100/1e6/2
 8000ffe:	4b9a      	ldr	r3, [pc, #616]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001004:	4b96      	ldr	r3, [pc, #600]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	1a84      	subs	r4, r0, r2
 800100c:	623c      	str	r4, [r7, #32]
 800100e:	eb61 0303 	sbc.w	r3, r1, r3
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
 8001014:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001018:	f7ff fae0 	bl	80005dc <__aeabi_ul2d>
 800101c:	a38a      	add	r3, pc, #552	; (adr r3, 8001248 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fb11 	bl	8000648 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4990      	ldr	r1, [pc, #576]	; (800126c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 800102c:	e9c1 2300 	strd	r2, r3, [r1]
 8001030:	e01d      	b.n	800106e <HAL_TIM_IC_CaptureCallback+0xfe>
        }
        else
        {
          cmr = (double)(timer_2 + 0xffffffff - timer_1) * 0.017; // 340*100/1e6/2
 8001032:	4b8d      	ldr	r3, [pc, #564]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001038:	4b89      	ldr	r3, [pc, #548]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	ebb0 0802 	subs.w	r8, r0, r2
 8001042:	eb61 0903 	sbc.w	r9, r1, r3
 8001046:	f118 33ff 	adds.w	r3, r8, #4294967295	; 0xffffffff
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	f149 0300 	adc.w	r3, r9, #0
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001056:	f7ff fac1 	bl	80005dc <__aeabi_ul2d>
 800105a:	a37b      	add	r3, pc, #492	; (adr r3, 8001248 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff faf2 	bl	8000648 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4980      	ldr	r1, [pc, #512]	; (800126c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 800106a:	e9c1 2300 	strd	r2, r3, [r1]
        }
        timer_1 = 0;
 800106e:	497c      	ldr	r1, [pc, #496]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	e9c1 2300 	strd	r2, r3, [r1]
        // printf("Distance right = %.3f cm. \r\n",  cmr);
      }
      // printf("Echo right: t1= %.3f us,  t2= %.3f us\r",timer_1*10, timer_2*10);
      HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 800107c:	2104      	movs	r1, #4
 800107e:	487c      	ldr	r0, [pc, #496]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001080:	f005 f94a 	bl	8006318 <HAL_TIM_IC_Start_IT>
      break;
 8001084:	e07a      	b.n	800117c <HAL_TIM_IC_CaptureCallback+0x20c>

    case HAL_TIM_ACTIVE_CHANNEL_1: // left sensor
      if (timel_flag == 0)
 8001086:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x304>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d113      	bne.n	80010b6 <HAL_TIM_IC_CaptureCallback+0x146>
      {
        timel_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800108e:	2100      	movs	r1, #0
 8001090:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001092:	f005 fed7 	bl	8006e44 <HAL_TIM_ReadCapturedValue>
 8001096:	4603      	mov	r3, r0
 8001098:	2200      	movs	r2, #0
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	617a      	str	r2, [r7, #20]
 800109e:	4b76      	ldr	r3, [pc, #472]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x308>)
 80010a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80010a4:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo left counter tl1= %d\r\n",timel_1);
        timel_flag = 1;
 80010a8:	4b72      	ldr	r3, [pc, #456]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x304>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
        timel_fin = 0;
 80010ae:	4b73      	ldr	r3, [pc, #460]	; (800127c <HAL_TIM_IC_CaptureCallback+0x30c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e058      	b.n	8001168 <HAL_TIM_IC_CaptureCallback+0x1f8>
      }
      else
      {
        timel_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010b6:	2100      	movs	r1, #0
 80010b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010ba:	f005 fec3 	bl	8006e44 <HAL_TIM_ReadCapturedValue>
 80010be:	4603      	mov	r3, r0
 80010c0:	2200      	movs	r2, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	60fa      	str	r2, [r7, #12]
 80010c6:	4b6e      	ldr	r3, [pc, #440]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x310>)
 80010c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010cc:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo left counter tl2= %d\r\n",timel_2);
        timel_flag = 0;
 80010d0:	4b68      	ldr	r3, [pc, #416]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x304>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
        timel_fin = 1;
 80010d6:	4b69      	ldr	r3, [pc, #420]	; (800127c <HAL_TIM_IC_CaptureCallback+0x30c>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
        if (timel_1 < timel_2) // if the timer is not overflowed
 80010dc:	4b66      	ldr	r3, [pc, #408]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x308>)
 80010de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e2:	4b67      	ldr	r3, [pc, #412]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x310>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	4290      	cmp	r0, r2
 80010ea:	eb71 0303 	sbcs.w	r3, r1, r3
 80010ee:	d219      	bcs.n	8001124 <HAL_TIM_IC_CaptureCallback+0x1b4>
        {
          cml = (double)(timel_2 - timel_1) * 0.017; // 340*100/1e6/2
 80010f0:	4b63      	ldr	r3, [pc, #396]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x310>)
 80010f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010f6:	4b60      	ldr	r3, [pc, #384]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x308>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	1a84      	subs	r4, r0, r2
 80010fe:	603c      	str	r4, [r7, #0]
 8001100:	eb61 0303 	sbc.w	r3, r1, r3
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800110a:	f7ff fa67 	bl	80005dc <__aeabi_ul2d>
 800110e:	a34e      	add	r3, pc, #312	; (adr r3, 8001248 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff fa98 	bl	8000648 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4959      	ldr	r1, [pc, #356]	; (8001284 <HAL_TIM_IC_CaptureCallback+0x314>)
 800111e:	e9c1 2300 	strd	r2, r3, [r1]
 8001122:	e01a      	b.n	800115a <HAL_TIM_IC_CaptureCallback+0x1ea>
        }
        else
        {
          cml = (double)(timel_2 + 0xffffffff - timel_1) * 0.017; // 340*100/1e6/2
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800112a:	4b53      	ldr	r3, [pc, #332]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x308>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	1a84      	subs	r4, r0, r2
 8001132:	eb61 0503 	sbc.w	r5, r1, r3
 8001136:	f114 3aff 	adds.w	sl, r4, #4294967295	; 0xffffffff
 800113a:	f145 0b00 	adc.w	fp, r5, #0
 800113e:	4650      	mov	r0, sl
 8001140:	4659      	mov	r1, fp
 8001142:	f7ff fa4b 	bl	80005dc <__aeabi_ul2d>
 8001146:	a340      	add	r3, pc, #256	; (adr r3, 8001248 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fa7c 	bl	8000648 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	494b      	ldr	r1, [pc, #300]	; (8001284 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001156:	e9c1 2300 	strd	r2, r3, [r1]
        }
        timel_1 = 0;
 800115a:	4947      	ldr	r1, [pc, #284]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x308>)
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9c1 2300 	strd	r2, r3, [r1]
      }
      // printf("Echo left: t1= %.3f us,  t2= %.3f us\r",timel_1*10, timel_2*10);
      // printf("Distance left = %.3f cm. \r\n",  cml);
      HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001168:	2100      	movs	r1, #0
 800116a:	4841      	ldr	r0, [pc, #260]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x300>)
 800116c:	f005 f8d4 	bl	8006318 <HAL_TIM_IC_Start_IT>
      break;
 8001170:	e004      	b.n	800117c <HAL_TIM_IC_CaptureCallback+0x20c>
    default:
      printf("Error timer channel.\r\n");
 8001172:	4845      	ldr	r0, [pc, #276]	; (8001288 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001174:	f008 faae 	bl	80096d4 <puts>
      break;
 8001178:	e000      	b.n	800117c <HAL_TIM_IC_CaptureCallback+0x20c>
    }
  }
 800117a:	bf00      	nop
  if (htim->Instance == TIM4)
 800117c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a42      	ldr	r2, [pc, #264]	; (800128c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	f040 8090 	bne.w	80012a8 <HAL_TIM_IC_CaptureCallback+0x338>
  {
    switch (htim->Channel)
 8001188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118a:	7f1b      	ldrb	r3, [r3, #28]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d154      	bne.n	800123a <HAL_TIM_IC_CaptureCallback+0x2ca>
    {
    case HAL_TIM_ACTIVE_CHANNEL_1: // right sensor
      if (timef_flag == 0)
 8001190:	4b3f      	ldr	r3, [pc, #252]	; (8001290 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10d      	bne.n	80011b4 <HAL_TIM_IC_CaptureCallback+0x244>
      {
        timef_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001198:	2100      	movs	r1, #0
 800119a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800119c:	f005 fe52 	bl	8006e44 <HAL_TIM_ReadCapturedValue>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <HAL_TIM_IC_CaptureCallback+0x324>)
 80011a4:	6013      	str	r3, [r2, #0]
        // printf("Echo front: tf1= %d us\r",timef_1*10);
        timef_flag = 1;
 80011a6:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <HAL_TIM_IC_CaptureCallback+0x320>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
        timef_fin = 0;
 80011ac:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <HAL_TIM_IC_CaptureCallback+0x328>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e03d      	b.n	8001230 <HAL_TIM_IC_CaptureCallback+0x2c0>
      }
      else
      {
        timef_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80011b4:	2100      	movs	r1, #0
 80011b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011b8:	f005 fe44 	bl	8006e44 <HAL_TIM_ReadCapturedValue>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a37      	ldr	r2, [pc, #220]	; (800129c <HAL_TIM_IC_CaptureCallback+0x32c>)
 80011c0:	6013      	str	r3, [r2, #0]
        timef_flag = 0;
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <HAL_TIM_IC_CaptureCallback+0x320>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
        timef_fin = 1;
 80011c8:	4b33      	ldr	r3, [pc, #204]	; (8001298 <HAL_TIM_IC_CaptureCallback+0x328>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
        if (timef_1 < timef_2) // if the timer is not overflowed
 80011ce:	4b31      	ldr	r3, [pc, #196]	; (8001294 <HAL_TIM_IC_CaptureCallback+0x324>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b32      	ldr	r3, [pc, #200]	; (800129c <HAL_TIM_IC_CaptureCallback+0x32c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d212      	bcs.n	8001200 <HAL_TIM_IC_CaptureCallback+0x290>
        {
          cmf = (double)(timef_2 - timef_1) * 3.4; // 340*100/5e3/2
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_TIM_IC_CaptureCallback+0x32c>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_TIM_IC_CaptureCallback+0x324>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9b5 	bl	8000554 <__aeabi_ui2d>
 80011ea:	a319      	add	r3, pc, #100	; (adr r3, 8001250 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fa2a 	bl	8000648 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4929      	ldr	r1, [pc, #164]	; (80012a0 <HAL_TIM_IC_CaptureCallback+0x330>)
 80011fa:	e9c1 2300 	strd	r2, r3, [r1]
 80011fe:	e014      	b.n	800122a <HAL_TIM_IC_CaptureCallback+0x2ba>
        }
        else
        {
          cmf = (double)(timef_2 + 0xffff - timef_1) * 3.4; // 340*100/5e3/2
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800120e:	33ff      	adds	r3, #255	; 0xff
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f99f 	bl	8000554 <__aeabi_ui2d>
 8001216:	a30e      	add	r3, pc, #56	; (adr r3, 8001250 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fa14 	bl	8000648 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	491e      	ldr	r1, [pc, #120]	; (80012a0 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001226:	e9c1 2300 	strd	r2, r3, [r1]
        }
        timef_1 = 0;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_TIM_IC_CaptureCallback+0x324>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
      }
      // printf("Echo front: t= %.3f us\r\n",timel_1*10, timer_2*10);
      // printf("Distance front = %.3f cm. \r\n",  cmf);
      HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001230:	2100      	movs	r1, #0
 8001232:	481c      	ldr	r0, [pc, #112]	; (80012a4 <HAL_TIM_IC_CaptureCallback+0x334>)
 8001234:	f005 f870 	bl	8006318 <HAL_TIM_IC_Start_IT>
      break;
 8001238:	e037      	b.n	80012aa <HAL_TIM_IC_CaptureCallback+0x33a>
    default:
      printf("Error timer channel.\r\n");
 800123a:	4813      	ldr	r0, [pc, #76]	; (8001288 <HAL_TIM_IC_CaptureCallback+0x318>)
 800123c:	f008 fa4a 	bl	80096d4 <puts>
      break;
 8001240:	e033      	b.n	80012aa <HAL_TIM_IC_CaptureCallback+0x33a>
 8001242:	bf00      	nop
 8001244:	f3af 8000 	nop.w
 8001248:	b020c49c 	.word	0xb020c49c
 800124c:	3f916872 	.word	0x3f916872
 8001250:	33333333 	.word	0x33333333
 8001254:	400b3333 	.word	0x400b3333
 8001258:	40000c00 	.word	0x40000c00
 800125c:	20000620 	.word	0x20000620
 8001260:	20000628 	.word	0x20000628
 8001264:	20000621 	.word	0x20000621
 8001268:	20000630 	.word	0x20000630
 800126c:	20000638 	.word	0x20000638
 8001270:	200005b8 	.word	0x200005b8
 8001274:	20000604 	.word	0x20000604
 8001278:	20000608 	.word	0x20000608
 800127c:	20000605 	.word	0x20000605
 8001280:	20000610 	.word	0x20000610
 8001284:	20000618 	.word	0x20000618
 8001288:	0800b858 	.word	0x0800b858
 800128c:	40000800 	.word	0x40000800
 8001290:	20000640 	.word	0x20000640
 8001294:	20000644 	.word	0x20000644
 8001298:	20000641 	.word	0x20000641
 800129c:	20000648 	.word	0x20000648
 80012a0:	20000650 	.word	0x20000650
 80012a4:	2000056c 	.word	0x2000056c
    }
  }
 80012a8:	bf00      	nop
}
 80012aa:	bf00      	nop
 80012ac:	3740      	adds	r7, #64	; 0x40
 80012ae:	46bd      	mov	sp, r7
 80012b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080012b4 <drive>:
  HAL_GPIO_WritePin(ldg_GPIO_Port, ldg_Pin, GPIO_PIN_RESET);
  HAL_Delay(delay);
}

void drive()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
  // Transfer int to char for output
  char outputstr[11];
  outputstr[0] = 0x90;
 80012ba:	2390      	movs	r3, #144	; 0x90
 80012bc:	713b      	strb	r3, [r7, #4]
  outputstr[1] = xflag;
 80012be:	4b29      	ldr	r3, [pc, #164]	; (8001364 <drive+0xb0>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	717b      	strb	r3, [r7, #5]
  outputstr[2] = xspeed / 10;
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <drive+0xb4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a28      	ldr	r2, [pc, #160]	; (800136c <drive+0xb8>)
 80012ca:	fb82 1203 	smull	r1, r2, r2, r3
 80012ce:	1092      	asrs	r2, r2, #2
 80012d0:	17db      	asrs	r3, r3, #31
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	71bb      	strb	r3, [r7, #6]
  outputstr[3] = xspeed % 10;
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <drive+0xb4>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <drive+0xb8>)
 80012de:	fb83 1302 	smull	r1, r3, r3, r2
 80012e2:	1099      	asrs	r1, r3, #2
 80012e4:	17d3      	asrs	r3, r2, #31
 80012e6:	1ac9      	subs	r1, r1, r3
 80012e8:	460b      	mov	r3, r1
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	1ad1      	subs	r1, r2, r3
 80012f2:	b2cb      	uxtb	r3, r1
 80012f4:	71fb      	strb	r3, [r7, #7]
  outputstr[4] = yflag;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <drive+0xbc>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	723b      	strb	r3, [r7, #8]
  outputstr[5] = yspeed / 10;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <drive+0xc0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1a      	ldr	r2, [pc, #104]	; (800136c <drive+0xb8>)
 8001302:	fb82 1203 	smull	r1, r2, r2, r3
 8001306:	1092      	asrs	r2, r2, #2
 8001308:	17db      	asrs	r3, r3, #31
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	727b      	strb	r3, [r7, #9]
  outputstr[6] = yspeed % 10;
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <drive+0xc0>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <drive+0xb8>)
 8001316:	fb83 1302 	smull	r1, r3, r3, r2
 800131a:	1099      	asrs	r1, r3, #2
 800131c:	17d3      	asrs	r3, r2, #31
 800131e:	1ac9      	subs	r1, r1, r3
 8001320:	460b      	mov	r3, r1
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	1ad1      	subs	r1, r2, r3
 800132a:	b2cb      	uxtb	r3, r1
 800132c:	72bb      	strb	r3, [r7, #10]
  outputstr[7] = wflag;
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <drive+0xc4>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	72fb      	strb	r3, [r7, #11]
  outputstr[8] = '0';
 8001334:	2330      	movs	r3, #48	; 0x30
 8001336:	733b      	strb	r3, [r7, #12]
  outputstr[9] = '1';
 8001338:	2331      	movs	r3, #49	; 0x31
 800133a:	737b      	strb	r3, [r7, #13]
  outputstr[10] = '2';
 800133c:	2332      	movs	r3, #50	; 0x32
 800133e:	73bb      	strb	r3, [r7, #14]
  // Transmit the instruction to the motor driver
  printf("Speed Left=%d, Speed Right=%d\r\n", xspeed, yspeed);
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <drive+0xb4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <drive+0xc0>)
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <drive+0xc8>)
 800134c:	f008 f93c 	bl	80095c8 <iprintf>
  HAL_UART_Transmit(&huart4, (uint8_t *)outputstr, 11, 100);
 8001350:	1d39      	adds	r1, r7, #4
 8001352:	2364      	movs	r3, #100	; 0x64
 8001354:	220b      	movs	r2, #11
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <drive+0xcc>)
 8001358:	f006 fd7c 	bl	8007e54 <HAL_UART_Transmit>
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2000087c 	.word	0x2000087c
 8001368:	20000878 	.word	0x20000878
 800136c:	66666667 	.word	0x66666667
 8001370:	20000884 	.word	0x20000884
 8001374:	20000880 	.word	0x20000880
 8001378:	20000885 	.word	0x20000885
 800137c:	0800b870 	.word	0x0800b870
 8001380:	20000294 	.word	0x20000294

08001384 <Left>:
  yspeed = speed;
  yflag = 2;
}

void Left(uint8_t speed)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  yspeed = speed;
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <Left+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
  yflag = 1;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <Left+0x28>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000880 	.word	0x20000880
 80013ac:	20000884 	.word	0x20000884

080013b0 <Forward>:

void Forward(uint8_t speed)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  xspeed = speed;
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <Forward+0x30>)
 80013be:	6013      	str	r3, [r2, #0]
  yspeed = speed;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <Forward+0x34>)
 80013c4:	6013      	str	r3, [r2, #0]
  xflag = 2;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <Forward+0x38>)
 80013c8:	2202      	movs	r2, #2
 80013ca:	701a      	strb	r2, [r3, #0]
  yflag = 2;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <Forward+0x3c>)
 80013ce:	2202      	movs	r2, #2
 80013d0:	701a      	strb	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000878 	.word	0x20000878
 80013e4:	20000880 	.word	0x20000880
 80013e8:	2000087c 	.word	0x2000087c
 80013ec:	20000884 	.word	0x20000884

080013f0 <Backward>:

void Backward(uint8_t speed)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  xspeed = speed;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4a08      	ldr	r2, [pc, #32]	; (8001420 <Backward+0x30>)
 80013fe:	6013      	str	r3, [r2, #0]
  yspeed = speed;
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <Backward+0x34>)
 8001404:	6013      	str	r3, [r2, #0]
  xflag = 1;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <Backward+0x38>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
  yflag = 1;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <Backward+0x3c>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000878 	.word	0x20000878
 8001424:	20000880 	.word	0x20000880
 8001428:	2000087c 	.word	0x2000087c
 800142c:	20000884 	.word	0x20000884

08001430 <Turn_Left>:

void Turn_Left(uint8_t speed)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  xspeed = xspeed - speed;
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <Turn_Left+0x60>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	4a13      	ldr	r2, [pc, #76]	; (8001490 <Turn_Left+0x60>)
 8001444:	6013      	str	r3, [r2, #0]
  yspeed = yspeed + speed;
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <Turn_Left+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4413      	add	r3, r2
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <Turn_Left+0x64>)
 8001450:	6013      	str	r3, [r2, #0]
  wflag = 0;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <Turn_Left+0x68>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
  if (xspeed < 0)
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <Turn_Left+0x60>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	da03      	bge.n	8001468 <Turn_Left+0x38>
  {
    xflag = 1;
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <Turn_Left+0x6c>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	e002      	b.n	800146e <Turn_Left+0x3e>
  }
  else
  {
    xflag = 2;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <Turn_Left+0x6c>)
 800146a:	2202      	movs	r2, #2
 800146c:	701a      	strb	r2, [r3, #0]
  }
  if (yspeed < 0)
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <Turn_Left+0x64>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	da03      	bge.n	800147e <Turn_Left+0x4e>
  {
    yflag = 1;
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <Turn_Left+0x70>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    yflag = 2;
  }
}
 800147c:	e002      	b.n	8001484 <Turn_Left+0x54>
    yflag = 2;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <Turn_Left+0x70>)
 8001480:	2202      	movs	r2, #2
 8001482:	701a      	strb	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	20000878 	.word	0x20000878
 8001494:	20000880 	.word	0x20000880
 8001498:	20000885 	.word	0x20000885
 800149c:	2000087c 	.word	0x2000087c
 80014a0:	20000884 	.word	0x20000884

080014a4 <Turn_Right>:

void Turn_Right(uint8_t speed)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  xspeed = xspeed + speed;
 80014ae:	79fa      	ldrb	r2, [r7, #7]
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <Turn_Right+0x60>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a13      	ldr	r2, [pc, #76]	; (8001504 <Turn_Right+0x60>)
 80014b8:	6013      	str	r3, [r2, #0]
  yspeed = yspeed - speed;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <Turn_Right+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	4a11      	ldr	r2, [pc, #68]	; (8001508 <Turn_Right+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]
  wflag = 1;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <Turn_Right+0x68>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
  if (xspeed < 0)
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <Turn_Right+0x60>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da03      	bge.n	80014dc <Turn_Right+0x38>
  {
    xflag = 1;
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <Turn_Right+0x6c>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e002      	b.n	80014e2 <Turn_Right+0x3e>
  }
  else
  {
    xflag = 2;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <Turn_Right+0x6c>)
 80014de:	2202      	movs	r2, #2
 80014e0:	701a      	strb	r2, [r3, #0]
  }
  if (yspeed < 0)
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <Turn_Right+0x64>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da03      	bge.n	80014f2 <Turn_Right+0x4e>
  {
    yflag = 1;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <Turn_Right+0x70>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    yflag = 2;
  }
}
 80014f0:	e002      	b.n	80014f8 <Turn_Right+0x54>
    yflag = 2;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <Turn_Right+0x70>)
 80014f4:	2202      	movs	r2, #2
 80014f6:	701a      	strb	r2, [r3, #0]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	20000878 	.word	0x20000878
 8001508:	20000880 	.word	0x20000880
 800150c:	20000885 	.word	0x20000885
 8001510:	2000087c 	.word	0x2000087c
 8001514:	20000884 	.word	0x20000884

08001518 <gyroAlignment>:

void gyroAlignment(double input)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	ed87 0b00 	vstr	d0, [r7]
  Inputgyro = input;
 8001522:	4932      	ldr	r1, [pc, #200]	; (80015ec <gyroAlignment+0xd4>)
 8001524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001528:	e9c1 2300 	strd	r2, r3, [r1]
  if (PID_Compute(&myPIDgyro)==_FALSE)
 800152c:	4830      	ldr	r0, [pc, #192]	; (80015f0 <gyroAlignment+0xd8>)
 800152e:	f002 fa67 	bl	8003a00 <PID_Compute>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <gyroAlignment+0x26>
      printf("PID_Compute for gyro error\r\n");
 8001538:	482e      	ldr	r0, [pc, #184]	; (80015f4 <gyroAlignment+0xdc>)
 800153a:	f008 f8cb 	bl	80096d4 <puts>
    printf("Outputgyro = %.3f\r\n", Outputgyro);
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <gyroAlignment+0xe0>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	482d      	ldr	r0, [pc, #180]	; (80015fc <gyroAlignment+0xe4>)
 8001546:	f008 f83f 	bl	80095c8 <iprintf>

  if (Outputgyro > 1)
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <gyroAlignment+0xe0>)
 800154c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <gyroAlignment+0xe8>)
 8001556:	f7ff fb07 	bl	8000b68 <__aeabi_dcmpgt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00b      	beq.n	8001578 <gyroAlignment+0x60>
  {

    Turn_Left((uint8_t)Outputgyro);
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <gyroAlignment+0xe0>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fb45 	bl	8000bf8 <__aeabi_d2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff5c 	bl	8001430 <Turn_Left>
  }
  if (Outputgyro < -1)
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <gyroAlignment+0xe0>)
 800157a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <gyroAlignment+0xec>)
 8001584:	f7ff fad2 	bl	8000b2c <__aeabi_dcmplt>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00e      	beq.n	80015ac <gyroAlignment+0x94>
  {
    Turn_Right((uint8_t)(-Outputgyro));
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <gyroAlignment+0xe0>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	4614      	mov	r4, r2
 8001596:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7ff fb2b 	bl	8000bf8 <__aeabi_d2uiz>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff7c 	bl	80014a4 <Turn_Right>
  }
  if ((Inputgyro <= 1) && (Inputgyro >= -1))
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <gyroAlignment+0xd4>)
 80015ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <gyroAlignment+0xe8>)
 80015b8:	f7ff fac2 	bl	8000b40 <__aeabi_dcmple>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d100      	bne.n	80015c4 <gyroAlignment+0xac>
  {
    Turn_Left(0);
  }
}
 80015c2:	e00e      	b.n	80015e2 <gyroAlignment+0xca>
  if ((Inputgyro <= 1) && (Inputgyro >= -1))
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <gyroAlignment+0xd4>)
 80015c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <gyroAlignment+0xec>)
 80015d0:	f7ff fac0 	bl	8000b54 <__aeabi_dcmpge>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d100      	bne.n	80015dc <gyroAlignment+0xc4>
}
 80015da:	e002      	b.n	80015e2 <gyroAlignment+0xca>
    Turn_Left(0);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff ff27 	bl	8001430 <Turn_Left>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200006a0 	.word	0x200006a0
 80015f0:	20000808 	.word	0x20000808
 80015f4:	0800b8a0 	.word	0x0800b8a0
 80015f8:	200006a8 	.word	0x200006a8
 80015fc:	0800b8bc 	.word	0x0800b8bc
 8001600:	3ff00000 	.word	0x3ff00000
 8001604:	bff00000 	.word	0xbff00000

08001608 <Alignment>:
//drive();
//toggleld2(50);
/***example***/

void Alignment(double cmleft, double cmright)
{
 8001608:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af02      	add	r7, sp, #8
 8001610:	ed87 0b02 	vstr	d0, [r7, #8]
 8001614:	ed87 1b00 	vstr	d1, [r7]
  printf("Distance left = %.3f cm, Distance right = %.3f cm.\r\n", cmleft, cmright);
 8001618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800161c:	e9cd 2300 	strd	r2, r3, [sp]
 8001620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001624:	4853      	ldr	r0, [pc, #332]	; (8001774 <Alignment+0x16c>)
 8001626:	f007 ffcf 	bl	80095c8 <iprintf>
  Inputultra = cmleft-cmright;
 800162a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800162e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001632:	f7fe fe51 	bl	80002d8 <__aeabi_dsub>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	494f      	ldr	r1, [pc, #316]	; (8001778 <Alignment+0x170>)
 800163c:	e9c1 2300 	strd	r2, r3, [r1]

  //When previous process have not been finished, do nothing, just align
  if ((cmleft-cmright>2)||(cmleft-cmright<-2))
 8001640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001648:	f7fe fe46 	bl	80002d8 <__aeabi_dsub>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800165c:	f7ff fa84 	bl	8000b68 <__aeabi_dcmpgt>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d112      	bne.n	800168c <Alignment+0x84>
 8001666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800166a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800166e:	f7fe fe33 	bl	80002d8 <__aeabi_dsub>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001682:	f7ff fa53 	bl	8000b2c <__aeabi_dcmplt>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d037      	beq.n	80016fc <Alignment+0xf4>
  {
    if (PID_Compute(&myPIDultra)==_FALSE)
 800168c:	483b      	ldr	r0, [pc, #236]	; (800177c <Alignment+0x174>)
 800168e:	f002 f9b7 	bl	8003a00 <PID_Compute>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <Alignment+0x96>
      printf("PID_Compute for ultra error\r\n");
 8001698:	4839      	ldr	r0, [pc, #228]	; (8001780 <Alignment+0x178>)
 800169a:	f008 f81b 	bl	80096d4 <puts>
    printf("Outputultra = %.3f\r\n", Outputultra);
 800169e:	4b39      	ldr	r3, [pc, #228]	; (8001784 <Alignment+0x17c>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	4838      	ldr	r0, [pc, #224]	; (8001788 <Alignment+0x180>)
 80016a6:	f007 ff8f 	bl	80095c8 <iprintf>

    if (Outputultra >= 0)
 80016aa:	4b36      	ldr	r3, [pc, #216]	; (8001784 <Alignment+0x17c>)
 80016ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	f7ff fa4c 	bl	8000b54 <__aeabi_dcmpge>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00c      	beq.n	80016dc <Alignment+0xd4>
      Turn_Left((uint8_t)Outputultra);
 80016c2:	4b30      	ldr	r3, [pc, #192]	; (8001784 <Alignment+0x17c>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff fa94 	bl	8000bf8 <__aeabi_d2uiz>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff feab 	bl	8001430 <Turn_Left>
    else
      Turn_Right((uint8_t)(-Outputultra));
    return;
 80016da:	e046      	b.n	800176a <Alignment+0x162>
      Turn_Right((uint8_t)(-Outputultra));
 80016dc:	4b29      	ldr	r3, [pc, #164]	; (8001784 <Alignment+0x17c>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	4690      	mov	r8, r2
 80016e4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80016e8:	4640      	mov	r0, r8
 80016ea:	4649      	mov	r1, r9
 80016ec:	f7ff fa84 	bl	8000bf8 <__aeabi_d2uiz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fed5 	bl	80014a4 <Turn_Right>
    return;
 80016fa:	e036      	b.n	800176a <Alignment+0x162>
  //   }   
  // } 
    
  

  if (PID_Compute(&myPIDultra)==_FALSE)
 80016fc:	481f      	ldr	r0, [pc, #124]	; (800177c <Alignment+0x174>)
 80016fe:	f002 f97f 	bl	8003a00 <PID_Compute>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <Alignment+0x106>
    printf("PID_Compute for ultra error\r\n");
 8001708:	481d      	ldr	r0, [pc, #116]	; (8001780 <Alignment+0x178>)
 800170a:	f007 ffe3 	bl	80096d4 <puts>
  printf("Outputultra = %.3f\r\n", Outputultra);
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <Alignment+0x17c>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	481c      	ldr	r0, [pc, #112]	; (8001788 <Alignment+0x180>)
 8001716:	f007 ff57 	bl	80095c8 <iprintf>

  if (Outputultra >= 0)
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <Alignment+0x17c>)
 800171c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	f7ff fa14 	bl	8000b54 <__aeabi_dcmpge>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00c      	beq.n	800174c <Alignment+0x144>
  {
    Turn_Left((uint8_t)Outputultra);
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <Alignment+0x17c>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff fa5c 	bl	8000bf8 <__aeabi_d2uiz>
 8001740:	4603      	mov	r3, r0
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fe73 	bl	8001430 <Turn_Left>
 800174a:	e00e      	b.n	800176a <Alignment+0x162>
  }
  else
  {
    Turn_Right((uint8_t)(-Outputultra));
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <Alignment+0x17c>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	4614      	mov	r4, r2
 8001754:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7ff fa4c 	bl	8000bf8 <__aeabi_d2uiz>
 8001760:	4603      	mov	r3, r0
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fe9d 	bl	80014a4 <Turn_Right>
  }
}
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001772:	bf00      	nop
 8001774:	0800b8d0 	.word	0x0800b8d0
 8001778:	20000660 	.word	0x20000660
 800177c:	200006b8 	.word	0x200006b8
 8001780:	0800b908 	.word	0x0800b908
 8001784:	20000668 	.word	0x20000668
 8001788:	0800b928 	.word	0x0800b928

0800178c <superAlignment>:

void superAlignment(double precision)
{
 800178c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	ed87 0b02 	vstr	d0, [r7, #8]
  printf("Super Alignment Started.\r\n");
 8001798:	4872      	ldr	r0, [pc, #456]	; (8001964 <superAlignment+0x1d8>)
 800179a:	f007 ff9b 	bl	80096d4 <puts>
  
  while (1)
  {
    while((timel_fin==1 && timer_fin ==1)!=1)
 800179e:	e002      	b.n	80017a6 <superAlignment+0x1a>
      {
        HAL_Delay(1);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f003 f84d 	bl	8004840 <HAL_Delay>
    while((timel_fin==1 && timer_fin ==1)!=1)
 80017a6:	4b70      	ldr	r3, [pc, #448]	; (8001968 <superAlignment+0x1dc>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d105      	bne.n	80017ba <superAlignment+0x2e>
 80017ae:	4b6f      	ldr	r3, [pc, #444]	; (800196c <superAlignment+0x1e0>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <superAlignment+0x2e>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <superAlignment+0x30>
 80017ba:	2300      	movs	r3, #0
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d1ef      	bne.n	80017a0 <superAlignment+0x14>
      }
      //printf("cm left = %.3f, cm right = %.3f\r\n", cml, cmr);
      //cml+=1;
      

    if((cml-cmr<precision) && (cml-cmr)>(-1*precision))
 80017c0:	4b6b      	ldr	r3, [pc, #428]	; (8001970 <superAlignment+0x1e4>)
 80017c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c6:	4b6b      	ldr	r3, [pc, #428]	; (8001974 <superAlignment+0x1e8>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe fd84 	bl	80002d8 <__aeabi_dsub>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017d8:	f7ff f9c6 	bl	8000b68 <__aeabi_dcmpgt>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d062      	beq.n	80018a8 <superAlignment+0x11c>
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <superAlignment+0x1e4>)
 80017e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017e8:	4b62      	ldr	r3, [pc, #392]	; (8001974 <superAlignment+0x1e8>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fd73 	bl	80002d8 <__aeabi_dsub>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	68bc      	ldr	r4, [r7, #8]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001802:	4622      	mov	r2, r4
 8001804:	462b      	mov	r3, r5
 8001806:	f7ff f9af 	bl	8000b68 <__aeabi_dcmpgt>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d04b      	beq.n	80018a8 <superAlignment+0x11c>
    {
      //double check
      Forward(0);
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff fdcd 	bl	80013b0 <Forward>
      drive();
 8001816:	f7ff fd4d 	bl	80012b4 <drive>
      HAL_Delay(500);
 800181a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800181e:	f003 f80f 	bl	8004840 <HAL_Delay>

      printf("Super Alignment Finished.\r\n");
 8001822:	4855      	ldr	r0, [pc, #340]	; (8001978 <superAlignment+0x1ec>)
 8001824:	f007 ff56 	bl	80096d4 <puts>
      Forward(0);
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fdc1 	bl	80013b0 <Forward>
      drive();
 800182e:	f7ff fd41 	bl	80012b4 <drive>
      if((cml-cmr<precision) && (cml-cmr)>(-1*precision))
 8001832:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <superAlignment+0x1e4>)
 8001834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001838:	4b4e      	ldr	r3, [pc, #312]	; (8001974 <superAlignment+0x1e8>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe fd4b 	bl	80002d8 <__aeabi_dsub>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800184a:	f7ff f98d 	bl	8000b68 <__aeabi_dcmpgt>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d100      	bne.n	8001856 <superAlignment+0xca>
        toggleLD2(500);
        return;
      }
      else
      {
        continue;
 8001854:	e080      	b.n	8001958 <superAlignment+0x1cc>
      if((cml-cmr<precision) && (cml-cmr)>(-1*precision))
 8001856:	4b46      	ldr	r3, [pc, #280]	; (8001970 <superAlignment+0x1e4>)
 8001858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800185c:	4b45      	ldr	r3, [pc, #276]	; (8001974 <superAlignment+0x1e8>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fd39 	bl	80002d8 <__aeabi_dsub>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800187e:	f7ff f973 	bl	8000b68 <__aeabi_dcmpgt>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d100      	bne.n	800188a <superAlignment+0xfe>
        continue;
 8001888:	e066      	b.n	8001958 <superAlignment+0x1cc>
        HAL_GPIO_WritePin(ldr_GPIO_Port,ldr_Pin,GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2102      	movs	r1, #2
 800188e:	483b      	ldr	r0, [pc, #236]	; (800197c <superAlignment+0x1f0>)
 8001890:	f003 fa8a 	bl	8004da8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ldg_GPIO_Port,ldg_Pin,GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2104      	movs	r1, #4
 8001898:	4838      	ldr	r0, [pc, #224]	; (800197c <superAlignment+0x1f0>)
 800189a:	f003 fa85 	bl	8004da8 <HAL_GPIO_WritePin>
        toggleLD2(500);
 800189e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a2:	f7ff fb4b 	bl	8000f3c <toggleLD2>
        return;
 80018a6:	e058      	b.n	800195a <superAlignment+0x1ce>
      }
    }
    else
    {
      Inputultra = cml-cmr;
 80018a8:	4b31      	ldr	r3, [pc, #196]	; (8001970 <superAlignment+0x1e4>)
 80018aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <superAlignment+0x1e8>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fd10 	bl	80002d8 <__aeabi_dsub>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4930      	ldr	r1, [pc, #192]	; (8001980 <superAlignment+0x1f4>)
 80018be:	e9c1 2300 	strd	r2, r3, [r1]
      if (PID_Compute(&myPIDultra)==_FALSE)
 80018c2:	4830      	ldr	r0, [pc, #192]	; (8001984 <superAlignment+0x1f8>)
 80018c4:	f002 f89c 	bl	8003a00 <PID_Compute>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <superAlignment+0x148>
        printf("PID_Compute for ultra error\r\n");
 80018ce:	482e      	ldr	r0, [pc, #184]	; (8001988 <superAlignment+0x1fc>)
 80018d0:	f007 ff00 	bl	80096d4 <puts>
      printf("Outputultra = %.3f\r\n", Outputultra);
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <superAlignment+0x200>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	482d      	ldr	r0, [pc, #180]	; (8001990 <superAlignment+0x204>)
 80018dc:	f007 fe74 	bl	80095c8 <iprintf>
  
      if (Outputultra > 0)
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <superAlignment+0x200>)
 80018e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	f7ff f93b 	bl	8000b68 <__aeabi_dcmpgt>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00f      	beq.n	8001918 <superAlignment+0x18c>
      {
        Forward((uint8_t)(Outputultra));
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <superAlignment+0x200>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f979 	bl	8000bf8 <__aeabi_d2uiz>
 8001906:	4603      	mov	r3, r0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fd50 	bl	80013b0 <Forward>
        xflag=1;
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <superAlignment+0x208>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	e011      	b.n	800193c <superAlignment+0x1b0>
      }
      else
      {
        Forward((int)(-1*Outputultra));
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <superAlignment+0x200>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	4690      	mov	r8, r2
 8001920:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001924:	4640      	mov	r0, r8
 8001926:	4649      	mov	r1, r9
 8001928:	f7ff f93e 	bl	8000ba8 <__aeabi_d2iz>
 800192c:	4603      	mov	r3, r0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fd3d 	bl	80013b0 <Forward>
        yflag=1;
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <superAlignment+0x20c>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
      }
      drive();
 800193c:	f7ff fcba 	bl	80012b4 <drive>

      HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8001940:	2102      	movs	r1, #2
 8001942:	480e      	ldr	r0, [pc, #56]	; (800197c <superAlignment+0x1f0>)
 8001944:	f003 fa48 	bl	8004dd8 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8001948:	2104      	movs	r1, #4
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <superAlignment+0x1f0>)
 800194c:	f003 fa44 	bl	8004dd8 <HAL_GPIO_TogglePin>
      HAL_Delay(300);
 8001950:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001954:	f002 ff74 	bl	8004840 <HAL_Delay>
    while((timel_fin==1 && timer_fin ==1)!=1)
 8001958:	e725      	b.n	80017a6 <superAlignment+0x1a>
    }
  }
}
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001962:	bf00      	nop
 8001964:	0800b940 	.word	0x0800b940
 8001968:	20000605 	.word	0x20000605
 800196c:	20000621 	.word	0x20000621
 8001970:	20000618 	.word	0x20000618
 8001974:	20000638 	.word	0x20000638
 8001978:	0800b95c 	.word	0x0800b95c
 800197c:	48000400 	.word	0x48000400
 8001980:	20000660 	.word	0x20000660
 8001984:	200006b8 	.word	0x200006b8
 8001988:	0800b908 	.word	0x0800b908
 800198c:	20000668 	.word	0x20000668
 8001990:	0800b928 	.word	0x0800b928
 8001994:	2000087c 	.word	0x2000087c
 8001998:	20000884 	.word	0x20000884

0800199c <hc12send>:

uint8_t hc12send(uint8_t data)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  return HAL_UART_Transmit(&huart5, &data, 1, 100);
 80019a6:	1df9      	adds	r1, r7, #7
 80019a8:	2364      	movs	r3, #100	; 0x64
 80019aa:	2201      	movs	r2, #1
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <hc12send+0x20>)
 80019ae:	f006 fa51 	bl	8007e54 <HAL_UART_Transmit>
 80019b2:	4603      	mov	r3, r0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000324 	.word	0x20000324

080019c0 <atkAngleRound>:
{
  return HAL_UART_Receive(&huart3, &openmv_instrction, 7, 100);
}

int atkAngleRound(int a)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  return ((a + 360) % 360);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <atkAngleRound+0x34>)
 80019d0:	fb82 1203 	smull	r1, r2, r2, r3
 80019d4:	441a      	add	r2, r3
 80019d6:	1211      	asrs	r1, r2, #8
 80019d8:	17da      	asrs	r2, r3, #31
 80019da:	1a8a      	subs	r2, r1, r2
 80019dc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80019e0:	fb01 f202 	mul.w	r2, r1, r2
 80019e4:	1a9a      	subs	r2, r3, r2
 80019e6:	4613      	mov	r3, r2
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	b60b60b7 	.word	0xb60b60b7

080019f8 <ATKPrcess>:

void ATKPrcess() // update ATK value
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0a0      	sub	sp, #128	; 0x80
 80019fc:	af00      	add	r7, sp, #0
  int r = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	67fb      	str	r3, [r7, #124]	; 0x7c
  char ATKbuf[100];

  UART_ENABLE_RE(huart1);
 8001a02:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <ATKPrcess+0x178>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <ATKPrcess+0x178>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0204 	orr.w	r2, r2, #4
 8001a10:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Receive(&huart1, (uint8_t *)ATKbuf, 60, HAL_MAX_DELAY) == HAL_ERROR) // Read frames from ATK
 8001a12:	f107 010c 	add.w	r1, r7, #12
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1a:	223c      	movs	r2, #60	; 0x3c
 8001a1c:	4854      	ldr	r0, [pc, #336]	; (8001b70 <ATKPrcess+0x178>)
 8001a1e:	f006 faaf 	bl	8007f80 <HAL_UART_Receive>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d108      	bne.n	8001a3a <ATKPrcess+0x42>
  {
    UART_DISABLE_RE(huart1); // error
 8001a28:	4b51      	ldr	r3, [pc, #324]	; (8001b70 <ATKPrcess+0x178>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <ATKPrcess+0x178>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0204 	bic.w	r2, r2, #4
 8001a36:	601a      	str	r2, [r3, #0]
    return;
 8001a38:	e097      	b.n	8001b6a <ATKPrcess+0x172>
  }
  UART_DISABLE_RE(huart1);
 8001a3a:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <ATKPrcess+0x178>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <ATKPrcess+0x178>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0204 	bic.w	r2, r2, #4
 8001a48:	601a      	str	r2, [r3, #0]
  // SendPC(pp, 4);
  // SendPC(ATKbuf, 30);

  char ATKframes[10];

  for (r = 2; r < 60; r++)
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a4e:	e02f      	b.n	8001ab0 <ATKPrcess+0xb8>
  { // Find the Report message
    if ((ATKbuf[r - 2] == 0x55 && ATKbuf[r - 1] == 0x53))
 8001a50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a52:	3b02      	subs	r3, #2
 8001a54:	3380      	adds	r3, #128	; 0x80
 8001a56:	443b      	add	r3, r7
 8001a58:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8001a5c:	2b55      	cmp	r3, #85	; 0x55
 8001a5e:	d124      	bne.n	8001aaa <ATKPrcess+0xb2>
 8001a60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a62:	3b01      	subs	r3, #1
 8001a64:	3380      	adds	r3, #128	; 0x80
 8001a66:	443b      	add	r3, r7
 8001a68:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8001a6c:	2b53      	cmp	r3, #83	; 0x53
 8001a6e:	d11c      	bne.n	8001aaa <ATKPrcess+0xb2>
    {
      int i = 0, N = 8;
 8001a70:	2300      	movs	r3, #0
 8001a72:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a74:	2308      	movs	r3, #8
 8001a76:	677b      	str	r3, [r7, #116]	; 0x74
      char *tmp = &ATKbuf[r];
 8001a78:	f107 020c 	add.w	r2, r7, #12
 8001a7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a7e:	4413      	add	r3, r2
 8001a80:	673b      	str	r3, [r7, #112]	; 0x70

      for (i = 0; i < N; i++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a86:	e00b      	b.n	8001aa0 <ATKPrcess+0xa8>
      {
        ATKframes[i] = tmp[i];
 8001a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a8c:	4413      	add	r3, r2
 8001a8e:	7819      	ldrb	r1, [r3, #0]
 8001a90:	463a      	mov	r2, r7
 8001a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a94:	4413      	add	r3, r2
 8001a96:	460a      	mov	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < N; i++)
 8001a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001aa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dbef      	blt.n	8001a88 <ATKPrcess+0x90>
      }
      break;
 8001aa8:	e005      	b.n	8001ab6 <ATKPrcess+0xbe>
  for (r = 2; r < 60; r++)
 8001aaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aac:	3301      	adds	r3, #1
 8001aae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab2:	2b3b      	cmp	r3, #59	; 0x3b
 8001ab4:	ddcc      	ble.n	8001a50 <ATKPrcess+0x58>
    }
  }

  if (r == 60) // Do not find the correct reply
 8001ab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab8:	2b3c      	cmp	r3, #60	; 0x3c
 8001aba:	d055      	beq.n	8001b68 <ATKPrcess+0x170>
  {
    return;
  }

  roll = (float)((int16_t)(ATKframes[1] << 8) | ATKframes[0]) / 32768 * 180;
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	783b      	ldrb	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001b74 <ATKPrcess+0x17c>
 8001ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001b78 <ATKPrcess+0x180>
 8001adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae0:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <ATKPrcess+0x184>)
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
  pitch = (float)((int16_t)(ATKframes[3] << 8) | ATKframes[2]) / 32768 * 180;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	78bb      	ldrb	r3, [r7, #2]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afa:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001b74 <ATKPrcess+0x17c>
 8001afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b02:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001b78 <ATKPrcess+0x180>
 8001b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <ATKPrcess+0x188>)
 8001b0c:	edc3 7a00 	vstr	s15, [r3]
  yaw = (float)((int16_t)(ATKframes[5] << 8) | ATKframes[4]) / 32768 * 180;
 8001b10:	797b      	ldrb	r3, [r7, #5]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	793b      	ldrb	r3, [r7, #4]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b24:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001b74 <ATKPrcess+0x17c>
 8001b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001b78 <ATKPrcess+0x180>
 8001b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <ATKPrcess+0x18c>)
 8001b36:	edc3 7a00 	vstr	s15, [r3]
  selfAngelint = ((int)yaw + 180) % 360;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <ATKPrcess+0x18c>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b44:	ee17 3a90 	vmov	r3, s15
 8001b48:	33b4      	adds	r3, #180	; 0xb4
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <ATKPrcess+0x190>)
 8001b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b50:	441a      	add	r2, r3
 8001b52:	1211      	asrs	r1, r2, #8
 8001b54:	17da      	asrs	r2, r3, #31
 8001b56:	1a8a      	subs	r2, r1, r2
 8001b58:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b5c:	fb01 f202 	mul.w	r2, r1, r2
 8001b60:	1a9a      	subs	r2, r3, r2
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <ATKPrcess+0x194>)
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e000      	b.n	8001b6a <ATKPrcess+0x172>
    return;
 8001b68:	bf00      	nop
  // qwq[0] = (int)(selfAngelint/100) + '0';
  // qwq[1] = (int)(selfAngelint/10)%10 + '0';
  // qwq[2] = selfAngelint%10 + '0';
  // qwq[3] = '\n';
  // HAL_UART_Transmit(&huart5, qwq, 4, HAL_MAX_DELAY);
}
 8001b6a:	3780      	adds	r7, #128	; 0x80
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200003b4 	.word	0x200003b4
 8001b74:	47000000 	.word	0x47000000
 8001b78:	43340000 	.word	0x43340000
 8001b7c:	20000888 	.word	0x20000888
 8001b80:	2000088c 	.word	0x2000088c
 8001b84:	20000890 	.word	0x20000890
 8001b88:	b60b60b7 	.word	0xb60b60b7
 8001b8c:	20000894 	.word	0x20000894

08001b90 <Set_angle>:

void Set_angle(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t angle, uint32_t countPeriod, uint32_t CycleTime)
{
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	71fb      	strb	r3, [r7, #7]
  uint16_t compare_value = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	82fb      	strh	r3, [r7, #22]
  if (angle <= 180)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2bb4      	cmp	r3, #180	; 0xb4
 8001ba8:	d861      	bhi.n	8001c6e <Set_angle+0xde>
  {
    compare_value = 0.5 * countPeriod / CycleTime + angle * countPeriod / CycleTime / 90; // compute the compare_value
 8001baa:	6838      	ldr	r0, [r7, #0]
 8001bac:	f7fe fcd2 	bl	8000554 <__aeabi_ui2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <Set_angle+0xe8>)
 8001bb6:	f7fe fd47 	bl	8000648 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bc4:	f7fe fcc6 	bl	8000554 <__aeabi_ui2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fe64 	bl	800089c <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	461d      	mov	r5, r3
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	fb03 f202 	mul.w	r2, r3, r2
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <Set_angle+0xec>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fcad 	bl	8000554 <__aeabi_ui2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fb6b 	bl	80002dc <__adddf3>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe fff3 	bl	8000bf8 <__aeabi_d2uiz>
 8001c12:	4603      	mov	r3, r0
 8001c14:	82fb      	strh	r3, [r7, #22]
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d104      	bne.n	8001c26 <Set_angle+0x96>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	8afa      	ldrh	r2, [r7, #22]
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001c24:	e023      	b.n	8001c6e <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d104      	bne.n	8001c36 <Set_angle+0xa6>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	8afb      	ldrh	r3, [r7, #22]
 8001c32:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c34:	e01b      	b.n	8001c6e <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d104      	bne.n	8001c46 <Set_angle+0xb6>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	8afb      	ldrh	r3, [r7, #22]
 8001c42:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001c44:	e013      	b.n	8001c6e <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d104      	bne.n	8001c56 <Set_angle+0xc6>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	8afb      	ldrh	r3, [r7, #22]
 8001c52:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c54:	e00b      	b.n	8001c6e <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d104      	bne.n	8001c66 <Set_angle+0xd6>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	8afb      	ldrh	r3, [r7, #22]
 8001c62:	6493      	str	r3, [r2, #72]	; 0x48
}
 8001c64:	e003      	b.n	8001c6e <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	8afb      	ldrh	r3, [r7, #22]
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bdb0      	pop	{r4, r5, r7, pc}
 8001c76:	bf00      	nop
 8001c78:	3fe00000 	.word	0x3fe00000
 8001c7c:	b60b60b7 	.word	0xb60b60b7

08001c80 <GetOpemMv>:

int GetOpemMv() // Return Turn Angle
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
  uint8_t r = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]
  char Mvbuf[10];
  char *frame;
  int TurnAngle = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]

  UART_ENABLE_RE(huart3);
 8001c8e:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <GetOpemMv+0x110>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <GetOpemMv+0x110>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0204 	orr.w	r2, r2, #4
 8001c9c:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Receive(&huart3, (uint8_t *)Mvbuf, 10, HAL_MAX_DELAY) == HAL_ERROR) // Read frames from ATK
 8001c9e:	4639      	mov	r1, r7
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ca4:	220a      	movs	r2, #10
 8001ca6:	483a      	ldr	r0, [pc, #232]	; (8001d90 <GetOpemMv+0x110>)
 8001ca8:	f006 f96a 	bl	8007f80 <HAL_UART_Receive>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d109      	bne.n	8001cc6 <GetOpemMv+0x46>
  {
    UART_DISABLE_RE(huart3); // error
 8001cb2:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <GetOpemMv+0x110>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <GetOpemMv+0x110>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0204 	bic.w	r2, r2, #4
 8001cc0:	601a      	str	r2, [r3, #0]
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e060      	b.n	8001d88 <GetOpemMv+0x108>
  }
  UART_DISABLE_RE(huart3);
 8001cc6:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <GetOpemMv+0x110>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <GetOpemMv+0x110>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0204 	bic.w	r2, r2, #4
 8001cd4:	601a      	str	r2, [r3, #0]

  for (r = 0; r < 5; r++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
 8001cda:	e048      	b.n	8001d6e <GetOpemMv+0xee>
  {
    if (Mvbuf[r] == 'a')
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	3318      	adds	r3, #24
 8001ce0:	443b      	add	r3, r7
 8001ce2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ce6:	2b61      	cmp	r3, #97	; 0x61
 8001ce8:	d13e      	bne.n	8001d68 <GetOpemMv+0xe8>
    {
      frame = Mvbuf + r;
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
 8001cec:	463a      	mov	r2, r7
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
      // printf("%s\r\n", frame);
      if (frame[1] == '1')
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b31      	cmp	r3, #49	; 0x31
 8001cfa:	d117      	bne.n	8001d2c <GetOpemMv+0xac>
      {
        TurnAngle = (frame[2] - '0') * 100 + (frame[3] - '0') * 10 + (frame[4] - '0');
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	3b30      	subs	r3, #48	; 0x30
 8001d04:	2264      	movs	r2, #100	; 0x64
 8001d06:	fb02 f103 	mul.w	r1, r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3303      	adds	r3, #3
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	18ca      	adds	r2, r1, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3304      	adds	r3, #4
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	3b30      	subs	r3, #48	; 0x30
 8001d26:	4413      	add	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        break;
 8001d2a:	e023      	b.n	8001d74 <GetOpemMv+0xf4>
      }
      else if (frame[1] == '2')
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b32      	cmp	r3, #50	; 0x32
 8001d34:	d118      	bne.n	8001d68 <GetOpemMv+0xe8>
      {
        TurnAngle = -((frame[2] - '0') * 100 + (frame[3] - '0') * 10 + (frame[4] - '0'));
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3302      	adds	r3, #2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	3b30      	subs	r3, #48	; 0x30
 8001d3e:	2264      	movs	r2, #100	; 0x64
 8001d40:	fb02 f103 	mul.w	r1, r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3303      	adds	r3, #3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	18ca      	adds	r2, r1, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	3b30      	subs	r3, #48	; 0x30
 8001d60:	4413      	add	r3, r2
 8001d62:	425b      	negs	r3, r3
 8001d64:	613b      	str	r3, [r7, #16]
        break;
 8001d66:	e005      	b.n	8001d74 <GetOpemMv+0xf4>
  for (r = 0; r < 5; r++)
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d9b3      	bls.n	8001cdc <GetOpemMv+0x5c>
      }
    }
  }
  if (Mvbuf[r] == 'a')
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	3318      	adds	r3, #24
 8001d78:	443b      	add	r3, r7
 8001d7a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d7e:	2b61      	cmp	r3, #97	; 0x61
 8001d80:	d101      	bne.n	8001d86 <GetOpemMv+0x106>
    return TurnAngle;
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	e000      	b.n	8001d88 <GetOpemMv+0x108>
  return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000444 	.word	0x20000444

08001d94 <walkStraight>:
  if (Mvbuf[0] == 'b' && Mvbuf[1] == '3')
    return '3';
}

void walkStraight() // Return Turn Angle
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
  ATKPrcess();
 8001d9a:	f7ff fe2d 	bl	80019f8 <ATKPrcess>
  int relativeAngle = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]

  if(atkAngleRound(selfAngelint - initial_selfAngelint) > 180)
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <walkStraight+0x68>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <walkStraight+0x6c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fe07 	bl	80019c0 <atkAngleRound>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2bb4      	cmp	r3, #180	; 0xb4
 8001db6:	dd0b      	ble.n	8001dd0 <walkStraight+0x3c>
    relativeAngle = -1 * atkAngleRound(initial_selfAngelint - selfAngelint);
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <walkStraight+0x6c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <walkStraight+0x68>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fdfc 	bl	80019c0 <atkAngleRound>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	425b      	negs	r3, r3
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	e008      	b.n	8001de2 <walkStraight+0x4e>
  else
    relativeAngle =  atkAngleRound((selfAngelint - initial_selfAngelint));
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <walkStraight+0x68>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <walkStraight+0x6c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fdf0 	bl	80019c0 <atkAngleRound>
 8001de0:	6078      	str	r0, [r7, #4]

  gyroAlignment(relativeAngle);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fbc6 	bl	8000574 <__aeabi_i2d>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	ec43 2b10 	vmov	d0, r2, r3
 8001df0:	f7ff fb92 	bl	8001518 <gyroAlignment>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000894 	.word	0x20000894
 8001e00:	2000089c 	.word	0x2000089c

08001e04 <turn_Angle>:

void turn_Angle(int angle, int direction)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	; 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  int aimAngle = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  int iniAngle = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  int comAngle[3];
  int tolAngle = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  int avgAngle = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  int n = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t flag = 1;
 8001e22:	2301      	movs	r3, #1
 8001e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ATKPrcess();
 8001e28:	f7ff fde6 	bl	80019f8 <ATKPrcess>
  iniAngle = selfAngelint;
 8001e2c:	4b7d      	ldr	r3, [pc, #500]	; (8002024 <turn_Angle+0x220>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61fb      	str	r3, [r7, #28]

  if (direction == 1)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	f040 80fd 	bne.w	8002034 <turn_Angle+0x230>
  {
    Forward(0);
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f7ff fab8 	bl	80013b0 <Forward>
    // Left(0);
    // Turn_Left(300); //增大目前角度
    // drive();

    Forward(5);
 8001e40:	2005      	movs	r0, #5
 8001e42:	f7ff fab5 	bl	80013b0 <Forward>
    xflag=1;
 8001e46:	4b78      	ldr	r3, [pc, #480]	; (8002028 <turn_Angle+0x224>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
    drive();
 8001e4c:	f7ff fa32 	bl	80012b4 <drive>

    ATKPrcess();
 8001e50:	f7ff fdd2 	bl	80019f8 <ATKPrcess>
    iniAngle = selfAngelint;
 8001e54:	4b73      	ldr	r3, [pc, #460]	; (8002024 <turn_Angle+0x220>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61fb      	str	r3, [r7, #28]
    comAngle[n] = atkAngleRound(selfAngelint - iniAngle);
 8001e5a:	4b72      	ldr	r3, [pc, #456]	; (8002024 <turn_Angle+0x220>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fdac 	bl	80019c0 <atkAngleRound>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	3330      	adds	r3, #48	; 0x30
 8001e70:	443b      	add	r3, r7
 8001e72:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	3330      	adds	r3, #48	; 0x30
 8001e7c:	443b      	add	r3, r7
 8001e7e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e84:	4413      	add	r3, r2
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	4b67      	ldr	r3, [pc, #412]	; (800202c <turn_Angle+0x228>)
 8001e8e:	fb83 3102 	smull	r3, r1, r3, r2
 8001e92:	17d3      	asrs	r3, r2, #31
 8001e94:	1ac9      	subs	r1, r1, r3
 8001e96:	460b      	mov	r3, r1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	440b      	add	r3, r1
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28

    ATKPrcess();
 8001ea0:	f7ff fdaa 	bl	80019f8 <ATKPrcess>
    comAngle[n] = atkAngleRound(selfAngelint - iniAngle);
 8001ea4:	4b5f      	ldr	r3, [pc, #380]	; (8002024 <turn_Angle+0x220>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fd87 	bl	80019c0 <atkAngleRound>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	3330      	adds	r3, #48	; 0x30
 8001eba:	443b      	add	r3, r7
 8001ebc:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	3330      	adds	r3, #48	; 0x30
 8001ec6:	443b      	add	r3, r7
 8001ec8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ece:	4413      	add	r3, r2
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	4b55      	ldr	r3, [pc, #340]	; (800202c <turn_Angle+0x228>)
 8001ed8:	fb83 3102 	smull	r3, r1, r3, r2
 8001edc:	17d3      	asrs	r3, r2, #31
 8001ede:	1ac9      	subs	r1, r1, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	440b      	add	r3, r1
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28

    ATKPrcess();
 8001eea:	f7ff fd85 	bl	80019f8 <ATKPrcess>
    comAngle[n] = atkAngleRound(selfAngelint - iniAngle);
 8001eee:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <turn_Angle+0x220>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fd62 	bl	80019c0 <atkAngleRound>
 8001efc:	4602      	mov	r2, r0
 8001efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	3330      	adds	r3, #48	; 0x30
 8001f04:	443b      	add	r3, r7
 8001f06:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	3330      	adds	r3, #48	; 0x30
 8001f10:	443b      	add	r3, r7
 8001f12:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f18:	4413      	add	r3, r2
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	4b42      	ldr	r3, [pc, #264]	; (800202c <turn_Angle+0x228>)
 8001f22:	fb83 3102 	smull	r3, r1, r3, r2
 8001f26:	17d3      	asrs	r3, r2, #31
 8001f28:	1ac9      	subs	r1, r1, r3
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	440b      	add	r3, r1
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28

    while (1)
    {
      // toggleLD2(10);
      ATKPrcess();
 8001f34:	f7ff fd60 	bl	80019f8 <ATKPrcess>
      tolAngle -= comAngle[n];
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	3330      	adds	r3, #48	; 0x30
 8001f3e:	443b      	add	r3, r7
 8001f40:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      comAngle[n] = atkAngleRound(selfAngelint - iniAngle);
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <turn_Angle+0x220>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fd34 	bl	80019c0 <atkAngleRound>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	3330      	adds	r3, #48	; 0x30
 8001f60:	443b      	add	r3, r7
 8001f62:	f843 2c24 	str.w	r2, [r3, #-36]
      tolAngle += comAngle[n];
 8001f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	3330      	adds	r3, #48	; 0x30
 8001f6c:	443b      	add	r3, r7
 8001f6e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f74:	4413      	add	r3, r2
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
      avgAngle = (int)(tolAngle / 3);
 8001f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7a:	4a2c      	ldr	r2, [pc, #176]	; (800202c <turn_Angle+0x228>)
 8001f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f80:	17db      	asrs	r3, r3, #31
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	61bb      	str	r3, [r7, #24]
      n = (n + 1) % 3;
 8001f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <turn_Angle+0x228>)
 8001f8c:	fb83 3102 	smull	r3, r1, r3, r2
 8001f90:	17d3      	asrs	r3, r2, #31
 8001f92:	1ac9      	subs	r1, r1, r3
 8001f94:	460b      	mov	r3, r1
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	440b      	add	r3, r1
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
      if (avgAngle >= (angle - 2) && avgAngle <= (angle + 2))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3b02      	subs	r3, #2
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	db05      	blt.n	8001fb4 <turn_Angle+0x1b0>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3302      	adds	r3, #2
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	f340 8140 	ble.w	8002234 <turn_Angle+0x430>
        break;

      if (avgAngle >= (angle / 2) && avgAngle <= (angle + 3) && flag == 1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	0fda      	lsrs	r2, r3, #31
 8001fb8:	4413      	add	r3, r2
 8001fba:	105b      	asrs	r3, r3, #1
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	db13      	blt.n	8001fec <turn_Angle+0x1e8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3303      	adds	r3, #3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dc0e      	bgt.n	8001fec <turn_Angle+0x1e8>
 8001fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10a      	bne.n	8001fec <turn_Angle+0x1e8>
      {
        flag = 2;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        Forward(5);
 8001fdc:	2005      	movs	r0, #5
 8001fde:	f7ff f9e7 	bl	80013b0 <Forward>
        xflag=1;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <turn_Angle+0x224>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
        drive();
 8001fe8:	f7ff f964 	bl	80012b4 <drive>
        // Left(0);
        // Turn_Left(300); //增大目前角度
        // drive();
      }

      if (avgAngle >= (angle + 5) && flag == 2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dd07      	ble.n	8002006 <turn_Angle+0x202>
 8001ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d103      	bne.n	8002006 <turn_Angle+0x202>
      {
        // flag = 0;
        Forward(0);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7ff f9d6 	bl	80013b0 <Forward>
        // Left(0);
        // Turn_Right(200); //增大目前角度
        // drive();
        break;
 8002004:	e117      	b.n	8002236 <turn_Angle+0x432>
      }
      printf("diff=%d, selfangle=%d, avgAngle=%d \r\n", atkAngleRound(selfAngelint - iniAngle), selfAngelint, avgAngle);
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <turn_Angle+0x220>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fcd6 	bl	80019c0 <atkAngleRound>
 8002014:	4601      	mov	r1, r0
 8002016:	4b03      	ldr	r3, [pc, #12]	; (8002024 <turn_Angle+0x220>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <turn_Angle+0x22c>)
 800201e:	f007 fad3 	bl	80095c8 <iprintf>
      ATKPrcess();
 8002022:	e787      	b.n	8001f34 <turn_Angle+0x130>
 8002024:	20000894 	.word	0x20000894
 8002028:	2000087c 	.word	0x2000087c
 800202c:	55555556 	.word	0x55555556
 8002030:	0800b978 	.word	0x0800b978
    //   ATKPrcess();

    //   // SendPCint(aimAngle);
    // }
  }
  else if (direction == 2)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	2b02      	cmp	r3, #2
 8002038:	f040 80fd 	bne.w	8002236 <turn_Angle+0x432>
  {
    Forward(0);
 800203c:	2000      	movs	r0, #0
 800203e:	f7ff f9b7 	bl	80013b0 <Forward>
    // Left(0);
    // Turn_Right(300);//减小目前角度
    // drive();
    Forward(5);
 8002042:	2005      	movs	r0, #5
 8002044:	f7ff f9b4 	bl	80013b0 <Forward>
    yflag=1;
 8002048:	4b82      	ldr	r3, [pc, #520]	; (8002254 <turn_Angle+0x450>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
    drive();
 800204e:	f7ff f931 	bl	80012b4 <drive>

    ATKPrcess();
 8002052:	f7ff fcd1 	bl	80019f8 <ATKPrcess>
    iniAngle = selfAngelint;
 8002056:	4b80      	ldr	r3, [pc, #512]	; (8002258 <turn_Angle+0x454>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61fb      	str	r3, [r7, #28]
    comAngle[n] = atkAngleRound(iniAngle - selfAngelint);
 800205c:	4b7e      	ldr	r3, [pc, #504]	; (8002258 <turn_Angle+0x454>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fcab 	bl	80019c0 <atkAngleRound>
 800206a:	4602      	mov	r2, r0
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	3330      	adds	r3, #48	; 0x30
 8002072:	443b      	add	r3, r7
 8002074:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 8002078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	3330      	adds	r3, #48	; 0x30
 800207e:	443b      	add	r3, r7
 8002080:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002086:	4413      	add	r3, r2
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	4b73      	ldr	r3, [pc, #460]	; (800225c <turn_Angle+0x458>)
 8002090:	fb83 3102 	smull	r3, r1, r3, r2
 8002094:	17d3      	asrs	r3, r2, #31
 8002096:	1ac9      	subs	r1, r1, r3
 8002098:	460b      	mov	r3, r1
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	440b      	add	r3, r1
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28

    ATKPrcess();
 80020a2:	f7ff fca9 	bl	80019f8 <ATKPrcess>
    comAngle[n] = atkAngleRound(iniAngle - selfAngelint);
 80020a6:	4b6c      	ldr	r3, [pc, #432]	; (8002258 <turn_Angle+0x454>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fc86 	bl	80019c0 <atkAngleRound>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	3330      	adds	r3, #48	; 0x30
 80020bc:	443b      	add	r3, r7
 80020be:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	3330      	adds	r3, #48	; 0x30
 80020c8:	443b      	add	r3, r7
 80020ca:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80020ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d0:	4413      	add	r3, r2
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	4b60      	ldr	r3, [pc, #384]	; (800225c <turn_Angle+0x458>)
 80020da:	fb83 3102 	smull	r3, r1, r3, r2
 80020de:	17d3      	asrs	r3, r2, #31
 80020e0:	1ac9      	subs	r1, r1, r3
 80020e2:	460b      	mov	r3, r1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	440b      	add	r3, r1
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28

    ATKPrcess();
 80020ec:	f7ff fc84 	bl	80019f8 <ATKPrcess>
    comAngle[n] = atkAngleRound(iniAngle - selfAngelint);
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <turn_Angle+0x454>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fc61 	bl	80019c0 <atkAngleRound>
 80020fe:	4602      	mov	r2, r0
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	3330      	adds	r3, #48	; 0x30
 8002106:	443b      	add	r3, r7
 8002108:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	3330      	adds	r3, #48	; 0x30
 8002112:	443b      	add	r3, r7
 8002114:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800211a:	4413      	add	r3, r2
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 800211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	4b4e      	ldr	r3, [pc, #312]	; (800225c <turn_Angle+0x458>)
 8002124:	fb83 3102 	smull	r3, r1, r3, r2
 8002128:	17d3      	asrs	r3, r2, #31
 800212a:	1ac9      	subs	r1, r1, r3
 800212c:	460b      	mov	r3, r1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	440b      	add	r3, r1
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28

    while (1)
    {
      // toggleLD2(10);
      ATKPrcess();
 8002136:	f7ff fc5f 	bl	80019f8 <ATKPrcess>
      tolAngle -= comAngle[n];
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	3330      	adds	r3, #48	; 0x30
 8002140:	443b      	add	r3, r7
 8002142:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
      comAngle[n] = atkAngleRound(iniAngle - selfAngelint);
 800214c:	4b42      	ldr	r3, [pc, #264]	; (8002258 <turn_Angle+0x454>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fc33 	bl	80019c0 <atkAngleRound>
 800215a:	4602      	mov	r2, r0
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	3330      	adds	r3, #48	; 0x30
 8002162:	443b      	add	r3, r7
 8002164:	f843 2c24 	str.w	r2, [r3, #-36]
      tolAngle += comAngle[n];
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	3330      	adds	r3, #48	; 0x30
 800216e:	443b      	add	r3, r7
 8002170:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002176:	4413      	add	r3, r2
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
      avgAngle = (int)(tolAngle / 3);
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	4a37      	ldr	r2, [pc, #220]	; (800225c <turn_Angle+0x458>)
 800217e:	fb82 1203 	smull	r1, r2, r2, r3
 8002182:	17db      	asrs	r3, r3, #31
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	61bb      	str	r3, [r7, #24]
      n = (n + 1) % 3;
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <turn_Angle+0x458>)
 800218e:	fb83 3102 	smull	r3, r1, r3, r2
 8002192:	17d3      	asrs	r3, r2, #31
 8002194:	1ac9      	subs	r1, r1, r3
 8002196:	460b      	mov	r3, r1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	440b      	add	r3, r1
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
      if (avgAngle >= (angle - 3) && avgAngle <= (angle + 7))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b03      	subs	r3, #3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	db04      	blt.n	80021b4 <turn_Angle+0x3b0>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3307      	adds	r3, #7
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	dd37      	ble.n	8002224 <turn_Angle+0x420>
        break;
      if (avgAngle >= (angle / 2) && avgAngle <= (angle + 7) && flag == 1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0fda      	lsrs	r2, r3, #31
 80021b8:	4413      	add	r3, r2
 80021ba:	105b      	asrs	r3, r3, #1
 80021bc:	461a      	mov	r2, r3
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4293      	cmp	r3, r2
 80021c2:	db13      	blt.n	80021ec <turn_Angle+0x3e8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3307      	adds	r3, #7
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	dc0e      	bgt.n	80021ec <turn_Angle+0x3e8>
 80021ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10a      	bne.n	80021ec <turn_Angle+0x3e8>
      {
        flag = 2;
 80021d6:	2302      	movs	r3, #2
 80021d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        Forward(5);
 80021dc:	2005      	movs	r0, #5
 80021de:	f7ff f8e7 	bl	80013b0 <Forward>
        yflag=1;
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <turn_Angle+0x450>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
        drive();
 80021e8:	f7ff f864 	bl	80012b4 <drive>
        // Left(0);
        // Turn_Right(400); //增大目前角度
        // drive();
      }

      if (avgAngle >= (angle + 5) && flag == 2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	dd07      	ble.n	8002206 <turn_Angle+0x402>
 80021f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d103      	bne.n	8002206 <turn_Angle+0x402>
      {

        //        flag = 0;
        Forward(0);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7ff f8d6 	bl	80013b0 <Forward>
        //        Left(0);
        //        Turn_Left(200); //增大目前角度
        //        drive();
        break;
 8002204:	e00f      	b.n	8002226 <turn_Angle+0x422>
      }
      printf("diff=%d, selfangle=%d, avgAngle=%d \r\n", atkAngleRound(iniAngle - selfAngelint), selfAngelint, avgAngle);
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <turn_Angle+0x454>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fbd6 	bl	80019c0 <atkAngleRound>
 8002214:	4601      	mov	r1, r0
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <turn_Angle+0x454>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4810      	ldr	r0, [pc, #64]	; (8002260 <turn_Angle+0x45c>)
 800221e:	f007 f9d3 	bl	80095c8 <iprintf>
      ATKPrcess();
 8002222:	e788      	b.n	8002136 <turn_Angle+0x332>
        break;
 8002224:	bf00      	nop
      // printf("diff=%d, selfangle=%d \r\n", atkAngleRound(selfAngelint - iniAngle), selfAngelint);
    }

    Forward(0);
 8002226:	2000      	movs	r0, #0
 8002228:	f7ff f8c2 	bl	80013b0 <Forward>
    // ATKPrcess();

    // if (atkAngleRound(iniAngle - selfAngelint) >= (angle-1) && atkAngleRound(iniAngle - selfAngelint) <= (angle+1))
    //   return;

    Forward(0);
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff f8bf 	bl	80013b0 <Forward>
 8002232:	e000      	b.n	8002236 <turn_Angle+0x432>
        break;
 8002234:	bf00      	nop
    //   // SendPCint(aimAngle);
    // }
  }

  // Forward(0);
  Left(0);
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff f8a4 	bl	8001384 <Left>
  Turn_Left(0);
 800223c:	2000      	movs	r0, #0
 800223e:	f7ff f8f7 	bl	8001430 <Turn_Left>
  drive();
 8002242:	f7ff f837 	bl	80012b4 <drive>
  toggleLD2(100);
 8002246:	2064      	movs	r0, #100	; 0x64
 8002248:	f7fe fe78 	bl	8000f3c <toggleLD2>
  return;
 800224c:	bf00      	nop
}
 800224e:	3730      	adds	r7, #48	; 0x30
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000884 	.word	0x20000884
 8002258:	20000894 	.word	0x20000894
 800225c:	55555556 	.word	0x55555556
 8002260:	0800b978 	.word	0x0800b978

08002264 <celebrate>:
void celebrate()
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  while (1)
  {
    HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002268:	2102      	movs	r1, #2
 800226a:	480e      	ldr	r0, [pc, #56]	; (80022a4 <celebrate+0x40>)
 800226c:	f002 fdb4 	bl	8004dd8 <HAL_GPIO_TogglePin>
    toggleLD2(100);
 8002270:	2064      	movs	r0, #100	; 0x64
 8002272:	f7fe fe63 	bl	8000f3c <toggleLD2>
    HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002276:	2102      	movs	r1, #2
 8002278:	480a      	ldr	r0, [pc, #40]	; (80022a4 <celebrate+0x40>)
 800227a:	f002 fdad 	bl	8004dd8 <HAL_GPIO_TogglePin>
    toggleLD2(100);
 800227e:	2064      	movs	r0, #100	; 0x64
 8002280:	f7fe fe5c 	bl	8000f3c <toggleLD2>
    HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002284:	2104      	movs	r1, #4
 8002286:	4807      	ldr	r0, [pc, #28]	; (80022a4 <celebrate+0x40>)
 8002288:	f002 fda6 	bl	8004dd8 <HAL_GPIO_TogglePin>
    toggleLD2(100);
 800228c:	2064      	movs	r0, #100	; 0x64
 800228e:	f7fe fe55 	bl	8000f3c <toggleLD2>
    HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002292:	2104      	movs	r1, #4
 8002294:	4803      	ldr	r0, [pc, #12]	; (80022a4 <celebrate+0x40>)
 8002296:	f002 fd9f 	bl	8004dd8 <HAL_GPIO_TogglePin>
    toggleLD2(100);
 800229a:	2064      	movs	r0, #100	; 0x64
 800229c:	f7fe fe4e 	bl	8000f3c <toggleLD2>
    HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 80022a0:	e7e2      	b.n	8002268 <celebrate+0x4>
 80022a2:	bf00      	nop
 80022a4:	48000400 	.word	0x48000400

080022a8 <task>:
  }
}
void task (uint8_t numberoftask)
{
 80022a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022ac:	b08a      	sub	sp, #40	; 0x28
 80022ae:	af02      	add	r7, sp, #8
 80022b0:	4603      	mov	r3, r0
 80022b2:	71fb      	strb	r3, [r7, #7]
  switch (numberoftask)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d004      	beq.n	80022c4 <task+0x1c>
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	f000 8221 	beq.w	8002702 <task+0x45a>
 80022c0:	f000 bcf7 	b.w	8002cb2 <task+0xa0a>
  {
  case 1:
    /****************TASK 1******************/
    printf("task 1 begin\r\n");
 80022c4:	48b8      	ldr	r0, [pc, #736]	; (80025a8 <task+0x300>)
 80022c6:	f007 fa05 	bl	80096d4 <puts>
    
    while(((timel_fin==1 && timer_fin ==1)&& timef_fin==1)!=1)
 80022ca:	e002      	b.n	80022d2 <task+0x2a>
    {
      //waiting for the counting to finish
      toggleLD2(10);
 80022cc:	200a      	movs	r0, #10
 80022ce:	f7fe fe35 	bl	8000f3c <toggleLD2>
    while(((timel_fin==1 && timer_fin ==1)&& timef_fin==1)!=1)
 80022d2:	4bb6      	ldr	r3, [pc, #728]	; (80025ac <task+0x304>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d109      	bne.n	80022ee <task+0x46>
 80022da:	4bb5      	ldr	r3, [pc, #724]	; (80025b0 <task+0x308>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d105      	bne.n	80022ee <task+0x46>
 80022e2:	4bb4      	ldr	r3, [pc, #720]	; (80025b4 <task+0x30c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <task+0x46>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <task+0x48>
 80022ee:	2300      	movs	r3, #0
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d1eb      	bne.n	80022cc <task+0x24>
    }

    if (cml<20 &&cmr<20)
 80022f4:	4bb0      	ldr	r3, [pc, #704]	; (80025b8 <task+0x310>)
 80022f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	4baf      	ldr	r3, [pc, #700]	; (80025bc <task+0x314>)
 8002300:	f7fe fc14 	bl	8000b2c <__aeabi_dcmplt>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 819c 	beq.w	8002644 <task+0x39c>
 800230c:	4bac      	ldr	r3, [pc, #688]	; (80025c0 <task+0x318>)
 800230e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	4ba9      	ldr	r3, [pc, #676]	; (80025bc <task+0x314>)
 8002318:	f7fe fc08 	bl	8000b2c <__aeabi_dcmplt>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8190 	beq.w	8002644 <task+0x39c>
    {//alignment 
      printf("Found the bridge\r\n");
 8002324:	48a7      	ldr	r0, [pc, #668]	; (80025c4 <task+0x31c>)
 8002326:	f007 f9d5 	bl	80096d4 <puts>
      Forward(0);
 800232a:	2000      	movs	r0, #0
 800232c:	f7ff f840 	bl	80013b0 <Forward>
      drive();
 8002330:	f7fe ffc0 	bl	80012b4 <drive>
      HAL_Delay(1000);
 8002334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002338:	f002 fa82 	bl	8004840 <HAL_Delay>
      superAlignment(1);
 800233c:	ed9f 0b98 	vldr	d0, [pc, #608]	; 80025a0 <task+0x2f8>
 8002340:	f7ff fa24 	bl	800178c <superAlignment>

      //turn right
      Forward(10);
 8002344:	200a      	movs	r0, #10
 8002346:	f7ff f833 	bl	80013b0 <Forward>
      printf("Turning right\r\n");
 800234a:	489f      	ldr	r0, [pc, #636]	; (80025c8 <task+0x320>)
 800234c:	f007 f9c2 	bl	80096d4 <puts>
      HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_SET);
 8002350:	2201      	movs	r2, #1
 8002352:	2102      	movs	r1, #2
 8002354:	489d      	ldr	r0, [pc, #628]	; (80025cc <task+0x324>)
 8002356:	f002 fd27 	bl	8004da8 <HAL_GPIO_WritePin>

      for(uint8_t i = 0 ;i<4;i++)
 800235a:	2300      	movs	r3, #0
 800235c:	77fb      	strb	r3, [r7, #31]
 800235e:	e00b      	b.n	8002378 <task+0xd0>
      {
        Forward(15);
 8002360:	200f      	movs	r0, #15
 8002362:	f7ff f825 	bl	80013b0 <Forward>
        drive();
 8002366:	f7fe ffa5 	bl	80012b4 <drive>
        toggleLD2(400);
 800236a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800236e:	f7fe fde5 	bl	8000f3c <toggleLD2>
      for(uint8_t i = 0 ;i<4;i++)
 8002372:	7ffb      	ldrb	r3, [r7, #31]
 8002374:	3301      	adds	r3, #1
 8002376:	77fb      	strb	r3, [r7, #31]
 8002378:	7ffb      	ldrb	r3, [r7, #31]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d9f0      	bls.n	8002360 <task+0xb8>
      }

      Forward(0);
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff f816 	bl	80013b0 <Forward>
      drive();
 8002384:	f7fe ff96 	bl	80012b4 <drive>
      toggleLD2(500);
 8002388:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800238c:	f7fe fdd6 	bl	8000f3c <toggleLD2>

      turn_Angle(90,2);
 8002390:	2102      	movs	r1, #2
 8002392:	205a      	movs	r0, #90	; 0x5a
 8002394:	f7ff fd36 	bl	8001e04 <turn_Angle>

      //finish the turning
      for(uint8_t i = 0 ;i<4;i++)
 8002398:	2300      	movs	r3, #0
 800239a:	77bb      	strb	r3, [r7, #30]
 800239c:	e00b      	b.n	80023b6 <task+0x10e>
      {
        Forward(15);
 800239e:	200f      	movs	r0, #15
 80023a0:	f7ff f806 	bl	80013b0 <Forward>
        drive();
 80023a4:	f7fe ff86 	bl	80012b4 <drive>
        toggleLD2(400);
 80023a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80023ac:	f7fe fdc6 	bl	8000f3c <toggleLD2>
      for(uint8_t i = 0 ;i<4;i++)
 80023b0:	7fbb      	ldrb	r3, [r7, #30]
 80023b2:	3301      	adds	r3, #1
 80023b4:	77bb      	strb	r3, [r7, #30]
 80023b6:	7fbb      	ldrb	r3, [r7, #30]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d9f0      	bls.n	800239e <task+0xf6>
      }
      HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_RESET);
 80023bc:	2200      	movs	r2, #0
 80023be:	2102      	movs	r1, #2
 80023c0:	4882      	ldr	r0, [pc, #520]	; (80025cc <task+0x324>)
 80023c2:	f002 fcf1 	bl	8004da8 <HAL_GPIO_WritePin>

      //alignment
      Forward(0);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7fe fff2 	bl	80013b0 <Forward>
      drive();
 80023cc:	f7fe ff72 	bl	80012b4 <drive>
      HAL_Delay(1000);
 80023d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023d4:	f002 fa34 	bl	8004840 <HAL_Delay>
      superAlignment(1);
 80023d8:	ed9f 0b71 	vldr	d0, [pc, #452]	; 80025a0 <task+0x2f8>
 80023dc:	f7ff f9d6 	bl	800178c <superAlignment>

      //get initial value
      
      ATKPrcess();
 80023e0:	f7ff fb0a 	bl	80019f8 <ATKPrcess>
      initial_selfAngelint= selfAngelint;
 80023e4:	4b7a      	ldr	r3, [pc, #488]	; (80025d0 <task+0x328>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a7a      	ldr	r2, [pc, #488]	; (80025d4 <task+0x32c>)
 80023ea:	6013      	str	r3, [r2, #0]

      while (1)
      {
        if(cmf<15)
 80023ec:	4b7a      	ldr	r3, [pc, #488]	; (80025d8 <task+0x330>)
 80023ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	4b79      	ldr	r3, [pc, #484]	; (80025dc <task+0x334>)
 80023f8:	f7fe fb98 	bl	8000b2c <__aeabi_dcmplt>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d136      	bne.n	8002470 <task+0x1c8>
          break;

        Forward(15);
 8002402:	200f      	movs	r0, #15
 8002404:	f7fe ffd4 	bl	80013b0 <Forward>
        walkStraight();
 8002408:	f7ff fcc4 	bl	8001d94 <walkStraight>
        drive();
 800240c:	f7fe ff52 	bl	80012b4 <drive>
        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002410:	2102      	movs	r1, #2
 8002412:	486e      	ldr	r0, [pc, #440]	; (80025cc <task+0x324>)
 8002414:	f002 fce0 	bl	8004dd8 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002418:	2104      	movs	r1, #4
 800241a:	486c      	ldr	r0, [pc, #432]	; (80025cc <task+0x324>)
 800241c:	f002 fcdc 	bl	8004dd8 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 8002420:	2032      	movs	r0, #50	; 0x32
 8002422:	f002 fa0d 	bl	8004840 <HAL_Delay>

        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002426:	2102      	movs	r1, #2
 8002428:	4868      	ldr	r0, [pc, #416]	; (80025cc <task+0x324>)
 800242a:	f002 fcd5 	bl	8004dd8 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 800242e:	2104      	movs	r1, #4
 8002430:	4866      	ldr	r0, [pc, #408]	; (80025cc <task+0x324>)
 8002432:	f002 fcd1 	bl	8004dd8 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 8002436:	2032      	movs	r0, #50	; 0x32
 8002438:	f002 fa02 	bl	8004840 <HAL_Delay>

        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 800243c:	2102      	movs	r1, #2
 800243e:	4863      	ldr	r0, [pc, #396]	; (80025cc <task+0x324>)
 8002440:	f002 fcca 	bl	8004dd8 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002444:	2104      	movs	r1, #4
 8002446:	4861      	ldr	r0, [pc, #388]	; (80025cc <task+0x324>)
 8002448:	f002 fcc6 	bl	8004dd8 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 800244c:	2032      	movs	r0, #50	; 0x32
 800244e:	f002 f9f7 	bl	8004840 <HAL_Delay>

        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002452:	2102      	movs	r1, #2
 8002454:	485d      	ldr	r0, [pc, #372]	; (80025cc <task+0x324>)
 8002456:	f002 fcbf 	bl	8004dd8 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 800245a:	2104      	movs	r1, #4
 800245c:	485b      	ldr	r0, [pc, #364]	; (80025cc <task+0x324>)
 800245e:	f002 fcbb 	bl	8004dd8 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 8002462:	2032      	movs	r0, #50	; 0x32
 8002464:	f002 f9ec 	bl	8004840 <HAL_Delay>

        HAL_Delay(100);
 8002468:	2064      	movs	r0, #100	; 0x64
 800246a:	f002 f9e9 	bl	8004840 <HAL_Delay>
        if(cmf<15)
 800246e:	e7bd      	b.n	80023ec <task+0x144>
          break;
 8002470:	bf00      	nop
      }

      Forward(0);
 8002472:	2000      	movs	r0, #0
 8002474:	f7fe ff9c 	bl	80013b0 <Forward>
      drive();
 8002478:	f7fe ff1c 	bl	80012b4 <drive>
      HAL_Delay(1000);
 800247c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002480:	f002 f9de 	bl	8004840 <HAL_Delay>

      turn_Angle(70,1);
 8002484:	2101      	movs	r1, #1
 8002486:	2046      	movs	r0, #70	; 0x46
 8002488:	f7ff fcbc 	bl	8001e04 <turn_Angle>

      Forward(0);
 800248c:	2000      	movs	r0, #0
 800248e:	f7fe ff8f 	bl	80013b0 <Forward>
      drive();
 8002492:	f7fe ff0f 	bl	80012b4 <drive>
      HAL_Delay(1000);
 8002496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800249a:	f002 f9d1 	bl	8004840 <HAL_Delay>
      
      //trace the white line
      superAlignment(1);
 800249e:	ed9f 0b40 	vldr	d0, [pc, #256]	; 80025a0 <task+0x2f8>
 80024a2:	f7ff f973 	bl	800178c <superAlignment>
      UART_ENABLE_RE(huart3);
 80024a6:	4b4e      	ldr	r3, [pc, #312]	; (80025e0 <task+0x338>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <task+0x338>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0204 	orr.w	r2, r2, #4
 80024b4:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart3, "task3", 5, HAL_MAX_DELAY);
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ba:	2205      	movs	r2, #5
 80024bc:	4949      	ldr	r1, [pc, #292]	; (80025e4 <task+0x33c>)
 80024be:	4848      	ldr	r0, [pc, #288]	; (80025e0 <task+0x338>)
 80024c0:	f005 fcc8 	bl	8007e54 <HAL_UART_Transmit>
      UART_DISABLE_RE(huart3);
 80024c4:	4b46      	ldr	r3, [pc, #280]	; (80025e0 <task+0x338>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b45      	ldr	r3, [pc, #276]	; (80025e0 <task+0x338>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0204 	bic.w	r2, r2, #4
 80024d2:	601a      	str	r2, [r3, #0]
      uint32_t time=0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
      while (1)
      {
        if((cml<20||cmr<20)&& time >30)
 80024d8:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <task+0x310>)
 80024da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <task+0x314>)
 80024e4:	f7fe fb22 	bl	8000b2c <__aeabi_dcmplt>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10a      	bne.n	8002504 <task+0x25c>
 80024ee:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <task+0x318>)
 80024f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	4b30      	ldr	r3, [pc, #192]	; (80025bc <task+0x314>)
 80024fa:	f7fe fb17 	bl	8000b2c <__aeabi_dcmplt>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <task+0x264>
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b1e      	cmp	r3, #30
 8002508:	f200 8094 	bhi.w	8002634 <task+0x38c>
          break;

        time++;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	3301      	adds	r3, #1
 8002510:	61bb      	str	r3, [r7, #24]

        openmvAngle = GetOpemMv();
 8002512:	f7ff fbb5 	bl	8001c80 <GetOpemMv>
 8002516:	4603      	mov	r3, r0
 8002518:	4a33      	ldr	r2, [pc, #204]	; (80025e8 <task+0x340>)
 800251a:	6013      	str	r3, [r2, #0]
        // openmvAngle=100;

        Inputopenmv = openmvAngle;
 800251c:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <task+0x340>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f827 	bl	8000574 <__aeabi_i2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4930      	ldr	r1, [pc, #192]	; (80025ec <task+0x344>)
 800252c:	e9c1 2300 	strd	r2, r3, [r1]
        if (openmvAngle != HAL_ERROR)
 8002530:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <task+0x340>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d0cf      	beq.n	80024d8 <task+0x230>
        {
          printf("openmvangle=%d\r\n", openmvAngle);
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <task+0x340>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	482c      	ldr	r0, [pc, #176]	; (80025f0 <task+0x348>)
 8002540:	f007 f842 	bl	80095c8 <iprintf>

          if (PID_Compute(&myPIDopenmv)==_FALSE)
 8002544:	482b      	ldr	r0, [pc, #172]	; (80025f4 <task+0x34c>)
 8002546:	f001 fa5b 	bl	8003a00 <PID_Compute>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <task+0x2ae>
            printf("PID_Compute for OpenMV error\r\n");
 8002550:	4829      	ldr	r0, [pc, #164]	; (80025f8 <task+0x350>)
 8002552:	f007 f8bf 	bl	80096d4 <puts>

          printf("Outputopenmv = %.3f\r\n", Outputopenmv);
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <task+0x354>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	4828      	ldr	r0, [pc, #160]	; (8002600 <task+0x358>)
 800255e:	f007 f833 	bl	80095c8 <iprintf>

          if(Outputopenmv > 0)
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <task+0x354>)
 8002564:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	f7fe fafa 	bl	8000b68 <__aeabi_dcmpgt>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d044      	beq.n	8002604 <task+0x35c>
          {
            Forward(15);
 800257a:	200f      	movs	r0, #15
 800257c:	f7fe ff18 	bl	80013b0 <Forward>
            Turn_Left((int)Outputopenmv);
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <task+0x354>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe fb0d 	bl	8000ba8 <__aeabi_d2iz>
 800258e:	4603      	mov	r3, r0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe ff4c 	bl	8001430 <Turn_Left>
            drive();
 8002598:	f7fe fe8c 	bl	80012b4 <drive>
 800259c:	e046      	b.n	800262c <task+0x384>
 800259e:	bf00      	nop
 80025a0:	00000000 	.word	0x00000000
 80025a4:	3ff00000 	.word	0x3ff00000
 80025a8:	0800b9a0 	.word	0x0800b9a0
 80025ac:	20000605 	.word	0x20000605
 80025b0:	20000621 	.word	0x20000621
 80025b4:	20000641 	.word	0x20000641
 80025b8:	20000618 	.word	0x20000618
 80025bc:	40340000 	.word	0x40340000
 80025c0:	20000638 	.word	0x20000638
 80025c4:	0800b9b0 	.word	0x0800b9b0
 80025c8:	0800b9c4 	.word	0x0800b9c4
 80025cc:	48000400 	.word	0x48000400
 80025d0:	20000894 	.word	0x20000894
 80025d4:	2000089c 	.word	0x2000089c
 80025d8:	20000650 	.word	0x20000650
 80025dc:	402e0000 	.word	0x402e0000
 80025e0:	20000444 	.word	0x20000444
 80025e4:	0800b9d4 	.word	0x0800b9d4
 80025e8:	200008a0 	.word	0x200008a0
 80025ec:	20000688 	.word	0x20000688
 80025f0:	0800b9dc 	.word	0x0800b9dc
 80025f4:	20000798 	.word	0x20000798
 80025f8:	0800b9f0 	.word	0x0800b9f0
 80025fc:	20000690 	.word	0x20000690
 8002600:	0800ba10 	.word	0x0800ba10
          }
          else
          {
            Forward(15);
 8002604:	200f      	movs	r0, #15
 8002606:	f7fe fed3 	bl	80013b0 <Forward>
            Turn_Right((int)((-1) * Outputopenmv));
 800260a:	4bad      	ldr	r3, [pc, #692]	; (80028c0 <task+0x618>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	4690      	mov	r8, r2
 8002612:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002616:	4640      	mov	r0, r8
 8002618:	4649      	mov	r1, r9
 800261a:	f7fe fac5 	bl	8000ba8 <__aeabi_d2iz>
 800261e:	4603      	mov	r3, r0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe ff3e 	bl	80014a4 <Turn_Right>
            drive();
 8002628:	f7fe fe44 	bl	80012b4 <drive>
          }
          toggleLD2(250);
 800262c:	20fa      	movs	r0, #250	; 0xfa
 800262e:	f7fe fc85 	bl	8000f3c <toggleLD2>
        if((cml<20||cmr<20)&& time >30)
 8002632:	e751      	b.n	80024d8 <task+0x230>
          break;
 8002634:	bf00      	nop
        // HAL_Delay(50);

        // HAL_Delay(100);
        // time++;
      }
      Forward(0);
 8002636:	2000      	movs	r0, #0
 8002638:	f7fe feba 	bl	80013b0 <Forward>
      drive();
 800263c:	f7fe fe3a 	bl	80012b4 <drive>
      celebrate();
 8002640:	f7ff fe10 	bl	8002264 <celebrate>
    }
    openmvAngle = GetOpemMv();
 8002644:	f7ff fb1c 	bl	8001c80 <GetOpemMv>
 8002648:	4603      	mov	r3, r0
 800264a:	4a9e      	ldr	r2, [pc, #632]	; (80028c4 <task+0x61c>)
 800264c:	6013      	str	r3, [r2, #0]
    // openmvAngle=100;

    Inputopenmv = openmvAngle;
 800264e:	4b9d      	ldr	r3, [pc, #628]	; (80028c4 <task+0x61c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd ff8e 	bl	8000574 <__aeabi_i2d>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	499a      	ldr	r1, [pc, #616]	; (80028c8 <task+0x620>)
 800265e:	e9c1 2300 	strd	r2, r3, [r1]
    if (openmvAngle != HAL_ERROR)
 8002662:	4b98      	ldr	r3, [pc, #608]	; (80028c4 <task+0x61c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	f000 832c 	beq.w	8002cc4 <task+0xa1c>
    {
      printf("openmvangle=%d\r\n", openmvAngle);
 800266c:	4b95      	ldr	r3, [pc, #596]	; (80028c4 <task+0x61c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4619      	mov	r1, r3
 8002672:	4896      	ldr	r0, [pc, #600]	; (80028cc <task+0x624>)
 8002674:	f006 ffa8 	bl	80095c8 <iprintf>

      if (PID_Compute(&myPIDopenmv)==_FALSE)
 8002678:	4895      	ldr	r0, [pc, #596]	; (80028d0 <task+0x628>)
 800267a:	f001 f9c1 	bl	8003a00 <PID_Compute>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <task+0x3e2>
        printf("PID_Compute for OpenMV error\r\n");
 8002684:	4893      	ldr	r0, [pc, #588]	; (80028d4 <task+0x62c>)
 8002686:	f007 f825 	bl	80096d4 <puts>

      printf("Outputopenmv = %.3f\r\n", Outputopenmv);
 800268a:	4b8d      	ldr	r3, [pc, #564]	; (80028c0 <task+0x618>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	4891      	ldr	r0, [pc, #580]	; (80028d8 <task+0x630>)
 8002692:	f006 ff99 	bl	80095c8 <iprintf>

      if(Outputopenmv > 0)
 8002696:	4b8a      	ldr	r3, [pc, #552]	; (80028c0 <task+0x618>)
 8002698:	e9d3 0100 	ldrd	r0, r1, [r3]
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	f7fe fa60 	bl	8000b68 <__aeabi_dcmpgt>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d011      	beq.n	80026d2 <task+0x42a>
      {
        Forward(15);
 80026ae:	200f      	movs	r0, #15
 80026b0:	f7fe fe7e 	bl	80013b0 <Forward>
        Turn_Left((int)Outputopenmv);
 80026b4:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <task+0x618>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fa73 	bl	8000ba8 <__aeabi_d2iz>
 80026c2:	4603      	mov	r3, r0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe feb2 	bl	8001430 <Turn_Left>
        drive();
 80026cc:	f7fe fdf2 	bl	80012b4 <drive>
 80026d0:	e013      	b.n	80026fa <task+0x452>
      }
      else
      {
        Forward(15);
 80026d2:	200f      	movs	r0, #15
 80026d4:	f7fe fe6c 	bl	80013b0 <Forward>
        Turn_Right((int)((-1) * Outputopenmv));
 80026d8:	4b79      	ldr	r3, [pc, #484]	; (80028c0 <task+0x618>)
 80026da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026de:	4614      	mov	r4, r2
 80026e0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80026e4:	4620      	mov	r0, r4
 80026e6:	4629      	mov	r1, r5
 80026e8:	f7fe fa5e 	bl	8000ba8 <__aeabi_d2iz>
 80026ec:	4603      	mov	r3, r0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fed7 	bl	80014a4 <Turn_Right>
        drive();
 80026f6:	f7fe fddd 	bl	80012b4 <drive>
      }
      toggleLD2(50);
 80026fa:	2032      	movs	r0, #50	; 0x32
 80026fc:	f7fe fc1e 	bl	8000f3c <toggleLD2>
      return;
 8002700:	e2e1      	b.n	8002cc6 <task+0xa1e>
    }
    /****************TASK 1******************/
    break;
  case 2:
    /****************TASK 2******************/
    printf("task 2 begin\r\n");
 8002702:	4876      	ldr	r0, [pc, #472]	; (80028dc <task+0x634>)
 8002704:	f006 ffe6 	bl	80096d4 <puts>

    if (turnLeftCounter==2 && turnRightCounter==2)
 8002708:	4b75      	ldr	r3, [pc, #468]	; (80028e0 <task+0x638>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b02      	cmp	r3, #2
 800270e:	f040 80c9 	bne.w	80028a4 <task+0x5fc>
 8002712:	4b74      	ldr	r3, [pc, #464]	; (80028e4 <task+0x63c>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b02      	cmp	r3, #2
 8002718:	f040 80c4 	bne.w	80028a4 <task+0x5fc>
    {
      printf("Going to the busket.\r\n");
 800271c:	4872      	ldr	r0, [pc, #456]	; (80028e8 <task+0x640>)
 800271e:	f006 ffd9 	bl	80096d4 <puts>

      superAlignment(1);
 8002722:	ed9f 0b65 	vldr	d0, [pc, #404]	; 80028b8 <task+0x610>
 8002726:	f7ff f831 	bl	800178c <superAlignment>

      for (int i = 0; i < 6; i++)
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	e00b      	b.n	8002748 <task+0x4a0>
      {
        Forward(15);
 8002730:	200f      	movs	r0, #15
 8002732:	f7fe fe3d 	bl	80013b0 <Forward>
        drive();
 8002736:	f7fe fdbd 	bl	80012b4 <drive>
        toggleLD2(500);
 800273a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800273e:	f7fe fbfd 	bl	8000f3c <toggleLD2>
      for (int i = 0; i < 6; i++)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3301      	adds	r3, #1
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b05      	cmp	r3, #5
 800274c:	ddf0      	ble.n	8002730 <task+0x488>
      }
      //stop 
      Forward(0);
 800274e:	2000      	movs	r0, #0
 8002750:	f7fe fe2e 	bl	80013b0 <Forward>
      drive();
 8002754:	f7fe fdae 	bl	80012b4 <drive>
      toggleLD2(500);
 8002758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800275c:	f7fe fbee 	bl	8000f3c <toggleLD2>
      //throw the ball
      Set_angle(&htim2,TIM_CHANNEL_1, 150,20000,20);
 8002760:	2314      	movs	r3, #20
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002768:	2296      	movs	r2, #150	; 0x96
 800276a:	2100      	movs	r1, #0
 800276c:	485f      	ldr	r0, [pc, #380]	; (80028ec <task+0x644>)
 800276e:	f7ff fa0f 	bl	8001b90 <Set_angle>
      toggleLD2(1000);
 8002772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002776:	f7fe fbe1 	bl	8000f3c <toggleLD2>
      Set_angle(&htim2,TIM_CHANNEL_1, 0,20000,20);
 800277a:	2314      	movs	r3, #20
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	4859      	ldr	r0, [pc, #356]	; (80028ec <task+0x644>)
 8002788:	f7ff fa02 	bl	8001b90 <Set_angle>

      //go back
      for (int i = 0; i < 4; i++)
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	e00b      	b.n	80027aa <task+0x502>
      {
        Backward(15);
 8002792:	200f      	movs	r0, #15
 8002794:	f7fe fe2c 	bl	80013f0 <Backward>
        drive();
 8002798:	f7fe fd8c 	bl	80012b4 <drive>
        toggleLD2(500);
 800279c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027a0:	f7fe fbcc 	bl	8000f3c <toggleLD2>
      for (int i = 0; i < 4; i++)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	3301      	adds	r3, #1
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	ddf0      	ble.n	8002792 <task+0x4ea>
      }
      superAlignment(1);
 80027b0:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80028b8 <task+0x610>
 80027b4:	f7fe ffea 	bl	800178c <superAlignment>
      

      //turn right
        //turn on the red led
        HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_SET);
 80027b8:	2201      	movs	r2, #1
 80027ba:	2102      	movs	r1, #2
 80027bc:	484c      	ldr	r0, [pc, #304]	; (80028f0 <task+0x648>)
 80027be:	f002 faf3 	bl	8004da8 <HAL_GPIO_WritePin>

        turn_Angle(90,2);
 80027c2:	2102      	movs	r1, #2
 80027c4:	205a      	movs	r0, #90	; 0x5a
 80027c6:	f7ff fb1d 	bl	8001e04 <turn_Angle>

        //finish the turning
        HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_RESET);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2102      	movs	r1, #2
 80027ce:	4848      	ldr	r0, [pc, #288]	; (80028f0 <task+0x648>)
 80027d0:	f002 faea 	bl	8004da8 <HAL_GPIO_WritePin>

      Backward(15);
 80027d4:	200f      	movs	r0, #15
 80027d6:	f7fe fe0b 	bl	80013f0 <Backward>
      drive();
 80027da:	f7fe fd6b 	bl	80012b4 <drive>

      while (1)//detect the planter
      {
        while(((timel_fin==1 && timer_fin ==1)&& timef_fin==1)!=1)
 80027de:	e002      	b.n	80027e6 <task+0x53e>
        {
          //waiting for the counting to finish
          toggleLD2(20);
 80027e0:	2014      	movs	r0, #20
 80027e2:	f7fe fbab 	bl	8000f3c <toggleLD2>
        while(((timel_fin==1 && timer_fin ==1)&& timef_fin==1)!=1)
 80027e6:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <task+0x64c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d109      	bne.n	8002802 <task+0x55a>
 80027ee:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <task+0x650>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <task+0x55a>
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <task+0x654>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <task+0x55a>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <task+0x55c>
 8002802:	2300      	movs	r3, #0
 8002804:	2b01      	cmp	r3, #1
 8002806:	d1eb      	bne.n	80027e0 <task+0x538>
        }
        if(cml<80||cmr<80)
 8002808:	4b3d      	ldr	r3, [pc, #244]	; (8002900 <task+0x658>)
 800280a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <task+0x65c>)
 8002814:	f7fe f98a 	bl	8000b2c <__aeabi_dcmplt>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <task+0x58c>
 800281e:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <task+0x660>)
 8002820:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	4b36      	ldr	r3, [pc, #216]	; (8002904 <task+0x65c>)
 800282a:	f7fe f97f 	bl	8000b2c <__aeabi_dcmplt>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d013      	beq.n	800285c <task+0x5b4>
        {
          Forward(0);
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe fdbb 	bl	80013b0 <Forward>
          drive();
 800283a:	f7fe fd3b 	bl	80012b4 <drive>
          toggleLD2(500);
 800283e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002842:	f7fe fb7b 	bl	8000f3c <toggleLD2>
          break;
 8002846:	bf00      	nop
        }
        Backward(15);
        drive();
        toggleLD2(500);
      }
      hc12send('a');
 8002848:	2061      	movs	r0, #97	; 0x61
 800284a:	f7ff f8a7 	bl	800199c <hc12send>
      toggleLD2(500);
 800284e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002852:	f7fe fb73 	bl	8000f3c <toggleLD2>

      //FINISH THE TASK

      for (uint8_t i = 0; i < 6; i++)
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e015      	b.n	8002888 <task+0x5e0>
        Backward(15);
 800285c:	200f      	movs	r0, #15
 800285e:	f7fe fdc7 	bl	80013f0 <Backward>
        drive();
 8002862:	f7fe fd27 	bl	80012b4 <drive>
        toggleLD2(500);
 8002866:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800286a:	f7fe fb67 	bl	8000f3c <toggleLD2>
        while(((timel_fin==1 && timer_fin ==1)&& timef_fin==1)!=1)
 800286e:	e7ba      	b.n	80027e6 <task+0x53e>
      {
        Backward(15);
 8002870:	200f      	movs	r0, #15
 8002872:	f7fe fdbd 	bl	80013f0 <Backward>
        drive();
 8002876:	f7fe fd1d 	bl	80012b4 <drive>
        toggleLD2(500);
 800287a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800287e:	f7fe fb5d 	bl	8000f3c <toggleLD2>
      for (uint8_t i = 0; i < 6; i++)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	3301      	adds	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d9f0      	bls.n	8002870 <task+0x5c8>
      }
      
      Backward(0);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe fdae 	bl	80013f0 <Backward>
      drive();
 8002894:	f7fe fd0e 	bl	80012b4 <drive>
      celebrate();
 8002898:	f7ff fce4 	bl	8002264 <celebrate>
      
    }

      while((timel_fin==1 && timer_fin ==1)!=1)
 800289c:	e002      	b.n	80028a4 <task+0x5fc>
      {
        //waiting for the counting to finish
        toggleLD2(20);
 800289e:	2014      	movs	r0, #20
 80028a0:	f7fe fb4c 	bl	8000f3c <toggleLD2>
      while((timel_fin==1 && timer_fin ==1)!=1)
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <task+0x64c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d12f      	bne.n	800290c <task+0x664>
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <task+0x650>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d12b      	bne.n	800290c <task+0x664>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e02a      	b.n	800290e <task+0x666>
 80028b8:	00000000 	.word	0x00000000
 80028bc:	3ff00000 	.word	0x3ff00000
 80028c0:	20000690 	.word	0x20000690
 80028c4:	200008a0 	.word	0x200008a0
 80028c8:	20000688 	.word	0x20000688
 80028cc:	0800b9dc 	.word	0x0800b9dc
 80028d0:	20000798 	.word	0x20000798
 80028d4:	0800b9f0 	.word	0x0800b9f0
 80028d8:	0800ba10 	.word	0x0800ba10
 80028dc:	0800ba28 	.word	0x0800ba28
 80028e0:	200008a4 	.word	0x200008a4
 80028e4:	200008a5 	.word	0x200008a5
 80028e8:	0800ba38 	.word	0x0800ba38
 80028ec:	20000520 	.word	0x20000520
 80028f0:	48000400 	.word	0x48000400
 80028f4:	20000605 	.word	0x20000605
 80028f8:	20000621 	.word	0x20000621
 80028fc:	20000641 	.word	0x20000641
 8002900:	20000618 	.word	0x20000618
 8002904:	40540000 	.word	0x40540000
 8002908:	20000638 	.word	0x20000638
 800290c:	2300      	movs	r3, #0
 800290e:	2b01      	cmp	r3, #1
 8002910:	d1c5      	bne.n	800289e <task+0x5f6>
        //printf("waiting for the counting to finish\r\n");
      }
      timecount++;
 8002912:	4bad      	ldr	r3, [pc, #692]	; (8002bc8 <task+0x920>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	4aab      	ldr	r2, [pc, #684]	; (8002bc8 <task+0x920>)
 800291a:	6013      	str	r3, [r2, #0]

      //remove strange datas
      if (cml>100)
 800291c:	4bab      	ldr	r3, [pc, #684]	; (8002bcc <task+0x924>)
 800291e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4baa      	ldr	r3, [pc, #680]	; (8002bd0 <task+0x928>)
 8002928:	f7fe f91e 	bl	8000b68 <__aeabi_dcmpgt>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d015      	beq.n	800295e <task+0x6b6>
      {       
        if(ultraerrorcount_l<2  && lflag != 1)
 8002932:	4ba8      	ldr	r3, [pc, #672]	; (8002bd4 <task+0x92c>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d80a      	bhi.n	8002950 <task+0x6a8>
 800293a:	4ba7      	ldr	r3, [pc, #668]	; (8002bd8 <task+0x930>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d006      	beq.n	8002950 <task+0x6a8>
        {
          ultraerrorcount_l++;
 8002942:	4ba4      	ldr	r3, [pc, #656]	; (8002bd4 <task+0x92c>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4ba2      	ldr	r3, [pc, #648]	; (8002bd4 <task+0x92c>)
 800294c:	701a      	strb	r2, [r3, #0]
          return;//skip if there is error data
 800294e:	e1ba      	b.n	8002cc6 <task+0xa1e>
        }
        else
        {
          ultraerrorcount_l=0;
 8002950:	4ba0      	ldr	r3, [pc, #640]	; (8002bd4 <task+0x92c>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
          lflag = 1;
 8002956:	4ba0      	ldr	r3, [pc, #640]	; (8002bd8 <task+0x930>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e002      	b.n	8002964 <task+0x6bc>
        }
      }
      else{
        lflag = 0;
 800295e:	4b9e      	ldr	r3, [pc, #632]	; (8002bd8 <task+0x930>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
      }

      if (cmr>100)
 8002964:	4b9d      	ldr	r3, [pc, #628]	; (8002bdc <task+0x934>)
 8002966:	e9d3 0100 	ldrd	r0, r1, [r3]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	4b98      	ldr	r3, [pc, #608]	; (8002bd0 <task+0x928>)
 8002970:	f7fe f8fa 	bl	8000b68 <__aeabi_dcmpgt>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d015      	beq.n	80029a6 <task+0x6fe>
      {       
        if(ultraerrorcount_r<2  && rflag != 1)
 800297a:	4b99      	ldr	r3, [pc, #612]	; (8002be0 <task+0x938>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d80a      	bhi.n	8002998 <task+0x6f0>
 8002982:	4b98      	ldr	r3, [pc, #608]	; (8002be4 <task+0x93c>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d006      	beq.n	8002998 <task+0x6f0>
        {
          ultraerrorcount_r++;
 800298a:	4b95      	ldr	r3, [pc, #596]	; (8002be0 <task+0x938>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	3301      	adds	r3, #1
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4b93      	ldr	r3, [pc, #588]	; (8002be0 <task+0x938>)
 8002994:	701a      	strb	r2, [r3, #0]
          return;//skip if there is error data
 8002996:	e196      	b.n	8002cc6 <task+0xa1e>
        }
        else
        {
          ultraerrorcount_r=0;
 8002998:	4b91      	ldr	r3, [pc, #580]	; (8002be0 <task+0x938>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
          rflag = 1;
 800299e:	4b91      	ldr	r3, [pc, #580]	; (8002be4 <task+0x93c>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
 80029a4:	e002      	b.n	80029ac <task+0x704>
        }
      }
      else{
        rflag = 0;
 80029a6:	4b8f      	ldr	r3, [pc, #572]	; (8002be4 <task+0x93c>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
      }

      //cml+=1;//remove fixed error

      if ((cmr-cml>50)&& timecount>200)//if the difference is too large, then turn right
 80029ac:	4b8b      	ldr	r3, [pc, #556]	; (8002bdc <task+0x934>)
 80029ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b2:	4b86      	ldr	r3, [pc, #536]	; (8002bcc <task+0x924>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fc8e 	bl	80002d8 <__aeabi_dsub>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	4b87      	ldr	r3, [pc, #540]	; (8002be8 <task+0x940>)
 80029ca:	f7fe f8cd 	bl	8000b68 <__aeabi_dcmpgt>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 811d 	beq.w	8002c10 <task+0x968>
 80029d6:	4b7c      	ldr	r3, [pc, #496]	; (8002bc8 <task+0x920>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2bc8      	cmp	r3, #200	; 0xc8
 80029dc:	f240 8118 	bls.w	8002c10 <task+0x968>
      {
        if (turnRightCounter == 0)//first edge
 80029e0:	4b82      	ldr	r3, [pc, #520]	; (8002bec <task+0x944>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 80a7 	bne.w	8002b38 <task+0x890>
        {
          timecount =0;
 80029ea:	4b77      	ldr	r3, [pc, #476]	; (8002bc8 <task+0x920>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
          turnRightCounter++;
 80029f0:	4b7e      	ldr	r3, [pc, #504]	; (8002bec <task+0x944>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	4b7c      	ldr	r3, [pc, #496]	; (8002bec <task+0x944>)
 80029fa:	701a      	strb	r2, [r3, #0]
          //turn on the red led
          printf("Turning right\r\n");
 80029fc:	487c      	ldr	r0, [pc, #496]	; (8002bf0 <task+0x948>)
 80029fe:	f006 fe69 	bl	80096d4 <puts>
          HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_SET);
 8002a02:	2201      	movs	r2, #1
 8002a04:	2102      	movs	r1, #2
 8002a06:	487b      	ldr	r0, [pc, #492]	; (8002bf4 <task+0x94c>)
 8002a08:	f002 f9ce 	bl	8004da8 <HAL_GPIO_WritePin>

          for(uint8_t i = 0 ;i<2;i++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73bb      	strb	r3, [r7, #14]
 8002a10:	e00b      	b.n	8002a2a <task+0x782>
          {
            Forward(15);
 8002a12:	200f      	movs	r0, #15
 8002a14:	f7fe fccc 	bl	80013b0 <Forward>
            drive();
 8002a18:	f7fe fc4c 	bl	80012b4 <drive>
            toggleLD2(500);
 8002a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a20:	f7fe fa8c 	bl	8000f3c <toggleLD2>
          for(uint8_t i = 0 ;i<2;i++)
 8002a24:	7bbb      	ldrb	r3, [r7, #14]
 8002a26:	3301      	adds	r3, #1
 8002a28:	73bb      	strb	r3, [r7, #14]
 8002a2a:	7bbb      	ldrb	r3, [r7, #14]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d9f0      	bls.n	8002a12 <task+0x76a>
          }

          Forward(0);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fe fcbd 	bl	80013b0 <Forward>
          drive();
 8002a36:	f7fe fc3d 	bl	80012b4 <drive>
          toggleLD2(500);
 8002a3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a3e:	f7fe fa7d 	bl	8000f3c <toggleLD2>

          turn_Angle(70,2);
 8002a42:	2102      	movs	r1, #2
 8002a44:	2046      	movs	r0, #70	; 0x46
 8002a46:	f7ff f9dd 	bl	8001e04 <turn_Angle>

          HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_RESET);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4869      	ldr	r0, [pc, #420]	; (8002bf4 <task+0x94c>)
 8002a50:	f002 f9aa 	bl	8004da8 <HAL_GPIO_WritePin>

          ATKPrcess();
 8002a54:	f7fe ffd0 	bl	80019f8 <ATKPrcess>
          initial_selfAngelint= selfAngelint;
 8002a58:	4b67      	ldr	r3, [pc, #412]	; (8002bf8 <task+0x950>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a67      	ldr	r2, [pc, #412]	; (8002bfc <task+0x954>)
 8002a5e:	6013      	str	r3, [r2, #0]

          while (1)
          {
            if(cmf<25)
 8002a60:	4b67      	ldr	r3, [pc, #412]	; (8002c00 <task+0x958>)
 8002a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <task+0x95c>)
 8002a6c:	f7fe f85e 	bl	8000b2c <__aeabi_dcmplt>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d136      	bne.n	8002ae4 <task+0x83c>
              break;

            Forward(15);
 8002a76:	200f      	movs	r0, #15
 8002a78:	f7fe fc9a 	bl	80013b0 <Forward>
            walkStraight();
 8002a7c:	f7ff f98a 	bl	8001d94 <walkStraight>
            drive();
 8002a80:	f7fe fc18 	bl	80012b4 <drive>
            HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002a84:	2102      	movs	r1, #2
 8002a86:	485b      	ldr	r0, [pc, #364]	; (8002bf4 <task+0x94c>)
 8002a88:	f002 f9a6 	bl	8004dd8 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	4859      	ldr	r0, [pc, #356]	; (8002bf4 <task+0x94c>)
 8002a90:	f002 f9a2 	bl	8004dd8 <HAL_GPIO_TogglePin>
            HAL_Delay(50);
 8002a94:	2032      	movs	r0, #50	; 0x32
 8002a96:	f001 fed3 	bl	8004840 <HAL_Delay>

            HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	4855      	ldr	r0, [pc, #340]	; (8002bf4 <task+0x94c>)
 8002a9e:	f002 f99b 	bl	8004dd8 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	4853      	ldr	r0, [pc, #332]	; (8002bf4 <task+0x94c>)
 8002aa6:	f002 f997 	bl	8004dd8 <HAL_GPIO_TogglePin>
            HAL_Delay(50);
 8002aaa:	2032      	movs	r0, #50	; 0x32
 8002aac:	f001 fec8 	bl	8004840 <HAL_Delay>

            HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	4850      	ldr	r0, [pc, #320]	; (8002bf4 <task+0x94c>)
 8002ab4:	f002 f990 	bl	8004dd8 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002ab8:	2104      	movs	r1, #4
 8002aba:	484e      	ldr	r0, [pc, #312]	; (8002bf4 <task+0x94c>)
 8002abc:	f002 f98c 	bl	8004dd8 <HAL_GPIO_TogglePin>
            HAL_Delay(50);
 8002ac0:	2032      	movs	r0, #50	; 0x32
 8002ac2:	f001 febd 	bl	8004840 <HAL_Delay>

            HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	484a      	ldr	r0, [pc, #296]	; (8002bf4 <task+0x94c>)
 8002aca:	f002 f985 	bl	8004dd8 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002ace:	2104      	movs	r1, #4
 8002ad0:	4848      	ldr	r0, [pc, #288]	; (8002bf4 <task+0x94c>)
 8002ad2:	f002 f981 	bl	8004dd8 <HAL_GPIO_TogglePin>
            HAL_Delay(50);
 8002ad6:	2032      	movs	r0, #50	; 0x32
 8002ad8:	f001 feb2 	bl	8004840 <HAL_Delay>

            HAL_Delay(100);
 8002adc:	2064      	movs	r0, #100	; 0x64
 8002ade:	f001 feaf 	bl	8004840 <HAL_Delay>
            if(cmf<25)
 8002ae2:	e7bd      	b.n	8002a60 <task+0x7b8>
              break;
 8002ae4:	bf00      	nop
          }
          //turn left
          timecount=0;
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <task+0x920>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
          turnLeftCounter++;
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <task+0x960>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b44      	ldr	r3, [pc, #272]	; (8002c08 <task+0x960>)
 8002af6:	701a      	strb	r2, [r3, #0]
          printf("Turning left\r\n");
 8002af8:	4844      	ldr	r0, [pc, #272]	; (8002c0c <task+0x964>)
 8002afa:	f006 fdeb 	bl	80096d4 <puts>
          //turn on the green led
          HAL_GPIO_WritePin(ldg_GPIO_Port, ldg_Pin,GPIO_PIN_SET);
 8002afe:	2201      	movs	r2, #1
 8002b00:	2104      	movs	r1, #4
 8002b02:	483c      	ldr	r0, [pc, #240]	; (8002bf4 <task+0x94c>)
 8002b04:	f002 f950 	bl	8004da8 <HAL_GPIO_WritePin>

          Forward(0);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7fe fc51 	bl	80013b0 <Forward>
          drive();
 8002b0e:	f7fe fbd1 	bl	80012b4 <drive>
          toggleLD2(500);
 8002b12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b16:	f7fe fa11 	bl	8000f3c <toggleLD2>

          //turn left
          turn_Angle(90,1);
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	205a      	movs	r0, #90	; 0x5a
 8002b1e:	f7ff f971 	bl	8001e04 <turn_Angle>

          //finish the turning
          HAL_GPIO_WritePin(ldg_GPIO_Port, ldg_Pin,GPIO_PIN_RESET);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2104      	movs	r1, #4
 8002b26:	4833      	ldr	r0, [pc, #204]	; (8002bf4 <task+0x94c>)
 8002b28:	f002 f93e 	bl	8004da8 <HAL_GPIO_WritePin>
          Forward(15);
 8002b2c:	200f      	movs	r0, #15
 8002b2e:	f7fe fc3f 	bl	80013b0 <Forward>
          drive();
 8002b32:	f7fe fbbf 	bl	80012b4 <drive>
          return;
 8002b36:	e0c6      	b.n	8002cc6 <task+0xa1e>
 
        }
        else
        {
          timecount =0;
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <task+0x920>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
          turnRightCounter++;
 8002b3e:	4b2b      	ldr	r3, [pc, #172]	; (8002bec <task+0x944>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <task+0x944>)
 8002b48:	701a      	strb	r2, [r3, #0]
          //turn on the red led
          printf("Turning right\r\n");
 8002b4a:	4829      	ldr	r0, [pc, #164]	; (8002bf0 <task+0x948>)
 8002b4c:	f006 fdc2 	bl	80096d4 <puts>
          HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_SET);
 8002b50:	2201      	movs	r2, #1
 8002b52:	2102      	movs	r1, #2
 8002b54:	4827      	ldr	r0, [pc, #156]	; (8002bf4 <task+0x94c>)
 8002b56:	f002 f927 	bl	8004da8 <HAL_GPIO_WritePin>

          for(uint8_t i = 0 ;i<2;i++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	737b      	strb	r3, [r7, #13]
 8002b5e:	e00b      	b.n	8002b78 <task+0x8d0>
          {
            Forward(15);
 8002b60:	200f      	movs	r0, #15
 8002b62:	f7fe fc25 	bl	80013b0 <Forward>
            drive();
 8002b66:	f7fe fba5 	bl	80012b4 <drive>
            toggleLD2(500);
 8002b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b6e:	f7fe f9e5 	bl	8000f3c <toggleLD2>
          for(uint8_t i = 0 ;i<2;i++)
 8002b72:	7b7b      	ldrb	r3, [r7, #13]
 8002b74:	3301      	adds	r3, #1
 8002b76:	737b      	strb	r3, [r7, #13]
 8002b78:	7b7b      	ldrb	r3, [r7, #13]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d9f0      	bls.n	8002b60 <task+0x8b8>
          }

          Forward(0);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fe fc16 	bl	80013b0 <Forward>
          drive();
 8002b84:	f7fe fb96 	bl	80012b4 <drive>
          toggleLD2(500);
 8002b88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b8c:	f7fe f9d6 	bl	8000f3c <toggleLD2>

          turn_Angle(60,2);
 8002b90:	2102      	movs	r1, #2
 8002b92:	203c      	movs	r0, #60	; 0x3c
 8002b94:	f7ff f936 	bl	8001e04 <turn_Angle>

          //finish the turning
          for(uint8_t i = 0 ;i<12;i++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	733b      	strb	r3, [r7, #12]
 8002b9c:	e00b      	b.n	8002bb6 <task+0x90e>
          {
            Forward(15);
 8002b9e:	200f      	movs	r0, #15
 8002ba0:	f7fe fc06 	bl	80013b0 <Forward>
            drive();
 8002ba4:	f7fe fb86 	bl	80012b4 <drive>
            toggleLD2(500);
 8002ba8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bac:	f7fe f9c6 	bl	8000f3c <toggleLD2>
          for(uint8_t i = 0 ;i<12;i++)
 8002bb0:	7b3b      	ldrb	r3, [r7, #12]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	733b      	strb	r3, [r7, #12]
 8002bb6:	7b3b      	ldrb	r3, [r7, #12]
 8002bb8:	2b0b      	cmp	r3, #11
 8002bba:	d9f0      	bls.n	8002b9e <task+0x8f6>
          }
          HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_RESET);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <task+0x94c>)
 8002bc2:	f002 f8f1 	bl	8004da8 <HAL_GPIO_WritePin>
          return;
 8002bc6:	e07e      	b.n	8002cc6 <task+0xa1e>
 8002bc8:	20000008 	.word	0x20000008
 8002bcc:	20000618 	.word	0x20000618
 8002bd0:	40590000 	.word	0x40590000
 8002bd4:	20000658 	.word	0x20000658
 8002bd8:	2000065a 	.word	0x2000065a
 8002bdc:	20000638 	.word	0x20000638
 8002be0:	20000659 	.word	0x20000659
 8002be4:	2000065b 	.word	0x2000065b
 8002be8:	40490000 	.word	0x40490000
 8002bec:	200008a5 	.word	0x200008a5
 8002bf0:	0800b9c4 	.word	0x0800b9c4
 8002bf4:	48000400 	.word	0x48000400
 8002bf8:	20000894 	.word	0x20000894
 8002bfc:	2000089c 	.word	0x2000089c
 8002c00:	20000650 	.word	0x20000650
 8002c04:	40390000 	.word	0x40390000
 8002c08:	200008a4 	.word	0x200008a4
 8002c0c:	0800ba50 	.word	0x0800ba50
        }
      }

      if((cmf<25)&& timecount>200)//turn left
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <task+0xa28>)
 8002c12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	4b2e      	ldr	r3, [pc, #184]	; (8002cd4 <task+0xa2c>)
 8002c1c:	f7fd ff86 	bl	8000b2c <__aeabi_dcmplt>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d02c      	beq.n	8002c80 <task+0x9d8>
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <task+0xa30>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2bc8      	cmp	r3, #200	; 0xc8
 8002c2c:	d928      	bls.n	8002c80 <task+0x9d8>
      {
        timecount=0;
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <task+0xa30>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
        turnLeftCounter++;
 8002c34:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <task+0xa34>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <task+0xa34>)
 8002c3e:	701a      	strb	r2, [r3, #0]
        printf("Turning left\r\n");
 8002c40:	4827      	ldr	r0, [pc, #156]	; (8002ce0 <task+0xa38>)
 8002c42:	f006 fd47 	bl	80096d4 <puts>
        //turn on the green led
        HAL_GPIO_WritePin(ldg_GPIO_Port, ldg_Pin,GPIO_PIN_SET);
 8002c46:	2201      	movs	r2, #1
 8002c48:	2104      	movs	r1, #4
 8002c4a:	4826      	ldr	r0, [pc, #152]	; (8002ce4 <task+0xa3c>)
 8002c4c:	f002 f8ac 	bl	8004da8 <HAL_GPIO_WritePin>

        Forward(0);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7fe fbad 	bl	80013b0 <Forward>
        drive();
 8002c56:	f7fe fb2d 	bl	80012b4 <drive>
        toggleLD2(500);
 8002c5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c5e:	f7fe f96d 	bl	8000f3c <toggleLD2>

        //turn left
        turn_Angle(90,1);
 8002c62:	2101      	movs	r1, #1
 8002c64:	205a      	movs	r0, #90	; 0x5a
 8002c66:	f7ff f8cd 	bl	8001e04 <turn_Angle>

        //finish the turning
        HAL_GPIO_WritePin(ldg_GPIO_Port, ldg_Pin,GPIO_PIN_RESET);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	481d      	ldr	r0, [pc, #116]	; (8002ce4 <task+0xa3c>)
 8002c70:	f002 f89a 	bl	8004da8 <HAL_GPIO_WritePin>
        Forward(15);
 8002c74:	200f      	movs	r0, #15
 8002c76:	f7fe fb9b 	bl	80013b0 <Forward>
        drive();
 8002c7a:	f7fe fb1b 	bl	80012b4 <drive>
        return;
 8002c7e:	e022      	b.n	8002cc6 <task+0xa1e>
      }
      else//nothing in front
      {
        Forward(15);
 8002c80:	200f      	movs	r0, #15
 8002c82:	f7fe fb95 	bl	80013b0 <Forward>
        Alignment(cml, cmr);
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <task+0xa40>)
 8002c88:	ed93 7b00 	vldr	d7, [r3]
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <task+0xa44>)
 8002c8e:	ed93 6b00 	vldr	d6, [r3]
 8002c92:	eeb0 1a46 	vmov.f32	s2, s12
 8002c96:	eef0 1a66 	vmov.f32	s3, s13
 8002c9a:	eeb0 0a47 	vmov.f32	s0, s14
 8002c9e:	eef0 0a67 	vmov.f32	s1, s15
 8002ca2:	f7fe fcb1 	bl	8001608 <Alignment>
        drive();
 8002ca6:	f7fe fb05 	bl	80012b4 <drive>
        toggleLD2(50);
 8002caa:	2032      	movs	r0, #50	; 0x32
 8002cac:	f7fe f946 	bl	8000f3c <toggleLD2>
        return;      
 8002cb0:	e009      	b.n	8002cc6 <task+0xa1e>
    /****************TASK 2******************/
    break;
  
  default:

    HAL_GPIO_WritePin(ldr_GPIO_Port,ldr_Pin,GPIO_PIN_SET);
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	480b      	ldr	r0, [pc, #44]	; (8002ce4 <task+0xa3c>)
 8002cb8:	f002 f876 	bl	8004da8 <HAL_GPIO_WritePin>
    while(1)
    {
      printf("Error Task number!\r\n");
 8002cbc:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <task+0xa48>)
 8002cbe:	f006 fd09 	bl	80096d4 <puts>
 8002cc2:	e7fb      	b.n	8002cbc <task+0xa14>
    break;
 8002cc4:	bf00      	nop
    }
    break;
  }
}
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000650 	.word	0x20000650
 8002cd4:	40390000 	.word	0x40390000
 8002cd8:	20000008 	.word	0x20000008
 8002cdc:	200008a4 	.word	0x200008a4
 8002ce0:	0800ba50 	.word	0x0800ba50
 8002ce4:	48000400 	.word	0x48000400
 8002ce8:	20000618 	.word	0x20000618
 8002cec:	20000638 	.word	0x20000638
 8002cf0:	0800ba60 	.word	0x0800ba60
 8002cf4:	00000000 	.word	0x00000000

08002cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cfe:	f001 fd2e 	bl	800475e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d02:	f000 f959 	bl	8002fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d06:	f000 fd4b 	bl	80037a0 <MX_GPIO_Init>
  MX_TIM5_Init();
 8002d0a:	f000 fccd 	bl	80036a8 <MX_TIM5_Init>
  MX_TIM1_Init();
 8002d0e:	f000 fb19 	bl	8003344 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8002d12:	f000 f99d 	bl	8003050 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8002d16:	f000 f9e5 	bl	80030e4 <MX_UART4_Init>
  MX_TIM4_Init();
 8002d1a:	f000 fc53 	bl	80035c4 <MX_TIM4_Init>
  MX_UART5_Init();
 8002d1e:	f000 fa2d 	bl	800317c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8002d22:	f000 fa77 	bl	8003214 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002d26:	f000 fac1 	bl	80032ac <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002d2a:	f000 fbbd 	bl	80034a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting\r\n");
 8002d2e:	4888      	ldr	r0, [pc, #544]	; (8002f50 <main+0x258>)
 8002d30:	f006 fcd0 	bl	80096d4 <puts>
  // Load parameters to PID
  PID(&myPIDultra, &Inputultra, &Outputultra, &Setpointultra, 1.2, 1, 0.8, _PID_P_ON_E, _PID_CD_DIRECT);
 8002d34:	2300      	movs	r3, #0
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	ed9f 2b64 	vldr	d2, [pc, #400]	; 8002ed0 <main+0x1d8>
 8002d40:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8002ed8 <main+0x1e0>
 8002d44:	ed9f 0b66 	vldr	d0, [pc, #408]	; 8002ee0 <main+0x1e8>
 8002d48:	4b82      	ldr	r3, [pc, #520]	; (8002f54 <main+0x25c>)
 8002d4a:	4a83      	ldr	r2, [pc, #524]	; (8002f58 <main+0x260>)
 8002d4c:	4983      	ldr	r1, [pc, #524]	; (8002f5c <main+0x264>)
 8002d4e:	4884      	ldr	r0, [pc, #528]	; (8002f60 <main+0x268>)
 8002d50:	f000 fe0a 	bl	8003968 <PID>
  PID_SetMode(&myPIDultra, _PID_MODE_AUTOMATIC);
 8002d54:	2101      	movs	r1, #1
 8002d56:	4882      	ldr	r0, [pc, #520]	; (8002f60 <main+0x268>)
 8002d58:	f000 ff3c 	bl	8003bd4 <PID_SetMode>
  PID_SetSampleTime(&myPIDultra, 50);
 8002d5c:	2132      	movs	r1, #50	; 0x32
 8002d5e:	4880      	ldr	r0, [pc, #512]	; (8002f60 <main+0x268>)
 8002d60:	f001 f8ac 	bl	8003ebc <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDultra, -10, 10);
 8002d64:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8002ee8 <main+0x1f0>
 8002d68:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8002ef0 <main+0x1f8>
 8002d6c:	487c      	ldr	r0, [pc, #496]	; (8002f60 <main+0x268>)
 8002d6e:	f000 ff4f 	bl	8003c10 <PID_SetOutputLimits>

  PID(&myPIDdistance, &Inputdistance, &Outputdistance, &Setpointdistance, 0.8, 200, 15, _PID_P_ON_E, _PID_CD_DIRECT);
 8002d72:	2300      	movs	r3, #0
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	2301      	movs	r3, #1
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	ed9f 2b5f 	vldr	d2, [pc, #380]	; 8002ef8 <main+0x200>
 8002d7e:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8002f00 <main+0x208>
 8002d82:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8002ed0 <main+0x1d8>
 8002d86:	4b77      	ldr	r3, [pc, #476]	; (8002f64 <main+0x26c>)
 8002d88:	4a77      	ldr	r2, [pc, #476]	; (8002f68 <main+0x270>)
 8002d8a:	4978      	ldr	r1, [pc, #480]	; (8002f6c <main+0x274>)
 8002d8c:	4878      	ldr	r0, [pc, #480]	; (8002f70 <main+0x278>)
 8002d8e:	f000 fdeb 	bl	8003968 <PID>
  PID_SetMode(&myPIDdistance, _PID_MODE_AUTOMATIC);
 8002d92:	2101      	movs	r1, #1
 8002d94:	4876      	ldr	r0, [pc, #472]	; (8002f70 <main+0x278>)
 8002d96:	f000 ff1d 	bl	8003bd4 <PID_SetMode>
  PID_SetSampleTime(&myPIDdistance, 50);
 8002d9a:	2132      	movs	r1, #50	; 0x32
 8002d9c:	4874      	ldr	r0, [pc, #464]	; (8002f70 <main+0x278>)
 8002d9e:	f001 f88d 	bl	8003ebc <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDdistance, -5, 5);
 8002da2:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8002f08 <main+0x210>
 8002da6:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8002f10 <main+0x218>
 8002daa:	4871      	ldr	r0, [pc, #452]	; (8002f70 <main+0x278>)
 8002dac:	f000 ff30 	bl	8003c10 <PID_SetOutputLimits>

  PID(&myPIDopenmv, &Inputopenmv, &Outputopenmv, &Setpointopenmv, 0.2, 0, 0.12, _PID_P_ON_E, _PID_CD_DIRECT);
 8002db0:	2300      	movs	r3, #0
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	2301      	movs	r3, #1
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	ed9f 2b57 	vldr	d2, [pc, #348]	; 8002f18 <main+0x220>
 8002dbc:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8002f20 <main+0x228>
 8002dc0:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8002f28 <main+0x230>
 8002dc4:	4b6b      	ldr	r3, [pc, #428]	; (8002f74 <main+0x27c>)
 8002dc6:	4a6c      	ldr	r2, [pc, #432]	; (8002f78 <main+0x280>)
 8002dc8:	496c      	ldr	r1, [pc, #432]	; (8002f7c <main+0x284>)
 8002dca:	486d      	ldr	r0, [pc, #436]	; (8002f80 <main+0x288>)
 8002dcc:	f000 fdcc 	bl	8003968 <PID>
  PID_SetMode(&myPIDopenmv, _PID_MODE_AUTOMATIC);
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	486b      	ldr	r0, [pc, #428]	; (8002f80 <main+0x288>)
 8002dd4:	f000 fefe 	bl	8003bd4 <PID_SetMode>
  PID_SetSampleTime(&myPIDopenmv, 170);
 8002dd8:	21aa      	movs	r1, #170	; 0xaa
 8002dda:	4869      	ldr	r0, [pc, #420]	; (8002f80 <main+0x288>)
 8002ddc:	f001 f86e 	bl	8003ebc <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDopenmv, -10, 10);
 8002de0:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8002ee8 <main+0x1f0>
 8002de4:	ed9f 0b42 	vldr	d0, [pc, #264]	; 8002ef0 <main+0x1f8>
 8002de8:	4865      	ldr	r0, [pc, #404]	; (8002f80 <main+0x288>)
 8002dea:	f000 ff11 	bl	8003c10 <PID_SetOutputLimits>

  PID(&myPIDgyro, &Inputgyro, &Outputgyro, &Setpointgyro, 0.5, 0.1, 1.2, _PID_P_ON_E, _PID_CD_DIRECT);
 8002dee:	2300      	movs	r3, #0
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	2301      	movs	r3, #1
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	ed9f 2b3a 	vldr	d2, [pc, #232]	; 8002ee0 <main+0x1e8>
 8002dfa:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8002f30 <main+0x238>
 8002dfe:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8002f38 <main+0x240>
 8002e02:	4b60      	ldr	r3, [pc, #384]	; (8002f84 <main+0x28c>)
 8002e04:	4a60      	ldr	r2, [pc, #384]	; (8002f88 <main+0x290>)
 8002e06:	4961      	ldr	r1, [pc, #388]	; (8002f8c <main+0x294>)
 8002e08:	4861      	ldr	r0, [pc, #388]	; (8002f90 <main+0x298>)
 8002e0a:	f000 fdad 	bl	8003968 <PID>
  PID_SetMode(&myPIDgyro, _PID_MODE_AUTOMATIC);
 8002e0e:	2101      	movs	r1, #1
 8002e10:	485f      	ldr	r0, [pc, #380]	; (8002f90 <main+0x298>)
 8002e12:	f000 fedf 	bl	8003bd4 <PID_SetMode>
  PID_SetSampleTime(&myPIDgyro, 50);
 8002e16:	2132      	movs	r1, #50	; 0x32
 8002e18:	485d      	ldr	r0, [pc, #372]	; (8002f90 <main+0x298>)
 8002e1a:	f001 f84f 	bl	8003ebc <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDgyro, -4, 4);
 8002e1e:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8002f40 <main+0x248>
 8002e22:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8002f48 <main+0x250>
 8002e26:	485a      	ldr	r0, [pc, #360]	; (8002f90 <main+0x298>)
 8002e28:	f000 fef2 	bl	8003c10 <PID_SetOutputLimits>

  // start TIM1 PWM generator
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4859      	ldr	r0, [pc, #356]	; (8002f94 <main+0x29c>)
 8002e30:	f003 f8fe 	bl	8006030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Machine Arm: 0(normal) and 180(putting)
 8002e34:	2100      	movs	r1, #0
 8002e36:	4858      	ldr	r0, [pc, #352]	; (8002f98 <main+0x2a0>)
 8002e38:	f003 f8fa 	bl	8006030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Bule servo(top): 90
 8002e3c:	2108      	movs	r1, #8
 8002e3e:	4856      	ldr	r0, [pc, #344]	; (8002f98 <main+0x2a0>)
 8002e40:	f003 f8f6 	bl	8006030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Bule servo(openmv): 110(rectangle) and 65(45 degree)
 8002e44:	210c      	movs	r1, #12
 8002e46:	4854      	ldr	r0, [pc, #336]	; (8002f98 <main+0x2a0>)
 8002e48:	f003 f8f2 	bl	8006030 <HAL_TIM_PWM_Start>
  // start TIM5 IT left and right sensor
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4853      	ldr	r0, [pc, #332]	; (8002f9c <main+0x2a4>)
 8002e50:	f003 fa62 	bl	8006318 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8002e54:	2104      	movs	r1, #4
 8002e56:	4851      	ldr	r0, [pc, #324]	; (8002f9c <main+0x2a4>)
 8002e58:	f003 fa5e 	bl	8006318 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4850      	ldr	r0, [pc, #320]	; (8002fa0 <main+0x2a8>)
 8002e60:	f003 fa5a 	bl	8006318 <HAL_TIM_IC_Start_IT>

  // Servo initial position
  Set_angle(&htim2, TIM_CHANNEL_1, 0, 20000, 20);
 8002e64:	2314      	movs	r3, #20
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4849      	ldr	r0, [pc, #292]	; (8002f98 <main+0x2a0>)
 8002e72:	f7fe fe8d 	bl	8001b90 <Set_angle>
  Set_angle(&htim2, TIM_CHANNEL_3, 90, 20000, 20);
 8002e76:	2314      	movs	r3, #20
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002e7e:	225a      	movs	r2, #90	; 0x5a
 8002e80:	2108      	movs	r1, #8
 8002e82:	4845      	ldr	r0, [pc, #276]	; (8002f98 <main+0x2a0>)
 8002e84:	f7fe fe84 	bl	8001b90 <Set_angle>
  // Set_angle(&htim2,TIM_CHANNEL_4, 110,20000,20);
  Set_angle(&htim2, TIM_CHANNEL_4, 60, 20000, 20);
 8002e88:	2314      	movs	r3, #20
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002e90:	223c      	movs	r2, #60	; 0x3c
 8002e92:	210c      	movs	r1, #12
 8002e94:	4840      	ldr	r0, [pc, #256]	; (8002f98 <main+0x2a0>)
 8002e96:	f7fe fe7b 	bl	8001b90 <Set_angle>

  //Recode initial Pitch
   ATKPrcess();
 8002e9a:	f7fe fdad 	bl	80019f8 <ATKPrcess>
   initial_Pitch = pitch;
 8002e9e:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <main+0x2ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a41      	ldr	r2, [pc, #260]	; (8002fa8 <main+0x2b0>)
 8002ea4:	6013      	str	r3, [r2, #0]
   initial_selfAngelint = selfAngelint;
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <main+0x2b4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a41      	ldr	r2, [pc, #260]	; (8002fb0 <main+0x2b8>)
 8002eac:	6013      	str	r3, [r2, #0]
  // {
  //   UART_DISABLE_RE(huart3); // error
  //   return HAL_ERROR;
  // }
  // UART_DISABLE_RE(huart3);
  HAL_Delay(5000);
 8002eae:	f241 3088 	movw	r0, #5000	; 0x1388
 8002eb2:	f001 fcc5 	bl	8004840 <HAL_Delay>
  // UART_ENABLE_RE(huart3);
  // HAL_UART_Transmit(&huart3, "task1", 5, HAL_MAX_DELAY);
  // UART_DISABLE_RE(huart3);
  
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	2120      	movs	r1, #32
 8002eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ebe:	f001 ff73 	bl	8004da8 <HAL_GPIO_WritePin>
  printf("Initialized. \r\n");
 8002ec2:	483c      	ldr	r0, [pc, #240]	; (8002fb4 <main+0x2bc>)
 8002ec4:	f006 fc06 	bl	80096d4 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    //just type the task number below
    task(2);
 8002ec8:	2002      	movs	r0, #2
 8002eca:	f7ff f9ed 	bl	80022a8 <task>
 8002ece:	e7fb      	b.n	8002ec8 <main+0x1d0>
 8002ed0:	9999999a 	.word	0x9999999a
 8002ed4:	3fe99999 	.word	0x3fe99999
 8002ed8:	00000000 	.word	0x00000000
 8002edc:	3ff00000 	.word	0x3ff00000
 8002ee0:	33333333 	.word	0x33333333
 8002ee4:	3ff33333 	.word	0x3ff33333
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	40240000 	.word	0x40240000
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	c0240000 	.word	0xc0240000
 8002ef8:	00000000 	.word	0x00000000
 8002efc:	402e0000 	.word	0x402e0000
 8002f00:	00000000 	.word	0x00000000
 8002f04:	40690000 	.word	0x40690000
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	40140000 	.word	0x40140000
 8002f10:	00000000 	.word	0x00000000
 8002f14:	c0140000 	.word	0xc0140000
 8002f18:	eb851eb8 	.word	0xeb851eb8
 8002f1c:	3fbeb851 	.word	0x3fbeb851
	...
 8002f28:	9999999a 	.word	0x9999999a
 8002f2c:	3fc99999 	.word	0x3fc99999
 8002f30:	9999999a 	.word	0x9999999a
 8002f34:	3fb99999 	.word	0x3fb99999
 8002f38:	00000000 	.word	0x00000000
 8002f3c:	3fe00000 	.word	0x3fe00000
 8002f40:	00000000 	.word	0x00000000
 8002f44:	40100000 	.word	0x40100000
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	c0100000 	.word	0xc0100000
 8002f50:	0800ba74 	.word	0x0800ba74
 8002f54:	20000670 	.word	0x20000670
 8002f58:	20000668 	.word	0x20000668
 8002f5c:	20000660 	.word	0x20000660
 8002f60:	200006b8 	.word	0x200006b8
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000680 	.word	0x20000680
 8002f6c:	20000678 	.word	0x20000678
 8002f70:	20000728 	.word	0x20000728
 8002f74:	20000698 	.word	0x20000698
 8002f78:	20000690 	.word	0x20000690
 8002f7c:	20000688 	.word	0x20000688
 8002f80:	20000798 	.word	0x20000798
 8002f84:	200006b0 	.word	0x200006b0
 8002f88:	200006a8 	.word	0x200006a8
 8002f8c:	200006a0 	.word	0x200006a0
 8002f90:	20000808 	.word	0x20000808
 8002f94:	200004d4 	.word	0x200004d4
 8002f98:	20000520 	.word	0x20000520
 8002f9c:	200005b8 	.word	0x200005b8
 8002fa0:	2000056c 	.word	0x2000056c
 8002fa4:	2000088c 	.word	0x2000088c
 8002fa8:	20000898 	.word	0x20000898
 8002fac:	20000894 	.word	0x20000894
 8002fb0:	2000089c 	.word	0x2000089c
 8002fb4:	0800ba80 	.word	0x0800ba80

08002fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b094      	sub	sp, #80	; 0x50
 8002fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fbe:	f107 0318 	add.w	r3, r7, #24
 8002fc2:	2238      	movs	r2, #56	; 0x38
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f005 fe8c 	bl	8008ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	60da      	str	r2, [r3, #12]
 8002fd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f001 ff3a 	bl	8004e54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fea:	2340      	movs	r3, #64	; 0x40
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002ffa:	2355      	movs	r3, #85	; 0x55
 8002ffc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ffe:	2302      	movs	r3, #2
 8003000:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003002:	2302      	movs	r3, #2
 8003004:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003006:	2302      	movs	r3, #2
 8003008:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800300a:	f107 0318 	add.w	r3, r7, #24
 800300e:	4618      	mov	r0, r3
 8003010:	f001 ffd4 	bl	8004fbc <HAL_RCC_OscConfig>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800301a:	f000 fc63 	bl	80038e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800301e:	230f      	movs	r3, #15
 8003020:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003022:	2303      	movs	r3, #3
 8003024:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003032:	1d3b      	adds	r3, r7, #4
 8003034:	2104      	movs	r1, #4
 8003036:	4618      	mov	r0, r3
 8003038:	f002 fad8 	bl	80055ec <HAL_RCC_ClockConfig>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003042:	f000 fc4f 	bl	80038e4 <Error_Handler>
  }
}
 8003046:	bf00      	nop
 8003048:	3750      	adds	r7, #80	; 0x50
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003054:	4b21      	ldr	r3, [pc, #132]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 8003056:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <MX_LPUART1_UART_Init+0x90>)
 8003058:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 800305c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003060:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 800306a:	2200      	movs	r2, #0
 800306c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 8003070:	2200      	movs	r2, #0
 8003072:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003074:	4b19      	ldr	r3, [pc, #100]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 8003076:	220c      	movs	r2, #12
 8003078:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003080:	4b16      	ldr	r3, [pc, #88]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 8003082:	2200      	movs	r2, #0
 8003084:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 8003088:	2200      	movs	r2, #0
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800308c:	4b13      	ldr	r3, [pc, #76]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 800308e:	2200      	movs	r2, #0
 8003090:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003092:	4812      	ldr	r0, [pc, #72]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 8003094:	f004 fe8e 	bl	8007db4 <HAL_UART_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800309e:	f000 fc21 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030a2:	2100      	movs	r1, #0
 80030a4:	480d      	ldr	r0, [pc, #52]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 80030a6:	f005 fd29 	bl	8008afc <HAL_UARTEx_SetTxFifoThreshold>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80030b0:	f000 fc18 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030b4:	2100      	movs	r1, #0
 80030b6:	4809      	ldr	r0, [pc, #36]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 80030b8:	f005 fd5e 	bl	8008b78 <HAL_UARTEx_SetRxFifoThreshold>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80030c2:	f000 fc0f 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80030c6:	4805      	ldr	r0, [pc, #20]	; (80030dc <MX_LPUART1_UART_Init+0x8c>)
 80030c8:	f005 fcdf 	bl	8008a8a <HAL_UARTEx_DisableFifoMode>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80030d2:	f000 fc07 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000204 	.word	0x20000204
 80030e0:	40008000 	.word	0x40008000

080030e4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <MX_UART4_Init+0x90>)
 80030ea:	4a23      	ldr	r2, [pc, #140]	; (8003178 <MX_UART4_Init+0x94>)
 80030ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80030ee:	4b21      	ldr	r3, [pc, #132]	; (8003174 <MX_UART4_Init+0x90>)
 80030f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80030f6:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <MX_UART4_Init+0x90>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80030fc:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <MX_UART4_Init+0x90>)
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <MX_UART4_Init+0x90>)
 8003104:	2200      	movs	r2, #0
 8003106:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <MX_UART4_Init+0x90>)
 800310a:	220c      	movs	r2, #12
 800310c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <MX_UART4_Init+0x90>)
 8003110:	2200      	movs	r2, #0
 8003112:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <MX_UART4_Init+0x90>)
 8003116:	2200      	movs	r2, #0
 8003118:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <MX_UART4_Init+0x90>)
 800311c:	2200      	movs	r2, #0
 800311e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <MX_UART4_Init+0x90>)
 8003122:	2200      	movs	r2, #0
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <MX_UART4_Init+0x90>)
 8003128:	2200      	movs	r2, #0
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800312c:	4811      	ldr	r0, [pc, #68]	; (8003174 <MX_UART4_Init+0x90>)
 800312e:	f004 fe41 	bl	8007db4 <HAL_UART_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003138:	f000 fbd4 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800313c:	2100      	movs	r1, #0
 800313e:	480d      	ldr	r0, [pc, #52]	; (8003174 <MX_UART4_Init+0x90>)
 8003140:	f005 fcdc 	bl	8008afc <HAL_UARTEx_SetTxFifoThreshold>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800314a:	f000 fbcb 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800314e:	2100      	movs	r1, #0
 8003150:	4808      	ldr	r0, [pc, #32]	; (8003174 <MX_UART4_Init+0x90>)
 8003152:	f005 fd11 	bl	8008b78 <HAL_UARTEx_SetRxFifoThreshold>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800315c:	f000 fbc2 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003160:	4804      	ldr	r0, [pc, #16]	; (8003174 <MX_UART4_Init+0x90>)
 8003162:	f005 fc92 	bl	8008a8a <HAL_UARTEx_DisableFifoMode>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800316c:	f000 fbba 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000294 	.word	0x20000294
 8003178:	40004c00 	.word	0x40004c00

0800317c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <MX_UART5_Init+0x90>)
 8003182:	4a23      	ldr	r2, [pc, #140]	; (8003210 <MX_UART5_Init+0x94>)
 8003184:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003186:	4b21      	ldr	r3, [pc, #132]	; (800320c <MX_UART5_Init+0x90>)
 8003188:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800318c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <MX_UART5_Init+0x90>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <MX_UART5_Init+0x90>)
 8003196:	2200      	movs	r2, #0
 8003198:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <MX_UART5_Init+0x90>)
 800319c:	2200      	movs	r2, #0
 800319e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <MX_UART5_Init+0x90>)
 80031a2:	220c      	movs	r2, #12
 80031a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a6:	4b19      	ldr	r3, [pc, #100]	; (800320c <MX_UART5_Init+0x90>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80031ac:	4b17      	ldr	r3, [pc, #92]	; (800320c <MX_UART5_Init+0x90>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <MX_UART5_Init+0x90>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031b8:	4b14      	ldr	r3, [pc, #80]	; (800320c <MX_UART5_Init+0x90>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <MX_UART5_Init+0x90>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80031c4:	4811      	ldr	r0, [pc, #68]	; (800320c <MX_UART5_Init+0x90>)
 80031c6:	f004 fdf5 	bl	8007db4 <HAL_UART_Init>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80031d0:	f000 fb88 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031d4:	2100      	movs	r1, #0
 80031d6:	480d      	ldr	r0, [pc, #52]	; (800320c <MX_UART5_Init+0x90>)
 80031d8:	f005 fc90 	bl	8008afc <HAL_UARTEx_SetTxFifoThreshold>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80031e2:	f000 fb7f 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031e6:	2100      	movs	r1, #0
 80031e8:	4808      	ldr	r0, [pc, #32]	; (800320c <MX_UART5_Init+0x90>)
 80031ea:	f005 fcc5 	bl	8008b78 <HAL_UARTEx_SetRxFifoThreshold>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80031f4:	f000 fb76 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80031f8:	4804      	ldr	r0, [pc, #16]	; (800320c <MX_UART5_Init+0x90>)
 80031fa:	f005 fc46 	bl	8008a8a <HAL_UARTEx_DisableFifoMode>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003204:	f000 fb6e 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003208:	bf00      	nop
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000324 	.word	0x20000324
 8003210:	40005000 	.word	0x40005000

08003214 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003218:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 800321a:	4a23      	ldr	r2, [pc, #140]	; (80032a8 <MX_USART1_UART_Init+0x94>)
 800321c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 8003220:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003224:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003226:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 8003228:	2200      	movs	r2, #0
 800322a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 800322e:	2200      	movs	r2, #0
 8003230:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003232:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003238:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 800323a:	220c      	movs	r2, #12
 800323c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003244:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800324a:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 800324c:	2200      	movs	r2, #0
 800324e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003250:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 8003252:	2200      	movs	r2, #0
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 8003258:	2200      	movs	r2, #0
 800325a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800325c:	4811      	ldr	r0, [pc, #68]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 800325e:	f004 fda9 	bl	8007db4 <HAL_UART_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003268:	f000 fb3c 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800326c:	2100      	movs	r1, #0
 800326e:	480d      	ldr	r0, [pc, #52]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 8003270:	f005 fc44 	bl	8008afc <HAL_UARTEx_SetTxFifoThreshold>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800327a:	f000 fb33 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800327e:	2100      	movs	r1, #0
 8003280:	4808      	ldr	r0, [pc, #32]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 8003282:	f005 fc79 	bl	8008b78 <HAL_UARTEx_SetRxFifoThreshold>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800328c:	f000 fb2a 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003290:	4804      	ldr	r0, [pc, #16]	; (80032a4 <MX_USART1_UART_Init+0x90>)
 8003292:	f005 fbfa 	bl	8008a8a <HAL_UARTEx_DisableFifoMode>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800329c:	f000 fb22 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200003b4 	.word	0x200003b4
 80032a8:	40013800 	.word	0x40013800

080032ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032b2:	4a23      	ldr	r2, [pc, #140]	; (8003340 <MX_USART3_UART_Init+0x94>)
 80032b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80032b6:	4b21      	ldr	r3, [pc, #132]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80032be:	4b1f      	ldr	r3, [pc, #124]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80032c4:	4b1d      	ldr	r3, [pc, #116]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032d2:	220c      	movs	r2, #12
 80032d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032de:	2200      	movs	r2, #0
 80032e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032e8:	4b14      	ldr	r3, [pc, #80]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032f4:	4811      	ldr	r0, [pc, #68]	; (800333c <MX_USART3_UART_Init+0x90>)
 80032f6:	f004 fd5d 	bl	8007db4 <HAL_UART_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003300:	f000 faf0 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003304:	2100      	movs	r1, #0
 8003306:	480d      	ldr	r0, [pc, #52]	; (800333c <MX_USART3_UART_Init+0x90>)
 8003308:	f005 fbf8 	bl	8008afc <HAL_UARTEx_SetTxFifoThreshold>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003312:	f000 fae7 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003316:	2100      	movs	r1, #0
 8003318:	4808      	ldr	r0, [pc, #32]	; (800333c <MX_USART3_UART_Init+0x90>)
 800331a:	f005 fc2d 	bl	8008b78 <HAL_UARTEx_SetRxFifoThreshold>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003324:	f000 fade 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003328:	4804      	ldr	r0, [pc, #16]	; (800333c <MX_USART3_UART_Init+0x90>)
 800332a:	f005 fbae 	bl	8008a8a <HAL_UARTEx_DisableFifoMode>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003334:	f000 fad6 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000444 	.word	0x20000444
 8003340:	40004800 	.word	0x40004800

08003344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b09c      	sub	sp, #112	; 0x70
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800334a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003358:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003364:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]
 8003374:	615a      	str	r2, [r3, #20]
 8003376:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	2234      	movs	r2, #52	; 0x34
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f005 fcb0 	bl	8008ce4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003384:	4b46      	ldr	r3, [pc, #280]	; (80034a0 <MX_TIM1_Init+0x15c>)
 8003386:	4a47      	ldr	r2, [pc, #284]	; (80034a4 <MX_TIM1_Init+0x160>)
 8003388:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1699;
 800338a:	4b45      	ldr	r3, [pc, #276]	; (80034a0 <MX_TIM1_Init+0x15c>)
 800338c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8003390:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003392:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <MX_TIM1_Init+0x15c>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3499;
 8003398:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <MX_TIM1_Init+0x15c>)
 800339a:	f640 52ab 	movw	r2, #3499	; 0xdab
 800339e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a0:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <MX_TIM1_Init+0x15c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033a6:	4b3e      	ldr	r3, [pc, #248]	; (80034a0 <MX_TIM1_Init+0x15c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <MX_TIM1_Init+0x15c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033b2:	483b      	ldr	r0, [pc, #236]	; (80034a0 <MX_TIM1_Init+0x15c>)
 80033b4:	f002 fd84 	bl	8005ec0 <HAL_TIM_Base_Init>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80033be:	f000 fa91 	bl	80038e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80033cc:	4619      	mov	r1, r3
 80033ce:	4834      	ldr	r0, [pc, #208]	; (80034a0 <MX_TIM1_Init+0x15c>)
 80033d0:	f003 fc22 	bl	8006c18 <HAL_TIM_ConfigClockSource>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80033da:	f000 fa83 	bl	80038e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033de:	4830      	ldr	r0, [pc, #192]	; (80034a0 <MX_TIM1_Init+0x15c>)
 80033e0:	f002 fdc5 	bl	8005f6e <HAL_TIM_PWM_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80033ea:	f000 fa7b 	bl	80038e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033fe:	4619      	mov	r1, r3
 8003400:	4827      	ldr	r0, [pc, #156]	; (80034a0 <MX_TIM1_Init+0x15c>)
 8003402:	f004 fb49 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800340c:	f000 fa6a 	bl	80038e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003410:	2360      	movs	r3, #96	; 0x60
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1;
 8003414:	2301      	movs	r3, #1
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003418:	2300      	movs	r3, #0
 800341a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800341c:	2300      	movs	r3, #0
 800341e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003424:	2300      	movs	r3, #0
 8003426:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003428:	2300      	movs	r3, #0
 800342a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800342c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003430:	2200      	movs	r2, #0
 8003432:	4619      	mov	r1, r3
 8003434:	481a      	ldr	r0, [pc, #104]	; (80034a0 <MX_TIM1_Init+0x15c>)
 8003436:	f003 fadb 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003440:	f000 fa50 	bl	80038e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003444:	2300      	movs	r3, #0
 8003446:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800345c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800346a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003474:	2300      	movs	r3, #0
 8003476:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003478:	2300      	movs	r3, #0
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800347c:	1d3b      	adds	r3, r7, #4
 800347e:	4619      	mov	r1, r3
 8003480:	4807      	ldr	r0, [pc, #28]	; (80034a0 <MX_TIM1_Init+0x15c>)
 8003482:	f004 fb9f 	bl	8007bc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 800348c:	f000 fa2a 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003490:	4803      	ldr	r0, [pc, #12]	; (80034a0 <MX_TIM1_Init+0x15c>)
 8003492:	f000 ffaf 	bl	80043f4 <HAL_TIM_MspPostInit>

}
 8003496:	bf00      	nop
 8003498:	3770      	adds	r7, #112	; 0x70
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200004d4 	.word	0x200004d4
 80034a4:	40012c00 	.word	0x40012c00

080034a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08e      	sub	sp, #56	; 0x38
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034bc:	f107 031c 	add.w	r3, r7, #28
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034c8:	463b      	mov	r3, r7
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	60da      	str	r2, [r3, #12]
 80034d4:	611a      	str	r2, [r3, #16]
 80034d6:	615a      	str	r2, [r3, #20]
 80034d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <MX_TIM2_Init+0x118>)
 80034dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <MX_TIM2_Init+0x118>)
 80034e4:	22a9      	movs	r2, #169	; 0xa9
 80034e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034e8:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <MX_TIM2_Init+0x118>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80034ee:	4b34      	ldr	r3, [pc, #208]	; (80035c0 <MX_TIM2_Init+0x118>)
 80034f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80034f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034f6:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <MX_TIM2_Init+0x118>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <MX_TIM2_Init+0x118>)
 80034fe:	2200      	movs	r2, #0
 8003500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003502:	482f      	ldr	r0, [pc, #188]	; (80035c0 <MX_TIM2_Init+0x118>)
 8003504:	f002 fcdc 	bl	8005ec0 <HAL_TIM_Base_Init>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800350e:	f000 f9e9 	bl	80038e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800351c:	4619      	mov	r1, r3
 800351e:	4828      	ldr	r0, [pc, #160]	; (80035c0 <MX_TIM2_Init+0x118>)
 8003520:	f003 fb7a 	bl	8006c18 <HAL_TIM_ConfigClockSource>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800352a:	f000 f9db 	bl	80038e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800352e:	4824      	ldr	r0, [pc, #144]	; (80035c0 <MX_TIM2_Init+0x118>)
 8003530:	f002 fd1d 	bl	8005f6e <HAL_TIM_PWM_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800353a:	f000 f9d3 	bl	80038e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003542:	2300      	movs	r3, #0
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003546:	f107 031c 	add.w	r3, r7, #28
 800354a:	4619      	mov	r1, r3
 800354c:	481c      	ldr	r0, [pc, #112]	; (80035c0 <MX_TIM2_Init+0x118>)
 800354e:	f004 faa3 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003558:	f000 f9c4 	bl	80038e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800355c:	2360      	movs	r3, #96	; 0x60
 800355e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8003560:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003564:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800356e:	463b      	mov	r3, r7
 8003570:	2200      	movs	r2, #0
 8003572:	4619      	mov	r1, r3
 8003574:	4812      	ldr	r0, [pc, #72]	; (80035c0 <MX_TIM2_Init+0x118>)
 8003576:	f003 fa3b 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003580:	f000 f9b0 	bl	80038e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003584:	463b      	mov	r3, r7
 8003586:	2208      	movs	r2, #8
 8003588:	4619      	mov	r1, r3
 800358a:	480d      	ldr	r0, [pc, #52]	; (80035c0 <MX_TIM2_Init+0x118>)
 800358c:	f003 fa30 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8003596:	f000 f9a5 	bl	80038e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800359a:	463b      	mov	r3, r7
 800359c:	220c      	movs	r2, #12
 800359e:	4619      	mov	r1, r3
 80035a0:	4807      	ldr	r0, [pc, #28]	; (80035c0 <MX_TIM2_Init+0x118>)
 80035a2:	f003 fa25 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80035ac:	f000 f99a 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80035b0:	4803      	ldr	r0, [pc, #12]	; (80035c0 <MX_TIM2_Init+0x118>)
 80035b2:	f000 ff1f 	bl	80043f4 <HAL_TIM_MspPostInit>

}
 80035b6:	bf00      	nop
 80035b8:	3738      	adds	r7, #56	; 0x38
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000520 	.word	0x20000520

080035c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08c      	sub	sp, #48	; 0x30
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ca:	f107 0320 	add.w	r3, r7, #32
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035d8:	f107 0314 	add.w	r3, r7, #20
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80035e4:	1d3b      	adds	r3, r7, #4
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80035f0:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <MX_TIM4_Init+0xdc>)
 80035f2:	4a2c      	ldr	r2, [pc, #176]	; (80036a4 <MX_TIM4_Init+0xe0>)
 80035f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 33999;
 80035f6:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <MX_TIM4_Init+0xdc>)
 80035f8:	f248 42cf 	movw	r2, #33999	; 0x84cf
 80035fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035fe:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <MX_TIM4_Init+0xdc>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003604:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <MX_TIM4_Init+0xdc>)
 8003606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800360a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800360c:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <MX_TIM4_Init+0xdc>)
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <MX_TIM4_Init+0xdc>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003618:	4821      	ldr	r0, [pc, #132]	; (80036a0 <MX_TIM4_Init+0xdc>)
 800361a:	f002 fc51 	bl	8005ec0 <HAL_TIM_Base_Init>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8003624:	f000 f95e 	bl	80038e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800362c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800362e:	f107 0320 	add.w	r3, r7, #32
 8003632:	4619      	mov	r1, r3
 8003634:	481a      	ldr	r0, [pc, #104]	; (80036a0 <MX_TIM4_Init+0xdc>)
 8003636:	f003 faef 	bl	8006c18 <HAL_TIM_ConfigClockSource>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8003640:	f000 f950 	bl	80038e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003644:	4816      	ldr	r0, [pc, #88]	; (80036a0 <MX_TIM4_Init+0xdc>)
 8003646:	f002 fe05 	bl	8006254 <HAL_TIM_IC_Init>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8003650:	f000 f948 	bl	80038e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	4619      	mov	r1, r3
 8003662:	480f      	ldr	r0, [pc, #60]	; (80036a0 <MX_TIM4_Init+0xdc>)
 8003664:	f004 fa18 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800366e:	f000 f939 	bl	80038e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003672:	230a      	movs	r3, #10
 8003674:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003676:	2301      	movs	r3, #1
 8003678:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003682:	1d3b      	adds	r3, r7, #4
 8003684:	2200      	movs	r2, #0
 8003686:	4619      	mov	r1, r3
 8003688:	4805      	ldr	r0, [pc, #20]	; (80036a0 <MX_TIM4_Init+0xdc>)
 800368a:	f003 f914 	bl	80068b6 <HAL_TIM_IC_ConfigChannel>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003694:	f000 f926 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003698:	bf00      	nop
 800369a:	3730      	adds	r7, #48	; 0x30
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	2000056c 	.word	0x2000056c
 80036a4:	40000800 	.word	0x40000800

080036a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	; 0x30
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ae:	f107 0320 	add.w	r3, r7, #32
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80036c8:	1d3b      	adds	r3, r7, #4
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80036d4:	4b30      	ldr	r3, [pc, #192]	; (8003798 <MX_TIM5_Init+0xf0>)
 80036d6:	4a31      	ldr	r2, [pc, #196]	; (800379c <MX_TIM5_Init+0xf4>)
 80036d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80036da:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <MX_TIM5_Init+0xf0>)
 80036dc:	22a9      	movs	r2, #169	; 0xa9
 80036de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e0:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <MX_TIM5_Init+0xf0>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80036e6:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <MX_TIM5_Init+0xf0>)
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ee:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <MX_TIM5_Init+0xf0>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f4:	4b28      	ldr	r3, [pc, #160]	; (8003798 <MX_TIM5_Init+0xf0>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80036fa:	4827      	ldr	r0, [pc, #156]	; (8003798 <MX_TIM5_Init+0xf0>)
 80036fc:	f002 fbe0 	bl	8005ec0 <HAL_TIM_Base_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8003706:	f000 f8ed 	bl	80038e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800370a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800370e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003710:	f107 0320 	add.w	r3, r7, #32
 8003714:	4619      	mov	r1, r3
 8003716:	4820      	ldr	r0, [pc, #128]	; (8003798 <MX_TIM5_Init+0xf0>)
 8003718:	f003 fa7e 	bl	8006c18 <HAL_TIM_ConfigClockSource>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003722:	f000 f8df 	bl	80038e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003726:	481c      	ldr	r0, [pc, #112]	; (8003798 <MX_TIM5_Init+0xf0>)
 8003728:	f002 fd94 	bl	8006254 <HAL_TIM_IC_Init>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8003732:	f000 f8d7 	bl	80038e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800373e:	f107 0314 	add.w	r3, r7, #20
 8003742:	4619      	mov	r1, r3
 8003744:	4814      	ldr	r0, [pc, #80]	; (8003798 <MX_TIM5_Init+0xf0>)
 8003746:	f004 f9a7 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8003750:	f000 f8c8 	bl	80038e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003754:	230a      	movs	r3, #10
 8003756:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003758:	2301      	movs	r3, #1
 800375a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003764:	1d3b      	adds	r3, r7, #4
 8003766:	2200      	movs	r2, #0
 8003768:	4619      	mov	r1, r3
 800376a:	480b      	ldr	r0, [pc, #44]	; (8003798 <MX_TIM5_Init+0xf0>)
 800376c:	f003 f8a3 	bl	80068b6 <HAL_TIM_IC_ConfigChannel>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8003776:	f000 f8b5 	bl	80038e4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	2204      	movs	r2, #4
 800377e:	4619      	mov	r1, r3
 8003780:	4805      	ldr	r0, [pc, #20]	; (8003798 <MX_TIM5_Init+0xf0>)
 8003782:	f003 f898 	bl	80068b6 <HAL_TIM_IC_ConfigChannel>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 800378c:	f000 f8aa 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003790:	bf00      	nop
 8003792:	3730      	adds	r7, #48	; 0x30
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	200005b8 	.word	0x200005b8
 800379c:	40000c00 	.word	0x40000c00

080037a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	; 0x28
 80037a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a6:	f107 0314 	add.w	r3, r7, #20
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	60da      	str	r2, [r3, #12]
 80037b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037b6:	4b3f      	ldr	r3, [pc, #252]	; (80038b4 <MX_GPIO_Init+0x114>)
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	4a3e      	ldr	r2, [pc, #248]	; (80038b4 <MX_GPIO_Init+0x114>)
 80037bc:	f043 0304 	orr.w	r3, r3, #4
 80037c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037c2:	4b3c      	ldr	r3, [pc, #240]	; (80038b4 <MX_GPIO_Init+0x114>)
 80037c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037ce:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <MX_GPIO_Init+0x114>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	4a38      	ldr	r2, [pc, #224]	; (80038b4 <MX_GPIO_Init+0x114>)
 80037d4:	f043 0320 	orr.w	r3, r3, #32
 80037d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037da:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <MX_GPIO_Init+0x114>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	4b33      	ldr	r3, [pc, #204]	; (80038b4 <MX_GPIO_Init+0x114>)
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	4a32      	ldr	r2, [pc, #200]	; (80038b4 <MX_GPIO_Init+0x114>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037f2:	4b30      	ldr	r3, [pc, #192]	; (80038b4 <MX_GPIO_Init+0x114>)
 80037f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fe:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <MX_GPIO_Init+0x114>)
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	4a2c      	ldr	r2, [pc, #176]	; (80038b4 <MX_GPIO_Init+0x114>)
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800380a:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <MX_GPIO_Init+0x114>)
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <MX_GPIO_Init+0x114>)
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	4a26      	ldr	r2, [pc, #152]	; (80038b4 <MX_GPIO_Init+0x114>)
 800381c:	f043 0308 	orr.w	r3, r3, #8
 8003820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <MX_GPIO_Init+0x114>)
 8003824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800382e:	2200      	movs	r2, #0
 8003830:	2120      	movs	r1, #32
 8003832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003836:	f001 fab7 	bl	8004da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ldr_Pin|ldg_Pin, GPIO_PIN_RESET);
 800383a:	2200      	movs	r2, #0
 800383c:	2106      	movs	r1, #6
 800383e:	481e      	ldr	r0, [pc, #120]	; (80038b8 <MX_GPIO_Init+0x118>)
 8003840:	f001 fab2 	bl	8004da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800384a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800384e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	4619      	mov	r1, r3
 800385a:	4818      	ldr	r0, [pc, #96]	; (80038bc <MX_GPIO_Init+0x11c>)
 800385c:	f001 f922 	bl	8004aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003860:	2320      	movs	r3, #32
 8003862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003864:	2301      	movs	r3, #1
 8003866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386c:	2300      	movs	r3, #0
 800386e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	4619      	mov	r1, r3
 8003876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800387a:	f001 f913 	bl	8004aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ldr_Pin ldg_Pin */
  GPIO_InitStruct.Pin = ldr_Pin|ldg_Pin;
 800387e:	2306      	movs	r3, #6
 8003880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003882:	2301      	movs	r3, #1
 8003884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388a:	2300      	movs	r3, #0
 800388c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388e:	f107 0314 	add.w	r3, r7, #20
 8003892:	4619      	mov	r1, r3
 8003894:	4808      	ldr	r0, [pc, #32]	; (80038b8 <MX_GPIO_Init+0x118>)
 8003896:	f001 f905 	bl	8004aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	2100      	movs	r1, #0
 800389e:	2028      	movs	r0, #40	; 0x28
 80038a0:	f001 f8cb 	bl	8004a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80038a4:	2028      	movs	r0, #40	; 0x28
 80038a6:	f001 f8e2 	bl	8004a6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80038aa:	bf00      	nop
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	48000400 	.word	0x48000400
 80038bc:	48000800 	.word	0x48000800

080038c0 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80038c8:	1d39      	adds	r1, r7, #4
 80038ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038ce:	2201      	movs	r2, #1
 80038d0:	4803      	ldr	r0, [pc, #12]	; (80038e0 <__io_putchar+0x20>)
 80038d2:	f004 fabf 	bl	8007e54 <HAL_UART_Transmit>

  return ch;
 80038d6:	687b      	ldr	r3, [r7, #4]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20000204 	.word	0x20000204

080038e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038e8:	b672      	cpsid	i
}
 80038ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038ec:	e7fe      	b.n	80038ec <Error_Handler+0x8>

080038ee <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800391e:	f7fd f923 	bl	8000b68 <__aeabi_dcmpgt>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d006      	beq.n	8003936 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8003934:	e011      	b.n	800395a <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003942:	f7fd f8f3 	bl	8000b2c <__aeabi_dcmplt>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d100      	bne.n	800394e <PID_Init+0x60>
}
 800394c:	e005      	b.n	800395a <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	0000      	movs	r0, r0
 8003964:	0000      	movs	r0, r0
	...

08003968 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6278      	str	r0, [r7, #36]	; 0x24
 8003970:	6239      	str	r1, [r7, #32]
 8003972:	61fa      	str	r2, [r7, #28]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	ed87 0b04 	vstr	d0, [r7, #16]
 800397a:	ed87 1b02 	vstr	d1, [r7, #8]
 800397e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	6a3a      	ldr	r2, [r7, #32]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	2200      	movs	r2, #0
 8003998:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800399a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80039f0 <PID+0x88>
 800399e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80039f8 <PID+0x90>
 80039a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a4:	f000 f934 	bl	8003c10 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	2264      	movs	r2, #100	; 0x64
 80039ac:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 80039ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039b2:	4619      	mov	r1, r3
 80039b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039b6:	f000 fa41 	bl	8003e3c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80039ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80039be:	4619      	mov	r1, r3
 80039c0:	ed97 2b00 	vldr	d2, [r7]
 80039c4:	ed97 1b02 	vldr	d1, [r7, #8]
 80039c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80039cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039ce:	f000 f98d 	bl	8003cec <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80039d2:	f000 ff29 	bl	8004828 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	1ad2      	subs	r2, r2, r3
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	605a      	str	r2, [r3, #4]
	
}
 80039e2:	bf00      	nop
 80039e4:	3728      	adds	r7, #40	; 0x28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	f3af 8000 	nop.w
 80039f0:	00000000 	.word	0x00000000
 80039f4:	406fe000 	.word	0x406fe000
	...

08003a00 <PID_Compute>:
// 	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
// }

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8003a00:	b5b0      	push	{r4, r5, r7, lr}
 8003a02:	b08c      	sub	sp, #48	; 0x30
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <PID_Compute+0x14>
	{
		return _FALSE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e0db      	b.n	8003bcc <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003a14:	f000 ff08 	bl	8004828 <HAL_GetTick>
 8003a18:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	6a3a      	ldr	r2, [r7, #32]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	f0c0 80cd 	bcc.w	8003bca <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a48:	f7fc fc46 	bl	80002d8 <__aeabi_dsub>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003a5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a5e:	f7fc fc3b 	bl	80002d8 <__aeabi_dsub>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003a76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a7a:	f7fc fde5 	bl	8000648 <__aeabi_dmul>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4620      	mov	r0, r4
 8003a84:	4629      	mov	r1, r5
 8003a86:	f7fc fc29 	bl	80002dc <__adddf3>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d114      	bne.n	8003ac6 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aac:	f7fc fdcc 	bl	8000648 <__aeabi_dmul>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fc0e 	bl	80002d8 <__aeabi_dsub>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003ad2:	f7fd f849 	bl	8000b68 <__aeabi_dcmpgt>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d006      	beq.n	8003aea <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003ae8:	e010      	b.n	8003b0c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003af6:	f7fd f819 	bl	8000b2c <__aeabi_dcmplt>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00b      	beq.n	8003b2c <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003b1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b1e:	f7fc fd93 	bl	8000648 <__aeabi_dmul>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003b2a:	e005      	b.n	8003b38 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003b44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b48:	f7fc fd7e 	bl	8000648 <__aeabi_dmul>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4620      	mov	r0, r4
 8003b52:	4629      	mov	r1, r5
 8003b54:	f7fc fbc0 	bl	80002d8 <__aeabi_dsub>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b60:	f7fc fbbc 	bl	80002dc <__adddf3>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003b72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b76:	f7fc fff7 	bl	8000b68 <__aeabi_dcmpgt>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003b86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003b8a:	e00e      	b.n	8003baa <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003b92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b96:	f7fc ffc9 	bl	8000b2c <__aeabi_dcmplt>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003ba6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb2:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bbc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8003bca:	2300      	movs	r3, #0
	}
	
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3730      	adds	r7, #48	; 0x30
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bdb0      	pop	{r4, r5, r7, pc}

08003bd4 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	bf0c      	ite	eq
 8003be6:	2301      	moveq	r3, #1
 8003be8:	2300      	movne	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d006      	beq.n	8003c02 <PID_SetMode+0x2e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff fe76 	bl	80038ee <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	705a      	strb	r2, [r3, #1]
	
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6178      	str	r0, [r7, #20]
 8003c18:	ed87 0b02 	vstr	d0, [r7, #8]
 8003c1c:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c28:	f7fc ff94 	bl	8000b54 <__aeabi_dcmpge>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d158      	bne.n	8003ce4 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8003c32:	6979      	ldr	r1, [r7, #20]
 8003c34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c38:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8003c3c:	6979      	ldr	r1, [r7, #20]
 8003c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c42:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	785b      	ldrb	r3, [r3, #1]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d04b      	beq.n	8003ce6 <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003c5c:	f7fc ff84 	bl	8000b68 <__aeabi_dcmpgt>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003c70:	e9c1 2300 	strd	r2, r3, [r1]
 8003c74:	e012      	b.n	8003c9c <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003c84:	f7fc ff52 	bl	8000b2c <__aeabi_dcmplt>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003c98:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003ca8:	f7fc ff5e 	bl	8000b68 <__aeabi_dcmpgt>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d006      	beq.n	8003cc0 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003cb8:	6979      	ldr	r1, [r7, #20]
 8003cba:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003cbe:	e012      	b.n	8003ce6 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003ccc:	f7fc ff2e 	bl	8000b2c <__aeabi_dcmplt>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003cdc:	6979      	ldr	r1, [r7, #20]
 8003cde:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003ce2:	e000      	b.n	8003ce6 <PID_SetOutputLimits+0xd6>
		return;
 8003ce4:	bf00      	nop
		}
		else { }
		
	}
	
}
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	61f8      	str	r0, [r7, #28]
 8003cf4:	ed87 0b04 	vstr	d0, [r7, #16]
 8003cf8:	ed87 1b02 	vstr	d1, [r7, #8]
 8003cfc:	ed87 2b00 	vstr	d2, [r7]
 8003d00:	460b      	mov	r3, r1
 8003d02:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d10:	f7fc ff0c 	bl	8000b2c <__aeabi_dcmplt>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f040 8089 	bne.w	8003e2e <PID_SetTunings2+0x142>
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d28:	f7fc ff00 	bl	8000b2c <__aeabi_dcmplt>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d17d      	bne.n	8003e2e <PID_SetTunings2+0x142>
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d3e:	f7fc fef5 	bl	8000b2c <__aeabi_dcmplt>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d172      	bne.n	8003e2e <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	7efa      	ldrb	r2, [r7, #27]
 8003d4c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003d4e:	7efb      	ldrb	r3, [r7, #27]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8003d60:	69f9      	ldr	r1, [r7, #28]
 8003d62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d66:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8003d6a:	69f9      	ldr	r1, [r7, #28]
 8003d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d70:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003d74:	69f9      	ldr	r1, [r7, #28]
 8003d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d7a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc fbe6 	bl	8000554 <__aeabi_ui2d>
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	4b2a      	ldr	r3, [pc, #168]	; (8003e38 <PID_SetTunings2+0x14c>)
 8003d8e:	f7fc fd85 	bl	800089c <__aeabi_ddiv>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8003d9a:	69f9      	ldr	r1, [r7, #28]
 8003d9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003da0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003da4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003da8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dac:	f7fc fc4c 	bl	8000648 <__aeabi_dmul>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	69f9      	ldr	r1, [r7, #28]
 8003db6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8003dba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003dc2:	f7fc fd6b 	bl	800089c <__aeabi_ddiv>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	69f9      	ldr	r1, [r7, #28]
 8003dcc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	78db      	ldrb	r3, [r3, #3]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d12b      	bne.n	8003e30 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003dde:	f04f 0000 	mov.w	r0, #0
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	f7fc fa77 	bl	80002d8 <__aeabi_dsub>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	69f9      	ldr	r1, [r7, #28]
 8003df0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003dfa:	f04f 0000 	mov.w	r0, #0
 8003dfe:	f04f 0100 	mov.w	r1, #0
 8003e02:	f7fc fa69 	bl	80002d8 <__aeabi_dsub>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	69f9      	ldr	r1, [r7, #28]
 8003e0c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003e16:	f04f 0000 	mov.w	r0, #0
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	f7fc fa5b 	bl	80002d8 <__aeabi_dsub>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	69f9      	ldr	r1, [r7, #28]
 8003e28:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003e2c:	e000      	b.n	8003e30 <PID_SetTunings2+0x144>
		return;
 8003e2e:	bf00      	nop
		
	}
	
}
 8003e30:	3728      	adds	r7, #40	; 0x28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	408f4000 	.word	0x408f4000

08003e3c <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d02e      	beq.n	8003eae <PID_SetControllerDirection+0x72>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	78db      	ldrb	r3, [r3, #3]
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d029      	beq.n	8003eae <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003e60:	f04f 0000 	mov.w	r0, #0
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	f7fc fa36 	bl	80002d8 <__aeabi_dsub>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003e7c:	f04f 0000 	mov.w	r0, #0
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	f7fc fa28 	bl	80002d8 <__aeabi_dsub>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003e98:	f04f 0000 	mov.w	r0, #0
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	f7fc fa1a 	bl	80002d8 <__aeabi_dsub>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	70da      	strb	r2, [r3, #3]
	
}
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003ebc:	b5b0      	push	{r4, r5, r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	dd2e      	ble.n	8003f2a <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003ecc:	6838      	ldr	r0, [r7, #0]
 8003ece:	f7fc fb51 	bl	8000574 <__aeabi_i2d>
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	460d      	mov	r5, r1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fb3a 	bl	8000554 <__aeabi_ui2d>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	f7fc fcd8 	bl	800089c <__aeabi_ddiv>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003efa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003efe:	f7fc fba3 	bl	8000648 <__aeabi_dmul>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f16:	f7fc fcc1 	bl	800089c <__aeabi_ddiv>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <HAL_MspInit+0x44>)
 8003f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3e:	4a0e      	ldr	r2, [pc, #56]	; (8003f78 <HAL_MspInit+0x44>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6613      	str	r3, [r2, #96]	; 0x60
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_MspInit+0x44>)
 8003f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_MspInit+0x44>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <HAL_MspInit+0x44>)
 8003f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_MspInit+0x44>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003f6a:	f001 f817 	bl	8004f9c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000

08003f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b0a8      	sub	sp, #160	; 0xa0
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f98:	2254      	movs	r2, #84	; 0x54
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f004 fea1 	bl	8008ce4 <memset>
  if(huart->Instance==LPUART1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4ab5      	ldr	r2, [pc, #724]	; (800427c <HAL_UART_MspInit+0x300>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d13c      	bne.n	8004026 <HAL_UART_MspInit+0xaa>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003fac:	2320      	movs	r3, #32
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 fd33 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003fc4:	f7ff fc8e 	bl	80038e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003fc8:	4bad      	ldr	r3, [pc, #692]	; (8004280 <HAL_UART_MspInit+0x304>)
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	4aac      	ldr	r2, [pc, #688]	; (8004280 <HAL_UART_MspInit+0x304>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003fd4:	4baa      	ldr	r3, [pc, #680]	; (8004280 <HAL_UART_MspInit+0x304>)
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe0:	4ba7      	ldr	r3, [pc, #668]	; (8004280 <HAL_UART_MspInit+0x304>)
 8003fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe4:	4aa6      	ldr	r2, [pc, #664]	; (8004280 <HAL_UART_MspInit+0x304>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fec:	4ba4      	ldr	r3, [pc, #656]	; (8004280 <HAL_UART_MspInit+0x304>)
 8003fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	2302      	movs	r3, #2
 8004000:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004010:	230c      	movs	r3, #12
 8004012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004016:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800401a:	4619      	mov	r1, r3
 800401c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004020:	f000 fd40 	bl	8004aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004024:	e126      	b.n	8004274 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==UART4)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a96      	ldr	r2, [pc, #600]	; (8004284 <HAL_UART_MspInit+0x308>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d13c      	bne.n	80040aa <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004030:	2308      	movs	r3, #8
 8004032:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004034:	2300      	movs	r3, #0
 8004036:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004038:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800403c:	4618      	mov	r0, r3
 800403e:	f001 fcf1 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8004048:	f7ff fc4c 	bl	80038e4 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800404c:	4b8c      	ldr	r3, [pc, #560]	; (8004280 <HAL_UART_MspInit+0x304>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	4a8b      	ldr	r2, [pc, #556]	; (8004280 <HAL_UART_MspInit+0x304>)
 8004052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004056:	6593      	str	r3, [r2, #88]	; 0x58
 8004058:	4b89      	ldr	r3, [pc, #548]	; (8004280 <HAL_UART_MspInit+0x304>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004064:	4b86      	ldr	r3, [pc, #536]	; (8004280 <HAL_UART_MspInit+0x304>)
 8004066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004068:	4a85      	ldr	r2, [pc, #532]	; (8004280 <HAL_UART_MspInit+0x304>)
 800406a:	f043 0304 	orr.w	r3, r3, #4
 800406e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004070:	4b83      	ldr	r3, [pc, #524]	; (8004280 <HAL_UART_MspInit+0x304>)
 8004072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800407c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004080:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004084:	2302      	movs	r3, #2
 8004086:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004090:	2300      	movs	r3, #0
 8004092:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8004096:	2305      	movs	r3, #5
 8004098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800409c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80040a0:	4619      	mov	r1, r3
 80040a2:	4879      	ldr	r0, [pc, #484]	; (8004288 <HAL_UART_MspInit+0x30c>)
 80040a4:	f000 fcfe 	bl	8004aa4 <HAL_GPIO_Init>
}
 80040a8:	e0e4      	b.n	8004274 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==UART5)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a77      	ldr	r2, [pc, #476]	; (800428c <HAL_UART_MspInit+0x310>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d15d      	bne.n	8004170 <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80040b4:	2310      	movs	r3, #16
 80040b6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80040b8:	2300      	movs	r3, #0
 80040ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 fcaf 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_MspInit+0x154>
      Error_Handler();
 80040cc:	f7ff fc0a 	bl	80038e4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80040d0:	4b6b      	ldr	r3, [pc, #428]	; (8004280 <HAL_UART_MspInit+0x304>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	4a6a      	ldr	r2, [pc, #424]	; (8004280 <HAL_UART_MspInit+0x304>)
 80040d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040da:	6593      	str	r3, [r2, #88]	; 0x58
 80040dc:	4b68      	ldr	r3, [pc, #416]	; (8004280 <HAL_UART_MspInit+0x304>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040e8:	4b65      	ldr	r3, [pc, #404]	; (8004280 <HAL_UART_MspInit+0x304>)
 80040ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ec:	4a64      	ldr	r2, [pc, #400]	; (8004280 <HAL_UART_MspInit+0x304>)
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040f4:	4b62      	ldr	r3, [pc, #392]	; (8004280 <HAL_UART_MspInit+0x304>)
 80040f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	623b      	str	r3, [r7, #32]
 80040fe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004100:	4b5f      	ldr	r3, [pc, #380]	; (8004280 <HAL_UART_MspInit+0x304>)
 8004102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004104:	4a5e      	ldr	r2, [pc, #376]	; (8004280 <HAL_UART_MspInit+0x304>)
 8004106:	f043 0308 	orr.w	r3, r3, #8
 800410a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800410c:	4b5c      	ldr	r3, [pc, #368]	; (8004280 <HAL_UART_MspInit+0x304>)
 800410e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800411c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004120:	2302      	movs	r3, #2
 8004122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004132:	2305      	movs	r3, #5
 8004134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004138:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800413c:	4619      	mov	r1, r3
 800413e:	4852      	ldr	r0, [pc, #328]	; (8004288 <HAL_UART_MspInit+0x30c>)
 8004140:	f000 fcb0 	bl	8004aa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004144:	2304      	movs	r3, #4
 8004146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414a:	2302      	movs	r3, #2
 800414c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004156:	2300      	movs	r3, #0
 8004158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800415c:	2305      	movs	r3, #5
 800415e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004162:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004166:	4619      	mov	r1, r3
 8004168:	4849      	ldr	r0, [pc, #292]	; (8004290 <HAL_UART_MspInit+0x314>)
 800416a:	f000 fc9b 	bl	8004aa4 <HAL_GPIO_Init>
}
 800416e:	e081      	b.n	8004274 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==USART1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a47      	ldr	r2, [pc, #284]	; (8004294 <HAL_UART_MspInit+0x318>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d13b      	bne.n	80041f2 <HAL_UART_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800417a:	2301      	movs	r3, #1
 800417c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800417e:	2300      	movs	r3, #0
 8004180:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004182:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fc4c 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 8004192:	f7ff fba7 	bl	80038e4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004196:	4b3a      	ldr	r3, [pc, #232]	; (8004280 <HAL_UART_MspInit+0x304>)
 8004198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419a:	4a39      	ldr	r2, [pc, #228]	; (8004280 <HAL_UART_MspInit+0x304>)
 800419c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a0:	6613      	str	r3, [r2, #96]	; 0x60
 80041a2:	4b37      	ldr	r3, [pc, #220]	; (8004280 <HAL_UART_MspInit+0x304>)
 80041a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ae:	4b34      	ldr	r3, [pc, #208]	; (8004280 <HAL_UART_MspInit+0x304>)
 80041b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b2:	4a33      	ldr	r2, [pc, #204]	; (8004280 <HAL_UART_MspInit+0x304>)
 80041b4:	f043 0304 	orr.w	r3, r3, #4
 80041b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ba:	4b31      	ldr	r3, [pc, #196]	; (8004280 <HAL_UART_MspInit+0x304>)
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80041c6:	2330      	movs	r3, #48	; 0x30
 80041c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041cc:	2302      	movs	r3, #2
 80041ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d8:	2300      	movs	r3, #0
 80041da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041de:	2307      	movs	r3, #7
 80041e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80041e8:	4619      	mov	r1, r3
 80041ea:	4827      	ldr	r0, [pc, #156]	; (8004288 <HAL_UART_MspInit+0x30c>)
 80041ec:	f000 fc5a 	bl	8004aa4 <HAL_GPIO_Init>
}
 80041f0:	e040      	b.n	8004274 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==USART3)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a28      	ldr	r2, [pc, #160]	; (8004298 <HAL_UART_MspInit+0x31c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d13b      	bne.n	8004274 <HAL_UART_MspInit+0x2f8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80041fc:	2304      	movs	r3, #4
 80041fe:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004200:	2300      	movs	r3, #0
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004204:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004208:	4618      	mov	r0, r3
 800420a:	f001 fc0b 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_UART_MspInit+0x29c>
      Error_Handler();
 8004214:	f7ff fb66 	bl	80038e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_UART_MspInit+0x304>)
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	4a18      	ldr	r2, [pc, #96]	; (8004280 <HAL_UART_MspInit+0x304>)
 800421e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004222:	6593      	str	r3, [r2, #88]	; 0x58
 8004224:	4b16      	ldr	r3, [pc, #88]	; (8004280 <HAL_UART_MspInit+0x304>)
 8004226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_UART_MspInit+0x304>)
 8004232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004234:	4a12      	ldr	r2, [pc, #72]	; (8004280 <HAL_UART_MspInit+0x304>)
 8004236:	f043 0302 	orr.w	r3, r3, #2
 800423a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800423c:	4b10      	ldr	r3, [pc, #64]	; (8004280 <HAL_UART_MspInit+0x304>)
 800423e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004248:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800424c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004250:	2302      	movs	r3, #2
 8004252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425c:	2300      	movs	r3, #0
 800425e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004262:	2307      	movs	r3, #7
 8004264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004268:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800426c:	4619      	mov	r1, r3
 800426e:	480b      	ldr	r0, [pc, #44]	; (800429c <HAL_UART_MspInit+0x320>)
 8004270:	f000 fc18 	bl	8004aa4 <HAL_GPIO_Init>
}
 8004274:	bf00      	nop
 8004276:	37a0      	adds	r7, #160	; 0xa0
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40008000 	.word	0x40008000
 8004280:	40021000 	.word	0x40021000
 8004284:	40004c00 	.word	0x40004c00
 8004288:	48000800 	.word	0x48000800
 800428c:	40005000 	.word	0x40005000
 8004290:	48000c00 	.word	0x48000c00
 8004294:	40013800 	.word	0x40013800
 8004298:	40004800 	.word	0x40004800
 800429c:	48000400 	.word	0x48000400

080042a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08e      	sub	sp, #56	; 0x38
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a49      	ldr	r2, [pc, #292]	; (80043e4 <HAL_TIM_Base_MspInit+0x144>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d10c      	bne.n	80042dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042c2:	4b49      	ldr	r3, [pc, #292]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 80042c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c6:	4a48      	ldr	r2, [pc, #288]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 80042c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042cc:	6613      	str	r3, [r2, #96]	; 0x60
 80042ce:	4b46      	ldr	r3, [pc, #280]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 80042d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d6:	623b      	str	r3, [r7, #32]
 80042d8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80042da:	e07f      	b.n	80043dc <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e4:	d10c      	bne.n	8004300 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042e6:	4b40      	ldr	r3, [pc, #256]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	4a3f      	ldr	r2, [pc, #252]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6593      	str	r3, [r2, #88]	; 0x58
 80042f2:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	69fb      	ldr	r3, [r7, #28]
}
 80042fe:	e06d      	b.n	80043dc <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM4)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a39      	ldr	r2, [pc, #228]	; (80043ec <HAL_TIM_Base_MspInit+0x14c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d132      	bne.n	8004370 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800430a:	4b37      	ldr	r3, [pc, #220]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430e:	4a36      	ldr	r2, [pc, #216]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 8004310:	f043 0304 	orr.w	r3, r3, #4
 8004314:	6593      	str	r3, [r2, #88]	; 0x58
 8004316:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 8004324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004326:	4a30      	ldr	r2, [pc, #192]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800432e:	4b2e      	ldr	r3, [pc, #184]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 8004330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800433a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004340:	2302      	movs	r3, #2
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004344:	2300      	movs	r3, #0
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004348:	2300      	movs	r3, #0
 800434a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800434c:	230a      	movs	r3, #10
 800434e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004354:	4619      	mov	r1, r3
 8004356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800435a:	f000 fba3 	bl	8004aa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800435e:	2200      	movs	r2, #0
 8004360:	2100      	movs	r1, #0
 8004362:	201e      	movs	r0, #30
 8004364:	f000 fb69 	bl	8004a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004368:	201e      	movs	r0, #30
 800436a:	f000 fb80 	bl	8004a6e <HAL_NVIC_EnableIRQ>
}
 800436e:	e035      	b.n	80043dc <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM5)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <HAL_TIM_Base_MspInit+0x150>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d130      	bne.n	80043dc <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800437a:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	4a1a      	ldr	r2, [pc, #104]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 8004380:	f043 0308 	orr.w	r3, r3, #8
 8004384:	6593      	str	r3, [r2, #88]	; 0x58
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_TIM_Base_MspInit+0x148>)
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ul_Pin|ur_Pin;
 80043aa:	2303      	movs	r3, #3
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ae:	2302      	movs	r3, #2
 80043b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b6:	2300      	movs	r3, #0
 80043b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80043ba:	2302      	movs	r3, #2
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c2:	4619      	mov	r1, r3
 80043c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043c8:	f000 fb6c 	bl	8004aa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80043cc:	2200      	movs	r2, #0
 80043ce:	2100      	movs	r1, #0
 80043d0:	2032      	movs	r0, #50	; 0x32
 80043d2:	f000 fb32 	bl	8004a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80043d6:	2032      	movs	r0, #50	; 0x32
 80043d8:	f000 fb49 	bl	8004a6e <HAL_NVIC_EnableIRQ>
}
 80043dc:	bf00      	nop
 80043de:	3738      	adds	r7, #56	; 0x38
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00

080043f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	; 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fc:	f107 0314 	add.w	r3, r7, #20
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2c      	ldr	r2, [pc, #176]	; (80044c4 <HAL_TIM_MspPostInit+0xd0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d11c      	bne.n	8004450 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004416:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <HAL_TIM_MspPostInit+0xd4>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	4a2b      	ldr	r2, [pc, #172]	; (80044c8 <HAL_TIM_MspPostInit+0xd4>)
 800441c:	f043 0304 	orr.w	r3, r3, #4
 8004420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004422:	4b29      	ldr	r3, [pc, #164]	; (80044c8 <HAL_TIM_MspPostInit+0xd4>)
 8004424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = uen_Pin;
 800442e:	2301      	movs	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004432:	2302      	movs	r3, #2
 8004434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443a:	2300      	movs	r3, #0
 800443c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800443e:	2302      	movs	r3, #2
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uen_GPIO_Port, &GPIO_InitStruct);
 8004442:	f107 0314 	add.w	r3, r7, #20
 8004446:	4619      	mov	r1, r3
 8004448:	4820      	ldr	r0, [pc, #128]	; (80044cc <HAL_TIM_MspPostInit+0xd8>)
 800444a:	f000 fb2b 	bl	8004aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800444e:	e034      	b.n	80044ba <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d12f      	bne.n	80044ba <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445a:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <HAL_TIM_MspPostInit+0xd4>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	4a1a      	ldr	r2, [pc, #104]	; (80044c8 <HAL_TIM_MspPostInit+0xd4>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004466:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <HAL_TIM_MspPostInit+0xd4>)
 8004468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004472:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004478:	2302      	movs	r3, #2
 800447a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004480:	2300      	movs	r3, #0
 8004482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8004484:	230a      	movs	r3, #10
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	4619      	mov	r1, r3
 800448e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004492:	f000 fb07 	bl	8004aa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449c:	2302      	movs	r3, #2
 800449e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a4:	2300      	movs	r3, #0
 80044a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044a8:	2301      	movs	r3, #1
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ac:	f107 0314 	add.w	r3, r7, #20
 80044b0:	4619      	mov	r1, r3
 80044b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044b6:	f000 faf5 	bl	8004aa4 <HAL_GPIO_Init>
}
 80044ba:	bf00      	nop
 80044bc:	3728      	adds	r7, #40	; 0x28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40021000 	.word	0x40021000
 80044cc:	48000800 	.word	0x48000800

080044d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044d4:	e7fe      	b.n	80044d4 <NMI_Handler+0x4>

080044d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044da:	e7fe      	b.n	80044da <HardFault_Handler+0x4>

080044dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044e0:	e7fe      	b.n	80044e0 <MemManage_Handler+0x4>

080044e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044e2:	b480      	push	{r7}
 80044e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044e6:	e7fe      	b.n	80044e6 <BusFault_Handler+0x4>

080044e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044ec:	e7fe      	b.n	80044ec <UsageFault_Handler+0x4>

080044ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044ee:	b480      	push	{r7}
 80044f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800450a:	b480      	push	{r7}
 800450c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800451c:	f000 f972 	bl	8004804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004520:	bf00      	nop
 8004522:	bd80      	pop	{r7, pc}

08004524 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004528:	4802      	ldr	r0, [pc, #8]	; (8004534 <TIM4_IRQHandler+0x10>)
 800452a:	f002 f845 	bl	80065b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800452e:	bf00      	nop
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	2000056c 	.word	0x2000056c

08004538 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800453c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004540:	f000 fc64 	bl	8004e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004544:	bf00      	nop
 8004546:	bd80      	pop	{r7, pc}

08004548 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800454c:	4802      	ldr	r0, [pc, #8]	; (8004558 <TIM5_IRQHandler+0x10>)
 800454e:	f002 f833 	bl	80065b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200005b8 	.word	0x200005b8

0800455c <_getpid>:
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
 8004560:	2301      	movs	r3, #1
 8004562:	4618      	mov	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <_kill>:
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	f004 fb8b 	bl	8008c90 <__errno>
 800457a:	4603      	mov	r3, r0
 800457c:	2216      	movs	r2, #22
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <_exit>:
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ffe7 	bl	800456c <_kill>
 800459e:	e7fe      	b.n	800459e <_exit+0x12>

080045a0 <_read>:
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e00a      	b.n	80045c8 <_read+0x28>
 80045b2:	f3af 8000 	nop.w
 80045b6:	4601      	mov	r1, r0
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	60ba      	str	r2, [r7, #8]
 80045be:	b2ca      	uxtb	r2, r1
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	3301      	adds	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	dbf0      	blt.n	80045b2 <_read+0x12>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <_write>:
 80045da:	b580      	push	{r7, lr}
 80045dc:	b086      	sub	sp, #24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e009      	b.n	8004600 <_write+0x26>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	60ba      	str	r2, [r7, #8]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff f963 	bl	80038c0 <__io_putchar>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	3301      	adds	r3, #1
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	dbf1      	blt.n	80045ec <_write+0x12>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <_close>:
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <_fstat>:
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	2300      	movs	r3, #0
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <_isatty>:
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	2301      	movs	r3, #1
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_lseek>:
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	2300      	movs	r3, #0
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <_sbrk>:
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <_sbrk+0x5c>)
 8004686:	4b15      	ldr	r3, [pc, #84]	; (80046dc <_sbrk+0x60>)
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <_sbrk+0x64>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <_sbrk+0x22>
 8004698:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <_sbrk+0x64>)
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <_sbrk+0x68>)
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <_sbrk+0x64>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d207      	bcs.n	80046bc <_sbrk+0x40>
 80046ac:	f004 faf0 	bl	8008c90 <__errno>
 80046b0:	4603      	mov	r3, r0
 80046b2:	220c      	movs	r2, #12
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ba:	e009      	b.n	80046d0 <_sbrk+0x54>
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <_sbrk+0x64>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <_sbrk+0x64>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <_sbrk+0x64>)
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20020000 	.word	0x20020000
 80046dc:	00000400 	.word	0x00000400
 80046e0:	200008a8 	.word	0x200008a8
 80046e4:	200008c0 	.word	0x200008c0

080046e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <SystemInit+0x20>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	4a05      	ldr	r2, [pc, #20]	; (8004708 <SystemInit+0x20>)
 80046f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800470c:	480d      	ldr	r0, [pc, #52]	; (8004744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800470e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004710:	480d      	ldr	r0, [pc, #52]	; (8004748 <LoopForever+0x6>)
  ldr r1, =_edata
 8004712:	490e      	ldr	r1, [pc, #56]	; (800474c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004714:	4a0e      	ldr	r2, [pc, #56]	; (8004750 <LoopForever+0xe>)
  movs r3, #0
 8004716:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004718:	e002      	b.n	8004720 <LoopCopyDataInit>

0800471a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800471a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800471c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800471e:	3304      	adds	r3, #4

08004720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004724:	d3f9      	bcc.n	800471a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004726:	4a0b      	ldr	r2, [pc, #44]	; (8004754 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004728:	4c0b      	ldr	r4, [pc, #44]	; (8004758 <LoopForever+0x16>)
  movs r3, #0
 800472a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800472c:	e001      	b.n	8004732 <LoopFillZerobss>

0800472e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800472e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004730:	3204      	adds	r2, #4

08004732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004734:	d3fb      	bcc.n	800472e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004736:	f7ff ffd7 	bl	80046e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800473a:	f004 faaf 	bl	8008c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800473e:	f7fe fadb 	bl	8002cf8 <main>

08004742 <LoopForever>:

LoopForever:
    b LoopForever
 8004742:	e7fe      	b.n	8004742 <LoopForever>
  ldr   r0, =_estack
 8004744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800474c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004750:	0800bebc 	.word	0x0800bebc
  ldr r2, =_sbss
 8004754:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004758:	200008c0 	.word	0x200008c0

0800475c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800475c:	e7fe      	b.n	800475c <ADC1_2_IRQHandler>

0800475e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004768:	2003      	movs	r0, #3
 800476a:	f000 f95b 	bl	8004a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800476e:	2000      	movs	r0, #0
 8004770:	f000 f80e 	bl	8004790 <HAL_InitTick>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	71fb      	strb	r3, [r7, #7]
 800477e:	e001      	b.n	8004784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004780:	f7ff fbd8 	bl	8003f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004784:	79fb      	ldrb	r3, [r7, #7]

}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800479c:	4b16      	ldr	r3, [pc, #88]	; (80047f8 <HAL_InitTick+0x68>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d022      	beq.n	80047ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80047a4:	4b15      	ldr	r3, [pc, #84]	; (80047fc <HAL_InitTick+0x6c>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <HAL_InitTick+0x68>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f966 	bl	8004a8a <HAL_SYSTICK_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10f      	bne.n	80047e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	d809      	bhi.n	80047de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047ca:	2200      	movs	r2, #0
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047d2:	f000 f932 	bl	8004a3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047d6:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <HAL_InitTick+0x70>)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	e007      	b.n	80047ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
 80047e2:	e004      	b.n	80047ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	e001      	b.n	80047ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000014 	.word	0x20000014
 80047fc:	2000000c 	.word	0x2000000c
 8004800:	20000010 	.word	0x20000010

08004804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <HAL_IncTick+0x1c>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_IncTick+0x20>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4413      	add	r3, r2
 8004812:	4a03      	ldr	r2, [pc, #12]	; (8004820 <HAL_IncTick+0x1c>)
 8004814:	6013      	str	r3, [r2, #0]
}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	200008ac 	.word	0x200008ac
 8004824:	20000014 	.word	0x20000014

08004828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return uwTick;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_GetTick+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	200008ac 	.word	0x200008ac

08004840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004848:	f7ff ffee 	bl	8004828 <HAL_GetTick>
 800484c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004858:	d004      	beq.n	8004864 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <HAL_Delay+0x40>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4413      	add	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004864:	bf00      	nop
 8004866:	f7ff ffdf 	bl	8004828 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	429a      	cmp	r2, r3
 8004874:	d8f7      	bhi.n	8004866 <HAL_Delay+0x26>
  {
  }
}
 8004876:	bf00      	nop
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20000014 	.word	0x20000014

08004884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048a0:	4013      	ands	r3, r2
 80048a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048b6:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <__NVIC_SetPriorityGrouping+0x44>)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	60d3      	str	r3, [r2, #12]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	e000ed00 	.word	0xe000ed00

080048cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048d0:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <__NVIC_GetPriorityGrouping+0x18>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	0a1b      	lsrs	r3, r3, #8
 80048d6:	f003 0307 	and.w	r3, r3, #7
}
 80048da:	4618      	mov	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	e000ed00 	.word	0xe000ed00

080048e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	db0b      	blt.n	8004912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	f003 021f 	and.w	r2, r3, #31
 8004900:	4907      	ldr	r1, [pc, #28]	; (8004920 <__NVIC_EnableIRQ+0x38>)
 8004902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	2001      	movs	r0, #1
 800490a:	fa00 f202 	lsl.w	r2, r0, r2
 800490e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	e000e100 	.word	0xe000e100

08004924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	6039      	str	r1, [r7, #0]
 800492e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004934:	2b00      	cmp	r3, #0
 8004936:	db0a      	blt.n	800494e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	490c      	ldr	r1, [pc, #48]	; (8004970 <__NVIC_SetPriority+0x4c>)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	0112      	lsls	r2, r2, #4
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	440b      	add	r3, r1
 8004948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800494c:	e00a      	b.n	8004964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	4908      	ldr	r1, [pc, #32]	; (8004974 <__NVIC_SetPriority+0x50>)
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	3b04      	subs	r3, #4
 800495c:	0112      	lsls	r2, r2, #4
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	440b      	add	r3, r1
 8004962:	761a      	strb	r2, [r3, #24]
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	e000e100 	.word	0xe000e100
 8004974:	e000ed00 	.word	0xe000ed00

08004978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f1c3 0307 	rsb	r3, r3, #7
 8004992:	2b04      	cmp	r3, #4
 8004994:	bf28      	it	cs
 8004996:	2304      	movcs	r3, #4
 8004998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3304      	adds	r3, #4
 800499e:	2b06      	cmp	r3, #6
 80049a0:	d902      	bls.n	80049a8 <NVIC_EncodePriority+0x30>
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3b03      	subs	r3, #3
 80049a6:	e000      	b.n	80049aa <NVIC_EncodePriority+0x32>
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43da      	mvns	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	401a      	ands	r2, r3
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ca:	43d9      	mvns	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d0:	4313      	orrs	r3, r2
         );
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3724      	adds	r7, #36	; 0x24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
	...

080049e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049f0:	d301      	bcc.n	80049f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049f2:	2301      	movs	r3, #1
 80049f4:	e00f      	b.n	8004a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049f6:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <SysTick_Config+0x40>)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049fe:	210f      	movs	r1, #15
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a04:	f7ff ff8e 	bl	8004924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a08:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <SysTick_Config+0x40>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a0e:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <SysTick_Config+0x40>)
 8004a10:	2207      	movs	r2, #7
 8004a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	e000e010 	.word	0xe000e010

08004a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ff29 	bl	8004884 <__NVIC_SetPriorityGrouping>
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b086      	sub	sp, #24
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	4603      	mov	r3, r0
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a48:	f7ff ff40 	bl	80048cc <__NVIC_GetPriorityGrouping>
 8004a4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	6978      	ldr	r0, [r7, #20]
 8004a54:	f7ff ff90 	bl	8004978 <NVIC_EncodePriority>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff ff5f 	bl	8004924 <__NVIC_SetPriority>
}
 8004a66:	bf00      	nop
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	4603      	mov	r3, r0
 8004a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff ff33 	bl	80048e8 <__NVIC_EnableIRQ>
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff ffa4 	bl	80049e0 <SysTick_Config>
 8004a98:	4603      	mov	r3, r0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ab2:	e15a      	b.n	8004d6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	2101      	movs	r1, #1
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 814c 	beq.w	8004d64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d005      	beq.n	8004ae4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d130      	bne.n	8004b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	2203      	movs	r2, #3
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4013      	ands	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4013      	ands	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	f003 0201 	and.w	r2, r3, #1
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	d017      	beq.n	8004b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43db      	mvns	r3, r3
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4013      	ands	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d123      	bne.n	8004bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	08da      	lsrs	r2, r3, #3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3208      	adds	r2, #8
 8004b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	220f      	movs	r2, #15
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	08da      	lsrs	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3208      	adds	r2, #8
 8004bd0:	6939      	ldr	r1, [r7, #16]
 8004bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	2203      	movs	r2, #3
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43db      	mvns	r3, r3
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4013      	ands	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f003 0203 	and.w	r2, r3, #3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80a6 	beq.w	8004d64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c18:	4b5b      	ldr	r3, [pc, #364]	; (8004d88 <HAL_GPIO_Init+0x2e4>)
 8004c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1c:	4a5a      	ldr	r2, [pc, #360]	; (8004d88 <HAL_GPIO_Init+0x2e4>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	6613      	str	r3, [r2, #96]	; 0x60
 8004c24:	4b58      	ldr	r3, [pc, #352]	; (8004d88 <HAL_GPIO_Init+0x2e4>)
 8004c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c30:	4a56      	ldr	r2, [pc, #344]	; (8004d8c <HAL_GPIO_Init+0x2e8>)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	3302      	adds	r3, #2
 8004c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	220f      	movs	r2, #15
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4013      	ands	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c5a:	d01f      	beq.n	8004c9c <HAL_GPIO_Init+0x1f8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a4c      	ldr	r2, [pc, #304]	; (8004d90 <HAL_GPIO_Init+0x2ec>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d019      	beq.n	8004c98 <HAL_GPIO_Init+0x1f4>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a4b      	ldr	r2, [pc, #300]	; (8004d94 <HAL_GPIO_Init+0x2f0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_GPIO_Init+0x1f0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a4a      	ldr	r2, [pc, #296]	; (8004d98 <HAL_GPIO_Init+0x2f4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00d      	beq.n	8004c90 <HAL_GPIO_Init+0x1ec>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a49      	ldr	r2, [pc, #292]	; (8004d9c <HAL_GPIO_Init+0x2f8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <HAL_GPIO_Init+0x1e8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a48      	ldr	r2, [pc, #288]	; (8004da0 <HAL_GPIO_Init+0x2fc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d101      	bne.n	8004c88 <HAL_GPIO_Init+0x1e4>
 8004c84:	2305      	movs	r3, #5
 8004c86:	e00a      	b.n	8004c9e <HAL_GPIO_Init+0x1fa>
 8004c88:	2306      	movs	r3, #6
 8004c8a:	e008      	b.n	8004c9e <HAL_GPIO_Init+0x1fa>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	e006      	b.n	8004c9e <HAL_GPIO_Init+0x1fa>
 8004c90:	2303      	movs	r3, #3
 8004c92:	e004      	b.n	8004c9e <HAL_GPIO_Init+0x1fa>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e002      	b.n	8004c9e <HAL_GPIO_Init+0x1fa>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_GPIO_Init+0x1fa>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	f002 0203 	and.w	r2, r2, #3
 8004ca4:	0092      	lsls	r2, r2, #2
 8004ca6:	4093      	lsls	r3, r2
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cae:	4937      	ldr	r1, [pc, #220]	; (8004d8c <HAL_GPIO_Init+0x2e8>)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cbc:	4b39      	ldr	r3, [pc, #228]	; (8004da4 <HAL_GPIO_Init+0x300>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ce0:	4a30      	ldr	r2, [pc, #192]	; (8004da4 <HAL_GPIO_Init+0x300>)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ce6:	4b2f      	ldr	r3, [pc, #188]	; (8004da4 <HAL_GPIO_Init+0x300>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d0a:	4a26      	ldr	r2, [pc, #152]	; (8004da4 <HAL_GPIO_Init+0x300>)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <HAL_GPIO_Init+0x300>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d34:	4a1b      	ldr	r2, [pc, #108]	; (8004da4 <HAL_GPIO_Init+0x300>)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d3a:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <HAL_GPIO_Init+0x300>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	43db      	mvns	r3, r3
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4013      	ands	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d5e:	4a11      	ldr	r2, [pc, #68]	; (8004da4 <HAL_GPIO_Init+0x300>)
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	3301      	adds	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f47f ae9d 	bne.w	8004ab4 <HAL_GPIO_Init+0x10>
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	48000400 	.word	0x48000400
 8004d94:	48000800 	.word	0x48000800
 8004d98:	48000c00 	.word	0x48000c00
 8004d9c:	48001000 	.word	0x48001000
 8004da0:	48001400 	.word	0x48001400
 8004da4:	40010400 	.word	0x40010400

08004da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	807b      	strh	r3, [r7, #2]
 8004db4:	4613      	mov	r3, r2
 8004db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004db8:	787b      	ldrb	r3, [r7, #1]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dbe:	887a      	ldrh	r2, [r7, #2]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004dc4:	e002      	b.n	8004dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dc6:	887a      	ldrh	r2, [r7, #2]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4013      	ands	r3, r2
 8004df0:	041a      	lsls	r2, r3, #16
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	43d9      	mvns	r1, r3
 8004df6:	887b      	ldrh	r3, [r7, #2]
 8004df8:	400b      	ands	r3, r1
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	619a      	str	r2, [r3, #24]
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e16:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d006      	beq.n	8004e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e22:	4a05      	ldr	r2, [pc, #20]	; (8004e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f806 	bl	8004e3c <HAL_GPIO_EXTI_Callback>
  }
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40010400 	.word	0x40010400

08004e3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d141      	bne.n	8004ee6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e62:	4b4b      	ldr	r3, [pc, #300]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6e:	d131      	bne.n	8004ed4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e70:	4b47      	ldr	r3, [pc, #284]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e76:	4a46      	ldr	r2, [pc, #280]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e80:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e88:	4a41      	ldr	r2, [pc, #260]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e90:	4b40      	ldr	r3, [pc, #256]	; (8004f94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2232      	movs	r2, #50	; 0x32
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	4a3f      	ldr	r2, [pc, #252]	; (8004f98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	0c9b      	lsrs	r3, r3, #18
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ea6:	e002      	b.n	8004eae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eae:	4b38      	ldr	r3, [pc, #224]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eba:	d102      	bne.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f2      	bne.n	8004ea8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ec2:	4b33      	ldr	r3, [pc, #204]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ece:	d158      	bne.n	8004f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e057      	b.n	8004f84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ed4:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eda:	4a2d      	ldr	r2, [pc, #180]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ee4:	e04d      	b.n	8004f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eec:	d141      	bne.n	8004f72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004eee:	4b28      	ldr	r3, [pc, #160]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efa:	d131      	bne.n	8004f60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004efc:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f02:	4a23      	ldr	r2, [pc, #140]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f0c:	4b20      	ldr	r3, [pc, #128]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f14:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f1c:	4b1d      	ldr	r3, [pc, #116]	; (8004f94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2232      	movs	r2, #50	; 0x32
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
 8004f26:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	0c9b      	lsrs	r3, r3, #18
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f32:	e002      	b.n	8004f3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f3a:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f46:	d102      	bne.n	8004f4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f2      	bne.n	8004f34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f4e:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5a:	d112      	bne.n	8004f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e011      	b.n	8004f84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f70:	e007      	b.n	8004f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f7a:	4a05      	ldr	r2, [pc, #20]	; (8004f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40007000 	.word	0x40007000
 8004f94:	2000000c 	.word	0x2000000c
 8004f98:	431bde83 	.word	0x431bde83

08004f9c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4a04      	ldr	r2, [pc, #16]	; (8004fb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004faa:	6093      	str	r3, [r2, #8]
}
 8004fac:	bf00      	nop
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40007000 	.word	0x40007000

08004fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e306      	b.n	80055dc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d075      	beq.n	80050c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fda:	4b97      	ldr	r3, [pc, #604]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
 8004fe2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fe4:	4b94      	ldr	r3, [pc, #592]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b0c      	cmp	r3, #12
 8004ff2:	d102      	bne.n	8004ffa <HAL_RCC_OscConfig+0x3e>
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d002      	beq.n	8005000 <HAL_RCC_OscConfig+0x44>
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d10b      	bne.n	8005018 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005000:	4b8d      	ldr	r3, [pc, #564]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d05b      	beq.n	80050c4 <HAL_RCC_OscConfig+0x108>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d157      	bne.n	80050c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e2e1      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005020:	d106      	bne.n	8005030 <HAL_RCC_OscConfig+0x74>
 8005022:	4b85      	ldr	r3, [pc, #532]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a84      	ldr	r2, [pc, #528]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e01d      	b.n	800506c <HAL_RCC_OscConfig+0xb0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005038:	d10c      	bne.n	8005054 <HAL_RCC_OscConfig+0x98>
 800503a:	4b7f      	ldr	r3, [pc, #508]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a7e      	ldr	r2, [pc, #504]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	4b7c      	ldr	r3, [pc, #496]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a7b      	ldr	r2, [pc, #492]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e00b      	b.n	800506c <HAL_RCC_OscConfig+0xb0>
 8005054:	4b78      	ldr	r3, [pc, #480]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a77      	ldr	r2, [pc, #476]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 800505a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	4b75      	ldr	r3, [pc, #468]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a74      	ldr	r2, [pc, #464]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800506a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d013      	beq.n	800509c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7ff fbd8 	bl	8004828 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800507c:	f7ff fbd4 	bl	8004828 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b64      	cmp	r3, #100	; 0x64
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e2a6      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508e:	4b6a      	ldr	r3, [pc, #424]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0xc0>
 800509a:	e014      	b.n	80050c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509c:	f7ff fbc4 	bl	8004828 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a4:	f7ff fbc0 	bl	8004828 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	; 0x64
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e292      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050b6:	4b60      	ldr	r3, [pc, #384]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0xe8>
 80050c2:	e000      	b.n	80050c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d075      	beq.n	80051be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050d2:	4b59      	ldr	r3, [pc, #356]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 030c 	and.w	r3, r3, #12
 80050da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050dc:	4b56      	ldr	r3, [pc, #344]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b0c      	cmp	r3, #12
 80050ea:	d102      	bne.n	80050f2 <HAL_RCC_OscConfig+0x136>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d002      	beq.n	80050f8 <HAL_RCC_OscConfig+0x13c>
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d11f      	bne.n	8005138 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f8:	4b4f      	ldr	r3, [pc, #316]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_RCC_OscConfig+0x154>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e265      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005110:	4b49      	ldr	r3, [pc, #292]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	4946      	ldr	r1, [pc, #280]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005124:	4b45      	ldr	r3, [pc, #276]	; (800523c <HAL_RCC_OscConfig+0x280>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fb31 	bl	8004790 <HAL_InitTick>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d043      	beq.n	80051bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e251      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d023      	beq.n	8005188 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005140:	4b3d      	ldr	r3, [pc, #244]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a3c      	ldr	r2, [pc, #240]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7ff fb6c 	bl	8004828 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005154:	f7ff fb68 	bl	8004828 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e23a      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005166:	4b34      	ldr	r3, [pc, #208]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005172:	4b31      	ldr	r3, [pc, #196]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	061b      	lsls	r3, r3, #24
 8005180:	492d      	ldr	r1, [pc, #180]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	604b      	str	r3, [r1, #4]
 8005186:	e01a      	b.n	80051be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005188:	4b2b      	ldr	r3, [pc, #172]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a2a      	ldr	r2, [pc, #168]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 800518e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005194:	f7ff fb48 	bl	8004828 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800519c:	f7ff fb44 	bl	8004828 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e216      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051ae:	4b22      	ldr	r3, [pc, #136]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCC_OscConfig+0x1e0>
 80051ba:	e000      	b.n	80051be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d041      	beq.n	800524e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01c      	beq.n	800520c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051d2:	4b19      	ldr	r3, [pc, #100]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 80051d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d8:	4a17      	ldr	r2, [pc, #92]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e2:	f7ff fb21 	bl	8004828 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ea:	f7ff fb1d 	bl	8004828 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e1ef      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 80051fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0ef      	beq.n	80051ea <HAL_RCC_OscConfig+0x22e>
 800520a:	e020      	b.n	800524e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800520c:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 800520e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005212:	4a09      	ldr	r2, [pc, #36]	; (8005238 <HAL_RCC_OscConfig+0x27c>)
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521c:	f7ff fb04 	bl	8004828 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005222:	e00d      	b.n	8005240 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005224:	f7ff fb00 	bl	8004828 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d906      	bls.n	8005240 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e1d2      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
 800523c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005240:	4b8c      	ldr	r3, [pc, #560]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 8005242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1ea      	bne.n	8005224 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80a6 	beq.w	80053a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525c:	2300      	movs	r3, #0
 800525e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005260:	4b84      	ldr	r3, [pc, #528]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_RCC_OscConfig+0x2b4>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <HAL_RCC_OscConfig+0x2b6>
 8005270:	2300      	movs	r3, #0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00d      	beq.n	8005292 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	4b7f      	ldr	r3, [pc, #508]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 8005278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527a:	4a7e      	ldr	r2, [pc, #504]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005280:	6593      	str	r3, [r2, #88]	; 0x58
 8005282:	4b7c      	ldr	r3, [pc, #496]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800528e:	2301      	movs	r3, #1
 8005290:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005292:	4b79      	ldr	r3, [pc, #484]	; (8005478 <HAL_RCC_OscConfig+0x4bc>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d118      	bne.n	80052d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800529e:	4b76      	ldr	r3, [pc, #472]	; (8005478 <HAL_RCC_OscConfig+0x4bc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a75      	ldr	r2, [pc, #468]	; (8005478 <HAL_RCC_OscConfig+0x4bc>)
 80052a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052aa:	f7ff fabd 	bl	8004828 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b2:	f7ff fab9 	bl	8004828 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e18b      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c4:	4b6c      	ldr	r3, [pc, #432]	; (8005478 <HAL_RCC_OscConfig+0x4bc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d108      	bne.n	80052ea <HAL_RCC_OscConfig+0x32e>
 80052d8:	4b66      	ldr	r3, [pc, #408]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	4a65      	ldr	r2, [pc, #404]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052e8:	e024      	b.n	8005334 <HAL_RCC_OscConfig+0x378>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b05      	cmp	r3, #5
 80052f0:	d110      	bne.n	8005314 <HAL_RCC_OscConfig+0x358>
 80052f2:	4b60      	ldr	r3, [pc, #384]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	4a5e      	ldr	r2, [pc, #376]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 80052fa:	f043 0304 	orr.w	r3, r3, #4
 80052fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005302:	4b5c      	ldr	r3, [pc, #368]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005308:	4a5a      	ldr	r2, [pc, #360]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005312:	e00f      	b.n	8005334 <HAL_RCC_OscConfig+0x378>
 8005314:	4b57      	ldr	r3, [pc, #348]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531a:	4a56      	ldr	r2, [pc, #344]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005324:	4b53      	ldr	r3, [pc, #332]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532a:	4a52      	ldr	r2, [pc, #328]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 800532c:	f023 0304 	bic.w	r3, r3, #4
 8005330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d016      	beq.n	800536a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533c:	f7ff fa74 	bl	8004828 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005342:	e00a      	b.n	800535a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005344:	f7ff fa70 	bl	8004828 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e140      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800535a:	4b46      	ldr	r3, [pc, #280]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0ed      	beq.n	8005344 <HAL_RCC_OscConfig+0x388>
 8005368:	e015      	b.n	8005396 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536a:	f7ff fa5d 	bl	8004828 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005370:	e00a      	b.n	8005388 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7ff fa59 	bl	8004828 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e129      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005388:	4b3a      	ldr	r3, [pc, #232]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1ed      	bne.n	8005372 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005396:	7ffb      	ldrb	r3, [r7, #31]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539c:	4b35      	ldr	r3, [pc, #212]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	4a34      	ldr	r2, [pc, #208]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 80053a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d03c      	beq.n	800542e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01c      	beq.n	80053f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053bc:	4b2d      	ldr	r3, [pc, #180]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 80053be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053c2:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053cc:	f7ff fa2c 	bl	8004828 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d4:	f7ff fa28 	bl	8004828 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e0fa      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053e6:	4b23      	ldr	r3, [pc, #140]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 80053e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ef      	beq.n	80053d4 <HAL_RCC_OscConfig+0x418>
 80053f4:	e01b      	b.n	800542e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053f6:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 80053f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005406:	f7ff fa0f 	bl	8004828 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800540e:	f7ff fa0b 	bl	8004828 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e0dd      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005420:	4b14      	ldr	r3, [pc, #80]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 8005422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1ef      	bne.n	800540e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80d1 	beq.w	80055da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005438:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 030c 	and.w	r3, r3, #12
 8005440:	2b0c      	cmp	r3, #12
 8005442:	f000 808b 	beq.w	800555c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d15e      	bne.n	800550c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a08      	ldr	r2, [pc, #32]	; (8005474 <HAL_RCC_OscConfig+0x4b8>)
 8005454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545a:	f7ff f9e5 	bl	8004828 <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005460:	e00c      	b.n	800547c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005462:	f7ff f9e1 	bl	8004828 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d905      	bls.n	800547c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e0b3      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
 8005474:	40021000 	.word	0x40021000
 8005478:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800547c:	4b59      	ldr	r3, [pc, #356]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1ec      	bne.n	8005462 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005488:	4b56      	ldr	r3, [pc, #344]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	4b56      	ldr	r3, [pc, #344]	; (80055e8 <HAL_RCC_OscConfig+0x62c>)
 800548e:	4013      	ands	r3, r2
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6a11      	ldr	r1, [r2, #32]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005498:	3a01      	subs	r2, #1
 800549a:	0112      	lsls	r2, r2, #4
 800549c:	4311      	orrs	r1, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80054a2:	0212      	lsls	r2, r2, #8
 80054a4:	4311      	orrs	r1, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054aa:	0852      	lsrs	r2, r2, #1
 80054ac:	3a01      	subs	r2, #1
 80054ae:	0552      	lsls	r2, r2, #21
 80054b0:	4311      	orrs	r1, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054b6:	0852      	lsrs	r2, r2, #1
 80054b8:	3a01      	subs	r2, #1
 80054ba:	0652      	lsls	r2, r2, #25
 80054bc:	4311      	orrs	r1, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054c2:	06d2      	lsls	r2, r2, #27
 80054c4:	430a      	orrs	r2, r1
 80054c6:	4947      	ldr	r1, [pc, #284]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054cc:	4b45      	ldr	r3, [pc, #276]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a44      	ldr	r2, [pc, #272]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 80054d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054d8:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4a41      	ldr	r2, [pc, #260]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 80054de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7ff f9a0 	bl	8004828 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ec:	f7ff f99c 	bl	8004828 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e06e      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054fe:	4b39      	ldr	r3, [pc, #228]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCC_OscConfig+0x530>
 800550a:	e066      	b.n	80055da <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550c:	4b35      	ldr	r3, [pc, #212]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a34      	ldr	r2, [pc, #208]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 8005512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005516:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005518:	4b32      	ldr	r3, [pc, #200]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4a31      	ldr	r2, [pc, #196]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005524:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4a2e      	ldr	r2, [pc, #184]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 800552a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800552e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005532:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7ff f978 	bl	8004828 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800553c:	f7ff f974 	bl	8004828 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e046      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800554e:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f0      	bne.n	800553c <HAL_RCC_OscConfig+0x580>
 800555a:	e03e      	b.n	80055da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e039      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005568:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <HAL_RCC_OscConfig+0x628>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f003 0203 	and.w	r2, r3, #3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	429a      	cmp	r2, r3
 800557a:	d12c      	bne.n	80055d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	3b01      	subs	r3, #1
 8005588:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800558a:	429a      	cmp	r2, r3
 800558c:	d123      	bne.n	80055d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800559a:	429a      	cmp	r2, r3
 800559c:	d11b      	bne.n	80055d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d113      	bne.n	80055d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	3b01      	subs	r3, #1
 80055bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055be:	429a      	cmp	r2, r3
 80055c0:	d109      	bne.n	80055d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	3b01      	subs	r3, #1
 80055d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d001      	beq.n	80055da <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40021000 	.word	0x40021000
 80055e8:	019f800c 	.word	0x019f800c

080055ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e11e      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005604:	4b91      	ldr	r3, [pc, #580]	; (800584c <HAL_RCC_ClockConfig+0x260>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d910      	bls.n	8005634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005612:	4b8e      	ldr	r3, [pc, #568]	; (800584c <HAL_RCC_ClockConfig+0x260>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f023 020f 	bic.w	r2, r3, #15
 800561a:	498c      	ldr	r1, [pc, #560]	; (800584c <HAL_RCC_ClockConfig+0x260>)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	4313      	orrs	r3, r2
 8005620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005622:	4b8a      	ldr	r3, [pc, #552]	; (800584c <HAL_RCC_ClockConfig+0x260>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e106      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d073      	beq.n	8005728 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d129      	bne.n	800569c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005648:	4b81      	ldr	r3, [pc, #516]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0f4      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005658:	f000 f99e 	bl	8005998 <RCC_GetSysClockFreqFromPLLSource>
 800565c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4a7c      	ldr	r2, [pc, #496]	; (8005854 <HAL_RCC_ClockConfig+0x268>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d93f      	bls.n	80056e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005666:	4b7a      	ldr	r3, [pc, #488]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800567a:	2b00      	cmp	r3, #0
 800567c:	d033      	beq.n	80056e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005682:	2b00      	cmp	r3, #0
 8005684:	d12f      	bne.n	80056e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005686:	4b72      	ldr	r3, [pc, #456]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800568e:	4a70      	ldr	r2, [pc, #448]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005694:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005696:	2380      	movs	r3, #128	; 0x80
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e024      	b.n	80056e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056a4:	4b6a      	ldr	r3, [pc, #424]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0c6      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056b4:	4b66      	ldr	r3, [pc, #408]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0be      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056c4:	f000 f8ce 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80056c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4a61      	ldr	r2, [pc, #388]	; (8005854 <HAL_RCC_ClockConfig+0x268>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d909      	bls.n	80056e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056d2:	4b5f      	ldr	r3, [pc, #380]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056da:	4a5d      	ldr	r2, [pc, #372]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056e6:	4b5a      	ldr	r3, [pc, #360]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f023 0203 	bic.w	r2, r3, #3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	4957      	ldr	r1, [pc, #348]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f8:	f7ff f896 	bl	8004828 <HAL_GetTick>
 80056fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056fe:	e00a      	b.n	8005716 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005700:	f7ff f892 	bl	8004828 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	f241 3288 	movw	r2, #5000	; 0x1388
 800570e:	4293      	cmp	r3, r2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e095      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005716:	4b4e      	ldr	r3, [pc, #312]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 020c 	and.w	r2, r3, #12
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	429a      	cmp	r2, r3
 8005726:	d1eb      	bne.n	8005700 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d023      	beq.n	800577c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005740:	4b43      	ldr	r3, [pc, #268]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4a42      	ldr	r2, [pc, #264]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005746:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800574a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005758:	4b3d      	ldr	r3, [pc, #244]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005760:	4a3b      	ldr	r2, [pc, #236]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005768:	4b39      	ldr	r3, [pc, #228]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	4936      	ldr	r1, [pc, #216]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005776:	4313      	orrs	r3, r2
 8005778:	608b      	str	r3, [r1, #8]
 800577a:	e008      	b.n	800578e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d105      	bne.n	800578e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005782:	4b33      	ldr	r3, [pc, #204]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	4a32      	ldr	r2, [pc, #200]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800578c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800578e:	4b2f      	ldr	r3, [pc, #188]	; (800584c <HAL_RCC_ClockConfig+0x260>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d21d      	bcs.n	80057d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579c:	4b2b      	ldr	r3, [pc, #172]	; (800584c <HAL_RCC_ClockConfig+0x260>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f023 020f 	bic.w	r2, r3, #15
 80057a4:	4929      	ldr	r1, [pc, #164]	; (800584c <HAL_RCC_ClockConfig+0x260>)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057ac:	f7ff f83c 	bl	8004828 <HAL_GetTick>
 80057b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b4:	f7ff f838 	bl	8004828 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e03b      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	4b20      	ldr	r3, [pc, #128]	; (800584c <HAL_RCC_ClockConfig+0x260>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d1ed      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e4:	4b1a      	ldr	r3, [pc, #104]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4917      	ldr	r1, [pc, #92]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	490f      	ldr	r1, [pc, #60]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005812:	4313      	orrs	r3, r2
 8005814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005816:	f000 f825 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 800581a:	4602      	mov	r2, r0
 800581c:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <HAL_RCC_ClockConfig+0x264>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	091b      	lsrs	r3, r3, #4
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	490c      	ldr	r1, [pc, #48]	; (8005858 <HAL_RCC_ClockConfig+0x26c>)
 8005828:	5ccb      	ldrb	r3, [r1, r3]
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	fa22 f303 	lsr.w	r3, r2, r3
 8005832:	4a0a      	ldr	r2, [pc, #40]	; (800585c <HAL_RCC_ClockConfig+0x270>)
 8005834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005836:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <HAL_RCC_ClockConfig+0x274>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe ffa8 	bl	8004790 <HAL_InitTick>
 8005840:	4603      	mov	r3, r0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40022000 	.word	0x40022000
 8005850:	40021000 	.word	0x40021000
 8005854:	04c4b400 	.word	0x04c4b400
 8005858:	0800ba90 	.word	0x0800ba90
 800585c:	2000000c 	.word	0x2000000c
 8005860:	20000010 	.word	0x20000010

08005864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800586a:	4b2c      	ldr	r3, [pc, #176]	; (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	2b04      	cmp	r3, #4
 8005874:	d102      	bne.n	800587c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005876:	4b2a      	ldr	r3, [pc, #168]	; (8005920 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	e047      	b.n	800590c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800587c:	4b27      	ldr	r3, [pc, #156]	; (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 030c 	and.w	r3, r3, #12
 8005884:	2b08      	cmp	r3, #8
 8005886:	d102      	bne.n	800588e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005888:	4b26      	ldr	r3, [pc, #152]	; (8005924 <HAL_RCC_GetSysClockFreq+0xc0>)
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	e03e      	b.n	800590c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800588e:	4b23      	ldr	r3, [pc, #140]	; (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 030c 	and.w	r3, r3, #12
 8005896:	2b0c      	cmp	r3, #12
 8005898:	d136      	bne.n	8005908 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800589a:	4b20      	ldr	r3, [pc, #128]	; (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058a4:	4b1d      	ldr	r3, [pc, #116]	; (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	3301      	adds	r3, #1
 80058b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d10c      	bne.n	80058d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058b8:	4a1a      	ldr	r2, [pc, #104]	; (8005924 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	4a16      	ldr	r2, [pc, #88]	; (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058c2:	68d2      	ldr	r2, [r2, #12]
 80058c4:	0a12      	lsrs	r2, r2, #8
 80058c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	617b      	str	r3, [r7, #20]
      break;
 80058d0:	e00c      	b.n	80058ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058d2:	4a13      	ldr	r2, [pc, #76]	; (8005920 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	4a10      	ldr	r2, [pc, #64]	; (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058dc:	68d2      	ldr	r2, [r2, #12]
 80058de:	0a12      	lsrs	r2, r2, #8
 80058e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058e4:	fb02 f303 	mul.w	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]
      break;
 80058ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	0e5b      	lsrs	r3, r3, #25
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	3301      	adds	r3, #1
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	fbb2 f3f3 	udiv	r3, r2, r3
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	e001      	b.n	800590c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800590c:	693b      	ldr	r3, [r7, #16]
}
 800590e:	4618      	mov	r0, r3
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40021000 	.word	0x40021000
 8005920:	00f42400 	.word	0x00f42400
 8005924:	016e3600 	.word	0x016e3600

08005928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800592c:	4b03      	ldr	r3, [pc, #12]	; (800593c <HAL_RCC_GetHCLKFreq+0x14>)
 800592e:	681b      	ldr	r3, [r3, #0]
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	2000000c 	.word	0x2000000c

08005940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005944:	f7ff fff0 	bl	8005928 <HAL_RCC_GetHCLKFreq>
 8005948:	4602      	mov	r2, r0
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	4904      	ldr	r1, [pc, #16]	; (8005968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005956:	5ccb      	ldrb	r3, [r1, r3]
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005960:	4618      	mov	r0, r3
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40021000 	.word	0x40021000
 8005968:	0800baa0 	.word	0x0800baa0

0800596c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005970:	f7ff ffda 	bl	8005928 <HAL_RCC_GetHCLKFreq>
 8005974:	4602      	mov	r2, r0
 8005976:	4b06      	ldr	r3, [pc, #24]	; (8005990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	0adb      	lsrs	r3, r3, #11
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	4904      	ldr	r1, [pc, #16]	; (8005994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005982:	5ccb      	ldrb	r3, [r1, r3]
 8005984:	f003 031f 	and.w	r3, r3, #31
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800598c:	4618      	mov	r0, r3
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40021000 	.word	0x40021000
 8005994:	0800baa0 	.word	0x0800baa0

08005998 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800599e:	4b1e      	ldr	r3, [pc, #120]	; (8005a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059a8:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d10c      	bne.n	80059d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059bc:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059c6:	68d2      	ldr	r2, [r2, #12]
 80059c8:	0a12      	lsrs	r2, r2, #8
 80059ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	617b      	str	r3, [r7, #20]
    break;
 80059d4:	e00c      	b.n	80059f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059d6:	4a12      	ldr	r2, [pc, #72]	; (8005a20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	fbb2 f3f3 	udiv	r3, r2, r3
 80059de:	4a0e      	ldr	r2, [pc, #56]	; (8005a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059e0:	68d2      	ldr	r2, [r2, #12]
 80059e2:	0a12      	lsrs	r2, r2, #8
 80059e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059e8:	fb02 f303 	mul.w	r3, r2, r3
 80059ec:	617b      	str	r3, [r7, #20]
    break;
 80059ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059f0:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	0e5b      	lsrs	r3, r3, #25
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	3301      	adds	r3, #1
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a0a:	687b      	ldr	r3, [r7, #4]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	016e3600 	.word	0x016e3600
 8005a20:	00f42400 	.word	0x00f42400

08005a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a30:	2300      	movs	r3, #0
 8005a32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 8098 	beq.w	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a42:	2300      	movs	r3, #0
 8005a44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a46:	4b43      	ldr	r3, [pc, #268]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10d      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a52:	4b40      	ldr	r3, [pc, #256]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a56:	4a3f      	ldr	r2, [pc, #252]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a5e:	4b3d      	ldr	r3, [pc, #244]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a66:	60bb      	str	r3, [r7, #8]
 8005a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a6e:	4b3a      	ldr	r3, [pc, #232]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a39      	ldr	r2, [pc, #228]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a7a:	f7fe fed5 	bl	8004828 <HAL_GetTick>
 8005a7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a80:	e009      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a82:	f7fe fed1 	bl	8004828 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d902      	bls.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	74fb      	strb	r3, [r7, #19]
        break;
 8005a94:	e005      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a96:	4b30      	ldr	r3, [pc, #192]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0ef      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005aa2:	7cfb      	ldrb	r3, [r7, #19]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d159      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005aa8:	4b2a      	ldr	r3, [pc, #168]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01e      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d019      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ac4:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ace:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad6:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ae0:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	4a1b      	ldr	r2, [pc, #108]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005af0:	4a18      	ldr	r2, [pc, #96]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fe fe91 	bl	8004828 <HAL_GetTick>
 8005b06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b08:	e00b      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fe fe8d 	bl	8004828 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d902      	bls.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	74fb      	strb	r3, [r7, #19]
            break;
 8005b20:	e006      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b22:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0ec      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b30:	7cfb      	ldrb	r3, [r7, #19]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b36:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b44:	4903      	ldr	r1, [pc, #12]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b4c:	e008      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b4e:	7cfb      	ldrb	r3, [r7, #19]
 8005b50:	74bb      	strb	r3, [r7, #18]
 8005b52:	e005      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b54:	40021000 	.word	0x40021000
 8005b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5c:	7cfb      	ldrb	r3, [r7, #19]
 8005b5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b60:	7c7b      	ldrb	r3, [r7, #17]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d105      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b66:	4ba7      	ldr	r3, [pc, #668]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	4aa6      	ldr	r2, [pc, #664]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b7e:	4ba1      	ldr	r3, [pc, #644]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b84:	f023 0203 	bic.w	r2, r3, #3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	499d      	ldr	r1, [pc, #628]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ba0:	4b98      	ldr	r3, [pc, #608]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba6:	f023 020c 	bic.w	r2, r3, #12
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	4995      	ldr	r1, [pc, #596]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bc2:	4b90      	ldr	r3, [pc, #576]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	498c      	ldr	r1, [pc, #560]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005be4:	4b87      	ldr	r3, [pc, #540]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	4984      	ldr	r1, [pc, #528]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c06:	4b7f      	ldr	r3, [pc, #508]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	497b      	ldr	r1, [pc, #492]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c28:	4b76      	ldr	r3, [pc, #472]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	4973      	ldr	r1, [pc, #460]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c4a:	4b6e      	ldr	r3, [pc, #440]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	496a      	ldr	r1, [pc, #424]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c6c:	4b65      	ldr	r3, [pc, #404]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	4962      	ldr	r1, [pc, #392]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c8e:	4b5d      	ldr	r3, [pc, #372]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	4959      	ldr	r1, [pc, #356]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cb0:	4b54      	ldr	r3, [pc, #336]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cb6:	f023 0203 	bic.w	r2, r3, #3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbe:	4951      	ldr	r1, [pc, #324]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cd2:	4b4c      	ldr	r3, [pc, #304]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	4948      	ldr	r1, [pc, #288]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d015      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cf4:	4b43      	ldr	r3, [pc, #268]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	4940      	ldr	r1, [pc, #256]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d12:	d105      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d14:	4b3b      	ldr	r3, [pc, #236]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4a3a      	ldr	r2, [pc, #232]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d015      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d2c:	4b35      	ldr	r3, [pc, #212]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	4932      	ldr	r1, [pc, #200]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4a:	d105      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d4c:	4b2d      	ldr	r3, [pc, #180]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4a2c      	ldr	r2, [pc, #176]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d56:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d015      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d64:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	4924      	ldr	r1, [pc, #144]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d82:	d105      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d84:	4b1f      	ldr	r3, [pc, #124]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4a1e      	ldr	r2, [pc, #120]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d015      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d9c:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005daa:	4916      	ldr	r1, [pc, #88]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dba:	d105      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dbc:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	4a10      	ldr	r2, [pc, #64]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dc6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d019      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	4908      	ldr	r1, [pc, #32]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df2:	d109      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005df4:	4b03      	ldr	r3, [pc, #12]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4a02      	ldr	r2, [pc, #8]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dfe:	60d3      	str	r3, [r2, #12]
 8005e00:	e002      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e02:	bf00      	nop
 8005e04:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d015      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e14:	4b29      	ldr	r3, [pc, #164]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e22:	4926      	ldr	r1, [pc, #152]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e32:	d105      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e34:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4a20      	ldr	r2, [pc, #128]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e3e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d015      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005e4c:	4b1b      	ldr	r3, [pc, #108]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e52:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5a:	4918      	ldr	r1, [pc, #96]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6a:	d105      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e6c:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4a12      	ldr	r2, [pc, #72]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e76:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d015      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e84:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e92:	490a      	ldr	r1, [pc, #40]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea2:	d105      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4a04      	ldr	r2, [pc, #16]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005eb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000

08005ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e049      	b.n	8005f66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fe f9da 	bl	80042a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f001 f80c 	bl	8006f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e049      	b.n	8006014 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d106      	bne.n	8005f9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f841 	bl	800601c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f000 ffb5 	bl	8006f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d109      	bne.n	8006054 <HAL_TIM_PWM_Start+0x24>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	bf14      	ite	ne
 800604c:	2301      	movne	r3, #1
 800604e:	2300      	moveq	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	e03c      	b.n	80060ce <HAL_TIM_PWM_Start+0x9e>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b04      	cmp	r3, #4
 8006058:	d109      	bne.n	800606e <HAL_TIM_PWM_Start+0x3e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	bf14      	ite	ne
 8006066:	2301      	movne	r3, #1
 8006068:	2300      	moveq	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	e02f      	b.n	80060ce <HAL_TIM_PWM_Start+0x9e>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b08      	cmp	r3, #8
 8006072:	d109      	bne.n	8006088 <HAL_TIM_PWM_Start+0x58>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	bf14      	ite	ne
 8006080:	2301      	movne	r3, #1
 8006082:	2300      	moveq	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	e022      	b.n	80060ce <HAL_TIM_PWM_Start+0x9e>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b0c      	cmp	r3, #12
 800608c:	d109      	bne.n	80060a2 <HAL_TIM_PWM_Start+0x72>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b01      	cmp	r3, #1
 8006098:	bf14      	ite	ne
 800609a:	2301      	movne	r3, #1
 800609c:	2300      	moveq	r3, #0
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	e015      	b.n	80060ce <HAL_TIM_PWM_Start+0x9e>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d109      	bne.n	80060bc <HAL_TIM_PWM_Start+0x8c>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	e008      	b.n	80060ce <HAL_TIM_PWM_Start+0x9e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	bf14      	ite	ne
 80060c8:	2301      	movne	r3, #1
 80060ca:	2300      	moveq	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e0a6      	b.n	8006224 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d104      	bne.n	80060e6 <HAL_TIM_PWM_Start+0xb6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e4:	e023      	b.n	800612e <HAL_TIM_PWM_Start+0xfe>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d104      	bne.n	80060f6 <HAL_TIM_PWM_Start+0xc6>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060f4:	e01b      	b.n	800612e <HAL_TIM_PWM_Start+0xfe>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d104      	bne.n	8006106 <HAL_TIM_PWM_Start+0xd6>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006104:	e013      	b.n	800612e <HAL_TIM_PWM_Start+0xfe>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b0c      	cmp	r3, #12
 800610a:	d104      	bne.n	8006116 <HAL_TIM_PWM_Start+0xe6>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006114:	e00b      	b.n	800612e <HAL_TIM_PWM_Start+0xfe>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b10      	cmp	r3, #16
 800611a:	d104      	bne.n	8006126 <HAL_TIM_PWM_Start+0xf6>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006124:	e003      	b.n	800612e <HAL_TIM_PWM_Start+0xfe>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2202      	movs	r2, #2
 800612a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2201      	movs	r2, #1
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f001 fc88 	bl	8007a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a3a      	ldr	r2, [pc, #232]	; (800622c <HAL_TIM_PWM_Start+0x1fc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d018      	beq.n	8006178 <HAL_TIM_PWM_Start+0x148>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a39      	ldr	r2, [pc, #228]	; (8006230 <HAL_TIM_PWM_Start+0x200>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <HAL_TIM_PWM_Start+0x148>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a37      	ldr	r2, [pc, #220]	; (8006234 <HAL_TIM_PWM_Start+0x204>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00e      	beq.n	8006178 <HAL_TIM_PWM_Start+0x148>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a36      	ldr	r2, [pc, #216]	; (8006238 <HAL_TIM_PWM_Start+0x208>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d009      	beq.n	8006178 <HAL_TIM_PWM_Start+0x148>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a34      	ldr	r2, [pc, #208]	; (800623c <HAL_TIM_PWM_Start+0x20c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d004      	beq.n	8006178 <HAL_TIM_PWM_Start+0x148>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a33      	ldr	r2, [pc, #204]	; (8006240 <HAL_TIM_PWM_Start+0x210>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d101      	bne.n	800617c <HAL_TIM_PWM_Start+0x14c>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <HAL_TIM_PWM_Start+0x14e>
 800617c:	2300      	movs	r3, #0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006190:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a25      	ldr	r2, [pc, #148]	; (800622c <HAL_TIM_PWM_Start+0x1fc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d022      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x1b2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a4:	d01d      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x1b2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a26      	ldr	r2, [pc, #152]	; (8006244 <HAL_TIM_PWM_Start+0x214>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d018      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x1b2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a24      	ldr	r2, [pc, #144]	; (8006248 <HAL_TIM_PWM_Start+0x218>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x1b2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a23      	ldr	r2, [pc, #140]	; (800624c <HAL_TIM_PWM_Start+0x21c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00e      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x1b2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a19      	ldr	r2, [pc, #100]	; (8006230 <HAL_TIM_PWM_Start+0x200>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d009      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x1b2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a18      	ldr	r2, [pc, #96]	; (8006234 <HAL_TIM_PWM_Start+0x204>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d004      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x1b2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a18      	ldr	r2, [pc, #96]	; (8006240 <HAL_TIM_PWM_Start+0x210>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d115      	bne.n	800620e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	4b19      	ldr	r3, [pc, #100]	; (8006250 <HAL_TIM_PWM_Start+0x220>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b06      	cmp	r3, #6
 80061f2:	d015      	beq.n	8006220 <HAL_TIM_PWM_Start+0x1f0>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fa:	d011      	beq.n	8006220 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620c:	e008      	b.n	8006220 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0201 	orr.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e000      	b.n	8006222 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006220:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40013400 	.word	0x40013400
 8006234:	40014000 	.word	0x40014000
 8006238:	40014400 	.word	0x40014400
 800623c:	40014800 	.word	0x40014800
 8006240:	40015000 	.word	0x40015000
 8006244:	40000400 	.word	0x40000400
 8006248:	40000800 	.word	0x40000800
 800624c:	40000c00 	.word	0x40000c00
 8006250:	00010007 	.word	0x00010007

08006254 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e049      	b.n	80062fa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f841 	bl	8006302 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3304      	adds	r3, #4
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f000 fe42 	bl	8006f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_TIM_IC_Start_IT+0x1e>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006332:	b2db      	uxtb	r3, r3
 8006334:	e023      	b.n	800637e <HAL_TIM_IC_Start_IT+0x66>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b04      	cmp	r3, #4
 800633a:	d104      	bne.n	8006346 <HAL_TIM_IC_Start_IT+0x2e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006342:	b2db      	uxtb	r3, r3
 8006344:	e01b      	b.n	800637e <HAL_TIM_IC_Start_IT+0x66>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d104      	bne.n	8006356 <HAL_TIM_IC_Start_IT+0x3e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006352:	b2db      	uxtb	r3, r3
 8006354:	e013      	b.n	800637e <HAL_TIM_IC_Start_IT+0x66>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b0c      	cmp	r3, #12
 800635a:	d104      	bne.n	8006366 <HAL_TIM_IC_Start_IT+0x4e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006362:	b2db      	uxtb	r3, r3
 8006364:	e00b      	b.n	800637e <HAL_TIM_IC_Start_IT+0x66>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b10      	cmp	r3, #16
 800636a:	d104      	bne.n	8006376 <HAL_TIM_IC_Start_IT+0x5e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006372:	b2db      	uxtb	r3, r3
 8006374:	e003      	b.n	800637e <HAL_TIM_IC_Start_IT+0x66>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800637c:	b2db      	uxtb	r3, r3
 800637e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d104      	bne.n	8006390 <HAL_TIM_IC_Start_IT+0x78>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800638c:	b2db      	uxtb	r3, r3
 800638e:	e013      	b.n	80063b8 <HAL_TIM_IC_Start_IT+0xa0>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b04      	cmp	r3, #4
 8006394:	d104      	bne.n	80063a0 <HAL_TIM_IC_Start_IT+0x88>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e00b      	b.n	80063b8 <HAL_TIM_IC_Start_IT+0xa0>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b08      	cmp	r3, #8
 80063a4:	d104      	bne.n	80063b0 <HAL_TIM_IC_Start_IT+0x98>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e003      	b.n	80063b8 <HAL_TIM_IC_Start_IT+0xa0>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d102      	bne.n	80063c6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80063c0:	7b7b      	ldrb	r3, [r7, #13]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d001      	beq.n	80063ca <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e0e2      	b.n	8006590 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d104      	bne.n	80063da <HAL_TIM_IC_Start_IT+0xc2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d8:	e023      	b.n	8006422 <HAL_TIM_IC_Start_IT+0x10a>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d104      	bne.n	80063ea <HAL_TIM_IC_Start_IT+0xd2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e8:	e01b      	b.n	8006422 <HAL_TIM_IC_Start_IT+0x10a>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d104      	bne.n	80063fa <HAL_TIM_IC_Start_IT+0xe2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063f8:	e013      	b.n	8006422 <HAL_TIM_IC_Start_IT+0x10a>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b0c      	cmp	r3, #12
 80063fe:	d104      	bne.n	800640a <HAL_TIM_IC_Start_IT+0xf2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006408:	e00b      	b.n	8006422 <HAL_TIM_IC_Start_IT+0x10a>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b10      	cmp	r3, #16
 800640e:	d104      	bne.n	800641a <HAL_TIM_IC_Start_IT+0x102>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006418:	e003      	b.n	8006422 <HAL_TIM_IC_Start_IT+0x10a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d104      	bne.n	8006432 <HAL_TIM_IC_Start_IT+0x11a>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006430:	e013      	b.n	800645a <HAL_TIM_IC_Start_IT+0x142>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b04      	cmp	r3, #4
 8006436:	d104      	bne.n	8006442 <HAL_TIM_IC_Start_IT+0x12a>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006440:	e00b      	b.n	800645a <HAL_TIM_IC_Start_IT+0x142>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b08      	cmp	r3, #8
 8006446:	d104      	bne.n	8006452 <HAL_TIM_IC_Start_IT+0x13a>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006450:	e003      	b.n	800645a <HAL_TIM_IC_Start_IT+0x142>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b0c      	cmp	r3, #12
 800645e:	d841      	bhi.n	80064e4 <HAL_TIM_IC_Start_IT+0x1cc>
 8006460:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <HAL_TIM_IC_Start_IT+0x150>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	0800649d 	.word	0x0800649d
 800646c:	080064e5 	.word	0x080064e5
 8006470:	080064e5 	.word	0x080064e5
 8006474:	080064e5 	.word	0x080064e5
 8006478:	080064af 	.word	0x080064af
 800647c:	080064e5 	.word	0x080064e5
 8006480:	080064e5 	.word	0x080064e5
 8006484:	080064e5 	.word	0x080064e5
 8006488:	080064c1 	.word	0x080064c1
 800648c:	080064e5 	.word	0x080064e5
 8006490:	080064e5 	.word	0x080064e5
 8006494:	080064e5 	.word	0x080064e5
 8006498:	080064d3 	.word	0x080064d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0202 	orr.w	r2, r2, #2
 80064aa:	60da      	str	r2, [r3, #12]
      break;
 80064ac:	e01d      	b.n	80064ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f042 0204 	orr.w	r2, r2, #4
 80064bc:	60da      	str	r2, [r3, #12]
      break;
 80064be:	e014      	b.n	80064ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0208 	orr.w	r2, r2, #8
 80064ce:	60da      	str	r2, [r3, #12]
      break;
 80064d0:	e00b      	b.n	80064ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0210 	orr.w	r2, r2, #16
 80064e0:	60da      	str	r2, [r3, #12]
      break;
 80064e2:	e002      	b.n	80064ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	73fb      	strb	r3, [r7, #15]
      break;
 80064e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d14e      	bne.n	800658e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2201      	movs	r2, #1
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f001 faa7 	bl	8007a4c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a25      	ldr	r2, [pc, #148]	; (8006598 <HAL_TIM_IC_Start_IT+0x280>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d022      	beq.n	800654e <HAL_TIM_IC_Start_IT+0x236>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006510:	d01d      	beq.n	800654e <HAL_TIM_IC_Start_IT+0x236>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_TIM_IC_Start_IT+0x284>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d018      	beq.n	800654e <HAL_TIM_IC_Start_IT+0x236>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <HAL_TIM_IC_Start_IT+0x288>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <HAL_TIM_IC_Start_IT+0x236>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <HAL_TIM_IC_Start_IT+0x28c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00e      	beq.n	800654e <HAL_TIM_IC_Start_IT+0x236>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <HAL_TIM_IC_Start_IT+0x290>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d009      	beq.n	800654e <HAL_TIM_IC_Start_IT+0x236>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1b      	ldr	r2, [pc, #108]	; (80065ac <HAL_TIM_IC_Start_IT+0x294>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d004      	beq.n	800654e <HAL_TIM_IC_Start_IT+0x236>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a19      	ldr	r2, [pc, #100]	; (80065b0 <HAL_TIM_IC_Start_IT+0x298>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d115      	bne.n	800657a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	4b17      	ldr	r3, [pc, #92]	; (80065b4 <HAL_TIM_IC_Start_IT+0x29c>)
 8006556:	4013      	ands	r3, r2
 8006558:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b06      	cmp	r3, #6
 800655e:	d015      	beq.n	800658c <HAL_TIM_IC_Start_IT+0x274>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006566:	d011      	beq.n	800658c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006578:	e008      	b.n	800658c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 0201 	orr.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	e000      	b.n	800658e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40012c00 	.word	0x40012c00
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40013400 	.word	0x40013400
 80065ac:	40014000 	.word	0x40014000
 80065b0:	40015000 	.word	0x40015000
 80065b4:	00010007 	.word	0x00010007

080065b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d122      	bne.n	8006614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d11b      	bne.n	8006614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0202 	mvn.w	r2, #2
 80065e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fa fcb8 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 8006600:	e005      	b.n	800660e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fc6c 	bl	8006ee0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fc73 	bl	8006ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b04      	cmp	r3, #4
 8006620:	d122      	bne.n	8006668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b04      	cmp	r3, #4
 800662e:	d11b      	bne.n	8006668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0204 	mvn.w	r2, #4
 8006638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2202      	movs	r2, #2
 800663e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fa fc8e 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 8006654:	e005      	b.n	8006662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fc42 	bl	8006ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fc49 	bl	8006ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b08      	cmp	r3, #8
 8006674:	d122      	bne.n	80066bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b08      	cmp	r3, #8
 8006682:	d11b      	bne.n	80066bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0208 	mvn.w	r2, #8
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2204      	movs	r2, #4
 8006692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fa fc64 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 80066a8:	e005      	b.n	80066b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fc18 	bl	8006ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fc1f 	bl	8006ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d122      	bne.n	8006710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d11b      	bne.n	8006710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 0210 	mvn.w	r2, #16
 80066e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2208      	movs	r2, #8
 80066e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fa fc3a 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 80066fc:	e005      	b.n	800670a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fbee 	bl	8006ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fbf5 	bl	8006ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b01      	cmp	r3, #1
 800671c:	d10e      	bne.n	800673c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b01      	cmp	r3, #1
 800672a:	d107      	bne.n	800673c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0201 	mvn.w	r2, #1
 8006734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fbc8 	bl	8006ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006746:	2b80      	cmp	r3, #128	; 0x80
 8006748:	d10e      	bne.n	8006768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006754:	2b80      	cmp	r3, #128	; 0x80
 8006756:	d107      	bne.n	8006768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 faea 	bl	8007d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006776:	d10e      	bne.n	8006796 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006782:	2b80      	cmp	r3, #128	; 0x80
 8006784:	d107      	bne.n	8006796 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800678e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fadd 	bl	8007d50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a0:	2b40      	cmp	r3, #64	; 0x40
 80067a2:	d10e      	bne.n	80067c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d107      	bne.n	80067c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fba3 	bl	8006f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d10e      	bne.n	80067ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d107      	bne.n	80067ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f06f 0220 	mvn.w	r2, #32
 80067e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 fa9d 	bl	8007d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067fc:	d10f      	bne.n	800681e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800680c:	d107      	bne.n	800681e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 faa3 	bl	8007d64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800682c:	d10f      	bne.n	800684e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800683c:	d107      	bne.n	800684e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fa95 	bl	8007d78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800685c:	d10f      	bne.n	800687e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800686c:	d107      	bne.n	800687e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 fa87 	bl	8007d8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006888:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800688c:	d10f      	bne.n	80068ae <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006898:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800689c:	d107      	bne.n	80068ae <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80068a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 fa79 	bl	8007da0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ae:	bf00      	nop
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b086      	sub	sp, #24
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e088      	b.n	80069e6 <HAL_TIM_IC_ConfigChannel+0x130>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d11b      	bne.n	800691a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6819      	ldr	r1, [r3, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f000 fee5 	bl	80076c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699a      	ldr	r2, [r3, #24]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 020c 	bic.w	r2, r2, #12
 8006904:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6999      	ldr	r1, [r3, #24]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	619a      	str	r2, [r3, #24]
 8006918:	e060      	b.n	80069dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b04      	cmp	r3, #4
 800691e:	d11c      	bne.n	800695a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	6819      	ldr	r1, [r3, #0]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f000 ff69 	bl	8007806 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006942:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6999      	ldr	r1, [r3, #24]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	021a      	lsls	r2, r3, #8
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	619a      	str	r2, [r3, #24]
 8006958:	e040      	b.n	80069dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d11b      	bne.n	8006998 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6819      	ldr	r1, [r3, #0]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f000 ffb6 	bl	80078e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69da      	ldr	r2, [r3, #28]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 020c 	bic.w	r2, r2, #12
 8006982:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69d9      	ldr	r1, [r3, #28]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	61da      	str	r2, [r3, #28]
 8006996:	e021      	b.n	80069dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b0c      	cmp	r3, #12
 800699c:	d11c      	bne.n	80069d8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6819      	ldr	r1, [r3, #0]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f000 ffd3 	bl	8007958 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69d9      	ldr	r1, [r3, #28]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	021a      	lsls	r2, r3, #8
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	61da      	str	r2, [r3, #28]
 80069d6:	e001      	b.n	80069dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e0ff      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b14      	cmp	r3, #20
 8006a1a:	f200 80f0 	bhi.w	8006bfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a1e:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a79 	.word	0x08006a79
 8006a28:	08006bff 	.word	0x08006bff
 8006a2c:	08006bff 	.word	0x08006bff
 8006a30:	08006bff 	.word	0x08006bff
 8006a34:	08006ab9 	.word	0x08006ab9
 8006a38:	08006bff 	.word	0x08006bff
 8006a3c:	08006bff 	.word	0x08006bff
 8006a40:	08006bff 	.word	0x08006bff
 8006a44:	08006afb 	.word	0x08006afb
 8006a48:	08006bff 	.word	0x08006bff
 8006a4c:	08006bff 	.word	0x08006bff
 8006a50:	08006bff 	.word	0x08006bff
 8006a54:	08006b3b 	.word	0x08006b3b
 8006a58:	08006bff 	.word	0x08006bff
 8006a5c:	08006bff 	.word	0x08006bff
 8006a60:	08006bff 	.word	0x08006bff
 8006a64:	08006b7d 	.word	0x08006b7d
 8006a68:	08006bff 	.word	0x08006bff
 8006a6c:	08006bff 	.word	0x08006bff
 8006a70:	08006bff 	.word	0x08006bff
 8006a74:	08006bbd 	.word	0x08006bbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 faf4 	bl	800706c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0208 	orr.w	r2, r2, #8
 8006a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0204 	bic.w	r2, r2, #4
 8006aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6999      	ldr	r1, [r3, #24]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	691a      	ldr	r2, [r3, #16]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	619a      	str	r2, [r3, #24]
      break;
 8006ab6:	e0a5      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fb6e 	bl	80071a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6999      	ldr	r1, [r3, #24]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	021a      	lsls	r2, r3, #8
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	619a      	str	r2, [r3, #24]
      break;
 8006af8:	e084      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fbe1 	bl	80072c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0208 	orr.w	r2, r2, #8
 8006b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0204 	bic.w	r2, r2, #4
 8006b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69d9      	ldr	r1, [r3, #28]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	61da      	str	r2, [r3, #28]
      break;
 8006b38:	e064      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fc53 	bl	80073ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69da      	ldr	r2, [r3, #28]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69da      	ldr	r2, [r3, #28]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69d9      	ldr	r1, [r3, #28]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	021a      	lsls	r2, r3, #8
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	61da      	str	r2, [r3, #28]
      break;
 8006b7a:	e043      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fcc6 	bl	8007514 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0208 	orr.w	r2, r2, #8
 8006b96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0204 	bic.w	r2, r2, #4
 8006ba6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006bba:	e023      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fd10 	bl	80075e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	021a      	lsls	r2, r3, #8
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006bfc:	e002      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	75fb      	strb	r3, [r7, #23]
      break;
 8006c02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop

08006c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d101      	bne.n	8006c34 <HAL_TIM_ConfigClockSource+0x1c>
 8006c30:	2302      	movs	r3, #2
 8006c32:	e0f6      	b.n	8006e22 <HAL_TIM_ConfigClockSource+0x20a>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a6f      	ldr	r2, [pc, #444]	; (8006e2c <HAL_TIM_ConfigClockSource+0x214>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	f000 80c1 	beq.w	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006c74:	4a6d      	ldr	r2, [pc, #436]	; (8006e2c <HAL_TIM_ConfigClockSource+0x214>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	f200 80c6 	bhi.w	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c7c:	4a6c      	ldr	r2, [pc, #432]	; (8006e30 <HAL_TIM_ConfigClockSource+0x218>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	f000 80b9 	beq.w	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006c84:	4a6a      	ldr	r2, [pc, #424]	; (8006e30 <HAL_TIM_ConfigClockSource+0x218>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	f200 80be 	bhi.w	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c8c:	4a69      	ldr	r2, [pc, #420]	; (8006e34 <HAL_TIM_ConfigClockSource+0x21c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	f000 80b1 	beq.w	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006c94:	4a67      	ldr	r2, [pc, #412]	; (8006e34 <HAL_TIM_ConfigClockSource+0x21c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	f200 80b6 	bhi.w	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c9c:	4a66      	ldr	r2, [pc, #408]	; (8006e38 <HAL_TIM_ConfigClockSource+0x220>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	f000 80a9 	beq.w	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006ca4:	4a64      	ldr	r2, [pc, #400]	; (8006e38 <HAL_TIM_ConfigClockSource+0x220>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	f200 80ae 	bhi.w	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cac:	4a63      	ldr	r2, [pc, #396]	; (8006e3c <HAL_TIM_ConfigClockSource+0x224>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	f000 80a1 	beq.w	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006cb4:	4a61      	ldr	r2, [pc, #388]	; (8006e3c <HAL_TIM_ConfigClockSource+0x224>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	f200 80a6 	bhi.w	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cbc:	4a60      	ldr	r2, [pc, #384]	; (8006e40 <HAL_TIM_ConfigClockSource+0x228>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	f000 8099 	beq.w	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006cc4:	4a5e      	ldr	r2, [pc, #376]	; (8006e40 <HAL_TIM_ConfigClockSource+0x228>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	f200 809e 	bhi.w	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ccc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006cd0:	f000 8091 	beq.w	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006cd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006cd8:	f200 8096 	bhi.w	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ce0:	f000 8089 	beq.w	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ce8:	f200 808e 	bhi.w	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf0:	d03e      	beq.n	8006d70 <HAL_TIM_ConfigClockSource+0x158>
 8006cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf6:	f200 8087 	bhi.w	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfe:	f000 8086 	beq.w	8006e0e <HAL_TIM_ConfigClockSource+0x1f6>
 8006d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d06:	d87f      	bhi.n	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d08:	2b70      	cmp	r3, #112	; 0x70
 8006d0a:	d01a      	beq.n	8006d42 <HAL_TIM_ConfigClockSource+0x12a>
 8006d0c:	2b70      	cmp	r3, #112	; 0x70
 8006d0e:	d87b      	bhi.n	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d10:	2b60      	cmp	r3, #96	; 0x60
 8006d12:	d050      	beq.n	8006db6 <HAL_TIM_ConfigClockSource+0x19e>
 8006d14:	2b60      	cmp	r3, #96	; 0x60
 8006d16:	d877      	bhi.n	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d18:	2b50      	cmp	r3, #80	; 0x50
 8006d1a:	d03c      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0x17e>
 8006d1c:	2b50      	cmp	r3, #80	; 0x50
 8006d1e:	d873      	bhi.n	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d20:	2b40      	cmp	r3, #64	; 0x40
 8006d22:	d058      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x1be>
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	d86f      	bhi.n	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d28:	2b30      	cmp	r3, #48	; 0x30
 8006d2a:	d064      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d2c:	2b30      	cmp	r3, #48	; 0x30
 8006d2e:	d86b      	bhi.n	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d060      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d867      	bhi.n	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d05c      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d3c:	2b10      	cmp	r3, #16
 8006d3e:	d05a      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d40:	e062      	b.n	8006e08 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	6899      	ldr	r1, [r3, #8]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f000 fe5b 	bl	8007a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	609a      	str	r2, [r3, #8]
      break;
 8006d6e:	e04f      	b.n	8006e10 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6818      	ldr	r0, [r3, #0]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	6899      	ldr	r1, [r3, #8]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f000 fe44 	bl	8007a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d92:	609a      	str	r2, [r3, #8]
      break;
 8006d94:	e03c      	b.n	8006e10 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	6859      	ldr	r1, [r3, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f000 fd00 	bl	80077a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2150      	movs	r1, #80	; 0x50
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fe0f 	bl	80079d2 <TIM_ITRx_SetConfig>
      break;
 8006db4:	e02c      	b.n	8006e10 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6859      	ldr	r1, [r3, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f000 fd5c 	bl	8007880 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2160      	movs	r1, #96	; 0x60
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fdff 	bl	80079d2 <TIM_ITRx_SetConfig>
      break;
 8006dd4:	e01c      	b.n	8006e10 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6859      	ldr	r1, [r3, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	461a      	mov	r2, r3
 8006de4:	f000 fce0 	bl	80077a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2140      	movs	r1, #64	; 0x40
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fdef 	bl	80079d2 <TIM_ITRx_SetConfig>
      break;
 8006df4:	e00c      	b.n	8006e10 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4610      	mov	r0, r2
 8006e02:	f000 fde6 	bl	80079d2 <TIM_ITRx_SetConfig>
      break;
 8006e06:	e003      	b.n	8006e10 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0c:	e000      	b.n	8006e10 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	00100070 	.word	0x00100070
 8006e30:	00100060 	.word	0x00100060
 8006e34:	00100050 	.word	0x00100050
 8006e38:	00100040 	.word	0x00100040
 8006e3c:	00100030 	.word	0x00100030
 8006e40:	00100020 	.word	0x00100020

08006e44 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b0c      	cmp	r3, #12
 8006e56:	d831      	bhi.n	8006ebc <HAL_TIM_ReadCapturedValue+0x78>
 8006e58:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e95 	.word	0x08006e95
 8006e64:	08006ebd 	.word	0x08006ebd
 8006e68:	08006ebd 	.word	0x08006ebd
 8006e6c:	08006ebd 	.word	0x08006ebd
 8006e70:	08006e9f 	.word	0x08006e9f
 8006e74:	08006ebd 	.word	0x08006ebd
 8006e78:	08006ebd 	.word	0x08006ebd
 8006e7c:	08006ebd 	.word	0x08006ebd
 8006e80:	08006ea9 	.word	0x08006ea9
 8006e84:	08006ebd 	.word	0x08006ebd
 8006e88:	08006ebd 	.word	0x08006ebd
 8006e8c:	08006ebd 	.word	0x08006ebd
 8006e90:	08006eb3 	.word	0x08006eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9a:	60fb      	str	r3, [r7, #12]

      break;
 8006e9c:	e00f      	b.n	8006ebe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	60fb      	str	r3, [r7, #12]

      break;
 8006ea6:	e00a      	b.n	8006ebe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eae:	60fb      	str	r3, [r7, #12]

      break;
 8006eb0:	e005      	b.n	8006ebe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	60fb      	str	r3, [r7, #12]

      break;
 8006eba:	e000      	b.n	8006ebe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006ebc:	bf00      	nop
  }

  return tmpreg;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a46      	ldr	r2, [pc, #280]	; (8007048 <TIM_Base_SetConfig+0x12c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d017      	beq.n	8006f64 <TIM_Base_SetConfig+0x48>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3a:	d013      	beq.n	8006f64 <TIM_Base_SetConfig+0x48>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a43      	ldr	r2, [pc, #268]	; (800704c <TIM_Base_SetConfig+0x130>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d00f      	beq.n	8006f64 <TIM_Base_SetConfig+0x48>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a42      	ldr	r2, [pc, #264]	; (8007050 <TIM_Base_SetConfig+0x134>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00b      	beq.n	8006f64 <TIM_Base_SetConfig+0x48>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a41      	ldr	r2, [pc, #260]	; (8007054 <TIM_Base_SetConfig+0x138>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d007      	beq.n	8006f64 <TIM_Base_SetConfig+0x48>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a40      	ldr	r2, [pc, #256]	; (8007058 <TIM_Base_SetConfig+0x13c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_Base_SetConfig+0x48>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a3f      	ldr	r2, [pc, #252]	; (800705c <TIM_Base_SetConfig+0x140>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d108      	bne.n	8006f76 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a33      	ldr	r2, [pc, #204]	; (8007048 <TIM_Base_SetConfig+0x12c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d023      	beq.n	8006fc6 <TIM_Base_SetConfig+0xaa>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f84:	d01f      	beq.n	8006fc6 <TIM_Base_SetConfig+0xaa>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a30      	ldr	r2, [pc, #192]	; (800704c <TIM_Base_SetConfig+0x130>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d01b      	beq.n	8006fc6 <TIM_Base_SetConfig+0xaa>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <TIM_Base_SetConfig+0x134>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d017      	beq.n	8006fc6 <TIM_Base_SetConfig+0xaa>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a2e      	ldr	r2, [pc, #184]	; (8007054 <TIM_Base_SetConfig+0x138>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <TIM_Base_SetConfig+0xaa>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a2d      	ldr	r2, [pc, #180]	; (8007058 <TIM_Base_SetConfig+0x13c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00f      	beq.n	8006fc6 <TIM_Base_SetConfig+0xaa>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a2d      	ldr	r2, [pc, #180]	; (8007060 <TIM_Base_SetConfig+0x144>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00b      	beq.n	8006fc6 <TIM_Base_SetConfig+0xaa>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2c      	ldr	r2, [pc, #176]	; (8007064 <TIM_Base_SetConfig+0x148>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d007      	beq.n	8006fc6 <TIM_Base_SetConfig+0xaa>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2b      	ldr	r2, [pc, #172]	; (8007068 <TIM_Base_SetConfig+0x14c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d003      	beq.n	8006fc6 <TIM_Base_SetConfig+0xaa>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a26      	ldr	r2, [pc, #152]	; (800705c <TIM_Base_SetConfig+0x140>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d108      	bne.n	8006fd8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a12      	ldr	r2, [pc, #72]	; (8007048 <TIM_Base_SetConfig+0x12c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <TIM_Base_SetConfig+0x110>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a14      	ldr	r2, [pc, #80]	; (8007058 <TIM_Base_SetConfig+0x13c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00f      	beq.n	800702c <TIM_Base_SetConfig+0x110>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a14      	ldr	r2, [pc, #80]	; (8007060 <TIM_Base_SetConfig+0x144>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00b      	beq.n	800702c <TIM_Base_SetConfig+0x110>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a13      	ldr	r2, [pc, #76]	; (8007064 <TIM_Base_SetConfig+0x148>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d007      	beq.n	800702c <TIM_Base_SetConfig+0x110>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a12      	ldr	r2, [pc, #72]	; (8007068 <TIM_Base_SetConfig+0x14c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d003      	beq.n	800702c <TIM_Base_SetConfig+0x110>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a0d      	ldr	r2, [pc, #52]	; (800705c <TIM_Base_SetConfig+0x140>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d103      	bne.n	8007034 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	615a      	str	r2, [r3, #20]
}
 800703a:	bf00      	nop
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40012c00 	.word	0x40012c00
 800704c:	40000400 	.word	0x40000400
 8007050:	40000800 	.word	0x40000800
 8007054:	40000c00 	.word	0x40000c00
 8007058:	40013400 	.word	0x40013400
 800705c:	40015000 	.word	0x40015000
 8007060:	40014000 	.word	0x40014000
 8007064:	40014400 	.word	0x40014400
 8007068:	40014800 	.word	0x40014800

0800706c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f023 0201 	bic.w	r2, r3, #1
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f023 0302 	bic.w	r3, r3, #2
 80070b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a30      	ldr	r2, [pc, #192]	; (8007188 <TIM_OC1_SetConfig+0x11c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <TIM_OC1_SetConfig+0x88>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a2f      	ldr	r2, [pc, #188]	; (800718c <TIM_OC1_SetConfig+0x120>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00f      	beq.n	80070f4 <TIM_OC1_SetConfig+0x88>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a2e      	ldr	r2, [pc, #184]	; (8007190 <TIM_OC1_SetConfig+0x124>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00b      	beq.n	80070f4 <TIM_OC1_SetConfig+0x88>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a2d      	ldr	r2, [pc, #180]	; (8007194 <TIM_OC1_SetConfig+0x128>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d007      	beq.n	80070f4 <TIM_OC1_SetConfig+0x88>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a2c      	ldr	r2, [pc, #176]	; (8007198 <TIM_OC1_SetConfig+0x12c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d003      	beq.n	80070f4 <TIM_OC1_SetConfig+0x88>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a2b      	ldr	r2, [pc, #172]	; (800719c <TIM_OC1_SetConfig+0x130>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d10c      	bne.n	800710e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f023 0308 	bic.w	r3, r3, #8
 80070fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f023 0304 	bic.w	r3, r3, #4
 800710c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <TIM_OC1_SetConfig+0x11c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d013      	beq.n	800713e <TIM_OC1_SetConfig+0xd2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a1c      	ldr	r2, [pc, #112]	; (800718c <TIM_OC1_SetConfig+0x120>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00f      	beq.n	800713e <TIM_OC1_SetConfig+0xd2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <TIM_OC1_SetConfig+0x124>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00b      	beq.n	800713e <TIM_OC1_SetConfig+0xd2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a1a      	ldr	r2, [pc, #104]	; (8007194 <TIM_OC1_SetConfig+0x128>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d007      	beq.n	800713e <TIM_OC1_SetConfig+0xd2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a19      	ldr	r2, [pc, #100]	; (8007198 <TIM_OC1_SetConfig+0x12c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d003      	beq.n	800713e <TIM_OC1_SetConfig+0xd2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a18      	ldr	r2, [pc, #96]	; (800719c <TIM_OC1_SetConfig+0x130>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d111      	bne.n	8007162 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800714c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	621a      	str	r2, [r3, #32]
}
 800717c:	bf00      	nop
 800717e:	371c      	adds	r7, #28
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	40012c00 	.word	0x40012c00
 800718c:	40013400 	.word	0x40013400
 8007190:	40014000 	.word	0x40014000
 8007194:	40014400 	.word	0x40014400
 8007198:	40014800 	.word	0x40014800
 800719c:	40015000 	.word	0x40015000

080071a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f023 0210 	bic.w	r2, r3, #16
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f023 0320 	bic.w	r3, r3, #32
 80071ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <TIM_OC2_SetConfig+0x110>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d007      	beq.n	8007214 <TIM_OC2_SetConfig+0x74>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a2b      	ldr	r2, [pc, #172]	; (80072b4 <TIM_OC2_SetConfig+0x114>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d003      	beq.n	8007214 <TIM_OC2_SetConfig+0x74>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a2a      	ldr	r2, [pc, #168]	; (80072b8 <TIM_OC2_SetConfig+0x118>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d10d      	bne.n	8007230 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800721a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	011b      	lsls	r3, r3, #4
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800722e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a1f      	ldr	r2, [pc, #124]	; (80072b0 <TIM_OC2_SetConfig+0x110>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d013      	beq.n	8007260 <TIM_OC2_SetConfig+0xc0>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a1e      	ldr	r2, [pc, #120]	; (80072b4 <TIM_OC2_SetConfig+0x114>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00f      	beq.n	8007260 <TIM_OC2_SetConfig+0xc0>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a1e      	ldr	r2, [pc, #120]	; (80072bc <TIM_OC2_SetConfig+0x11c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00b      	beq.n	8007260 <TIM_OC2_SetConfig+0xc0>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a1d      	ldr	r2, [pc, #116]	; (80072c0 <TIM_OC2_SetConfig+0x120>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d007      	beq.n	8007260 <TIM_OC2_SetConfig+0xc0>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a1c      	ldr	r2, [pc, #112]	; (80072c4 <TIM_OC2_SetConfig+0x124>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_OC2_SetConfig+0xc0>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <TIM_OC2_SetConfig+0x118>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d113      	bne.n	8007288 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800726e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	621a      	str	r2, [r3, #32]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	40012c00 	.word	0x40012c00
 80072b4:	40013400 	.word	0x40013400
 80072b8:	40015000 	.word	0x40015000
 80072bc:	40014000 	.word	0x40014000
 80072c0:	40014400 	.word	0x40014400
 80072c4:	40014800 	.word	0x40014800

080072c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0303 	bic.w	r3, r3, #3
 8007302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	021b      	lsls	r3, r3, #8
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a2b      	ldr	r2, [pc, #172]	; (80073d4 <TIM_OC3_SetConfig+0x10c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d007      	beq.n	800733a <TIM_OC3_SetConfig+0x72>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a2a      	ldr	r2, [pc, #168]	; (80073d8 <TIM_OC3_SetConfig+0x110>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d003      	beq.n	800733a <TIM_OC3_SetConfig+0x72>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a29      	ldr	r2, [pc, #164]	; (80073dc <TIM_OC3_SetConfig+0x114>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d10d      	bne.n	8007356 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	021b      	lsls	r3, r3, #8
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a1e      	ldr	r2, [pc, #120]	; (80073d4 <TIM_OC3_SetConfig+0x10c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d013      	beq.n	8007386 <TIM_OC3_SetConfig+0xbe>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a1d      	ldr	r2, [pc, #116]	; (80073d8 <TIM_OC3_SetConfig+0x110>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00f      	beq.n	8007386 <TIM_OC3_SetConfig+0xbe>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a1d      	ldr	r2, [pc, #116]	; (80073e0 <TIM_OC3_SetConfig+0x118>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00b      	beq.n	8007386 <TIM_OC3_SetConfig+0xbe>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a1c      	ldr	r2, [pc, #112]	; (80073e4 <TIM_OC3_SetConfig+0x11c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d007      	beq.n	8007386 <TIM_OC3_SetConfig+0xbe>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a1b      	ldr	r2, [pc, #108]	; (80073e8 <TIM_OC3_SetConfig+0x120>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d003      	beq.n	8007386 <TIM_OC3_SetConfig+0xbe>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a16      	ldr	r2, [pc, #88]	; (80073dc <TIM_OC3_SetConfig+0x114>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d113      	bne.n	80073ae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800738c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	4313      	orrs	r3, r2
 80073a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	621a      	str	r2, [r3, #32]
}
 80073c8:	bf00      	nop
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	40012c00 	.word	0x40012c00
 80073d8:	40013400 	.word	0x40013400
 80073dc:	40015000 	.word	0x40015000
 80073e0:	40014000 	.word	0x40014000
 80073e4:	40014400 	.word	0x40014400
 80073e8:	40014800 	.word	0x40014800

080073ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800741a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800743a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	031b      	lsls	r3, r3, #12
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a2c      	ldr	r2, [pc, #176]	; (80074fc <TIM_OC4_SetConfig+0x110>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d007      	beq.n	8007460 <TIM_OC4_SetConfig+0x74>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a2b      	ldr	r2, [pc, #172]	; (8007500 <TIM_OC4_SetConfig+0x114>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d003      	beq.n	8007460 <TIM_OC4_SetConfig+0x74>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a2a      	ldr	r2, [pc, #168]	; (8007504 <TIM_OC4_SetConfig+0x118>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d10d      	bne.n	800747c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	031b      	lsls	r3, r3, #12
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800747a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a1f      	ldr	r2, [pc, #124]	; (80074fc <TIM_OC4_SetConfig+0x110>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d013      	beq.n	80074ac <TIM_OC4_SetConfig+0xc0>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a1e      	ldr	r2, [pc, #120]	; (8007500 <TIM_OC4_SetConfig+0x114>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00f      	beq.n	80074ac <TIM_OC4_SetConfig+0xc0>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a1e      	ldr	r2, [pc, #120]	; (8007508 <TIM_OC4_SetConfig+0x11c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00b      	beq.n	80074ac <TIM_OC4_SetConfig+0xc0>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a1d      	ldr	r2, [pc, #116]	; (800750c <TIM_OC4_SetConfig+0x120>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d007      	beq.n	80074ac <TIM_OC4_SetConfig+0xc0>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a1c      	ldr	r2, [pc, #112]	; (8007510 <TIM_OC4_SetConfig+0x124>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d003      	beq.n	80074ac <TIM_OC4_SetConfig+0xc0>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a17      	ldr	r2, [pc, #92]	; (8007504 <TIM_OC4_SetConfig+0x118>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d113      	bne.n	80074d4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	019b      	lsls	r3, r3, #6
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	019b      	lsls	r3, r3, #6
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	621a      	str	r2, [r3, #32]
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40012c00 	.word	0x40012c00
 8007500:	40013400 	.word	0x40013400
 8007504:	40015000 	.word	0x40015000
 8007508:	40014000 	.word	0x40014000
 800750c:	40014400 	.word	0x40014400
 8007510:	40014800 	.word	0x40014800

08007514 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007558:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	041b      	lsls	r3, r3, #16
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4313      	orrs	r3, r2
 8007564:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a19      	ldr	r2, [pc, #100]	; (80075d0 <TIM_OC5_SetConfig+0xbc>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <TIM_OC5_SetConfig+0x82>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a18      	ldr	r2, [pc, #96]	; (80075d4 <TIM_OC5_SetConfig+0xc0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00f      	beq.n	8007596 <TIM_OC5_SetConfig+0x82>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a17      	ldr	r2, [pc, #92]	; (80075d8 <TIM_OC5_SetConfig+0xc4>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00b      	beq.n	8007596 <TIM_OC5_SetConfig+0x82>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a16      	ldr	r2, [pc, #88]	; (80075dc <TIM_OC5_SetConfig+0xc8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d007      	beq.n	8007596 <TIM_OC5_SetConfig+0x82>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a15      	ldr	r2, [pc, #84]	; (80075e0 <TIM_OC5_SetConfig+0xcc>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d003      	beq.n	8007596 <TIM_OC5_SetConfig+0x82>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a14      	ldr	r2, [pc, #80]	; (80075e4 <TIM_OC5_SetConfig+0xd0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d109      	bne.n	80075aa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800759c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	621a      	str	r2, [r3, #32]
}
 80075c4:	bf00      	nop
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	40012c00 	.word	0x40012c00
 80075d4:	40013400 	.word	0x40013400
 80075d8:	40014000 	.word	0x40014000
 80075dc:	40014400 	.word	0x40014400
 80075e0:	40014800 	.word	0x40014800
 80075e4:	40015000 	.word	0x40015000

080075e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	4313      	orrs	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800762e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	051b      	lsls	r3, r3, #20
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	4313      	orrs	r3, r2
 800763a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a1a      	ldr	r2, [pc, #104]	; (80076a8 <TIM_OC6_SetConfig+0xc0>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d013      	beq.n	800766c <TIM_OC6_SetConfig+0x84>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a19      	ldr	r2, [pc, #100]	; (80076ac <TIM_OC6_SetConfig+0xc4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00f      	beq.n	800766c <TIM_OC6_SetConfig+0x84>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a18      	ldr	r2, [pc, #96]	; (80076b0 <TIM_OC6_SetConfig+0xc8>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d00b      	beq.n	800766c <TIM_OC6_SetConfig+0x84>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a17      	ldr	r2, [pc, #92]	; (80076b4 <TIM_OC6_SetConfig+0xcc>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d007      	beq.n	800766c <TIM_OC6_SetConfig+0x84>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a16      	ldr	r2, [pc, #88]	; (80076b8 <TIM_OC6_SetConfig+0xd0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d003      	beq.n	800766c <TIM_OC6_SetConfig+0x84>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a15      	ldr	r2, [pc, #84]	; (80076bc <TIM_OC6_SetConfig+0xd4>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d109      	bne.n	8007680 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007672:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	029b      	lsls	r3, r3, #10
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	4313      	orrs	r3, r2
 800767e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	621a      	str	r2, [r3, #32]
}
 800769a:	bf00      	nop
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	40012c00 	.word	0x40012c00
 80076ac:	40013400 	.word	0x40013400
 80076b0:	40014000 	.word	0x40014000
 80076b4:	40014400 	.word	0x40014400
 80076b8:	40014800 	.word	0x40014800
 80076bc:	40015000 	.word	0x40015000

080076c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	f023 0201 	bic.w	r2, r3, #1
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4a28      	ldr	r2, [pc, #160]	; (800778c <TIM_TI1_SetConfig+0xcc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d01b      	beq.n	8007726 <TIM_TI1_SetConfig+0x66>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f4:	d017      	beq.n	8007726 <TIM_TI1_SetConfig+0x66>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4a25      	ldr	r2, [pc, #148]	; (8007790 <TIM_TI1_SetConfig+0xd0>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d013      	beq.n	8007726 <TIM_TI1_SetConfig+0x66>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4a24      	ldr	r2, [pc, #144]	; (8007794 <TIM_TI1_SetConfig+0xd4>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00f      	beq.n	8007726 <TIM_TI1_SetConfig+0x66>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4a23      	ldr	r2, [pc, #140]	; (8007798 <TIM_TI1_SetConfig+0xd8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00b      	beq.n	8007726 <TIM_TI1_SetConfig+0x66>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a22      	ldr	r2, [pc, #136]	; (800779c <TIM_TI1_SetConfig+0xdc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d007      	beq.n	8007726 <TIM_TI1_SetConfig+0x66>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4a21      	ldr	r2, [pc, #132]	; (80077a0 <TIM_TI1_SetConfig+0xe0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d003      	beq.n	8007726 <TIM_TI1_SetConfig+0x66>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4a20      	ldr	r2, [pc, #128]	; (80077a4 <TIM_TI1_SetConfig+0xe4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d101      	bne.n	800772a <TIM_TI1_SetConfig+0x6a>
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <TIM_TI1_SetConfig+0x6c>
 800772a:	2300      	movs	r3, #0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f023 0303 	bic.w	r3, r3, #3
 8007736:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]
 8007740:	e003      	b.n	800774a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f043 0301 	orr.w	r3, r3, #1
 8007748:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	b2db      	uxtb	r3, r3
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4313      	orrs	r3, r2
 800775c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f023 030a 	bic.w	r3, r3, #10
 8007764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f003 030a 	and.w	r3, r3, #10
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	4313      	orrs	r3, r2
 8007770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	621a      	str	r2, [r3, #32]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40012c00 	.word	0x40012c00
 8007790:	40000400 	.word	0x40000400
 8007794:	40000800 	.word	0x40000800
 8007798:	40000c00 	.word	0x40000c00
 800779c:	40013400 	.word	0x40013400
 80077a0:	40014000 	.word	0x40014000
 80077a4:	40015000 	.word	0x40015000

080077a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	f023 0201 	bic.w	r2, r3, #1
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f023 030a 	bic.w	r3, r3, #10
 80077e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	621a      	str	r2, [r3, #32]
}
 80077fa:	bf00      	nop
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007806:	b480      	push	{r7}
 8007808:	b087      	sub	sp, #28
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
 8007812:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	f023 0210 	bic.w	r2, r3, #16
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007832:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	021b      	lsls	r3, r3, #8
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	4313      	orrs	r3, r2
 800783c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	031b      	lsls	r3, r3, #12
 800784a:	b29b      	uxth	r3, r3
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007858:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	621a      	str	r2, [r3, #32]
}
 8007874:	bf00      	nop
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	f023 0210 	bic.w	r2, r3, #16
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	031b      	lsls	r3, r3, #12
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	621a      	str	r2, [r3, #32]
}
 80078d4:	bf00      	nop
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f023 0303 	bic.w	r3, r3, #3
 800790c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800791c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	b2db      	uxtb	r3, r3
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007930:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	4313      	orrs	r3, r2
 800793e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	621a      	str	r2, [r3, #32]
}
 800794c:	bf00      	nop
 800794e:	371c      	adds	r7, #28
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007984:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007996:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	031b      	lsls	r3, r3, #12
 800799c:	b29b      	uxth	r3, r3
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80079aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	031b      	lsls	r3, r3, #12
 80079b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	621a      	str	r2, [r3, #32]
}
 80079c6:	bf00      	nop
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80079e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f043 0307 	orr.w	r3, r3, #7
 80079f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	609a      	str	r2, [r3, #8]
}
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	021a      	lsls	r2, r3, #8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	609a      	str	r2, [r3, #8]
}
 8007a40:	bf00      	nop
 8007a42:	371c      	adds	r7, #28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	2201      	movs	r2, #1
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6a1a      	ldr	r2, [r3, #32]
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	43db      	mvns	r3, r3
 8007a6e:	401a      	ands	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a1a      	ldr	r2, [r3, #32]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f003 031f 	and.w	r3, r3, #31
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	fa01 f303 	lsl.w	r3, r1, r3
 8007a84:	431a      	orrs	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	621a      	str	r2, [r3, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e074      	b.n	8007b9a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a34      	ldr	r2, [pc, #208]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d009      	beq.n	8007aee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a33      	ldr	r2, [pc, #204]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d004      	beq.n	8007aee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a31      	ldr	r2, [pc, #196]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d108      	bne.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007af4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a21      	ldr	r2, [pc, #132]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d022      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b30:	d01d      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1f      	ldr	r2, [pc, #124]	; (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d018      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a1d      	ldr	r2, [pc, #116]	; (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d013      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a1c      	ldr	r2, [pc, #112]	; (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00e      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a15      	ldr	r2, [pc, #84]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d009      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a18      	ldr	r2, [pc, #96]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d004      	beq.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a11      	ldr	r2, [pc, #68]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d10c      	bne.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	40012c00 	.word	0x40012c00
 8007bac:	40013400 	.word	0x40013400
 8007bb0:	40015000 	.word	0x40015000
 8007bb4:	40000400 	.word	0x40000400
 8007bb8:	40000800 	.word	0x40000800
 8007bbc:	40000c00 	.word	0x40000c00
 8007bc0:	40014000 	.word	0x40014000

08007bc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e096      	b.n	8007d0e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	041b      	lsls	r3, r3, #16
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a2f      	ldr	r2, [pc, #188]	; (8007d1c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d009      	beq.n	8007c78 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a2d      	ldr	r2, [pc, #180]	; (8007d20 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d004      	beq.n	8007c78 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a2c      	ldr	r2, [pc, #176]	; (8007d24 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d106      	bne.n	8007c86 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a24      	ldr	r2, [pc, #144]	; (8007d1c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d009      	beq.n	8007ca4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a22      	ldr	r2, [pc, #136]	; (8007d20 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a21      	ldr	r2, [pc, #132]	; (8007d24 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d12b      	bne.n	8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cae:	051b      	lsls	r3, r3, #20
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a11      	ldr	r2, [pc, #68]	; (8007d1c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d009      	beq.n	8007cee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a10      	ldr	r2, [pc, #64]	; (8007d20 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d004      	beq.n	8007cee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a0e      	ldr	r2, [pc, #56]	; (8007d24 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d106      	bne.n	8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	40012c00 	.word	0x40012c00
 8007d20:	40013400 	.word	0x40013400
 8007d24:	40015000 	.word	0x40015000

08007d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e042      	b.n	8007e4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d106      	bne.n	8007dde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7fc f8cf 	bl	8003f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2224      	movs	r2, #36	; 0x24
 8007de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0201 	bic.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f996 	bl	8008128 <UART_SetConfig>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e022      	b.n	8007e4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fc86 	bl	8008720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0201 	orr.w	r2, r2, #1
 8007e42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fd0d 	bl	8008864 <UART_CheckIdleState>
 8007e4a:	4603      	mov	r3, r0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08a      	sub	sp, #40	; 0x28
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	4613      	mov	r3, r2
 8007e62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	f040 8083 	bne.w	8007f76 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <HAL_UART_Transmit+0x28>
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e07b      	b.n	8007f78 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d101      	bne.n	8007e8e <HAL_UART_Transmit+0x3a>
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e074      	b.n	8007f78 <HAL_UART_Transmit+0x124>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2221      	movs	r2, #33	; 0x21
 8007ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ea6:	f7fc fcbf 	bl	8004828 <HAL_GetTick>
 8007eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	88fa      	ldrh	r2, [r7, #6]
 8007eb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	88fa      	ldrh	r2, [r7, #6]
 8007eb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec4:	d108      	bne.n	8007ed8 <HAL_UART_Transmit+0x84>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	e003      	b.n	8007ee0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007edc:	2300      	movs	r3, #0
 8007ede:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007ee8:	e02c      	b.n	8007f44 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2180      	movs	r1, #128	; 0x80
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 fd00 	bl	80088fa <UART_WaitOnFlagUntilTimeout>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e039      	b.n	8007f78 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10b      	bne.n	8007f22 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	3302      	adds	r3, #2
 8007f1e:	61bb      	str	r3, [r7, #24]
 8007f20:	e007      	b.n	8007f32 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	781a      	ldrb	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1cc      	bne.n	8007eea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2200      	movs	r2, #0
 8007f58:	2140      	movs	r1, #64	; 0x40
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 fccd 	bl	80088fa <UART_WaitOnFlagUntilTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e006      	b.n	8007f78 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e000      	b.n	8007f78 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007f76:	2302      	movs	r3, #2
  }
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3720      	adds	r7, #32
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	; 0x28
 8007f84:	af02      	add	r7, sp, #8
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	f040 80c0 	bne.w	800811c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <HAL_UART_Receive+0x28>
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e0b8      	b.n	800811e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_UART_Receive+0x3a>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e0b1      	b.n	800811e <HAL_UART_Receive+0x19e>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2222      	movs	r2, #34	; 0x22
 8007fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fd8:	f7fc fc26 	bl	8004828 <HAL_GetTick>
 8007fdc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	88fa      	ldrh	r2, [r7, #6]
 8007fe2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	88fa      	ldrh	r2, [r7, #6]
 8007fea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff6:	d10e      	bne.n	8008016 <HAL_UART_Receive+0x96>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <HAL_UART_Receive+0x8c>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008006:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800800a:	e02d      	b.n	8008068 <HAL_UART_Receive+0xe8>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	22ff      	movs	r2, #255	; 0xff
 8008010:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008014:	e028      	b.n	8008068 <HAL_UART_Receive+0xe8>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10d      	bne.n	800803a <HAL_UART_Receive+0xba>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d104      	bne.n	8008030 <HAL_UART_Receive+0xb0>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	22ff      	movs	r2, #255	; 0xff
 800802a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800802e:	e01b      	b.n	8008068 <HAL_UART_Receive+0xe8>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	227f      	movs	r2, #127	; 0x7f
 8008034:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008038:	e016      	b.n	8008068 <HAL_UART_Receive+0xe8>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008042:	d10d      	bne.n	8008060 <HAL_UART_Receive+0xe0>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d104      	bne.n	8008056 <HAL_UART_Receive+0xd6>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	227f      	movs	r2, #127	; 0x7f
 8008050:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008054:	e008      	b.n	8008068 <HAL_UART_Receive+0xe8>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	223f      	movs	r2, #63	; 0x3f
 800805a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800805e:	e003      	b.n	8008068 <HAL_UART_Receive+0xe8>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800806e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008078:	d108      	bne.n	800808c <HAL_UART_Receive+0x10c>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d104      	bne.n	800808c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8008082:	2300      	movs	r3, #0
 8008084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	61bb      	str	r3, [r7, #24]
 800808a:	e003      	b.n	8008094 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008090:	2300      	movs	r3, #0
 8008092:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800809c:	e032      	b.n	8008104 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2200      	movs	r2, #0
 80080a6:	2120      	movs	r1, #32
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 fc26 	bl	80088fa <UART_WaitOnFlagUntilTimeout>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e032      	b.n	800811e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10c      	bne.n	80080d8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	8a7b      	ldrh	r3, [r7, #18]
 80080c8:	4013      	ands	r3, r2
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	3302      	adds	r3, #2
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	e00c      	b.n	80080f2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	8a7b      	ldrh	r3, [r7, #18]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	4013      	ands	r3, r2
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	3301      	adds	r3, #1
 80080f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	3b01      	subs	r3, #1
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800810a:	b29b      	uxth	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1c6      	bne.n	800809e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2220      	movs	r2, #32
 8008114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	e000      	b.n	800811e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800811c:	2302      	movs	r3, #2
  }
}
 800811e:	4618      	mov	r0, r3
 8008120:	3720      	adds	r7, #32
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800812c:	b08c      	sub	sp, #48	; 0x30
 800812e:	af00      	add	r7, sp, #0
 8008130:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	431a      	orrs	r2, r3
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	431a      	orrs	r2, r3
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	4313      	orrs	r3, r2
 800814e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	4baa      	ldr	r3, [pc, #680]	; (8008400 <UART_SetConfig+0x2d8>)
 8008158:	4013      	ands	r3, r2
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008160:	430b      	orrs	r3, r1
 8008162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a9f      	ldr	r2, [pc, #636]	; (8008404 <UART_SetConfig+0x2dc>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d004      	beq.n	8008194 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008190:	4313      	orrs	r3, r2
 8008192:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800819e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	6812      	ldr	r2, [r2, #0]
 80081a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081a8:	430b      	orrs	r3, r1
 80081aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b2:	f023 010f 	bic.w	r1, r3, #15
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a90      	ldr	r2, [pc, #576]	; (8008408 <UART_SetConfig+0x2e0>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d125      	bne.n	8008218 <UART_SetConfig+0xf0>
 80081cc:	4b8f      	ldr	r3, [pc, #572]	; (800840c <UART_SetConfig+0x2e4>)
 80081ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d2:	f003 0303 	and.w	r3, r3, #3
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d81a      	bhi.n	8008210 <UART_SetConfig+0xe8>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <UART_SetConfig+0xb8>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	080081f1 	.word	0x080081f1
 80081e4:	08008201 	.word	0x08008201
 80081e8:	080081f9 	.word	0x080081f9
 80081ec:	08008209 	.word	0x08008209
 80081f0:	2301      	movs	r3, #1
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f6:	e116      	b.n	8008426 <UART_SetConfig+0x2fe>
 80081f8:	2302      	movs	r3, #2
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fe:	e112      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008200:	2304      	movs	r3, #4
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008206:	e10e      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008208:	2308      	movs	r3, #8
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820e:	e10a      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008210:	2310      	movs	r3, #16
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008216:	e106      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a7c      	ldr	r2, [pc, #496]	; (8008410 <UART_SetConfig+0x2e8>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d138      	bne.n	8008294 <UART_SetConfig+0x16c>
 8008222:	4b7a      	ldr	r3, [pc, #488]	; (800840c <UART_SetConfig+0x2e4>)
 8008224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008228:	f003 030c 	and.w	r3, r3, #12
 800822c:	2b0c      	cmp	r3, #12
 800822e:	d82d      	bhi.n	800828c <UART_SetConfig+0x164>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <UART_SetConfig+0x110>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	0800826d 	.word	0x0800826d
 800823c:	0800828d 	.word	0x0800828d
 8008240:	0800828d 	.word	0x0800828d
 8008244:	0800828d 	.word	0x0800828d
 8008248:	0800827d 	.word	0x0800827d
 800824c:	0800828d 	.word	0x0800828d
 8008250:	0800828d 	.word	0x0800828d
 8008254:	0800828d 	.word	0x0800828d
 8008258:	08008275 	.word	0x08008275
 800825c:	0800828d 	.word	0x0800828d
 8008260:	0800828d 	.word	0x0800828d
 8008264:	0800828d 	.word	0x0800828d
 8008268:	08008285 	.word	0x08008285
 800826c:	2300      	movs	r3, #0
 800826e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008272:	e0d8      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008274:	2302      	movs	r3, #2
 8008276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800827a:	e0d4      	b.n	8008426 <UART_SetConfig+0x2fe>
 800827c:	2304      	movs	r3, #4
 800827e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008282:	e0d0      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008284:	2308      	movs	r3, #8
 8008286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800828a:	e0cc      	b.n	8008426 <UART_SetConfig+0x2fe>
 800828c:	2310      	movs	r3, #16
 800828e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008292:	e0c8      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a5e      	ldr	r2, [pc, #376]	; (8008414 <UART_SetConfig+0x2ec>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d125      	bne.n	80082ea <UART_SetConfig+0x1c2>
 800829e:	4b5b      	ldr	r3, [pc, #364]	; (800840c <UART_SetConfig+0x2e4>)
 80082a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082a8:	2b30      	cmp	r3, #48	; 0x30
 80082aa:	d016      	beq.n	80082da <UART_SetConfig+0x1b2>
 80082ac:	2b30      	cmp	r3, #48	; 0x30
 80082ae:	d818      	bhi.n	80082e2 <UART_SetConfig+0x1ba>
 80082b0:	2b20      	cmp	r3, #32
 80082b2:	d00a      	beq.n	80082ca <UART_SetConfig+0x1a2>
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d814      	bhi.n	80082e2 <UART_SetConfig+0x1ba>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <UART_SetConfig+0x19a>
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d008      	beq.n	80082d2 <UART_SetConfig+0x1aa>
 80082c0:	e00f      	b.n	80082e2 <UART_SetConfig+0x1ba>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c8:	e0ad      	b.n	8008426 <UART_SetConfig+0x2fe>
 80082ca:	2302      	movs	r3, #2
 80082cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d0:	e0a9      	b.n	8008426 <UART_SetConfig+0x2fe>
 80082d2:	2304      	movs	r3, #4
 80082d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d8:	e0a5      	b.n	8008426 <UART_SetConfig+0x2fe>
 80082da:	2308      	movs	r3, #8
 80082dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e0:	e0a1      	b.n	8008426 <UART_SetConfig+0x2fe>
 80082e2:	2310      	movs	r3, #16
 80082e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e8:	e09d      	b.n	8008426 <UART_SetConfig+0x2fe>
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a4a      	ldr	r2, [pc, #296]	; (8008418 <UART_SetConfig+0x2f0>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d125      	bne.n	8008340 <UART_SetConfig+0x218>
 80082f4:	4b45      	ldr	r3, [pc, #276]	; (800840c <UART_SetConfig+0x2e4>)
 80082f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80082fe:	2bc0      	cmp	r3, #192	; 0xc0
 8008300:	d016      	beq.n	8008330 <UART_SetConfig+0x208>
 8008302:	2bc0      	cmp	r3, #192	; 0xc0
 8008304:	d818      	bhi.n	8008338 <UART_SetConfig+0x210>
 8008306:	2b80      	cmp	r3, #128	; 0x80
 8008308:	d00a      	beq.n	8008320 <UART_SetConfig+0x1f8>
 800830a:	2b80      	cmp	r3, #128	; 0x80
 800830c:	d814      	bhi.n	8008338 <UART_SetConfig+0x210>
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <UART_SetConfig+0x1f0>
 8008312:	2b40      	cmp	r3, #64	; 0x40
 8008314:	d008      	beq.n	8008328 <UART_SetConfig+0x200>
 8008316:	e00f      	b.n	8008338 <UART_SetConfig+0x210>
 8008318:	2300      	movs	r3, #0
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800831e:	e082      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008320:	2302      	movs	r3, #2
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008326:	e07e      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008328:	2304      	movs	r3, #4
 800832a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800832e:	e07a      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008330:	2308      	movs	r3, #8
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008336:	e076      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008338:	2310      	movs	r3, #16
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800833e:	e072      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a35      	ldr	r2, [pc, #212]	; (800841c <UART_SetConfig+0x2f4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d12a      	bne.n	80083a0 <UART_SetConfig+0x278>
 800834a:	4b30      	ldr	r3, [pc, #192]	; (800840c <UART_SetConfig+0x2e4>)
 800834c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008358:	d01a      	beq.n	8008390 <UART_SetConfig+0x268>
 800835a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800835e:	d81b      	bhi.n	8008398 <UART_SetConfig+0x270>
 8008360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008364:	d00c      	beq.n	8008380 <UART_SetConfig+0x258>
 8008366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800836a:	d815      	bhi.n	8008398 <UART_SetConfig+0x270>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <UART_SetConfig+0x250>
 8008370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008374:	d008      	beq.n	8008388 <UART_SetConfig+0x260>
 8008376:	e00f      	b.n	8008398 <UART_SetConfig+0x270>
 8008378:	2300      	movs	r3, #0
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837e:	e052      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008380:	2302      	movs	r3, #2
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008386:	e04e      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008388:	2304      	movs	r3, #4
 800838a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800838e:	e04a      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008390:	2308      	movs	r3, #8
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008396:	e046      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008398:	2310      	movs	r3, #16
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839e:	e042      	b.n	8008426 <UART_SetConfig+0x2fe>
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a17      	ldr	r2, [pc, #92]	; (8008404 <UART_SetConfig+0x2dc>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d13a      	bne.n	8008420 <UART_SetConfig+0x2f8>
 80083aa:	4b18      	ldr	r3, [pc, #96]	; (800840c <UART_SetConfig+0x2e4>)
 80083ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083b8:	d01a      	beq.n	80083f0 <UART_SetConfig+0x2c8>
 80083ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083be:	d81b      	bhi.n	80083f8 <UART_SetConfig+0x2d0>
 80083c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083c4:	d00c      	beq.n	80083e0 <UART_SetConfig+0x2b8>
 80083c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ca:	d815      	bhi.n	80083f8 <UART_SetConfig+0x2d0>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <UART_SetConfig+0x2b0>
 80083d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d4:	d008      	beq.n	80083e8 <UART_SetConfig+0x2c0>
 80083d6:	e00f      	b.n	80083f8 <UART_SetConfig+0x2d0>
 80083d8:	2300      	movs	r3, #0
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083de:	e022      	b.n	8008426 <UART_SetConfig+0x2fe>
 80083e0:	2302      	movs	r3, #2
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e6:	e01e      	b.n	8008426 <UART_SetConfig+0x2fe>
 80083e8:	2304      	movs	r3, #4
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ee:	e01a      	b.n	8008426 <UART_SetConfig+0x2fe>
 80083f0:	2308      	movs	r3, #8
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f6:	e016      	b.n	8008426 <UART_SetConfig+0x2fe>
 80083f8:	2310      	movs	r3, #16
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fe:	e012      	b.n	8008426 <UART_SetConfig+0x2fe>
 8008400:	cfff69f3 	.word	0xcfff69f3
 8008404:	40008000 	.word	0x40008000
 8008408:	40013800 	.word	0x40013800
 800840c:	40021000 	.word	0x40021000
 8008410:	40004400 	.word	0x40004400
 8008414:	40004800 	.word	0x40004800
 8008418:	40004c00 	.word	0x40004c00
 800841c:	40005000 	.word	0x40005000
 8008420:	2310      	movs	r3, #16
 8008422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4aae      	ldr	r2, [pc, #696]	; (80086e4 <UART_SetConfig+0x5bc>)
 800842c:	4293      	cmp	r3, r2
 800842e:	f040 8097 	bne.w	8008560 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008432:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008436:	2b08      	cmp	r3, #8
 8008438:	d823      	bhi.n	8008482 <UART_SetConfig+0x35a>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <UART_SetConfig+0x318>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008465 	.word	0x08008465
 8008444:	08008483 	.word	0x08008483
 8008448:	0800846d 	.word	0x0800846d
 800844c:	08008483 	.word	0x08008483
 8008450:	08008473 	.word	0x08008473
 8008454:	08008483 	.word	0x08008483
 8008458:	08008483 	.word	0x08008483
 800845c:	08008483 	.word	0x08008483
 8008460:	0800847b 	.word	0x0800847b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008464:	f7fd fa6c 	bl	8005940 <HAL_RCC_GetPCLK1Freq>
 8008468:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800846a:	e010      	b.n	800848e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800846c:	4b9e      	ldr	r3, [pc, #632]	; (80086e8 <UART_SetConfig+0x5c0>)
 800846e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008470:	e00d      	b.n	800848e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008472:	f7fd f9f7 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8008476:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008478:	e009      	b.n	800848e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800847a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008480:	e005      	b.n	800848e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800848c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 8130 	beq.w	80086f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	4a94      	ldr	r2, [pc, #592]	; (80086ec <UART_SetConfig+0x5c4>)
 800849c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084a0:	461a      	mov	r2, r3
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80084a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	4613      	mov	r3, r2
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	4413      	add	r3, r2
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d305      	bcc.n	80084c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d903      	bls.n	80084ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084cc:	e113      	b.n	80086f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	2200      	movs	r2, #0
 80084d2:	60bb      	str	r3, [r7, #8]
 80084d4:	60fa      	str	r2, [r7, #12]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	4a84      	ldr	r2, [pc, #528]	; (80086ec <UART_SetConfig+0x5c4>)
 80084dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	2200      	movs	r2, #0
 80084e4:	603b      	str	r3, [r7, #0]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084f0:	f7f8 fba2 	bl	8000c38 <__aeabi_uldivmod>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4610      	mov	r0, r2
 80084fa:	4619      	mov	r1, r3
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	020b      	lsls	r3, r1, #8
 8008506:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800850a:	0202      	lsls	r2, r0, #8
 800850c:	6979      	ldr	r1, [r7, #20]
 800850e:	6849      	ldr	r1, [r1, #4]
 8008510:	0849      	lsrs	r1, r1, #1
 8008512:	2000      	movs	r0, #0
 8008514:	460c      	mov	r4, r1
 8008516:	4605      	mov	r5, r0
 8008518:	eb12 0804 	adds.w	r8, r2, r4
 800851c:	eb43 0905 	adc.w	r9, r3, r5
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	469a      	mov	sl, r3
 8008528:	4693      	mov	fp, r2
 800852a:	4652      	mov	r2, sl
 800852c:	465b      	mov	r3, fp
 800852e:	4640      	mov	r0, r8
 8008530:	4649      	mov	r1, r9
 8008532:	f7f8 fb81 	bl	8000c38 <__aeabi_uldivmod>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	4613      	mov	r3, r2
 800853c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008544:	d308      	bcc.n	8008558 <UART_SetConfig+0x430>
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800854c:	d204      	bcs.n	8008558 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6a3a      	ldr	r2, [r7, #32]
 8008554:	60da      	str	r2, [r3, #12]
 8008556:	e0ce      	b.n	80086f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800855e:	e0ca      	b.n	80086f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008568:	d166      	bne.n	8008638 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800856a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800856e:	2b08      	cmp	r3, #8
 8008570:	d827      	bhi.n	80085c2 <UART_SetConfig+0x49a>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <UART_SetConfig+0x450>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	0800859d 	.word	0x0800859d
 800857c:	080085a5 	.word	0x080085a5
 8008580:	080085ad 	.word	0x080085ad
 8008584:	080085c3 	.word	0x080085c3
 8008588:	080085b3 	.word	0x080085b3
 800858c:	080085c3 	.word	0x080085c3
 8008590:	080085c3 	.word	0x080085c3
 8008594:	080085c3 	.word	0x080085c3
 8008598:	080085bb 	.word	0x080085bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800859c:	f7fd f9d0 	bl	8005940 <HAL_RCC_GetPCLK1Freq>
 80085a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085a2:	e014      	b.n	80085ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085a4:	f7fd f9e2 	bl	800596c <HAL_RCC_GetPCLK2Freq>
 80085a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085aa:	e010      	b.n	80085ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085ac:	4b4e      	ldr	r3, [pc, #312]	; (80086e8 <UART_SetConfig+0x5c0>)
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085b0:	e00d      	b.n	80085ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085b2:	f7fd f957 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80085b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085b8:	e009      	b.n	80085ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085c0:	e005      	b.n	80085ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 8090 	beq.w	80086f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	4a44      	ldr	r2, [pc, #272]	; (80086ec <UART_SetConfig+0x5c4>)
 80085dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085e0:	461a      	mov	r2, r3
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80085e8:	005a      	lsls	r2, r3, #1
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	085b      	lsrs	r3, r3, #1
 80085f0:	441a      	add	r2, r3
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	2b0f      	cmp	r3, #15
 8008600:	d916      	bls.n	8008630 <UART_SetConfig+0x508>
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008608:	d212      	bcs.n	8008630 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	b29b      	uxth	r3, r3
 800860e:	f023 030f 	bic.w	r3, r3, #15
 8008612:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	085b      	lsrs	r3, r3, #1
 8008618:	b29b      	uxth	r3, r3
 800861a:	f003 0307 	and.w	r3, r3, #7
 800861e:	b29a      	uxth	r2, r3
 8008620:	8bfb      	ldrh	r3, [r7, #30]
 8008622:	4313      	orrs	r3, r2
 8008624:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	8bfa      	ldrh	r2, [r7, #30]
 800862c:	60da      	str	r2, [r3, #12]
 800862e:	e062      	b.n	80086f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008636:	e05e      	b.n	80086f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008638:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800863c:	2b08      	cmp	r3, #8
 800863e:	d828      	bhi.n	8008692 <UART_SetConfig+0x56a>
 8008640:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <UART_SetConfig+0x520>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	0800866d 	.word	0x0800866d
 800864c:	08008675 	.word	0x08008675
 8008650:	0800867d 	.word	0x0800867d
 8008654:	08008693 	.word	0x08008693
 8008658:	08008683 	.word	0x08008683
 800865c:	08008693 	.word	0x08008693
 8008660:	08008693 	.word	0x08008693
 8008664:	08008693 	.word	0x08008693
 8008668:	0800868b 	.word	0x0800868b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800866c:	f7fd f968 	bl	8005940 <HAL_RCC_GetPCLK1Freq>
 8008670:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008672:	e014      	b.n	800869e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008674:	f7fd f97a 	bl	800596c <HAL_RCC_GetPCLK2Freq>
 8008678:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800867a:	e010      	b.n	800869e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800867c:	4b1a      	ldr	r3, [pc, #104]	; (80086e8 <UART_SetConfig+0x5c0>)
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008680:	e00d      	b.n	800869e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008682:	f7fd f8ef 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8008686:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008688:	e009      	b.n	800869e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800868a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008690:	e005      	b.n	800869e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800869c:	bf00      	nop
    }

    if (pclk != 0U)
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d028      	beq.n	80086f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	4a10      	ldr	r2, [pc, #64]	; (80086ec <UART_SetConfig+0x5c4>)
 80086aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ae:	461a      	mov	r2, r3
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	441a      	add	r2, r3
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	2b0f      	cmp	r3, #15
 80086cc:	d910      	bls.n	80086f0 <UART_SetConfig+0x5c8>
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d4:	d20c      	bcs.n	80086f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60da      	str	r2, [r3, #12]
 80086e0:	e009      	b.n	80086f6 <UART_SetConfig+0x5ce>
 80086e2:	bf00      	nop
 80086e4:	40008000 	.word	0x40008000
 80086e8:	00f42400 	.word	0x00f42400
 80086ec:	0800baa8 	.word	0x0800baa8
      }
      else
      {
        ret = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2201      	movs	r2, #1
 8008702:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2200      	movs	r2, #0
 800870a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	2200      	movs	r2, #0
 8008710:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008712:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008716:	4618      	mov	r0, r3
 8008718:	3730      	adds	r7, #48	; 0x30
 800871a:	46bd      	mov	sp, r7
 800871c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00a      	beq.n	800874a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	430a      	orrs	r2, r1
 8008748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008770:	f003 0304 	and.w	r3, r3, #4
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b4:	f003 0310 	and.w	r3, r3, #16
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00a      	beq.n	80087d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d6:	f003 0320 	and.w	r3, r3, #32
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d01a      	beq.n	8008836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800881e:	d10a      	bne.n	8008836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00a      	beq.n	8008858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	605a      	str	r2, [r3, #4]
  }
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af02      	add	r7, sp, #8
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008874:	f7fb ffd8 	bl	8004828 <HAL_GetTick>
 8008878:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0308 	and.w	r3, r3, #8
 8008884:	2b08      	cmp	r3, #8
 8008886:	d10e      	bne.n	80088a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f82f 	bl	80088fa <UART_WaitOnFlagUntilTimeout>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e025      	b.n	80088f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d10e      	bne.n	80088d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f819 	bl	80088fa <UART_WaitOnFlagUntilTimeout>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e00f      	b.n	80088f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2220      	movs	r2, #32
 80088de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b09c      	sub	sp, #112	; 0x70
 80088fe:	af00      	add	r7, sp, #0
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	603b      	str	r3, [r7, #0]
 8008906:	4613      	mov	r3, r2
 8008908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800890a:	e0a9      	b.n	8008a60 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800890c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008912:	f000 80a5 	beq.w	8008a60 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008916:	f7fb ff87 	bl	8004828 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008922:	429a      	cmp	r2, r3
 8008924:	d302      	bcc.n	800892c <UART_WaitOnFlagUntilTimeout+0x32>
 8008926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008928:	2b00      	cmp	r3, #0
 800892a:	d140      	bne.n	80089ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800893a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800893c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008940:	667b      	str	r3, [r7, #100]	; 0x64
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800894a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800894c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008950:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e6      	bne.n	800892c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3308      	adds	r3, #8
 8008964:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	f023 0301 	bic.w	r3, r3, #1
 8008974:	663b      	str	r3, [r7, #96]	; 0x60
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3308      	adds	r3, #8
 800897c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800897e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008980:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800898c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e5      	bne.n	800895e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2220      	movs	r2, #32
 8008996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2220      	movs	r2, #32
 800899e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e069      	b.n	8008a82 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d051      	beq.n	8008a60 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ca:	d149      	bne.n	8008a60 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	e853 3f00 	ldrex	r3, [r3]
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f4:	637b      	str	r3, [r7, #52]	; 0x34
 80089f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089fc:	e841 2300 	strex	r3, r2, [r1]
 8008a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e6      	bne.n	80089d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	e853 3f00 	ldrex	r3, [r3]
 8008a16:	613b      	str	r3, [r7, #16]
   return(result);
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f023 0301 	bic.w	r3, r3, #1
 8008a1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3308      	adds	r3, #8
 8008a26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a28:	623a      	str	r2, [r7, #32]
 8008a2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2c:	69f9      	ldr	r1, [r7, #28]
 8008a2e:	6a3a      	ldr	r2, [r7, #32]
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e5      	bne.n	8008a08 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e010      	b.n	8008a82 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	69da      	ldr	r2, [r3, #28]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	4013      	ands	r3, r2
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	bf0c      	ite	eq
 8008a70:	2301      	moveq	r3, #1
 8008a72:	2300      	movne	r3, #0
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	461a      	mov	r2, r3
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	f43f af46 	beq.w	800890c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3770      	adds	r7, #112	; 0x70
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b085      	sub	sp, #20
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d101      	bne.n	8008aa0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	e027      	b.n	8008af0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2224      	movs	r2, #36	; 0x24
 8008aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f022 0201 	bic.w	r2, r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ace:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e02d      	b.n	8008b70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2224      	movs	r2, #36	; 0x24
 8008b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0201 	bic.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f84f 	bl	8008bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d101      	bne.n	8008b90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e02d      	b.n	8008bec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2224      	movs	r2, #36	; 0x24
 8008b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f022 0201 	bic.w	r2, r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f811 	bl	8008bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d108      	bne.n	8008c16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c14:	e031      	b.n	8008c7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c16:	2308      	movs	r3, #8
 8008c18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c1a:	2308      	movs	r3, #8
 8008c1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	0e5b      	lsrs	r3, r3, #25
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	f003 0307 	and.w	r3, r3, #7
 8008c2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	0f5b      	lsrs	r3, r3, #29
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	7b3a      	ldrb	r2, [r7, #12]
 8008c42:	4911      	ldr	r1, [pc, #68]	; (8008c88 <UARTEx_SetNbDataToProcess+0x94>)
 8008c44:	5c8a      	ldrb	r2, [r1, r2]
 8008c46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c4a:	7b3a      	ldrb	r2, [r7, #12]
 8008c4c:	490f      	ldr	r1, [pc, #60]	; (8008c8c <UARTEx_SetNbDataToProcess+0x98>)
 8008c4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c50:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	7b7a      	ldrb	r2, [r7, #13]
 8008c60:	4909      	ldr	r1, [pc, #36]	; (8008c88 <UARTEx_SetNbDataToProcess+0x94>)
 8008c62:	5c8a      	ldrb	r2, [r1, r2]
 8008c64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c68:	7b7a      	ldrb	r2, [r7, #13]
 8008c6a:	4908      	ldr	r1, [pc, #32]	; (8008c8c <UARTEx_SetNbDataToProcess+0x98>)
 8008c6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c7a:	bf00      	nop
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	0800bac0 	.word	0x0800bac0
 8008c8c:	0800bac8 	.word	0x0800bac8

08008c90 <__errno>:
 8008c90:	4b01      	ldr	r3, [pc, #4]	; (8008c98 <__errno+0x8>)
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	20000018 	.word	0x20000018

08008c9c <__libc_init_array>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	4d0d      	ldr	r5, [pc, #52]	; (8008cd4 <__libc_init_array+0x38>)
 8008ca0:	4c0d      	ldr	r4, [pc, #52]	; (8008cd8 <__libc_init_array+0x3c>)
 8008ca2:	1b64      	subs	r4, r4, r5
 8008ca4:	10a4      	asrs	r4, r4, #2
 8008ca6:	2600      	movs	r6, #0
 8008ca8:	42a6      	cmp	r6, r4
 8008caa:	d109      	bne.n	8008cc0 <__libc_init_array+0x24>
 8008cac:	4d0b      	ldr	r5, [pc, #44]	; (8008cdc <__libc_init_array+0x40>)
 8008cae:	4c0c      	ldr	r4, [pc, #48]	; (8008ce0 <__libc_init_array+0x44>)
 8008cb0:	f002 fdc4 	bl	800b83c <_init>
 8008cb4:	1b64      	subs	r4, r4, r5
 8008cb6:	10a4      	asrs	r4, r4, #2
 8008cb8:	2600      	movs	r6, #0
 8008cba:	42a6      	cmp	r6, r4
 8008cbc:	d105      	bne.n	8008cca <__libc_init_array+0x2e>
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc4:	4798      	blx	r3
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	e7ee      	b.n	8008ca8 <__libc_init_array+0xc>
 8008cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cce:	4798      	blx	r3
 8008cd0:	3601      	adds	r6, #1
 8008cd2:	e7f2      	b.n	8008cba <__libc_init_array+0x1e>
 8008cd4:	0800beb4 	.word	0x0800beb4
 8008cd8:	0800beb4 	.word	0x0800beb4
 8008cdc:	0800beb4 	.word	0x0800beb4
 8008ce0:	0800beb8 	.word	0x0800beb8

08008ce4 <memset>:
 8008ce4:	4402      	add	r2, r0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d100      	bne.n	8008cee <memset+0xa>
 8008cec:	4770      	bx	lr
 8008cee:	f803 1b01 	strb.w	r1, [r3], #1
 8008cf2:	e7f9      	b.n	8008ce8 <memset+0x4>

08008cf4 <__cvt>:
 8008cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	ec55 4b10 	vmov	r4, r5, d0
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	460e      	mov	r6, r1
 8008d00:	4619      	mov	r1, r3
 8008d02:	462b      	mov	r3, r5
 8008d04:	bfbb      	ittet	lt
 8008d06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d0a:	461d      	movlt	r5, r3
 8008d0c:	2300      	movge	r3, #0
 8008d0e:	232d      	movlt	r3, #45	; 0x2d
 8008d10:	700b      	strb	r3, [r1, #0]
 8008d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d18:	4691      	mov	r9, r2
 8008d1a:	f023 0820 	bic.w	r8, r3, #32
 8008d1e:	bfbc      	itt	lt
 8008d20:	4622      	movlt	r2, r4
 8008d22:	4614      	movlt	r4, r2
 8008d24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d28:	d005      	beq.n	8008d36 <__cvt+0x42>
 8008d2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d2e:	d100      	bne.n	8008d32 <__cvt+0x3e>
 8008d30:	3601      	adds	r6, #1
 8008d32:	2102      	movs	r1, #2
 8008d34:	e000      	b.n	8008d38 <__cvt+0x44>
 8008d36:	2103      	movs	r1, #3
 8008d38:	ab03      	add	r3, sp, #12
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	ab02      	add	r3, sp, #8
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	ec45 4b10 	vmov	d0, r4, r5
 8008d44:	4653      	mov	r3, sl
 8008d46:	4632      	mov	r2, r6
 8008d48:	f000 fe1a 	bl	8009980 <_dtoa_r>
 8008d4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d50:	4607      	mov	r7, r0
 8008d52:	d102      	bne.n	8008d5a <__cvt+0x66>
 8008d54:	f019 0f01 	tst.w	r9, #1
 8008d58:	d022      	beq.n	8008da0 <__cvt+0xac>
 8008d5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d5e:	eb07 0906 	add.w	r9, r7, r6
 8008d62:	d110      	bne.n	8008d86 <__cvt+0x92>
 8008d64:	783b      	ldrb	r3, [r7, #0]
 8008d66:	2b30      	cmp	r3, #48	; 0x30
 8008d68:	d10a      	bne.n	8008d80 <__cvt+0x8c>
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 fed1 	bl	8000b18 <__aeabi_dcmpeq>
 8008d76:	b918      	cbnz	r0, 8008d80 <__cvt+0x8c>
 8008d78:	f1c6 0601 	rsb	r6, r6, #1
 8008d7c:	f8ca 6000 	str.w	r6, [sl]
 8008d80:	f8da 3000 	ldr.w	r3, [sl]
 8008d84:	4499      	add	r9, r3
 8008d86:	2200      	movs	r2, #0
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	f7f7 fec3 	bl	8000b18 <__aeabi_dcmpeq>
 8008d92:	b108      	cbz	r0, 8008d98 <__cvt+0xa4>
 8008d94:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d98:	2230      	movs	r2, #48	; 0x30
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	454b      	cmp	r3, r9
 8008d9e:	d307      	bcc.n	8008db0 <__cvt+0xbc>
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008da4:	1bdb      	subs	r3, r3, r7
 8008da6:	4638      	mov	r0, r7
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	b004      	add	sp, #16
 8008dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db0:	1c59      	adds	r1, r3, #1
 8008db2:	9103      	str	r1, [sp, #12]
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	e7f0      	b.n	8008d9a <__cvt+0xa6>

08008db8 <__exponent>:
 8008db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	bfb8      	it	lt
 8008dc0:	4249      	neglt	r1, r1
 8008dc2:	f803 2b02 	strb.w	r2, [r3], #2
 8008dc6:	bfb4      	ite	lt
 8008dc8:	222d      	movlt	r2, #45	; 0x2d
 8008dca:	222b      	movge	r2, #43	; 0x2b
 8008dcc:	2909      	cmp	r1, #9
 8008dce:	7042      	strb	r2, [r0, #1]
 8008dd0:	dd2a      	ble.n	8008e28 <__exponent+0x70>
 8008dd2:	f10d 0407 	add.w	r4, sp, #7
 8008dd6:	46a4      	mov	ip, r4
 8008dd8:	270a      	movs	r7, #10
 8008dda:	46a6      	mov	lr, r4
 8008ddc:	460a      	mov	r2, r1
 8008dde:	fb91 f6f7 	sdiv	r6, r1, r7
 8008de2:	fb07 1516 	mls	r5, r7, r6, r1
 8008de6:	3530      	adds	r5, #48	; 0x30
 8008de8:	2a63      	cmp	r2, #99	; 0x63
 8008dea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008dee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008df2:	4631      	mov	r1, r6
 8008df4:	dcf1      	bgt.n	8008dda <__exponent+0x22>
 8008df6:	3130      	adds	r1, #48	; 0x30
 8008df8:	f1ae 0502 	sub.w	r5, lr, #2
 8008dfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e00:	1c44      	adds	r4, r0, #1
 8008e02:	4629      	mov	r1, r5
 8008e04:	4561      	cmp	r1, ip
 8008e06:	d30a      	bcc.n	8008e1e <__exponent+0x66>
 8008e08:	f10d 0209 	add.w	r2, sp, #9
 8008e0c:	eba2 020e 	sub.w	r2, r2, lr
 8008e10:	4565      	cmp	r5, ip
 8008e12:	bf88      	it	hi
 8008e14:	2200      	movhi	r2, #0
 8008e16:	4413      	add	r3, r2
 8008e18:	1a18      	subs	r0, r3, r0
 8008e1a:	b003      	add	sp, #12
 8008e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e26:	e7ed      	b.n	8008e04 <__exponent+0x4c>
 8008e28:	2330      	movs	r3, #48	; 0x30
 8008e2a:	3130      	adds	r1, #48	; 0x30
 8008e2c:	7083      	strb	r3, [r0, #2]
 8008e2e:	70c1      	strb	r1, [r0, #3]
 8008e30:	1d03      	adds	r3, r0, #4
 8008e32:	e7f1      	b.n	8008e18 <__exponent+0x60>

08008e34 <_printf_float>:
 8008e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e38:	ed2d 8b02 	vpush	{d8}
 8008e3c:	b08d      	sub	sp, #52	; 0x34
 8008e3e:	460c      	mov	r4, r1
 8008e40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e44:	4616      	mov	r6, r2
 8008e46:	461f      	mov	r7, r3
 8008e48:	4605      	mov	r5, r0
 8008e4a:	f001 fd3f 	bl	800a8cc <_localeconv_r>
 8008e4e:	f8d0 a000 	ldr.w	sl, [r0]
 8008e52:	4650      	mov	r0, sl
 8008e54:	f7f7 f9e4 	bl	8000220 <strlen>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	9305      	str	r3, [sp, #20]
 8008e60:	f8d8 3000 	ldr.w	r3, [r8]
 8008e64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e68:	3307      	adds	r3, #7
 8008e6a:	f023 0307 	bic.w	r3, r3, #7
 8008e6e:	f103 0208 	add.w	r2, r3, #8
 8008e72:	f8c8 2000 	str.w	r2, [r8]
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008e82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e86:	9307      	str	r3, [sp, #28]
 8008e88:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e8c:	ee08 0a10 	vmov	s16, r0
 8008e90:	4b9f      	ldr	r3, [pc, #636]	; (8009110 <_printf_float+0x2dc>)
 8008e92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e9a:	f7f7 fe6f 	bl	8000b7c <__aeabi_dcmpun>
 8008e9e:	bb88      	cbnz	r0, 8008f04 <_printf_float+0xd0>
 8008ea0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ea4:	4b9a      	ldr	r3, [pc, #616]	; (8009110 <_printf_float+0x2dc>)
 8008ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eaa:	f7f7 fe49 	bl	8000b40 <__aeabi_dcmple>
 8008eae:	bb48      	cbnz	r0, 8008f04 <_printf_float+0xd0>
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	f7f7 fe38 	bl	8000b2c <__aeabi_dcmplt>
 8008ebc:	b110      	cbz	r0, 8008ec4 <_printf_float+0x90>
 8008ebe:	232d      	movs	r3, #45	; 0x2d
 8008ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ec4:	4b93      	ldr	r3, [pc, #588]	; (8009114 <_printf_float+0x2e0>)
 8008ec6:	4894      	ldr	r0, [pc, #592]	; (8009118 <_printf_float+0x2e4>)
 8008ec8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ecc:	bf94      	ite	ls
 8008ece:	4698      	movls	r8, r3
 8008ed0:	4680      	movhi	r8, r0
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	6123      	str	r3, [r4, #16]
 8008ed6:	9b05      	ldr	r3, [sp, #20]
 8008ed8:	f023 0204 	bic.w	r2, r3, #4
 8008edc:	6022      	str	r2, [r4, #0]
 8008ede:	f04f 0900 	mov.w	r9, #0
 8008ee2:	9700      	str	r7, [sp, #0]
 8008ee4:	4633      	mov	r3, r6
 8008ee6:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4628      	mov	r0, r5
 8008eec:	f000 f9d8 	bl	80092a0 <_printf_common>
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	f040 8090 	bne.w	8009016 <_printf_float+0x1e2>
 8008ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008efa:	b00d      	add	sp, #52	; 0x34
 8008efc:	ecbd 8b02 	vpop	{d8}
 8008f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f04:	4642      	mov	r2, r8
 8008f06:	464b      	mov	r3, r9
 8008f08:	4640      	mov	r0, r8
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	f7f7 fe36 	bl	8000b7c <__aeabi_dcmpun>
 8008f10:	b140      	cbz	r0, 8008f24 <_printf_float+0xf0>
 8008f12:	464b      	mov	r3, r9
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	bfbc      	itt	lt
 8008f18:	232d      	movlt	r3, #45	; 0x2d
 8008f1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f1e:	487f      	ldr	r0, [pc, #508]	; (800911c <_printf_float+0x2e8>)
 8008f20:	4b7f      	ldr	r3, [pc, #508]	; (8009120 <_printf_float+0x2ec>)
 8008f22:	e7d1      	b.n	8008ec8 <_printf_float+0x94>
 8008f24:	6863      	ldr	r3, [r4, #4]
 8008f26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f2a:	9206      	str	r2, [sp, #24]
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	d13f      	bne.n	8008fb0 <_printf_float+0x17c>
 8008f30:	2306      	movs	r3, #6
 8008f32:	6063      	str	r3, [r4, #4]
 8008f34:	9b05      	ldr	r3, [sp, #20]
 8008f36:	6861      	ldr	r1, [r4, #4]
 8008f38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9303      	str	r3, [sp, #12]
 8008f40:	ab0a      	add	r3, sp, #40	; 0x28
 8008f42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f46:	ab09      	add	r3, sp, #36	; 0x24
 8008f48:	ec49 8b10 	vmov	d0, r8, r9
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	6022      	str	r2, [r4, #0]
 8008f50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f54:	4628      	mov	r0, r5
 8008f56:	f7ff fecd 	bl	8008cf4 <__cvt>
 8008f5a:	9b06      	ldr	r3, [sp, #24]
 8008f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f5e:	2b47      	cmp	r3, #71	; 0x47
 8008f60:	4680      	mov	r8, r0
 8008f62:	d108      	bne.n	8008f76 <_printf_float+0x142>
 8008f64:	1cc8      	adds	r0, r1, #3
 8008f66:	db02      	blt.n	8008f6e <_printf_float+0x13a>
 8008f68:	6863      	ldr	r3, [r4, #4]
 8008f6a:	4299      	cmp	r1, r3
 8008f6c:	dd41      	ble.n	8008ff2 <_printf_float+0x1be>
 8008f6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008f72:	fa5f fb8b 	uxtb.w	fp, fp
 8008f76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f7a:	d820      	bhi.n	8008fbe <_printf_float+0x18a>
 8008f7c:	3901      	subs	r1, #1
 8008f7e:	465a      	mov	r2, fp
 8008f80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f84:	9109      	str	r1, [sp, #36]	; 0x24
 8008f86:	f7ff ff17 	bl	8008db8 <__exponent>
 8008f8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f8c:	1813      	adds	r3, r2, r0
 8008f8e:	2a01      	cmp	r2, #1
 8008f90:	4681      	mov	r9, r0
 8008f92:	6123      	str	r3, [r4, #16]
 8008f94:	dc02      	bgt.n	8008f9c <_printf_float+0x168>
 8008f96:	6822      	ldr	r2, [r4, #0]
 8008f98:	07d2      	lsls	r2, r2, #31
 8008f9a:	d501      	bpl.n	8008fa0 <_printf_float+0x16c>
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	6123      	str	r3, [r4, #16]
 8008fa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d09c      	beq.n	8008ee2 <_printf_float+0xae>
 8008fa8:	232d      	movs	r3, #45	; 0x2d
 8008faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fae:	e798      	b.n	8008ee2 <_printf_float+0xae>
 8008fb0:	9a06      	ldr	r2, [sp, #24]
 8008fb2:	2a47      	cmp	r2, #71	; 0x47
 8008fb4:	d1be      	bne.n	8008f34 <_printf_float+0x100>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1bc      	bne.n	8008f34 <_printf_float+0x100>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e7b9      	b.n	8008f32 <_printf_float+0xfe>
 8008fbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fc2:	d118      	bne.n	8008ff6 <_printf_float+0x1c2>
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	6863      	ldr	r3, [r4, #4]
 8008fc8:	dd0b      	ble.n	8008fe2 <_printf_float+0x1ae>
 8008fca:	6121      	str	r1, [r4, #16]
 8008fcc:	b913      	cbnz	r3, 8008fd4 <_printf_float+0x1a0>
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	07d0      	lsls	r0, r2, #31
 8008fd2:	d502      	bpl.n	8008fda <_printf_float+0x1a6>
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	440b      	add	r3, r1
 8008fd8:	6123      	str	r3, [r4, #16]
 8008fda:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fdc:	f04f 0900 	mov.w	r9, #0
 8008fe0:	e7de      	b.n	8008fa0 <_printf_float+0x16c>
 8008fe2:	b913      	cbnz	r3, 8008fea <_printf_float+0x1b6>
 8008fe4:	6822      	ldr	r2, [r4, #0]
 8008fe6:	07d2      	lsls	r2, r2, #31
 8008fe8:	d501      	bpl.n	8008fee <_printf_float+0x1ba>
 8008fea:	3302      	adds	r3, #2
 8008fec:	e7f4      	b.n	8008fd8 <_printf_float+0x1a4>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e7f2      	b.n	8008fd8 <_printf_float+0x1a4>
 8008ff2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff8:	4299      	cmp	r1, r3
 8008ffa:	db05      	blt.n	8009008 <_printf_float+0x1d4>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	6121      	str	r1, [r4, #16]
 8009000:	07d8      	lsls	r0, r3, #31
 8009002:	d5ea      	bpl.n	8008fda <_printf_float+0x1a6>
 8009004:	1c4b      	adds	r3, r1, #1
 8009006:	e7e7      	b.n	8008fd8 <_printf_float+0x1a4>
 8009008:	2900      	cmp	r1, #0
 800900a:	bfd4      	ite	le
 800900c:	f1c1 0202 	rsble	r2, r1, #2
 8009010:	2201      	movgt	r2, #1
 8009012:	4413      	add	r3, r2
 8009014:	e7e0      	b.n	8008fd8 <_printf_float+0x1a4>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	055a      	lsls	r2, r3, #21
 800901a:	d407      	bmi.n	800902c <_printf_float+0x1f8>
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	4642      	mov	r2, r8
 8009020:	4631      	mov	r1, r6
 8009022:	4628      	mov	r0, r5
 8009024:	47b8      	blx	r7
 8009026:	3001      	adds	r0, #1
 8009028:	d12c      	bne.n	8009084 <_printf_float+0x250>
 800902a:	e764      	b.n	8008ef6 <_printf_float+0xc2>
 800902c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009030:	f240 80e0 	bls.w	80091f4 <_printf_float+0x3c0>
 8009034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009038:	2200      	movs	r2, #0
 800903a:	2300      	movs	r3, #0
 800903c:	f7f7 fd6c 	bl	8000b18 <__aeabi_dcmpeq>
 8009040:	2800      	cmp	r0, #0
 8009042:	d034      	beq.n	80090ae <_printf_float+0x27a>
 8009044:	4a37      	ldr	r2, [pc, #220]	; (8009124 <_printf_float+0x2f0>)
 8009046:	2301      	movs	r3, #1
 8009048:	4631      	mov	r1, r6
 800904a:	4628      	mov	r0, r5
 800904c:	47b8      	blx	r7
 800904e:	3001      	adds	r0, #1
 8009050:	f43f af51 	beq.w	8008ef6 <_printf_float+0xc2>
 8009054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009058:	429a      	cmp	r2, r3
 800905a:	db02      	blt.n	8009062 <_printf_float+0x22e>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	07d8      	lsls	r0, r3, #31
 8009060:	d510      	bpl.n	8009084 <_printf_float+0x250>
 8009062:	ee18 3a10 	vmov	r3, s16
 8009066:	4652      	mov	r2, sl
 8009068:	4631      	mov	r1, r6
 800906a:	4628      	mov	r0, r5
 800906c:	47b8      	blx	r7
 800906e:	3001      	adds	r0, #1
 8009070:	f43f af41 	beq.w	8008ef6 <_printf_float+0xc2>
 8009074:	f04f 0800 	mov.w	r8, #0
 8009078:	f104 091a 	add.w	r9, r4, #26
 800907c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800907e:	3b01      	subs	r3, #1
 8009080:	4543      	cmp	r3, r8
 8009082:	dc09      	bgt.n	8009098 <_printf_float+0x264>
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	079b      	lsls	r3, r3, #30
 8009088:	f100 8105 	bmi.w	8009296 <_printf_float+0x462>
 800908c:	68e0      	ldr	r0, [r4, #12]
 800908e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009090:	4298      	cmp	r0, r3
 8009092:	bfb8      	it	lt
 8009094:	4618      	movlt	r0, r3
 8009096:	e730      	b.n	8008efa <_printf_float+0xc6>
 8009098:	2301      	movs	r3, #1
 800909a:	464a      	mov	r2, r9
 800909c:	4631      	mov	r1, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	47b8      	blx	r7
 80090a2:	3001      	adds	r0, #1
 80090a4:	f43f af27 	beq.w	8008ef6 <_printf_float+0xc2>
 80090a8:	f108 0801 	add.w	r8, r8, #1
 80090ac:	e7e6      	b.n	800907c <_printf_float+0x248>
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	dc39      	bgt.n	8009128 <_printf_float+0x2f4>
 80090b4:	4a1b      	ldr	r2, [pc, #108]	; (8009124 <_printf_float+0x2f0>)
 80090b6:	2301      	movs	r3, #1
 80090b8:	4631      	mov	r1, r6
 80090ba:	4628      	mov	r0, r5
 80090bc:	47b8      	blx	r7
 80090be:	3001      	adds	r0, #1
 80090c0:	f43f af19 	beq.w	8008ef6 <_printf_float+0xc2>
 80090c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090c8:	4313      	orrs	r3, r2
 80090ca:	d102      	bne.n	80090d2 <_printf_float+0x29e>
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	07d9      	lsls	r1, r3, #31
 80090d0:	d5d8      	bpl.n	8009084 <_printf_float+0x250>
 80090d2:	ee18 3a10 	vmov	r3, s16
 80090d6:	4652      	mov	r2, sl
 80090d8:	4631      	mov	r1, r6
 80090da:	4628      	mov	r0, r5
 80090dc:	47b8      	blx	r7
 80090de:	3001      	adds	r0, #1
 80090e0:	f43f af09 	beq.w	8008ef6 <_printf_float+0xc2>
 80090e4:	f04f 0900 	mov.w	r9, #0
 80090e8:	f104 0a1a 	add.w	sl, r4, #26
 80090ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ee:	425b      	negs	r3, r3
 80090f0:	454b      	cmp	r3, r9
 80090f2:	dc01      	bgt.n	80090f8 <_printf_float+0x2c4>
 80090f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f6:	e792      	b.n	800901e <_printf_float+0x1ea>
 80090f8:	2301      	movs	r3, #1
 80090fa:	4652      	mov	r2, sl
 80090fc:	4631      	mov	r1, r6
 80090fe:	4628      	mov	r0, r5
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	f43f aef7 	beq.w	8008ef6 <_printf_float+0xc2>
 8009108:	f109 0901 	add.w	r9, r9, #1
 800910c:	e7ee      	b.n	80090ec <_printf_float+0x2b8>
 800910e:	bf00      	nop
 8009110:	7fefffff 	.word	0x7fefffff
 8009114:	0800bad4 	.word	0x0800bad4
 8009118:	0800bad8 	.word	0x0800bad8
 800911c:	0800bae0 	.word	0x0800bae0
 8009120:	0800badc 	.word	0x0800badc
 8009124:	0800bae4 	.word	0x0800bae4
 8009128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800912a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800912c:	429a      	cmp	r2, r3
 800912e:	bfa8      	it	ge
 8009130:	461a      	movge	r2, r3
 8009132:	2a00      	cmp	r2, #0
 8009134:	4691      	mov	r9, r2
 8009136:	dc37      	bgt.n	80091a8 <_printf_float+0x374>
 8009138:	f04f 0b00 	mov.w	fp, #0
 800913c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009140:	f104 021a 	add.w	r2, r4, #26
 8009144:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009146:	9305      	str	r3, [sp, #20]
 8009148:	eba3 0309 	sub.w	r3, r3, r9
 800914c:	455b      	cmp	r3, fp
 800914e:	dc33      	bgt.n	80091b8 <_printf_float+0x384>
 8009150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009154:	429a      	cmp	r2, r3
 8009156:	db3b      	blt.n	80091d0 <_printf_float+0x39c>
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	07da      	lsls	r2, r3, #31
 800915c:	d438      	bmi.n	80091d0 <_printf_float+0x39c>
 800915e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009160:	9a05      	ldr	r2, [sp, #20]
 8009162:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009164:	1a9a      	subs	r2, r3, r2
 8009166:	eba3 0901 	sub.w	r9, r3, r1
 800916a:	4591      	cmp	r9, r2
 800916c:	bfa8      	it	ge
 800916e:	4691      	movge	r9, r2
 8009170:	f1b9 0f00 	cmp.w	r9, #0
 8009174:	dc35      	bgt.n	80091e2 <_printf_float+0x3ae>
 8009176:	f04f 0800 	mov.w	r8, #0
 800917a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800917e:	f104 0a1a 	add.w	sl, r4, #26
 8009182:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009186:	1a9b      	subs	r3, r3, r2
 8009188:	eba3 0309 	sub.w	r3, r3, r9
 800918c:	4543      	cmp	r3, r8
 800918e:	f77f af79 	ble.w	8009084 <_printf_float+0x250>
 8009192:	2301      	movs	r3, #1
 8009194:	4652      	mov	r2, sl
 8009196:	4631      	mov	r1, r6
 8009198:	4628      	mov	r0, r5
 800919a:	47b8      	blx	r7
 800919c:	3001      	adds	r0, #1
 800919e:	f43f aeaa 	beq.w	8008ef6 <_printf_float+0xc2>
 80091a2:	f108 0801 	add.w	r8, r8, #1
 80091a6:	e7ec      	b.n	8009182 <_printf_float+0x34e>
 80091a8:	4613      	mov	r3, r2
 80091aa:	4631      	mov	r1, r6
 80091ac:	4642      	mov	r2, r8
 80091ae:	4628      	mov	r0, r5
 80091b0:	47b8      	blx	r7
 80091b2:	3001      	adds	r0, #1
 80091b4:	d1c0      	bne.n	8009138 <_printf_float+0x304>
 80091b6:	e69e      	b.n	8008ef6 <_printf_float+0xc2>
 80091b8:	2301      	movs	r3, #1
 80091ba:	4631      	mov	r1, r6
 80091bc:	4628      	mov	r0, r5
 80091be:	9205      	str	r2, [sp, #20]
 80091c0:	47b8      	blx	r7
 80091c2:	3001      	adds	r0, #1
 80091c4:	f43f ae97 	beq.w	8008ef6 <_printf_float+0xc2>
 80091c8:	9a05      	ldr	r2, [sp, #20]
 80091ca:	f10b 0b01 	add.w	fp, fp, #1
 80091ce:	e7b9      	b.n	8009144 <_printf_float+0x310>
 80091d0:	ee18 3a10 	vmov	r3, s16
 80091d4:	4652      	mov	r2, sl
 80091d6:	4631      	mov	r1, r6
 80091d8:	4628      	mov	r0, r5
 80091da:	47b8      	blx	r7
 80091dc:	3001      	adds	r0, #1
 80091de:	d1be      	bne.n	800915e <_printf_float+0x32a>
 80091e0:	e689      	b.n	8008ef6 <_printf_float+0xc2>
 80091e2:	9a05      	ldr	r2, [sp, #20]
 80091e4:	464b      	mov	r3, r9
 80091e6:	4442      	add	r2, r8
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	d1c1      	bne.n	8009176 <_printf_float+0x342>
 80091f2:	e680      	b.n	8008ef6 <_printf_float+0xc2>
 80091f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091f6:	2a01      	cmp	r2, #1
 80091f8:	dc01      	bgt.n	80091fe <_printf_float+0x3ca>
 80091fa:	07db      	lsls	r3, r3, #31
 80091fc:	d538      	bpl.n	8009270 <_printf_float+0x43c>
 80091fe:	2301      	movs	r3, #1
 8009200:	4642      	mov	r2, r8
 8009202:	4631      	mov	r1, r6
 8009204:	4628      	mov	r0, r5
 8009206:	47b8      	blx	r7
 8009208:	3001      	adds	r0, #1
 800920a:	f43f ae74 	beq.w	8008ef6 <_printf_float+0xc2>
 800920e:	ee18 3a10 	vmov	r3, s16
 8009212:	4652      	mov	r2, sl
 8009214:	4631      	mov	r1, r6
 8009216:	4628      	mov	r0, r5
 8009218:	47b8      	blx	r7
 800921a:	3001      	adds	r0, #1
 800921c:	f43f ae6b 	beq.w	8008ef6 <_printf_float+0xc2>
 8009220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009224:	2200      	movs	r2, #0
 8009226:	2300      	movs	r3, #0
 8009228:	f7f7 fc76 	bl	8000b18 <__aeabi_dcmpeq>
 800922c:	b9d8      	cbnz	r0, 8009266 <_printf_float+0x432>
 800922e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009230:	f108 0201 	add.w	r2, r8, #1
 8009234:	3b01      	subs	r3, #1
 8009236:	4631      	mov	r1, r6
 8009238:	4628      	mov	r0, r5
 800923a:	47b8      	blx	r7
 800923c:	3001      	adds	r0, #1
 800923e:	d10e      	bne.n	800925e <_printf_float+0x42a>
 8009240:	e659      	b.n	8008ef6 <_printf_float+0xc2>
 8009242:	2301      	movs	r3, #1
 8009244:	4652      	mov	r2, sl
 8009246:	4631      	mov	r1, r6
 8009248:	4628      	mov	r0, r5
 800924a:	47b8      	blx	r7
 800924c:	3001      	adds	r0, #1
 800924e:	f43f ae52 	beq.w	8008ef6 <_printf_float+0xc2>
 8009252:	f108 0801 	add.w	r8, r8, #1
 8009256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009258:	3b01      	subs	r3, #1
 800925a:	4543      	cmp	r3, r8
 800925c:	dcf1      	bgt.n	8009242 <_printf_float+0x40e>
 800925e:	464b      	mov	r3, r9
 8009260:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009264:	e6dc      	b.n	8009020 <_printf_float+0x1ec>
 8009266:	f04f 0800 	mov.w	r8, #0
 800926a:	f104 0a1a 	add.w	sl, r4, #26
 800926e:	e7f2      	b.n	8009256 <_printf_float+0x422>
 8009270:	2301      	movs	r3, #1
 8009272:	4642      	mov	r2, r8
 8009274:	e7df      	b.n	8009236 <_printf_float+0x402>
 8009276:	2301      	movs	r3, #1
 8009278:	464a      	mov	r2, r9
 800927a:	4631      	mov	r1, r6
 800927c:	4628      	mov	r0, r5
 800927e:	47b8      	blx	r7
 8009280:	3001      	adds	r0, #1
 8009282:	f43f ae38 	beq.w	8008ef6 <_printf_float+0xc2>
 8009286:	f108 0801 	add.w	r8, r8, #1
 800928a:	68e3      	ldr	r3, [r4, #12]
 800928c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800928e:	1a5b      	subs	r3, r3, r1
 8009290:	4543      	cmp	r3, r8
 8009292:	dcf0      	bgt.n	8009276 <_printf_float+0x442>
 8009294:	e6fa      	b.n	800908c <_printf_float+0x258>
 8009296:	f04f 0800 	mov.w	r8, #0
 800929a:	f104 0919 	add.w	r9, r4, #25
 800929e:	e7f4      	b.n	800928a <_printf_float+0x456>

080092a0 <_printf_common>:
 80092a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	4616      	mov	r6, r2
 80092a6:	4699      	mov	r9, r3
 80092a8:	688a      	ldr	r2, [r1, #8]
 80092aa:	690b      	ldr	r3, [r1, #16]
 80092ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092b0:	4293      	cmp	r3, r2
 80092b2:	bfb8      	it	lt
 80092b4:	4613      	movlt	r3, r2
 80092b6:	6033      	str	r3, [r6, #0]
 80092b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092bc:	4607      	mov	r7, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	b10a      	cbz	r2, 80092c6 <_printf_common+0x26>
 80092c2:	3301      	adds	r3, #1
 80092c4:	6033      	str	r3, [r6, #0]
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	0699      	lsls	r1, r3, #26
 80092ca:	bf42      	ittt	mi
 80092cc:	6833      	ldrmi	r3, [r6, #0]
 80092ce:	3302      	addmi	r3, #2
 80092d0:	6033      	strmi	r3, [r6, #0]
 80092d2:	6825      	ldr	r5, [r4, #0]
 80092d4:	f015 0506 	ands.w	r5, r5, #6
 80092d8:	d106      	bne.n	80092e8 <_printf_common+0x48>
 80092da:	f104 0a19 	add.w	sl, r4, #25
 80092de:	68e3      	ldr	r3, [r4, #12]
 80092e0:	6832      	ldr	r2, [r6, #0]
 80092e2:	1a9b      	subs	r3, r3, r2
 80092e4:	42ab      	cmp	r3, r5
 80092e6:	dc26      	bgt.n	8009336 <_printf_common+0x96>
 80092e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092ec:	1e13      	subs	r3, r2, #0
 80092ee:	6822      	ldr	r2, [r4, #0]
 80092f0:	bf18      	it	ne
 80092f2:	2301      	movne	r3, #1
 80092f4:	0692      	lsls	r2, r2, #26
 80092f6:	d42b      	bmi.n	8009350 <_printf_common+0xb0>
 80092f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092fc:	4649      	mov	r1, r9
 80092fe:	4638      	mov	r0, r7
 8009300:	47c0      	blx	r8
 8009302:	3001      	adds	r0, #1
 8009304:	d01e      	beq.n	8009344 <_printf_common+0xa4>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	68e5      	ldr	r5, [r4, #12]
 800930a:	6832      	ldr	r2, [r6, #0]
 800930c:	f003 0306 	and.w	r3, r3, #6
 8009310:	2b04      	cmp	r3, #4
 8009312:	bf08      	it	eq
 8009314:	1aad      	subeq	r5, r5, r2
 8009316:	68a3      	ldr	r3, [r4, #8]
 8009318:	6922      	ldr	r2, [r4, #16]
 800931a:	bf0c      	ite	eq
 800931c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009320:	2500      	movne	r5, #0
 8009322:	4293      	cmp	r3, r2
 8009324:	bfc4      	itt	gt
 8009326:	1a9b      	subgt	r3, r3, r2
 8009328:	18ed      	addgt	r5, r5, r3
 800932a:	2600      	movs	r6, #0
 800932c:	341a      	adds	r4, #26
 800932e:	42b5      	cmp	r5, r6
 8009330:	d11a      	bne.n	8009368 <_printf_common+0xc8>
 8009332:	2000      	movs	r0, #0
 8009334:	e008      	b.n	8009348 <_printf_common+0xa8>
 8009336:	2301      	movs	r3, #1
 8009338:	4652      	mov	r2, sl
 800933a:	4649      	mov	r1, r9
 800933c:	4638      	mov	r0, r7
 800933e:	47c0      	blx	r8
 8009340:	3001      	adds	r0, #1
 8009342:	d103      	bne.n	800934c <_printf_common+0xac>
 8009344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934c:	3501      	adds	r5, #1
 800934e:	e7c6      	b.n	80092de <_printf_common+0x3e>
 8009350:	18e1      	adds	r1, r4, r3
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	2030      	movs	r0, #48	; 0x30
 8009356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800935a:	4422      	add	r2, r4
 800935c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009364:	3302      	adds	r3, #2
 8009366:	e7c7      	b.n	80092f8 <_printf_common+0x58>
 8009368:	2301      	movs	r3, #1
 800936a:	4622      	mov	r2, r4
 800936c:	4649      	mov	r1, r9
 800936e:	4638      	mov	r0, r7
 8009370:	47c0      	blx	r8
 8009372:	3001      	adds	r0, #1
 8009374:	d0e6      	beq.n	8009344 <_printf_common+0xa4>
 8009376:	3601      	adds	r6, #1
 8009378:	e7d9      	b.n	800932e <_printf_common+0x8e>
	...

0800937c <_printf_i>:
 800937c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009380:	7e0f      	ldrb	r7, [r1, #24]
 8009382:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009384:	2f78      	cmp	r7, #120	; 0x78
 8009386:	4691      	mov	r9, r2
 8009388:	4680      	mov	r8, r0
 800938a:	460c      	mov	r4, r1
 800938c:	469a      	mov	sl, r3
 800938e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009392:	d807      	bhi.n	80093a4 <_printf_i+0x28>
 8009394:	2f62      	cmp	r7, #98	; 0x62
 8009396:	d80a      	bhi.n	80093ae <_printf_i+0x32>
 8009398:	2f00      	cmp	r7, #0
 800939a:	f000 80d8 	beq.w	800954e <_printf_i+0x1d2>
 800939e:	2f58      	cmp	r7, #88	; 0x58
 80093a0:	f000 80a3 	beq.w	80094ea <_printf_i+0x16e>
 80093a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093ac:	e03a      	b.n	8009424 <_printf_i+0xa8>
 80093ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093b2:	2b15      	cmp	r3, #21
 80093b4:	d8f6      	bhi.n	80093a4 <_printf_i+0x28>
 80093b6:	a101      	add	r1, pc, #4	; (adr r1, 80093bc <_printf_i+0x40>)
 80093b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093bc:	08009415 	.word	0x08009415
 80093c0:	08009429 	.word	0x08009429
 80093c4:	080093a5 	.word	0x080093a5
 80093c8:	080093a5 	.word	0x080093a5
 80093cc:	080093a5 	.word	0x080093a5
 80093d0:	080093a5 	.word	0x080093a5
 80093d4:	08009429 	.word	0x08009429
 80093d8:	080093a5 	.word	0x080093a5
 80093dc:	080093a5 	.word	0x080093a5
 80093e0:	080093a5 	.word	0x080093a5
 80093e4:	080093a5 	.word	0x080093a5
 80093e8:	08009535 	.word	0x08009535
 80093ec:	08009459 	.word	0x08009459
 80093f0:	08009517 	.word	0x08009517
 80093f4:	080093a5 	.word	0x080093a5
 80093f8:	080093a5 	.word	0x080093a5
 80093fc:	08009557 	.word	0x08009557
 8009400:	080093a5 	.word	0x080093a5
 8009404:	08009459 	.word	0x08009459
 8009408:	080093a5 	.word	0x080093a5
 800940c:	080093a5 	.word	0x080093a5
 8009410:	0800951f 	.word	0x0800951f
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	1d1a      	adds	r2, r3, #4
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	602a      	str	r2, [r5, #0]
 800941c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009424:	2301      	movs	r3, #1
 8009426:	e0a3      	b.n	8009570 <_printf_i+0x1f4>
 8009428:	6820      	ldr	r0, [r4, #0]
 800942a:	6829      	ldr	r1, [r5, #0]
 800942c:	0606      	lsls	r6, r0, #24
 800942e:	f101 0304 	add.w	r3, r1, #4
 8009432:	d50a      	bpl.n	800944a <_printf_i+0xce>
 8009434:	680e      	ldr	r6, [r1, #0]
 8009436:	602b      	str	r3, [r5, #0]
 8009438:	2e00      	cmp	r6, #0
 800943a:	da03      	bge.n	8009444 <_printf_i+0xc8>
 800943c:	232d      	movs	r3, #45	; 0x2d
 800943e:	4276      	negs	r6, r6
 8009440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009444:	485e      	ldr	r0, [pc, #376]	; (80095c0 <_printf_i+0x244>)
 8009446:	230a      	movs	r3, #10
 8009448:	e019      	b.n	800947e <_printf_i+0x102>
 800944a:	680e      	ldr	r6, [r1, #0]
 800944c:	602b      	str	r3, [r5, #0]
 800944e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009452:	bf18      	it	ne
 8009454:	b236      	sxthne	r6, r6
 8009456:	e7ef      	b.n	8009438 <_printf_i+0xbc>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	6820      	ldr	r0, [r4, #0]
 800945c:	1d19      	adds	r1, r3, #4
 800945e:	6029      	str	r1, [r5, #0]
 8009460:	0601      	lsls	r1, r0, #24
 8009462:	d501      	bpl.n	8009468 <_printf_i+0xec>
 8009464:	681e      	ldr	r6, [r3, #0]
 8009466:	e002      	b.n	800946e <_printf_i+0xf2>
 8009468:	0646      	lsls	r6, r0, #25
 800946a:	d5fb      	bpl.n	8009464 <_printf_i+0xe8>
 800946c:	881e      	ldrh	r6, [r3, #0]
 800946e:	4854      	ldr	r0, [pc, #336]	; (80095c0 <_printf_i+0x244>)
 8009470:	2f6f      	cmp	r7, #111	; 0x6f
 8009472:	bf0c      	ite	eq
 8009474:	2308      	moveq	r3, #8
 8009476:	230a      	movne	r3, #10
 8009478:	2100      	movs	r1, #0
 800947a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800947e:	6865      	ldr	r5, [r4, #4]
 8009480:	60a5      	str	r5, [r4, #8]
 8009482:	2d00      	cmp	r5, #0
 8009484:	bfa2      	ittt	ge
 8009486:	6821      	ldrge	r1, [r4, #0]
 8009488:	f021 0104 	bicge.w	r1, r1, #4
 800948c:	6021      	strge	r1, [r4, #0]
 800948e:	b90e      	cbnz	r6, 8009494 <_printf_i+0x118>
 8009490:	2d00      	cmp	r5, #0
 8009492:	d04d      	beq.n	8009530 <_printf_i+0x1b4>
 8009494:	4615      	mov	r5, r2
 8009496:	fbb6 f1f3 	udiv	r1, r6, r3
 800949a:	fb03 6711 	mls	r7, r3, r1, r6
 800949e:	5dc7      	ldrb	r7, [r0, r7]
 80094a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094a4:	4637      	mov	r7, r6
 80094a6:	42bb      	cmp	r3, r7
 80094a8:	460e      	mov	r6, r1
 80094aa:	d9f4      	bls.n	8009496 <_printf_i+0x11a>
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d10b      	bne.n	80094c8 <_printf_i+0x14c>
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	07de      	lsls	r6, r3, #31
 80094b4:	d508      	bpl.n	80094c8 <_printf_i+0x14c>
 80094b6:	6923      	ldr	r3, [r4, #16]
 80094b8:	6861      	ldr	r1, [r4, #4]
 80094ba:	4299      	cmp	r1, r3
 80094bc:	bfde      	ittt	le
 80094be:	2330      	movle	r3, #48	; 0x30
 80094c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80094c8:	1b52      	subs	r2, r2, r5
 80094ca:	6122      	str	r2, [r4, #16]
 80094cc:	f8cd a000 	str.w	sl, [sp]
 80094d0:	464b      	mov	r3, r9
 80094d2:	aa03      	add	r2, sp, #12
 80094d4:	4621      	mov	r1, r4
 80094d6:	4640      	mov	r0, r8
 80094d8:	f7ff fee2 	bl	80092a0 <_printf_common>
 80094dc:	3001      	adds	r0, #1
 80094de:	d14c      	bne.n	800957a <_printf_i+0x1fe>
 80094e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094e4:	b004      	add	sp, #16
 80094e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ea:	4835      	ldr	r0, [pc, #212]	; (80095c0 <_printf_i+0x244>)
 80094ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80094f0:	6829      	ldr	r1, [r5, #0]
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80094f8:	6029      	str	r1, [r5, #0]
 80094fa:	061d      	lsls	r5, r3, #24
 80094fc:	d514      	bpl.n	8009528 <_printf_i+0x1ac>
 80094fe:	07df      	lsls	r7, r3, #31
 8009500:	bf44      	itt	mi
 8009502:	f043 0320 	orrmi.w	r3, r3, #32
 8009506:	6023      	strmi	r3, [r4, #0]
 8009508:	b91e      	cbnz	r6, 8009512 <_printf_i+0x196>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	f023 0320 	bic.w	r3, r3, #32
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	2310      	movs	r3, #16
 8009514:	e7b0      	b.n	8009478 <_printf_i+0xfc>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	f043 0320 	orr.w	r3, r3, #32
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	2378      	movs	r3, #120	; 0x78
 8009520:	4828      	ldr	r0, [pc, #160]	; (80095c4 <_printf_i+0x248>)
 8009522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009526:	e7e3      	b.n	80094f0 <_printf_i+0x174>
 8009528:	0659      	lsls	r1, r3, #25
 800952a:	bf48      	it	mi
 800952c:	b2b6      	uxthmi	r6, r6
 800952e:	e7e6      	b.n	80094fe <_printf_i+0x182>
 8009530:	4615      	mov	r5, r2
 8009532:	e7bb      	b.n	80094ac <_printf_i+0x130>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	6826      	ldr	r6, [r4, #0]
 8009538:	6961      	ldr	r1, [r4, #20]
 800953a:	1d18      	adds	r0, r3, #4
 800953c:	6028      	str	r0, [r5, #0]
 800953e:	0635      	lsls	r5, r6, #24
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	d501      	bpl.n	8009548 <_printf_i+0x1cc>
 8009544:	6019      	str	r1, [r3, #0]
 8009546:	e002      	b.n	800954e <_printf_i+0x1d2>
 8009548:	0670      	lsls	r0, r6, #25
 800954a:	d5fb      	bpl.n	8009544 <_printf_i+0x1c8>
 800954c:	8019      	strh	r1, [r3, #0]
 800954e:	2300      	movs	r3, #0
 8009550:	6123      	str	r3, [r4, #16]
 8009552:	4615      	mov	r5, r2
 8009554:	e7ba      	b.n	80094cc <_printf_i+0x150>
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	1d1a      	adds	r2, r3, #4
 800955a:	602a      	str	r2, [r5, #0]
 800955c:	681d      	ldr	r5, [r3, #0]
 800955e:	6862      	ldr	r2, [r4, #4]
 8009560:	2100      	movs	r1, #0
 8009562:	4628      	mov	r0, r5
 8009564:	f7f6 fe64 	bl	8000230 <memchr>
 8009568:	b108      	cbz	r0, 800956e <_printf_i+0x1f2>
 800956a:	1b40      	subs	r0, r0, r5
 800956c:	6060      	str	r0, [r4, #4]
 800956e:	6863      	ldr	r3, [r4, #4]
 8009570:	6123      	str	r3, [r4, #16]
 8009572:	2300      	movs	r3, #0
 8009574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009578:	e7a8      	b.n	80094cc <_printf_i+0x150>
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	462a      	mov	r2, r5
 800957e:	4649      	mov	r1, r9
 8009580:	4640      	mov	r0, r8
 8009582:	47d0      	blx	sl
 8009584:	3001      	adds	r0, #1
 8009586:	d0ab      	beq.n	80094e0 <_printf_i+0x164>
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	079b      	lsls	r3, r3, #30
 800958c:	d413      	bmi.n	80095b6 <_printf_i+0x23a>
 800958e:	68e0      	ldr	r0, [r4, #12]
 8009590:	9b03      	ldr	r3, [sp, #12]
 8009592:	4298      	cmp	r0, r3
 8009594:	bfb8      	it	lt
 8009596:	4618      	movlt	r0, r3
 8009598:	e7a4      	b.n	80094e4 <_printf_i+0x168>
 800959a:	2301      	movs	r3, #1
 800959c:	4632      	mov	r2, r6
 800959e:	4649      	mov	r1, r9
 80095a0:	4640      	mov	r0, r8
 80095a2:	47d0      	blx	sl
 80095a4:	3001      	adds	r0, #1
 80095a6:	d09b      	beq.n	80094e0 <_printf_i+0x164>
 80095a8:	3501      	adds	r5, #1
 80095aa:	68e3      	ldr	r3, [r4, #12]
 80095ac:	9903      	ldr	r1, [sp, #12]
 80095ae:	1a5b      	subs	r3, r3, r1
 80095b0:	42ab      	cmp	r3, r5
 80095b2:	dcf2      	bgt.n	800959a <_printf_i+0x21e>
 80095b4:	e7eb      	b.n	800958e <_printf_i+0x212>
 80095b6:	2500      	movs	r5, #0
 80095b8:	f104 0619 	add.w	r6, r4, #25
 80095bc:	e7f5      	b.n	80095aa <_printf_i+0x22e>
 80095be:	bf00      	nop
 80095c0:	0800bae6 	.word	0x0800bae6
 80095c4:	0800baf7 	.word	0x0800baf7

080095c8 <iprintf>:
 80095c8:	b40f      	push	{r0, r1, r2, r3}
 80095ca:	4b0a      	ldr	r3, [pc, #40]	; (80095f4 <iprintf+0x2c>)
 80095cc:	b513      	push	{r0, r1, r4, lr}
 80095ce:	681c      	ldr	r4, [r3, #0]
 80095d0:	b124      	cbz	r4, 80095dc <iprintf+0x14>
 80095d2:	69a3      	ldr	r3, [r4, #24]
 80095d4:	b913      	cbnz	r3, 80095dc <iprintf+0x14>
 80095d6:	4620      	mov	r0, r4
 80095d8:	f001 f8da 	bl	800a790 <__sinit>
 80095dc:	ab05      	add	r3, sp, #20
 80095de:	9a04      	ldr	r2, [sp, #16]
 80095e0:	68a1      	ldr	r1, [r4, #8]
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	4620      	mov	r0, r4
 80095e6:	f001 fe97 	bl	800b318 <_vfiprintf_r>
 80095ea:	b002      	add	sp, #8
 80095ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095f0:	b004      	add	sp, #16
 80095f2:	4770      	bx	lr
 80095f4:	20000018 	.word	0x20000018

080095f8 <_puts_r>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	460e      	mov	r6, r1
 80095fc:	4605      	mov	r5, r0
 80095fe:	b118      	cbz	r0, 8009608 <_puts_r+0x10>
 8009600:	6983      	ldr	r3, [r0, #24]
 8009602:	b90b      	cbnz	r3, 8009608 <_puts_r+0x10>
 8009604:	f001 f8c4 	bl	800a790 <__sinit>
 8009608:	69ab      	ldr	r3, [r5, #24]
 800960a:	68ac      	ldr	r4, [r5, #8]
 800960c:	b913      	cbnz	r3, 8009614 <_puts_r+0x1c>
 800960e:	4628      	mov	r0, r5
 8009610:	f001 f8be 	bl	800a790 <__sinit>
 8009614:	4b2c      	ldr	r3, [pc, #176]	; (80096c8 <_puts_r+0xd0>)
 8009616:	429c      	cmp	r4, r3
 8009618:	d120      	bne.n	800965c <_puts_r+0x64>
 800961a:	686c      	ldr	r4, [r5, #4]
 800961c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800961e:	07db      	lsls	r3, r3, #31
 8009620:	d405      	bmi.n	800962e <_puts_r+0x36>
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	0598      	lsls	r0, r3, #22
 8009626:	d402      	bmi.n	800962e <_puts_r+0x36>
 8009628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800962a:	f001 f954 	bl	800a8d6 <__retarget_lock_acquire_recursive>
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	0719      	lsls	r1, r3, #28
 8009632:	d51d      	bpl.n	8009670 <_puts_r+0x78>
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	b1db      	cbz	r3, 8009670 <_puts_r+0x78>
 8009638:	3e01      	subs	r6, #1
 800963a:	68a3      	ldr	r3, [r4, #8]
 800963c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009640:	3b01      	subs	r3, #1
 8009642:	60a3      	str	r3, [r4, #8]
 8009644:	bb39      	cbnz	r1, 8009696 <_puts_r+0x9e>
 8009646:	2b00      	cmp	r3, #0
 8009648:	da38      	bge.n	80096bc <_puts_r+0xc4>
 800964a:	4622      	mov	r2, r4
 800964c:	210a      	movs	r1, #10
 800964e:	4628      	mov	r0, r5
 8009650:	f000 f848 	bl	80096e4 <__swbuf_r>
 8009654:	3001      	adds	r0, #1
 8009656:	d011      	beq.n	800967c <_puts_r+0x84>
 8009658:	250a      	movs	r5, #10
 800965a:	e011      	b.n	8009680 <_puts_r+0x88>
 800965c:	4b1b      	ldr	r3, [pc, #108]	; (80096cc <_puts_r+0xd4>)
 800965e:	429c      	cmp	r4, r3
 8009660:	d101      	bne.n	8009666 <_puts_r+0x6e>
 8009662:	68ac      	ldr	r4, [r5, #8]
 8009664:	e7da      	b.n	800961c <_puts_r+0x24>
 8009666:	4b1a      	ldr	r3, [pc, #104]	; (80096d0 <_puts_r+0xd8>)
 8009668:	429c      	cmp	r4, r3
 800966a:	bf08      	it	eq
 800966c:	68ec      	ldreq	r4, [r5, #12]
 800966e:	e7d5      	b.n	800961c <_puts_r+0x24>
 8009670:	4621      	mov	r1, r4
 8009672:	4628      	mov	r0, r5
 8009674:	f000 f888 	bl	8009788 <__swsetup_r>
 8009678:	2800      	cmp	r0, #0
 800967a:	d0dd      	beq.n	8009638 <_puts_r+0x40>
 800967c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009682:	07da      	lsls	r2, r3, #31
 8009684:	d405      	bmi.n	8009692 <_puts_r+0x9a>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	059b      	lsls	r3, r3, #22
 800968a:	d402      	bmi.n	8009692 <_puts_r+0x9a>
 800968c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800968e:	f001 f923 	bl	800a8d8 <__retarget_lock_release_recursive>
 8009692:	4628      	mov	r0, r5
 8009694:	bd70      	pop	{r4, r5, r6, pc}
 8009696:	2b00      	cmp	r3, #0
 8009698:	da04      	bge.n	80096a4 <_puts_r+0xac>
 800969a:	69a2      	ldr	r2, [r4, #24]
 800969c:	429a      	cmp	r2, r3
 800969e:	dc06      	bgt.n	80096ae <_puts_r+0xb6>
 80096a0:	290a      	cmp	r1, #10
 80096a2:	d004      	beq.n	80096ae <_puts_r+0xb6>
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	6022      	str	r2, [r4, #0]
 80096aa:	7019      	strb	r1, [r3, #0]
 80096ac:	e7c5      	b.n	800963a <_puts_r+0x42>
 80096ae:	4622      	mov	r2, r4
 80096b0:	4628      	mov	r0, r5
 80096b2:	f000 f817 	bl	80096e4 <__swbuf_r>
 80096b6:	3001      	adds	r0, #1
 80096b8:	d1bf      	bne.n	800963a <_puts_r+0x42>
 80096ba:	e7df      	b.n	800967c <_puts_r+0x84>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	250a      	movs	r5, #10
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	6022      	str	r2, [r4, #0]
 80096c4:	701d      	strb	r5, [r3, #0]
 80096c6:	e7db      	b.n	8009680 <_puts_r+0x88>
 80096c8:	0800bbb8 	.word	0x0800bbb8
 80096cc:	0800bbd8 	.word	0x0800bbd8
 80096d0:	0800bb98 	.word	0x0800bb98

080096d4 <puts>:
 80096d4:	4b02      	ldr	r3, [pc, #8]	; (80096e0 <puts+0xc>)
 80096d6:	4601      	mov	r1, r0
 80096d8:	6818      	ldr	r0, [r3, #0]
 80096da:	f7ff bf8d 	b.w	80095f8 <_puts_r>
 80096de:	bf00      	nop
 80096e0:	20000018 	.word	0x20000018

080096e4 <__swbuf_r>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	460e      	mov	r6, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	4605      	mov	r5, r0
 80096ec:	b118      	cbz	r0, 80096f6 <__swbuf_r+0x12>
 80096ee:	6983      	ldr	r3, [r0, #24]
 80096f0:	b90b      	cbnz	r3, 80096f6 <__swbuf_r+0x12>
 80096f2:	f001 f84d 	bl	800a790 <__sinit>
 80096f6:	4b21      	ldr	r3, [pc, #132]	; (800977c <__swbuf_r+0x98>)
 80096f8:	429c      	cmp	r4, r3
 80096fa:	d12b      	bne.n	8009754 <__swbuf_r+0x70>
 80096fc:	686c      	ldr	r4, [r5, #4]
 80096fe:	69a3      	ldr	r3, [r4, #24]
 8009700:	60a3      	str	r3, [r4, #8]
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	071a      	lsls	r2, r3, #28
 8009706:	d52f      	bpl.n	8009768 <__swbuf_r+0x84>
 8009708:	6923      	ldr	r3, [r4, #16]
 800970a:	b36b      	cbz	r3, 8009768 <__swbuf_r+0x84>
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	6820      	ldr	r0, [r4, #0]
 8009710:	1ac0      	subs	r0, r0, r3
 8009712:	6963      	ldr	r3, [r4, #20]
 8009714:	b2f6      	uxtb	r6, r6
 8009716:	4283      	cmp	r3, r0
 8009718:	4637      	mov	r7, r6
 800971a:	dc04      	bgt.n	8009726 <__swbuf_r+0x42>
 800971c:	4621      	mov	r1, r4
 800971e:	4628      	mov	r0, r5
 8009720:	f000 ffa2 	bl	800a668 <_fflush_r>
 8009724:	bb30      	cbnz	r0, 8009774 <__swbuf_r+0x90>
 8009726:	68a3      	ldr	r3, [r4, #8]
 8009728:	3b01      	subs	r3, #1
 800972a:	60a3      	str	r3, [r4, #8]
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	6022      	str	r2, [r4, #0]
 8009732:	701e      	strb	r6, [r3, #0]
 8009734:	6963      	ldr	r3, [r4, #20]
 8009736:	3001      	adds	r0, #1
 8009738:	4283      	cmp	r3, r0
 800973a:	d004      	beq.n	8009746 <__swbuf_r+0x62>
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	07db      	lsls	r3, r3, #31
 8009740:	d506      	bpl.n	8009750 <__swbuf_r+0x6c>
 8009742:	2e0a      	cmp	r6, #10
 8009744:	d104      	bne.n	8009750 <__swbuf_r+0x6c>
 8009746:	4621      	mov	r1, r4
 8009748:	4628      	mov	r0, r5
 800974a:	f000 ff8d 	bl	800a668 <_fflush_r>
 800974e:	b988      	cbnz	r0, 8009774 <__swbuf_r+0x90>
 8009750:	4638      	mov	r0, r7
 8009752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009754:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <__swbuf_r+0x9c>)
 8009756:	429c      	cmp	r4, r3
 8009758:	d101      	bne.n	800975e <__swbuf_r+0x7a>
 800975a:	68ac      	ldr	r4, [r5, #8]
 800975c:	e7cf      	b.n	80096fe <__swbuf_r+0x1a>
 800975e:	4b09      	ldr	r3, [pc, #36]	; (8009784 <__swbuf_r+0xa0>)
 8009760:	429c      	cmp	r4, r3
 8009762:	bf08      	it	eq
 8009764:	68ec      	ldreq	r4, [r5, #12]
 8009766:	e7ca      	b.n	80096fe <__swbuf_r+0x1a>
 8009768:	4621      	mov	r1, r4
 800976a:	4628      	mov	r0, r5
 800976c:	f000 f80c 	bl	8009788 <__swsetup_r>
 8009770:	2800      	cmp	r0, #0
 8009772:	d0cb      	beq.n	800970c <__swbuf_r+0x28>
 8009774:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009778:	e7ea      	b.n	8009750 <__swbuf_r+0x6c>
 800977a:	bf00      	nop
 800977c:	0800bbb8 	.word	0x0800bbb8
 8009780:	0800bbd8 	.word	0x0800bbd8
 8009784:	0800bb98 	.word	0x0800bb98

08009788 <__swsetup_r>:
 8009788:	4b32      	ldr	r3, [pc, #200]	; (8009854 <__swsetup_r+0xcc>)
 800978a:	b570      	push	{r4, r5, r6, lr}
 800978c:	681d      	ldr	r5, [r3, #0]
 800978e:	4606      	mov	r6, r0
 8009790:	460c      	mov	r4, r1
 8009792:	b125      	cbz	r5, 800979e <__swsetup_r+0x16>
 8009794:	69ab      	ldr	r3, [r5, #24]
 8009796:	b913      	cbnz	r3, 800979e <__swsetup_r+0x16>
 8009798:	4628      	mov	r0, r5
 800979a:	f000 fff9 	bl	800a790 <__sinit>
 800979e:	4b2e      	ldr	r3, [pc, #184]	; (8009858 <__swsetup_r+0xd0>)
 80097a0:	429c      	cmp	r4, r3
 80097a2:	d10f      	bne.n	80097c4 <__swsetup_r+0x3c>
 80097a4:	686c      	ldr	r4, [r5, #4]
 80097a6:	89a3      	ldrh	r3, [r4, #12]
 80097a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097ac:	0719      	lsls	r1, r3, #28
 80097ae:	d42c      	bmi.n	800980a <__swsetup_r+0x82>
 80097b0:	06dd      	lsls	r5, r3, #27
 80097b2:	d411      	bmi.n	80097d8 <__swsetup_r+0x50>
 80097b4:	2309      	movs	r3, #9
 80097b6:	6033      	str	r3, [r6, #0]
 80097b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097c2:	e03e      	b.n	8009842 <__swsetup_r+0xba>
 80097c4:	4b25      	ldr	r3, [pc, #148]	; (800985c <__swsetup_r+0xd4>)
 80097c6:	429c      	cmp	r4, r3
 80097c8:	d101      	bne.n	80097ce <__swsetup_r+0x46>
 80097ca:	68ac      	ldr	r4, [r5, #8]
 80097cc:	e7eb      	b.n	80097a6 <__swsetup_r+0x1e>
 80097ce:	4b24      	ldr	r3, [pc, #144]	; (8009860 <__swsetup_r+0xd8>)
 80097d0:	429c      	cmp	r4, r3
 80097d2:	bf08      	it	eq
 80097d4:	68ec      	ldreq	r4, [r5, #12]
 80097d6:	e7e6      	b.n	80097a6 <__swsetup_r+0x1e>
 80097d8:	0758      	lsls	r0, r3, #29
 80097da:	d512      	bpl.n	8009802 <__swsetup_r+0x7a>
 80097dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097de:	b141      	cbz	r1, 80097f2 <__swsetup_r+0x6a>
 80097e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097e4:	4299      	cmp	r1, r3
 80097e6:	d002      	beq.n	80097ee <__swsetup_r+0x66>
 80097e8:	4630      	mov	r0, r6
 80097ea:	f001 fc8b 	bl	800b104 <_free_r>
 80097ee:	2300      	movs	r3, #0
 80097f0:	6363      	str	r3, [r4, #52]	; 0x34
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	2300      	movs	r3, #0
 80097fc:	6063      	str	r3, [r4, #4]
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	f043 0308 	orr.w	r3, r3, #8
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	b94b      	cbnz	r3, 8009822 <__swsetup_r+0x9a>
 800980e:	89a3      	ldrh	r3, [r4, #12]
 8009810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009818:	d003      	beq.n	8009822 <__swsetup_r+0x9a>
 800981a:	4621      	mov	r1, r4
 800981c:	4630      	mov	r0, r6
 800981e:	f001 f881 	bl	800a924 <__smakebuf_r>
 8009822:	89a0      	ldrh	r0, [r4, #12]
 8009824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009828:	f010 0301 	ands.w	r3, r0, #1
 800982c:	d00a      	beq.n	8009844 <__swsetup_r+0xbc>
 800982e:	2300      	movs	r3, #0
 8009830:	60a3      	str	r3, [r4, #8]
 8009832:	6963      	ldr	r3, [r4, #20]
 8009834:	425b      	negs	r3, r3
 8009836:	61a3      	str	r3, [r4, #24]
 8009838:	6923      	ldr	r3, [r4, #16]
 800983a:	b943      	cbnz	r3, 800984e <__swsetup_r+0xc6>
 800983c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009840:	d1ba      	bne.n	80097b8 <__swsetup_r+0x30>
 8009842:	bd70      	pop	{r4, r5, r6, pc}
 8009844:	0781      	lsls	r1, r0, #30
 8009846:	bf58      	it	pl
 8009848:	6963      	ldrpl	r3, [r4, #20]
 800984a:	60a3      	str	r3, [r4, #8]
 800984c:	e7f4      	b.n	8009838 <__swsetup_r+0xb0>
 800984e:	2000      	movs	r0, #0
 8009850:	e7f7      	b.n	8009842 <__swsetup_r+0xba>
 8009852:	bf00      	nop
 8009854:	20000018 	.word	0x20000018
 8009858:	0800bbb8 	.word	0x0800bbb8
 800985c:	0800bbd8 	.word	0x0800bbd8
 8009860:	0800bb98 	.word	0x0800bb98

08009864 <quorem>:
 8009864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009868:	6903      	ldr	r3, [r0, #16]
 800986a:	690c      	ldr	r4, [r1, #16]
 800986c:	42a3      	cmp	r3, r4
 800986e:	4607      	mov	r7, r0
 8009870:	f2c0 8081 	blt.w	8009976 <quorem+0x112>
 8009874:	3c01      	subs	r4, #1
 8009876:	f101 0814 	add.w	r8, r1, #20
 800987a:	f100 0514 	add.w	r5, r0, #20
 800987e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009882:	9301      	str	r3, [sp, #4]
 8009884:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800988c:	3301      	adds	r3, #1
 800988e:	429a      	cmp	r2, r3
 8009890:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009898:	fbb2 f6f3 	udiv	r6, r2, r3
 800989c:	d331      	bcc.n	8009902 <quorem+0x9e>
 800989e:	f04f 0e00 	mov.w	lr, #0
 80098a2:	4640      	mov	r0, r8
 80098a4:	46ac      	mov	ip, r5
 80098a6:	46f2      	mov	sl, lr
 80098a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80098ac:	b293      	uxth	r3, r2
 80098ae:	fb06 e303 	mla	r3, r6, r3, lr
 80098b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	ebaa 0303 	sub.w	r3, sl, r3
 80098bc:	f8dc a000 	ldr.w	sl, [ip]
 80098c0:	0c12      	lsrs	r2, r2, #16
 80098c2:	fa13 f38a 	uxtah	r3, r3, sl
 80098c6:	fb06 e202 	mla	r2, r6, r2, lr
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	9b00      	ldr	r3, [sp, #0]
 80098ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098d2:	b292      	uxth	r2, r2
 80098d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80098e0:	4581      	cmp	r9, r0
 80098e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098e6:	f84c 3b04 	str.w	r3, [ip], #4
 80098ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098ee:	d2db      	bcs.n	80098a8 <quorem+0x44>
 80098f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80098f4:	b92b      	cbnz	r3, 8009902 <quorem+0x9e>
 80098f6:	9b01      	ldr	r3, [sp, #4]
 80098f8:	3b04      	subs	r3, #4
 80098fa:	429d      	cmp	r5, r3
 80098fc:	461a      	mov	r2, r3
 80098fe:	d32e      	bcc.n	800995e <quorem+0xfa>
 8009900:	613c      	str	r4, [r7, #16]
 8009902:	4638      	mov	r0, r7
 8009904:	f001 fae6 	bl	800aed4 <__mcmp>
 8009908:	2800      	cmp	r0, #0
 800990a:	db24      	blt.n	8009956 <quorem+0xf2>
 800990c:	3601      	adds	r6, #1
 800990e:	4628      	mov	r0, r5
 8009910:	f04f 0c00 	mov.w	ip, #0
 8009914:	f858 2b04 	ldr.w	r2, [r8], #4
 8009918:	f8d0 e000 	ldr.w	lr, [r0]
 800991c:	b293      	uxth	r3, r2
 800991e:	ebac 0303 	sub.w	r3, ip, r3
 8009922:	0c12      	lsrs	r2, r2, #16
 8009924:	fa13 f38e 	uxtah	r3, r3, lr
 8009928:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800992c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009930:	b29b      	uxth	r3, r3
 8009932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009936:	45c1      	cmp	r9, r8
 8009938:	f840 3b04 	str.w	r3, [r0], #4
 800993c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009940:	d2e8      	bcs.n	8009914 <quorem+0xb0>
 8009942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800994a:	b922      	cbnz	r2, 8009956 <quorem+0xf2>
 800994c:	3b04      	subs	r3, #4
 800994e:	429d      	cmp	r5, r3
 8009950:	461a      	mov	r2, r3
 8009952:	d30a      	bcc.n	800996a <quorem+0x106>
 8009954:	613c      	str	r4, [r7, #16]
 8009956:	4630      	mov	r0, r6
 8009958:	b003      	add	sp, #12
 800995a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995e:	6812      	ldr	r2, [r2, #0]
 8009960:	3b04      	subs	r3, #4
 8009962:	2a00      	cmp	r2, #0
 8009964:	d1cc      	bne.n	8009900 <quorem+0x9c>
 8009966:	3c01      	subs	r4, #1
 8009968:	e7c7      	b.n	80098fa <quorem+0x96>
 800996a:	6812      	ldr	r2, [r2, #0]
 800996c:	3b04      	subs	r3, #4
 800996e:	2a00      	cmp	r2, #0
 8009970:	d1f0      	bne.n	8009954 <quorem+0xf0>
 8009972:	3c01      	subs	r4, #1
 8009974:	e7eb      	b.n	800994e <quorem+0xea>
 8009976:	2000      	movs	r0, #0
 8009978:	e7ee      	b.n	8009958 <quorem+0xf4>
 800997a:	0000      	movs	r0, r0
 800997c:	0000      	movs	r0, r0
	...

08009980 <_dtoa_r>:
 8009980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	ed2d 8b04 	vpush	{d8-d9}
 8009988:	ec57 6b10 	vmov	r6, r7, d0
 800998c:	b093      	sub	sp, #76	; 0x4c
 800998e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009990:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009994:	9106      	str	r1, [sp, #24]
 8009996:	ee10 aa10 	vmov	sl, s0
 800999a:	4604      	mov	r4, r0
 800999c:	9209      	str	r2, [sp, #36]	; 0x24
 800999e:	930c      	str	r3, [sp, #48]	; 0x30
 80099a0:	46bb      	mov	fp, r7
 80099a2:	b975      	cbnz	r5, 80099c2 <_dtoa_r+0x42>
 80099a4:	2010      	movs	r0, #16
 80099a6:	f000 fffd 	bl	800a9a4 <malloc>
 80099aa:	4602      	mov	r2, r0
 80099ac:	6260      	str	r0, [r4, #36]	; 0x24
 80099ae:	b920      	cbnz	r0, 80099ba <_dtoa_r+0x3a>
 80099b0:	4ba7      	ldr	r3, [pc, #668]	; (8009c50 <_dtoa_r+0x2d0>)
 80099b2:	21ea      	movs	r1, #234	; 0xea
 80099b4:	48a7      	ldr	r0, [pc, #668]	; (8009c54 <_dtoa_r+0x2d4>)
 80099b6:	f001 fe45 	bl	800b644 <__assert_func>
 80099ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099be:	6005      	str	r5, [r0, #0]
 80099c0:	60c5      	str	r5, [r0, #12]
 80099c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099c4:	6819      	ldr	r1, [r3, #0]
 80099c6:	b151      	cbz	r1, 80099de <_dtoa_r+0x5e>
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	604a      	str	r2, [r1, #4]
 80099cc:	2301      	movs	r3, #1
 80099ce:	4093      	lsls	r3, r2
 80099d0:	608b      	str	r3, [r1, #8]
 80099d2:	4620      	mov	r0, r4
 80099d4:	f001 f83c 	bl	800aa50 <_Bfree>
 80099d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099da:	2200      	movs	r2, #0
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	1e3b      	subs	r3, r7, #0
 80099e0:	bfaa      	itet	ge
 80099e2:	2300      	movge	r3, #0
 80099e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80099e8:	f8c8 3000 	strge.w	r3, [r8]
 80099ec:	4b9a      	ldr	r3, [pc, #616]	; (8009c58 <_dtoa_r+0x2d8>)
 80099ee:	bfbc      	itt	lt
 80099f0:	2201      	movlt	r2, #1
 80099f2:	f8c8 2000 	strlt.w	r2, [r8]
 80099f6:	ea33 030b 	bics.w	r3, r3, fp
 80099fa:	d11b      	bne.n	8009a34 <_dtoa_r+0xb4>
 80099fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a02:	6013      	str	r3, [r2, #0]
 8009a04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a08:	4333      	orrs	r3, r6
 8009a0a:	f000 8592 	beq.w	800a532 <_dtoa_r+0xbb2>
 8009a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a10:	b963      	cbnz	r3, 8009a2c <_dtoa_r+0xac>
 8009a12:	4b92      	ldr	r3, [pc, #584]	; (8009c5c <_dtoa_r+0x2dc>)
 8009a14:	e022      	b.n	8009a5c <_dtoa_r+0xdc>
 8009a16:	4b92      	ldr	r3, [pc, #584]	; (8009c60 <_dtoa_r+0x2e0>)
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	9801      	ldr	r0, [sp, #4]
 8009a22:	b013      	add	sp, #76	; 0x4c
 8009a24:	ecbd 8b04 	vpop	{d8-d9}
 8009a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2c:	4b8b      	ldr	r3, [pc, #556]	; (8009c5c <_dtoa_r+0x2dc>)
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	3303      	adds	r3, #3
 8009a32:	e7f3      	b.n	8009a1c <_dtoa_r+0x9c>
 8009a34:	2200      	movs	r2, #0
 8009a36:	2300      	movs	r3, #0
 8009a38:	4650      	mov	r0, sl
 8009a3a:	4659      	mov	r1, fp
 8009a3c:	f7f7 f86c 	bl	8000b18 <__aeabi_dcmpeq>
 8009a40:	ec4b ab19 	vmov	d9, sl, fp
 8009a44:	4680      	mov	r8, r0
 8009a46:	b158      	cbz	r0, 8009a60 <_dtoa_r+0xe0>
 8009a48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	6013      	str	r3, [r2, #0]
 8009a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 856b 	beq.w	800a52c <_dtoa_r+0xbac>
 8009a56:	4883      	ldr	r0, [pc, #524]	; (8009c64 <_dtoa_r+0x2e4>)
 8009a58:	6018      	str	r0, [r3, #0]
 8009a5a:	1e43      	subs	r3, r0, #1
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	e7df      	b.n	8009a20 <_dtoa_r+0xa0>
 8009a60:	ec4b ab10 	vmov	d0, sl, fp
 8009a64:	aa10      	add	r2, sp, #64	; 0x40
 8009a66:	a911      	add	r1, sp, #68	; 0x44
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f001 fad9 	bl	800b020 <__d2b>
 8009a6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009a72:	ee08 0a10 	vmov	s16, r0
 8009a76:	2d00      	cmp	r5, #0
 8009a78:	f000 8084 	beq.w	8009b84 <_dtoa_r+0x204>
 8009a7c:	ee19 3a90 	vmov	r3, s19
 8009a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a88:	4656      	mov	r6, sl
 8009a8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009a96:	4b74      	ldr	r3, [pc, #464]	; (8009c68 <_dtoa_r+0x2e8>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	f7f6 fc1b 	bl	80002d8 <__aeabi_dsub>
 8009aa2:	a365      	add	r3, pc, #404	; (adr r3, 8009c38 <_dtoa_r+0x2b8>)
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	f7f6 fdce 	bl	8000648 <__aeabi_dmul>
 8009aac:	a364      	add	r3, pc, #400	; (adr r3, 8009c40 <_dtoa_r+0x2c0>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f7f6 fc13 	bl	80002dc <__adddf3>
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	4628      	mov	r0, r5
 8009aba:	460f      	mov	r7, r1
 8009abc:	f7f6 fd5a 	bl	8000574 <__aeabi_i2d>
 8009ac0:	a361      	add	r3, pc, #388	; (adr r3, 8009c48 <_dtoa_r+0x2c8>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	f7f6 fdbf 	bl	8000648 <__aeabi_dmul>
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	4630      	mov	r0, r6
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	f7f6 fc03 	bl	80002dc <__adddf3>
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	460f      	mov	r7, r1
 8009ada:	f7f7 f865 	bl	8000ba8 <__aeabi_d2iz>
 8009ade:	2200      	movs	r2, #0
 8009ae0:	9000      	str	r0, [sp, #0]
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	f7f7 f820 	bl	8000b2c <__aeabi_dcmplt>
 8009aec:	b150      	cbz	r0, 8009b04 <_dtoa_r+0x184>
 8009aee:	9800      	ldr	r0, [sp, #0]
 8009af0:	f7f6 fd40 	bl	8000574 <__aeabi_i2d>
 8009af4:	4632      	mov	r2, r6
 8009af6:	463b      	mov	r3, r7
 8009af8:	f7f7 f80e 	bl	8000b18 <__aeabi_dcmpeq>
 8009afc:	b910      	cbnz	r0, 8009b04 <_dtoa_r+0x184>
 8009afe:	9b00      	ldr	r3, [sp, #0]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	9b00      	ldr	r3, [sp, #0]
 8009b06:	2b16      	cmp	r3, #22
 8009b08:	d85a      	bhi.n	8009bc0 <_dtoa_r+0x240>
 8009b0a:	9a00      	ldr	r2, [sp, #0]
 8009b0c:	4b57      	ldr	r3, [pc, #348]	; (8009c6c <_dtoa_r+0x2ec>)
 8009b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	ec51 0b19 	vmov	r0, r1, d9
 8009b1a:	f7f7 f807 	bl	8000b2c <__aeabi_dcmplt>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d050      	beq.n	8009bc4 <_dtoa_r+0x244>
 8009b22:	9b00      	ldr	r3, [sp, #0]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	2300      	movs	r3, #0
 8009b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b2e:	1b5d      	subs	r5, r3, r5
 8009b30:	1e6b      	subs	r3, r5, #1
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	bf45      	ittet	mi
 8009b36:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b3a:	9304      	strmi	r3, [sp, #16]
 8009b3c:	2300      	movpl	r3, #0
 8009b3e:	2300      	movmi	r3, #0
 8009b40:	bf4c      	ite	mi
 8009b42:	9305      	strmi	r3, [sp, #20]
 8009b44:	9304      	strpl	r3, [sp, #16]
 8009b46:	9b00      	ldr	r3, [sp, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	db3d      	blt.n	8009bc8 <_dtoa_r+0x248>
 8009b4c:	9b05      	ldr	r3, [sp, #20]
 8009b4e:	9a00      	ldr	r2, [sp, #0]
 8009b50:	920a      	str	r2, [sp, #40]	; 0x28
 8009b52:	4413      	add	r3, r2
 8009b54:	9305      	str	r3, [sp, #20]
 8009b56:	2300      	movs	r3, #0
 8009b58:	9307      	str	r3, [sp, #28]
 8009b5a:	9b06      	ldr	r3, [sp, #24]
 8009b5c:	2b09      	cmp	r3, #9
 8009b5e:	f200 8089 	bhi.w	8009c74 <_dtoa_r+0x2f4>
 8009b62:	2b05      	cmp	r3, #5
 8009b64:	bfc4      	itt	gt
 8009b66:	3b04      	subgt	r3, #4
 8009b68:	9306      	strgt	r3, [sp, #24]
 8009b6a:	9b06      	ldr	r3, [sp, #24]
 8009b6c:	f1a3 0302 	sub.w	r3, r3, #2
 8009b70:	bfcc      	ite	gt
 8009b72:	2500      	movgt	r5, #0
 8009b74:	2501      	movle	r5, #1
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	f200 8087 	bhi.w	8009c8a <_dtoa_r+0x30a>
 8009b7c:	e8df f003 	tbb	[pc, r3]
 8009b80:	59383a2d 	.word	0x59383a2d
 8009b84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b88:	441d      	add	r5, r3
 8009b8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b8e:	2b20      	cmp	r3, #32
 8009b90:	bfc1      	itttt	gt
 8009b92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009b9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009ba2:	bfda      	itte	le
 8009ba4:	f1c3 0320 	rsble	r3, r3, #32
 8009ba8:	fa06 f003 	lslle.w	r0, r6, r3
 8009bac:	4318      	orrgt	r0, r3
 8009bae:	f7f6 fcd1 	bl	8000554 <__aeabi_ui2d>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4606      	mov	r6, r0
 8009bb6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009bba:	3d01      	subs	r5, #1
 8009bbc:	930e      	str	r3, [sp, #56]	; 0x38
 8009bbe:	e76a      	b.n	8009a96 <_dtoa_r+0x116>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e7b2      	b.n	8009b2a <_dtoa_r+0x1aa>
 8009bc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009bc6:	e7b1      	b.n	8009b2c <_dtoa_r+0x1ac>
 8009bc8:	9b04      	ldr	r3, [sp, #16]
 8009bca:	9a00      	ldr	r2, [sp, #0]
 8009bcc:	1a9b      	subs	r3, r3, r2
 8009bce:	9304      	str	r3, [sp, #16]
 8009bd0:	4253      	negs	r3, r2
 8009bd2:	9307      	str	r3, [sp, #28]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8009bd8:	e7bf      	b.n	8009b5a <_dtoa_r+0x1da>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	9308      	str	r3, [sp, #32]
 8009bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	dc55      	bgt.n	8009c90 <_dtoa_r+0x310>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bea:	461a      	mov	r2, r3
 8009bec:	9209      	str	r2, [sp, #36]	; 0x24
 8009bee:	e00c      	b.n	8009c0a <_dtoa_r+0x28a>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e7f3      	b.n	8009bdc <_dtoa_r+0x25c>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bf8:	9308      	str	r3, [sp, #32]
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	9302      	str	r3, [sp, #8]
 8009c00:	3301      	adds	r3, #1
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	9303      	str	r3, [sp, #12]
 8009c06:	bfb8      	it	lt
 8009c08:	2301      	movlt	r3, #1
 8009c0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	6042      	str	r2, [r0, #4]
 8009c10:	2204      	movs	r2, #4
 8009c12:	f102 0614 	add.w	r6, r2, #20
 8009c16:	429e      	cmp	r6, r3
 8009c18:	6841      	ldr	r1, [r0, #4]
 8009c1a:	d93d      	bls.n	8009c98 <_dtoa_r+0x318>
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 fed7 	bl	800a9d0 <_Balloc>
 8009c22:	9001      	str	r0, [sp, #4]
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d13b      	bne.n	8009ca0 <_dtoa_r+0x320>
 8009c28:	4b11      	ldr	r3, [pc, #68]	; (8009c70 <_dtoa_r+0x2f0>)
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c30:	e6c0      	b.n	80099b4 <_dtoa_r+0x34>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e7df      	b.n	8009bf6 <_dtoa_r+0x276>
 8009c36:	bf00      	nop
 8009c38:	636f4361 	.word	0x636f4361
 8009c3c:	3fd287a7 	.word	0x3fd287a7
 8009c40:	8b60c8b3 	.word	0x8b60c8b3
 8009c44:	3fc68a28 	.word	0x3fc68a28
 8009c48:	509f79fb 	.word	0x509f79fb
 8009c4c:	3fd34413 	.word	0x3fd34413
 8009c50:	0800bb15 	.word	0x0800bb15
 8009c54:	0800bb2c 	.word	0x0800bb2c
 8009c58:	7ff00000 	.word	0x7ff00000
 8009c5c:	0800bb11 	.word	0x0800bb11
 8009c60:	0800bb08 	.word	0x0800bb08
 8009c64:	0800bae5 	.word	0x0800bae5
 8009c68:	3ff80000 	.word	0x3ff80000
 8009c6c:	0800bc80 	.word	0x0800bc80
 8009c70:	0800bb87 	.word	0x0800bb87
 8009c74:	2501      	movs	r5, #1
 8009c76:	2300      	movs	r3, #0
 8009c78:	9306      	str	r3, [sp, #24]
 8009c7a:	9508      	str	r5, [sp, #32]
 8009c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c84:	2200      	movs	r2, #0
 8009c86:	2312      	movs	r3, #18
 8009c88:	e7b0      	b.n	8009bec <_dtoa_r+0x26c>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	9308      	str	r3, [sp, #32]
 8009c8e:	e7f5      	b.n	8009c7c <_dtoa_r+0x2fc>
 8009c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c96:	e7b8      	b.n	8009c0a <_dtoa_r+0x28a>
 8009c98:	3101      	adds	r1, #1
 8009c9a:	6041      	str	r1, [r0, #4]
 8009c9c:	0052      	lsls	r2, r2, #1
 8009c9e:	e7b8      	b.n	8009c12 <_dtoa_r+0x292>
 8009ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ca2:	9a01      	ldr	r2, [sp, #4]
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	9b03      	ldr	r3, [sp, #12]
 8009ca8:	2b0e      	cmp	r3, #14
 8009caa:	f200 809d 	bhi.w	8009de8 <_dtoa_r+0x468>
 8009cae:	2d00      	cmp	r5, #0
 8009cb0:	f000 809a 	beq.w	8009de8 <_dtoa_r+0x468>
 8009cb4:	9b00      	ldr	r3, [sp, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	dd32      	ble.n	8009d20 <_dtoa_r+0x3a0>
 8009cba:	4ab7      	ldr	r2, [pc, #732]	; (8009f98 <_dtoa_r+0x618>)
 8009cbc:	f003 030f 	and.w	r3, r3, #15
 8009cc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009cc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cc8:	9b00      	ldr	r3, [sp, #0]
 8009cca:	05d8      	lsls	r0, r3, #23
 8009ccc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009cd0:	d516      	bpl.n	8009d00 <_dtoa_r+0x380>
 8009cd2:	4bb2      	ldr	r3, [pc, #712]	; (8009f9c <_dtoa_r+0x61c>)
 8009cd4:	ec51 0b19 	vmov	r0, r1, d9
 8009cd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cdc:	f7f6 fdde 	bl	800089c <__aeabi_ddiv>
 8009ce0:	f007 070f 	and.w	r7, r7, #15
 8009ce4:	4682      	mov	sl, r0
 8009ce6:	468b      	mov	fp, r1
 8009ce8:	2503      	movs	r5, #3
 8009cea:	4eac      	ldr	r6, [pc, #688]	; (8009f9c <_dtoa_r+0x61c>)
 8009cec:	b957      	cbnz	r7, 8009d04 <_dtoa_r+0x384>
 8009cee:	4642      	mov	r2, r8
 8009cf0:	464b      	mov	r3, r9
 8009cf2:	4650      	mov	r0, sl
 8009cf4:	4659      	mov	r1, fp
 8009cf6:	f7f6 fdd1 	bl	800089c <__aeabi_ddiv>
 8009cfa:	4682      	mov	sl, r0
 8009cfc:	468b      	mov	fp, r1
 8009cfe:	e028      	b.n	8009d52 <_dtoa_r+0x3d2>
 8009d00:	2502      	movs	r5, #2
 8009d02:	e7f2      	b.n	8009cea <_dtoa_r+0x36a>
 8009d04:	07f9      	lsls	r1, r7, #31
 8009d06:	d508      	bpl.n	8009d1a <_dtoa_r+0x39a>
 8009d08:	4640      	mov	r0, r8
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d10:	f7f6 fc9a 	bl	8000648 <__aeabi_dmul>
 8009d14:	3501      	adds	r5, #1
 8009d16:	4680      	mov	r8, r0
 8009d18:	4689      	mov	r9, r1
 8009d1a:	107f      	asrs	r7, r7, #1
 8009d1c:	3608      	adds	r6, #8
 8009d1e:	e7e5      	b.n	8009cec <_dtoa_r+0x36c>
 8009d20:	f000 809b 	beq.w	8009e5a <_dtoa_r+0x4da>
 8009d24:	9b00      	ldr	r3, [sp, #0]
 8009d26:	4f9d      	ldr	r7, [pc, #628]	; (8009f9c <_dtoa_r+0x61c>)
 8009d28:	425e      	negs	r6, r3
 8009d2a:	4b9b      	ldr	r3, [pc, #620]	; (8009f98 <_dtoa_r+0x618>)
 8009d2c:	f006 020f 	and.w	r2, r6, #15
 8009d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	ec51 0b19 	vmov	r0, r1, d9
 8009d3c:	f7f6 fc84 	bl	8000648 <__aeabi_dmul>
 8009d40:	1136      	asrs	r6, r6, #4
 8009d42:	4682      	mov	sl, r0
 8009d44:	468b      	mov	fp, r1
 8009d46:	2300      	movs	r3, #0
 8009d48:	2502      	movs	r5, #2
 8009d4a:	2e00      	cmp	r6, #0
 8009d4c:	d17a      	bne.n	8009e44 <_dtoa_r+0x4c4>
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1d3      	bne.n	8009cfa <_dtoa_r+0x37a>
 8009d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 8082 	beq.w	8009e5e <_dtoa_r+0x4de>
 8009d5a:	4b91      	ldr	r3, [pc, #580]	; (8009fa0 <_dtoa_r+0x620>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	4650      	mov	r0, sl
 8009d60:	4659      	mov	r1, fp
 8009d62:	f7f6 fee3 	bl	8000b2c <__aeabi_dcmplt>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d079      	beq.n	8009e5e <_dtoa_r+0x4de>
 8009d6a:	9b03      	ldr	r3, [sp, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d076      	beq.n	8009e5e <_dtoa_r+0x4de>
 8009d70:	9b02      	ldr	r3, [sp, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	dd36      	ble.n	8009de4 <_dtoa_r+0x464>
 8009d76:	9b00      	ldr	r3, [sp, #0]
 8009d78:	4650      	mov	r0, sl
 8009d7a:	4659      	mov	r1, fp
 8009d7c:	1e5f      	subs	r7, r3, #1
 8009d7e:	2200      	movs	r2, #0
 8009d80:	4b88      	ldr	r3, [pc, #544]	; (8009fa4 <_dtoa_r+0x624>)
 8009d82:	f7f6 fc61 	bl	8000648 <__aeabi_dmul>
 8009d86:	9e02      	ldr	r6, [sp, #8]
 8009d88:	4682      	mov	sl, r0
 8009d8a:	468b      	mov	fp, r1
 8009d8c:	3501      	adds	r5, #1
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f7f6 fbf0 	bl	8000574 <__aeabi_i2d>
 8009d94:	4652      	mov	r2, sl
 8009d96:	465b      	mov	r3, fp
 8009d98:	f7f6 fc56 	bl	8000648 <__aeabi_dmul>
 8009d9c:	4b82      	ldr	r3, [pc, #520]	; (8009fa8 <_dtoa_r+0x628>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f7f6 fa9c 	bl	80002dc <__adddf3>
 8009da4:	46d0      	mov	r8, sl
 8009da6:	46d9      	mov	r9, fp
 8009da8:	4682      	mov	sl, r0
 8009daa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009dae:	2e00      	cmp	r6, #0
 8009db0:	d158      	bne.n	8009e64 <_dtoa_r+0x4e4>
 8009db2:	4b7e      	ldr	r3, [pc, #504]	; (8009fac <_dtoa_r+0x62c>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	4640      	mov	r0, r8
 8009db8:	4649      	mov	r1, r9
 8009dba:	f7f6 fa8d 	bl	80002d8 <__aeabi_dsub>
 8009dbe:	4652      	mov	r2, sl
 8009dc0:	465b      	mov	r3, fp
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	4689      	mov	r9, r1
 8009dc6:	f7f6 fecf 	bl	8000b68 <__aeabi_dcmpgt>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	f040 8295 	bne.w	800a2fa <_dtoa_r+0x97a>
 8009dd0:	4652      	mov	r2, sl
 8009dd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	4649      	mov	r1, r9
 8009dda:	f7f6 fea7 	bl	8000b2c <__aeabi_dcmplt>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f040 8289 	bne.w	800a2f6 <_dtoa_r+0x976>
 8009de4:	ec5b ab19 	vmov	sl, fp, d9
 8009de8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f2c0 8148 	blt.w	800a080 <_dtoa_r+0x700>
 8009df0:	9a00      	ldr	r2, [sp, #0]
 8009df2:	2a0e      	cmp	r2, #14
 8009df4:	f300 8144 	bgt.w	800a080 <_dtoa_r+0x700>
 8009df8:	4b67      	ldr	r3, [pc, #412]	; (8009f98 <_dtoa_r+0x618>)
 8009dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f280 80d5 	bge.w	8009fb4 <_dtoa_r+0x634>
 8009e0a:	9b03      	ldr	r3, [sp, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f300 80d1 	bgt.w	8009fb4 <_dtoa_r+0x634>
 8009e12:	f040 826f 	bne.w	800a2f4 <_dtoa_r+0x974>
 8009e16:	4b65      	ldr	r3, [pc, #404]	; (8009fac <_dtoa_r+0x62c>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	f7f6 fc13 	bl	8000648 <__aeabi_dmul>
 8009e22:	4652      	mov	r2, sl
 8009e24:	465b      	mov	r3, fp
 8009e26:	f7f6 fe95 	bl	8000b54 <__aeabi_dcmpge>
 8009e2a:	9e03      	ldr	r6, [sp, #12]
 8009e2c:	4637      	mov	r7, r6
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f040 8245 	bne.w	800a2be <_dtoa_r+0x93e>
 8009e34:	9d01      	ldr	r5, [sp, #4]
 8009e36:	2331      	movs	r3, #49	; 0x31
 8009e38:	f805 3b01 	strb.w	r3, [r5], #1
 8009e3c:	9b00      	ldr	r3, [sp, #0]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	e240      	b.n	800a2c6 <_dtoa_r+0x946>
 8009e44:	07f2      	lsls	r2, r6, #31
 8009e46:	d505      	bpl.n	8009e54 <_dtoa_r+0x4d4>
 8009e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e4c:	f7f6 fbfc 	bl	8000648 <__aeabi_dmul>
 8009e50:	3501      	adds	r5, #1
 8009e52:	2301      	movs	r3, #1
 8009e54:	1076      	asrs	r6, r6, #1
 8009e56:	3708      	adds	r7, #8
 8009e58:	e777      	b.n	8009d4a <_dtoa_r+0x3ca>
 8009e5a:	2502      	movs	r5, #2
 8009e5c:	e779      	b.n	8009d52 <_dtoa_r+0x3d2>
 8009e5e:	9f00      	ldr	r7, [sp, #0]
 8009e60:	9e03      	ldr	r6, [sp, #12]
 8009e62:	e794      	b.n	8009d8e <_dtoa_r+0x40e>
 8009e64:	9901      	ldr	r1, [sp, #4]
 8009e66:	4b4c      	ldr	r3, [pc, #304]	; (8009f98 <_dtoa_r+0x618>)
 8009e68:	4431      	add	r1, r6
 8009e6a:	910d      	str	r1, [sp, #52]	; 0x34
 8009e6c:	9908      	ldr	r1, [sp, #32]
 8009e6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e76:	2900      	cmp	r1, #0
 8009e78:	d043      	beq.n	8009f02 <_dtoa_r+0x582>
 8009e7a:	494d      	ldr	r1, [pc, #308]	; (8009fb0 <_dtoa_r+0x630>)
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	f7f6 fd0d 	bl	800089c <__aeabi_ddiv>
 8009e82:	4652      	mov	r2, sl
 8009e84:	465b      	mov	r3, fp
 8009e86:	f7f6 fa27 	bl	80002d8 <__aeabi_dsub>
 8009e8a:	9d01      	ldr	r5, [sp, #4]
 8009e8c:	4682      	mov	sl, r0
 8009e8e:	468b      	mov	fp, r1
 8009e90:	4649      	mov	r1, r9
 8009e92:	4640      	mov	r0, r8
 8009e94:	f7f6 fe88 	bl	8000ba8 <__aeabi_d2iz>
 8009e98:	4606      	mov	r6, r0
 8009e9a:	f7f6 fb6b 	bl	8000574 <__aeabi_i2d>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	f7f6 fa17 	bl	80002d8 <__aeabi_dsub>
 8009eaa:	3630      	adds	r6, #48	; 0x30
 8009eac:	f805 6b01 	strb.w	r6, [r5], #1
 8009eb0:	4652      	mov	r2, sl
 8009eb2:	465b      	mov	r3, fp
 8009eb4:	4680      	mov	r8, r0
 8009eb6:	4689      	mov	r9, r1
 8009eb8:	f7f6 fe38 	bl	8000b2c <__aeabi_dcmplt>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d163      	bne.n	8009f88 <_dtoa_r+0x608>
 8009ec0:	4642      	mov	r2, r8
 8009ec2:	464b      	mov	r3, r9
 8009ec4:	4936      	ldr	r1, [pc, #216]	; (8009fa0 <_dtoa_r+0x620>)
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	f7f6 fa06 	bl	80002d8 <__aeabi_dsub>
 8009ecc:	4652      	mov	r2, sl
 8009ece:	465b      	mov	r3, fp
 8009ed0:	f7f6 fe2c 	bl	8000b2c <__aeabi_dcmplt>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f040 80b5 	bne.w	800a044 <_dtoa_r+0x6c4>
 8009eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009edc:	429d      	cmp	r5, r3
 8009ede:	d081      	beq.n	8009de4 <_dtoa_r+0x464>
 8009ee0:	4b30      	ldr	r3, [pc, #192]	; (8009fa4 <_dtoa_r+0x624>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	4650      	mov	r0, sl
 8009ee6:	4659      	mov	r1, fp
 8009ee8:	f7f6 fbae 	bl	8000648 <__aeabi_dmul>
 8009eec:	4b2d      	ldr	r3, [pc, #180]	; (8009fa4 <_dtoa_r+0x624>)
 8009eee:	4682      	mov	sl, r0
 8009ef0:	468b      	mov	fp, r1
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f7f6 fba6 	bl	8000648 <__aeabi_dmul>
 8009efc:	4680      	mov	r8, r0
 8009efe:	4689      	mov	r9, r1
 8009f00:	e7c6      	b.n	8009e90 <_dtoa_r+0x510>
 8009f02:	4650      	mov	r0, sl
 8009f04:	4659      	mov	r1, fp
 8009f06:	f7f6 fb9f 	bl	8000648 <__aeabi_dmul>
 8009f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f0c:	9d01      	ldr	r5, [sp, #4]
 8009f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f10:	4682      	mov	sl, r0
 8009f12:	468b      	mov	fp, r1
 8009f14:	4649      	mov	r1, r9
 8009f16:	4640      	mov	r0, r8
 8009f18:	f7f6 fe46 	bl	8000ba8 <__aeabi_d2iz>
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	f7f6 fb29 	bl	8000574 <__aeabi_i2d>
 8009f22:	3630      	adds	r6, #48	; 0x30
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	4640      	mov	r0, r8
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	f7f6 f9d4 	bl	80002d8 <__aeabi_dsub>
 8009f30:	f805 6b01 	strb.w	r6, [r5], #1
 8009f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f36:	429d      	cmp	r5, r3
 8009f38:	4680      	mov	r8, r0
 8009f3a:	4689      	mov	r9, r1
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	d124      	bne.n	8009f8c <_dtoa_r+0x60c>
 8009f42:	4b1b      	ldr	r3, [pc, #108]	; (8009fb0 <_dtoa_r+0x630>)
 8009f44:	4650      	mov	r0, sl
 8009f46:	4659      	mov	r1, fp
 8009f48:	f7f6 f9c8 	bl	80002dc <__adddf3>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4640      	mov	r0, r8
 8009f52:	4649      	mov	r1, r9
 8009f54:	f7f6 fe08 	bl	8000b68 <__aeabi_dcmpgt>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d173      	bne.n	800a044 <_dtoa_r+0x6c4>
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	465b      	mov	r3, fp
 8009f60:	4913      	ldr	r1, [pc, #76]	; (8009fb0 <_dtoa_r+0x630>)
 8009f62:	2000      	movs	r0, #0
 8009f64:	f7f6 f9b8 	bl	80002d8 <__aeabi_dsub>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	4640      	mov	r0, r8
 8009f6e:	4649      	mov	r1, r9
 8009f70:	f7f6 fddc 	bl	8000b2c <__aeabi_dcmplt>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	f43f af35 	beq.w	8009de4 <_dtoa_r+0x464>
 8009f7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f7c:	1e6b      	subs	r3, r5, #1
 8009f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f84:	2b30      	cmp	r3, #48	; 0x30
 8009f86:	d0f8      	beq.n	8009f7a <_dtoa_r+0x5fa>
 8009f88:	9700      	str	r7, [sp, #0]
 8009f8a:	e049      	b.n	800a020 <_dtoa_r+0x6a0>
 8009f8c:	4b05      	ldr	r3, [pc, #20]	; (8009fa4 <_dtoa_r+0x624>)
 8009f8e:	f7f6 fb5b 	bl	8000648 <__aeabi_dmul>
 8009f92:	4680      	mov	r8, r0
 8009f94:	4689      	mov	r9, r1
 8009f96:	e7bd      	b.n	8009f14 <_dtoa_r+0x594>
 8009f98:	0800bc80 	.word	0x0800bc80
 8009f9c:	0800bc58 	.word	0x0800bc58
 8009fa0:	3ff00000 	.word	0x3ff00000
 8009fa4:	40240000 	.word	0x40240000
 8009fa8:	401c0000 	.word	0x401c0000
 8009fac:	40140000 	.word	0x40140000
 8009fb0:	3fe00000 	.word	0x3fe00000
 8009fb4:	9d01      	ldr	r5, [sp, #4]
 8009fb6:	4656      	mov	r6, sl
 8009fb8:	465f      	mov	r7, fp
 8009fba:	4642      	mov	r2, r8
 8009fbc:	464b      	mov	r3, r9
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	f7f6 fc6b 	bl	800089c <__aeabi_ddiv>
 8009fc6:	f7f6 fdef 	bl	8000ba8 <__aeabi_d2iz>
 8009fca:	4682      	mov	sl, r0
 8009fcc:	f7f6 fad2 	bl	8000574 <__aeabi_i2d>
 8009fd0:	4642      	mov	r2, r8
 8009fd2:	464b      	mov	r3, r9
 8009fd4:	f7f6 fb38 	bl	8000648 <__aeabi_dmul>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4630      	mov	r0, r6
 8009fde:	4639      	mov	r1, r7
 8009fe0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009fe4:	f7f6 f978 	bl	80002d8 <__aeabi_dsub>
 8009fe8:	f805 6b01 	strb.w	r6, [r5], #1
 8009fec:	9e01      	ldr	r6, [sp, #4]
 8009fee:	9f03      	ldr	r7, [sp, #12]
 8009ff0:	1bae      	subs	r6, r5, r6
 8009ff2:	42b7      	cmp	r7, r6
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	d135      	bne.n	800a066 <_dtoa_r+0x6e6>
 8009ffa:	f7f6 f96f 	bl	80002dc <__adddf3>
 8009ffe:	4642      	mov	r2, r8
 800a000:	464b      	mov	r3, r9
 800a002:	4606      	mov	r6, r0
 800a004:	460f      	mov	r7, r1
 800a006:	f7f6 fdaf 	bl	8000b68 <__aeabi_dcmpgt>
 800a00a:	b9d0      	cbnz	r0, 800a042 <_dtoa_r+0x6c2>
 800a00c:	4642      	mov	r2, r8
 800a00e:	464b      	mov	r3, r9
 800a010:	4630      	mov	r0, r6
 800a012:	4639      	mov	r1, r7
 800a014:	f7f6 fd80 	bl	8000b18 <__aeabi_dcmpeq>
 800a018:	b110      	cbz	r0, 800a020 <_dtoa_r+0x6a0>
 800a01a:	f01a 0f01 	tst.w	sl, #1
 800a01e:	d110      	bne.n	800a042 <_dtoa_r+0x6c2>
 800a020:	4620      	mov	r0, r4
 800a022:	ee18 1a10 	vmov	r1, s16
 800a026:	f000 fd13 	bl	800aa50 <_Bfree>
 800a02a:	2300      	movs	r3, #0
 800a02c:	9800      	ldr	r0, [sp, #0]
 800a02e:	702b      	strb	r3, [r5, #0]
 800a030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a032:	3001      	adds	r0, #1
 800a034:	6018      	str	r0, [r3, #0]
 800a036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f43f acf1 	beq.w	8009a20 <_dtoa_r+0xa0>
 800a03e:	601d      	str	r5, [r3, #0]
 800a040:	e4ee      	b.n	8009a20 <_dtoa_r+0xa0>
 800a042:	9f00      	ldr	r7, [sp, #0]
 800a044:	462b      	mov	r3, r5
 800a046:	461d      	mov	r5, r3
 800a048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a04c:	2a39      	cmp	r2, #57	; 0x39
 800a04e:	d106      	bne.n	800a05e <_dtoa_r+0x6de>
 800a050:	9a01      	ldr	r2, [sp, #4]
 800a052:	429a      	cmp	r2, r3
 800a054:	d1f7      	bne.n	800a046 <_dtoa_r+0x6c6>
 800a056:	9901      	ldr	r1, [sp, #4]
 800a058:	2230      	movs	r2, #48	; 0x30
 800a05a:	3701      	adds	r7, #1
 800a05c:	700a      	strb	r2, [r1, #0]
 800a05e:	781a      	ldrb	r2, [r3, #0]
 800a060:	3201      	adds	r2, #1
 800a062:	701a      	strb	r2, [r3, #0]
 800a064:	e790      	b.n	8009f88 <_dtoa_r+0x608>
 800a066:	4ba6      	ldr	r3, [pc, #664]	; (800a300 <_dtoa_r+0x980>)
 800a068:	2200      	movs	r2, #0
 800a06a:	f7f6 faed 	bl	8000648 <__aeabi_dmul>
 800a06e:	2200      	movs	r2, #0
 800a070:	2300      	movs	r3, #0
 800a072:	4606      	mov	r6, r0
 800a074:	460f      	mov	r7, r1
 800a076:	f7f6 fd4f 	bl	8000b18 <__aeabi_dcmpeq>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d09d      	beq.n	8009fba <_dtoa_r+0x63a>
 800a07e:	e7cf      	b.n	800a020 <_dtoa_r+0x6a0>
 800a080:	9a08      	ldr	r2, [sp, #32]
 800a082:	2a00      	cmp	r2, #0
 800a084:	f000 80d7 	beq.w	800a236 <_dtoa_r+0x8b6>
 800a088:	9a06      	ldr	r2, [sp, #24]
 800a08a:	2a01      	cmp	r2, #1
 800a08c:	f300 80ba 	bgt.w	800a204 <_dtoa_r+0x884>
 800a090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a092:	2a00      	cmp	r2, #0
 800a094:	f000 80b2 	beq.w	800a1fc <_dtoa_r+0x87c>
 800a098:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a09c:	9e07      	ldr	r6, [sp, #28]
 800a09e:	9d04      	ldr	r5, [sp, #16]
 800a0a0:	9a04      	ldr	r2, [sp, #16]
 800a0a2:	441a      	add	r2, r3
 800a0a4:	9204      	str	r2, [sp, #16]
 800a0a6:	9a05      	ldr	r2, [sp, #20]
 800a0a8:	2101      	movs	r1, #1
 800a0aa:	441a      	add	r2, r3
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	9205      	str	r2, [sp, #20]
 800a0b0:	f000 fd86 	bl	800abc0 <__i2b>
 800a0b4:	4607      	mov	r7, r0
 800a0b6:	2d00      	cmp	r5, #0
 800a0b8:	dd0c      	ble.n	800a0d4 <_dtoa_r+0x754>
 800a0ba:	9b05      	ldr	r3, [sp, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	dd09      	ble.n	800a0d4 <_dtoa_r+0x754>
 800a0c0:	42ab      	cmp	r3, r5
 800a0c2:	9a04      	ldr	r2, [sp, #16]
 800a0c4:	bfa8      	it	ge
 800a0c6:	462b      	movge	r3, r5
 800a0c8:	1ad2      	subs	r2, r2, r3
 800a0ca:	9204      	str	r2, [sp, #16]
 800a0cc:	9a05      	ldr	r2, [sp, #20]
 800a0ce:	1aed      	subs	r5, r5, r3
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	9305      	str	r3, [sp, #20]
 800a0d4:	9b07      	ldr	r3, [sp, #28]
 800a0d6:	b31b      	cbz	r3, 800a120 <_dtoa_r+0x7a0>
 800a0d8:	9b08      	ldr	r3, [sp, #32]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 80af 	beq.w	800a23e <_dtoa_r+0x8be>
 800a0e0:	2e00      	cmp	r6, #0
 800a0e2:	dd13      	ble.n	800a10c <_dtoa_r+0x78c>
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	4632      	mov	r2, r6
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f000 fe29 	bl	800ad40 <__pow5mult>
 800a0ee:	ee18 2a10 	vmov	r2, s16
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	4607      	mov	r7, r0
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 fd78 	bl	800abec <__multiply>
 800a0fc:	ee18 1a10 	vmov	r1, s16
 800a100:	4680      	mov	r8, r0
 800a102:	4620      	mov	r0, r4
 800a104:	f000 fca4 	bl	800aa50 <_Bfree>
 800a108:	ee08 8a10 	vmov	s16, r8
 800a10c:	9b07      	ldr	r3, [sp, #28]
 800a10e:	1b9a      	subs	r2, r3, r6
 800a110:	d006      	beq.n	800a120 <_dtoa_r+0x7a0>
 800a112:	ee18 1a10 	vmov	r1, s16
 800a116:	4620      	mov	r0, r4
 800a118:	f000 fe12 	bl	800ad40 <__pow5mult>
 800a11c:	ee08 0a10 	vmov	s16, r0
 800a120:	2101      	movs	r1, #1
 800a122:	4620      	mov	r0, r4
 800a124:	f000 fd4c 	bl	800abc0 <__i2b>
 800a128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	4606      	mov	r6, r0
 800a12e:	f340 8088 	ble.w	800a242 <_dtoa_r+0x8c2>
 800a132:	461a      	mov	r2, r3
 800a134:	4601      	mov	r1, r0
 800a136:	4620      	mov	r0, r4
 800a138:	f000 fe02 	bl	800ad40 <__pow5mult>
 800a13c:	9b06      	ldr	r3, [sp, #24]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	4606      	mov	r6, r0
 800a142:	f340 8081 	ble.w	800a248 <_dtoa_r+0x8c8>
 800a146:	f04f 0800 	mov.w	r8, #0
 800a14a:	6933      	ldr	r3, [r6, #16]
 800a14c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a150:	6918      	ldr	r0, [r3, #16]
 800a152:	f000 fce5 	bl	800ab20 <__hi0bits>
 800a156:	f1c0 0020 	rsb	r0, r0, #32
 800a15a:	9b05      	ldr	r3, [sp, #20]
 800a15c:	4418      	add	r0, r3
 800a15e:	f010 001f 	ands.w	r0, r0, #31
 800a162:	f000 8092 	beq.w	800a28a <_dtoa_r+0x90a>
 800a166:	f1c0 0320 	rsb	r3, r0, #32
 800a16a:	2b04      	cmp	r3, #4
 800a16c:	f340 808a 	ble.w	800a284 <_dtoa_r+0x904>
 800a170:	f1c0 001c 	rsb	r0, r0, #28
 800a174:	9b04      	ldr	r3, [sp, #16]
 800a176:	4403      	add	r3, r0
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	9b05      	ldr	r3, [sp, #20]
 800a17c:	4403      	add	r3, r0
 800a17e:	4405      	add	r5, r0
 800a180:	9305      	str	r3, [sp, #20]
 800a182:	9b04      	ldr	r3, [sp, #16]
 800a184:	2b00      	cmp	r3, #0
 800a186:	dd07      	ble.n	800a198 <_dtoa_r+0x818>
 800a188:	ee18 1a10 	vmov	r1, s16
 800a18c:	461a      	mov	r2, r3
 800a18e:	4620      	mov	r0, r4
 800a190:	f000 fe30 	bl	800adf4 <__lshift>
 800a194:	ee08 0a10 	vmov	s16, r0
 800a198:	9b05      	ldr	r3, [sp, #20]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	dd05      	ble.n	800a1aa <_dtoa_r+0x82a>
 800a19e:	4631      	mov	r1, r6
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f000 fe26 	bl	800adf4 <__lshift>
 800a1a8:	4606      	mov	r6, r0
 800a1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d06e      	beq.n	800a28e <_dtoa_r+0x90e>
 800a1b0:	ee18 0a10 	vmov	r0, s16
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	f000 fe8d 	bl	800aed4 <__mcmp>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	da67      	bge.n	800a28e <_dtoa_r+0x90e>
 800a1be:	9b00      	ldr	r3, [sp, #0]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	ee18 1a10 	vmov	r1, s16
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	220a      	movs	r2, #10
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fc61 	bl	800aa94 <__multadd>
 800a1d2:	9b08      	ldr	r3, [sp, #32]
 800a1d4:	ee08 0a10 	vmov	s16, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 81b1 	beq.w	800a540 <_dtoa_r+0xbc0>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	220a      	movs	r2, #10
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 fc55 	bl	800aa94 <__multadd>
 800a1ea:	9b02      	ldr	r3, [sp, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	4607      	mov	r7, r0
 800a1f0:	f300 808e 	bgt.w	800a310 <_dtoa_r+0x990>
 800a1f4:	9b06      	ldr	r3, [sp, #24]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	dc51      	bgt.n	800a29e <_dtoa_r+0x91e>
 800a1fa:	e089      	b.n	800a310 <_dtoa_r+0x990>
 800a1fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a202:	e74b      	b.n	800a09c <_dtoa_r+0x71c>
 800a204:	9b03      	ldr	r3, [sp, #12]
 800a206:	1e5e      	subs	r6, r3, #1
 800a208:	9b07      	ldr	r3, [sp, #28]
 800a20a:	42b3      	cmp	r3, r6
 800a20c:	bfbf      	itttt	lt
 800a20e:	9b07      	ldrlt	r3, [sp, #28]
 800a210:	9607      	strlt	r6, [sp, #28]
 800a212:	1af2      	sublt	r2, r6, r3
 800a214:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a216:	bfb6      	itet	lt
 800a218:	189b      	addlt	r3, r3, r2
 800a21a:	1b9e      	subge	r6, r3, r6
 800a21c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a21e:	9b03      	ldr	r3, [sp, #12]
 800a220:	bfb8      	it	lt
 800a222:	2600      	movlt	r6, #0
 800a224:	2b00      	cmp	r3, #0
 800a226:	bfb7      	itett	lt
 800a228:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a22c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a230:	1a9d      	sublt	r5, r3, r2
 800a232:	2300      	movlt	r3, #0
 800a234:	e734      	b.n	800a0a0 <_dtoa_r+0x720>
 800a236:	9e07      	ldr	r6, [sp, #28]
 800a238:	9d04      	ldr	r5, [sp, #16]
 800a23a:	9f08      	ldr	r7, [sp, #32]
 800a23c:	e73b      	b.n	800a0b6 <_dtoa_r+0x736>
 800a23e:	9a07      	ldr	r2, [sp, #28]
 800a240:	e767      	b.n	800a112 <_dtoa_r+0x792>
 800a242:	9b06      	ldr	r3, [sp, #24]
 800a244:	2b01      	cmp	r3, #1
 800a246:	dc18      	bgt.n	800a27a <_dtoa_r+0x8fa>
 800a248:	f1ba 0f00 	cmp.w	sl, #0
 800a24c:	d115      	bne.n	800a27a <_dtoa_r+0x8fa>
 800a24e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a252:	b993      	cbnz	r3, 800a27a <_dtoa_r+0x8fa>
 800a254:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a258:	0d1b      	lsrs	r3, r3, #20
 800a25a:	051b      	lsls	r3, r3, #20
 800a25c:	b183      	cbz	r3, 800a280 <_dtoa_r+0x900>
 800a25e:	9b04      	ldr	r3, [sp, #16]
 800a260:	3301      	adds	r3, #1
 800a262:	9304      	str	r3, [sp, #16]
 800a264:	9b05      	ldr	r3, [sp, #20]
 800a266:	3301      	adds	r3, #1
 800a268:	9305      	str	r3, [sp, #20]
 800a26a:	f04f 0801 	mov.w	r8, #1
 800a26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a270:	2b00      	cmp	r3, #0
 800a272:	f47f af6a 	bne.w	800a14a <_dtoa_r+0x7ca>
 800a276:	2001      	movs	r0, #1
 800a278:	e76f      	b.n	800a15a <_dtoa_r+0x7da>
 800a27a:	f04f 0800 	mov.w	r8, #0
 800a27e:	e7f6      	b.n	800a26e <_dtoa_r+0x8ee>
 800a280:	4698      	mov	r8, r3
 800a282:	e7f4      	b.n	800a26e <_dtoa_r+0x8ee>
 800a284:	f43f af7d 	beq.w	800a182 <_dtoa_r+0x802>
 800a288:	4618      	mov	r0, r3
 800a28a:	301c      	adds	r0, #28
 800a28c:	e772      	b.n	800a174 <_dtoa_r+0x7f4>
 800a28e:	9b03      	ldr	r3, [sp, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	dc37      	bgt.n	800a304 <_dtoa_r+0x984>
 800a294:	9b06      	ldr	r3, [sp, #24]
 800a296:	2b02      	cmp	r3, #2
 800a298:	dd34      	ble.n	800a304 <_dtoa_r+0x984>
 800a29a:	9b03      	ldr	r3, [sp, #12]
 800a29c:	9302      	str	r3, [sp, #8]
 800a29e:	9b02      	ldr	r3, [sp, #8]
 800a2a0:	b96b      	cbnz	r3, 800a2be <_dtoa_r+0x93e>
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	2205      	movs	r2, #5
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f000 fbf4 	bl	800aa94 <__multadd>
 800a2ac:	4601      	mov	r1, r0
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	ee18 0a10 	vmov	r0, s16
 800a2b4:	f000 fe0e 	bl	800aed4 <__mcmp>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	f73f adbb 	bgt.w	8009e34 <_dtoa_r+0x4b4>
 800a2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c0:	9d01      	ldr	r5, [sp, #4]
 800a2c2:	43db      	mvns	r3, r3
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	f04f 0800 	mov.w	r8, #0
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 fbbf 	bl	800aa50 <_Bfree>
 800a2d2:	2f00      	cmp	r7, #0
 800a2d4:	f43f aea4 	beq.w	800a020 <_dtoa_r+0x6a0>
 800a2d8:	f1b8 0f00 	cmp.w	r8, #0
 800a2dc:	d005      	beq.n	800a2ea <_dtoa_r+0x96a>
 800a2de:	45b8      	cmp	r8, r7
 800a2e0:	d003      	beq.n	800a2ea <_dtoa_r+0x96a>
 800a2e2:	4641      	mov	r1, r8
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f000 fbb3 	bl	800aa50 <_Bfree>
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f000 fbaf 	bl	800aa50 <_Bfree>
 800a2f2:	e695      	b.n	800a020 <_dtoa_r+0x6a0>
 800a2f4:	2600      	movs	r6, #0
 800a2f6:	4637      	mov	r7, r6
 800a2f8:	e7e1      	b.n	800a2be <_dtoa_r+0x93e>
 800a2fa:	9700      	str	r7, [sp, #0]
 800a2fc:	4637      	mov	r7, r6
 800a2fe:	e599      	b.n	8009e34 <_dtoa_r+0x4b4>
 800a300:	40240000 	.word	0x40240000
 800a304:	9b08      	ldr	r3, [sp, #32]
 800a306:	2b00      	cmp	r3, #0
 800a308:	f000 80ca 	beq.w	800a4a0 <_dtoa_r+0xb20>
 800a30c:	9b03      	ldr	r3, [sp, #12]
 800a30e:	9302      	str	r3, [sp, #8]
 800a310:	2d00      	cmp	r5, #0
 800a312:	dd05      	ble.n	800a320 <_dtoa_r+0x9a0>
 800a314:	4639      	mov	r1, r7
 800a316:	462a      	mov	r2, r5
 800a318:	4620      	mov	r0, r4
 800a31a:	f000 fd6b 	bl	800adf4 <__lshift>
 800a31e:	4607      	mov	r7, r0
 800a320:	f1b8 0f00 	cmp.w	r8, #0
 800a324:	d05b      	beq.n	800a3de <_dtoa_r+0xa5e>
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	4620      	mov	r0, r4
 800a32a:	f000 fb51 	bl	800a9d0 <_Balloc>
 800a32e:	4605      	mov	r5, r0
 800a330:	b928      	cbnz	r0, 800a33e <_dtoa_r+0x9be>
 800a332:	4b87      	ldr	r3, [pc, #540]	; (800a550 <_dtoa_r+0xbd0>)
 800a334:	4602      	mov	r2, r0
 800a336:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a33a:	f7ff bb3b 	b.w	80099b4 <_dtoa_r+0x34>
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	3202      	adds	r2, #2
 800a342:	0092      	lsls	r2, r2, #2
 800a344:	f107 010c 	add.w	r1, r7, #12
 800a348:	300c      	adds	r0, #12
 800a34a:	f000 fb33 	bl	800a9b4 <memcpy>
 800a34e:	2201      	movs	r2, #1
 800a350:	4629      	mov	r1, r5
 800a352:	4620      	mov	r0, r4
 800a354:	f000 fd4e 	bl	800adf4 <__lshift>
 800a358:	9b01      	ldr	r3, [sp, #4]
 800a35a:	f103 0901 	add.w	r9, r3, #1
 800a35e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a362:	4413      	add	r3, r2
 800a364:	9305      	str	r3, [sp, #20]
 800a366:	f00a 0301 	and.w	r3, sl, #1
 800a36a:	46b8      	mov	r8, r7
 800a36c:	9304      	str	r3, [sp, #16]
 800a36e:	4607      	mov	r7, r0
 800a370:	4631      	mov	r1, r6
 800a372:	ee18 0a10 	vmov	r0, s16
 800a376:	f7ff fa75 	bl	8009864 <quorem>
 800a37a:	4641      	mov	r1, r8
 800a37c:	9002      	str	r0, [sp, #8]
 800a37e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a382:	ee18 0a10 	vmov	r0, s16
 800a386:	f000 fda5 	bl	800aed4 <__mcmp>
 800a38a:	463a      	mov	r2, r7
 800a38c:	9003      	str	r0, [sp, #12]
 800a38e:	4631      	mov	r1, r6
 800a390:	4620      	mov	r0, r4
 800a392:	f000 fdbb 	bl	800af0c <__mdiff>
 800a396:	68c2      	ldr	r2, [r0, #12]
 800a398:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a39c:	4605      	mov	r5, r0
 800a39e:	bb02      	cbnz	r2, 800a3e2 <_dtoa_r+0xa62>
 800a3a0:	4601      	mov	r1, r0
 800a3a2:	ee18 0a10 	vmov	r0, s16
 800a3a6:	f000 fd95 	bl	800aed4 <__mcmp>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	9207      	str	r2, [sp, #28]
 800a3b2:	f000 fb4d 	bl	800aa50 <_Bfree>
 800a3b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a3ba:	ea43 0102 	orr.w	r1, r3, r2
 800a3be:	9b04      	ldr	r3, [sp, #16]
 800a3c0:	430b      	orrs	r3, r1
 800a3c2:	464d      	mov	r5, r9
 800a3c4:	d10f      	bne.n	800a3e6 <_dtoa_r+0xa66>
 800a3c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3ca:	d02a      	beq.n	800a422 <_dtoa_r+0xaa2>
 800a3cc:	9b03      	ldr	r3, [sp, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	dd02      	ble.n	800a3d8 <_dtoa_r+0xa58>
 800a3d2:	9b02      	ldr	r3, [sp, #8]
 800a3d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a3d8:	f88b a000 	strb.w	sl, [fp]
 800a3dc:	e775      	b.n	800a2ca <_dtoa_r+0x94a>
 800a3de:	4638      	mov	r0, r7
 800a3e0:	e7ba      	b.n	800a358 <_dtoa_r+0x9d8>
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	e7e2      	b.n	800a3ac <_dtoa_r+0xa2c>
 800a3e6:	9b03      	ldr	r3, [sp, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	db04      	blt.n	800a3f6 <_dtoa_r+0xa76>
 800a3ec:	9906      	ldr	r1, [sp, #24]
 800a3ee:	430b      	orrs	r3, r1
 800a3f0:	9904      	ldr	r1, [sp, #16]
 800a3f2:	430b      	orrs	r3, r1
 800a3f4:	d122      	bne.n	800a43c <_dtoa_r+0xabc>
 800a3f6:	2a00      	cmp	r2, #0
 800a3f8:	ddee      	ble.n	800a3d8 <_dtoa_r+0xa58>
 800a3fa:	ee18 1a10 	vmov	r1, s16
 800a3fe:	2201      	movs	r2, #1
 800a400:	4620      	mov	r0, r4
 800a402:	f000 fcf7 	bl	800adf4 <__lshift>
 800a406:	4631      	mov	r1, r6
 800a408:	ee08 0a10 	vmov	s16, r0
 800a40c:	f000 fd62 	bl	800aed4 <__mcmp>
 800a410:	2800      	cmp	r0, #0
 800a412:	dc03      	bgt.n	800a41c <_dtoa_r+0xa9c>
 800a414:	d1e0      	bne.n	800a3d8 <_dtoa_r+0xa58>
 800a416:	f01a 0f01 	tst.w	sl, #1
 800a41a:	d0dd      	beq.n	800a3d8 <_dtoa_r+0xa58>
 800a41c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a420:	d1d7      	bne.n	800a3d2 <_dtoa_r+0xa52>
 800a422:	2339      	movs	r3, #57	; 0x39
 800a424:	f88b 3000 	strb.w	r3, [fp]
 800a428:	462b      	mov	r3, r5
 800a42a:	461d      	mov	r5, r3
 800a42c:	3b01      	subs	r3, #1
 800a42e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a432:	2a39      	cmp	r2, #57	; 0x39
 800a434:	d071      	beq.n	800a51a <_dtoa_r+0xb9a>
 800a436:	3201      	adds	r2, #1
 800a438:	701a      	strb	r2, [r3, #0]
 800a43a:	e746      	b.n	800a2ca <_dtoa_r+0x94a>
 800a43c:	2a00      	cmp	r2, #0
 800a43e:	dd07      	ble.n	800a450 <_dtoa_r+0xad0>
 800a440:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a444:	d0ed      	beq.n	800a422 <_dtoa_r+0xaa2>
 800a446:	f10a 0301 	add.w	r3, sl, #1
 800a44a:	f88b 3000 	strb.w	r3, [fp]
 800a44e:	e73c      	b.n	800a2ca <_dtoa_r+0x94a>
 800a450:	9b05      	ldr	r3, [sp, #20]
 800a452:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a456:	4599      	cmp	r9, r3
 800a458:	d047      	beq.n	800a4ea <_dtoa_r+0xb6a>
 800a45a:	ee18 1a10 	vmov	r1, s16
 800a45e:	2300      	movs	r3, #0
 800a460:	220a      	movs	r2, #10
 800a462:	4620      	mov	r0, r4
 800a464:	f000 fb16 	bl	800aa94 <__multadd>
 800a468:	45b8      	cmp	r8, r7
 800a46a:	ee08 0a10 	vmov	s16, r0
 800a46e:	f04f 0300 	mov.w	r3, #0
 800a472:	f04f 020a 	mov.w	r2, #10
 800a476:	4641      	mov	r1, r8
 800a478:	4620      	mov	r0, r4
 800a47a:	d106      	bne.n	800a48a <_dtoa_r+0xb0a>
 800a47c:	f000 fb0a 	bl	800aa94 <__multadd>
 800a480:	4680      	mov	r8, r0
 800a482:	4607      	mov	r7, r0
 800a484:	f109 0901 	add.w	r9, r9, #1
 800a488:	e772      	b.n	800a370 <_dtoa_r+0x9f0>
 800a48a:	f000 fb03 	bl	800aa94 <__multadd>
 800a48e:	4639      	mov	r1, r7
 800a490:	4680      	mov	r8, r0
 800a492:	2300      	movs	r3, #0
 800a494:	220a      	movs	r2, #10
 800a496:	4620      	mov	r0, r4
 800a498:	f000 fafc 	bl	800aa94 <__multadd>
 800a49c:	4607      	mov	r7, r0
 800a49e:	e7f1      	b.n	800a484 <_dtoa_r+0xb04>
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	9302      	str	r3, [sp, #8]
 800a4a4:	9d01      	ldr	r5, [sp, #4]
 800a4a6:	ee18 0a10 	vmov	r0, s16
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	f7ff f9da 	bl	8009864 <quorem>
 800a4b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	f805 ab01 	strb.w	sl, [r5], #1
 800a4ba:	1aea      	subs	r2, r5, r3
 800a4bc:	9b02      	ldr	r3, [sp, #8]
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	dd09      	ble.n	800a4d6 <_dtoa_r+0xb56>
 800a4c2:	ee18 1a10 	vmov	r1, s16
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	220a      	movs	r2, #10
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 fae2 	bl	800aa94 <__multadd>
 800a4d0:	ee08 0a10 	vmov	s16, r0
 800a4d4:	e7e7      	b.n	800a4a6 <_dtoa_r+0xb26>
 800a4d6:	9b02      	ldr	r3, [sp, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	bfc8      	it	gt
 800a4dc:	461d      	movgt	r5, r3
 800a4de:	9b01      	ldr	r3, [sp, #4]
 800a4e0:	bfd8      	it	le
 800a4e2:	2501      	movle	r5, #1
 800a4e4:	441d      	add	r5, r3
 800a4e6:	f04f 0800 	mov.w	r8, #0
 800a4ea:	ee18 1a10 	vmov	r1, s16
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f000 fc7f 	bl	800adf4 <__lshift>
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	ee08 0a10 	vmov	s16, r0
 800a4fc:	f000 fcea 	bl	800aed4 <__mcmp>
 800a500:	2800      	cmp	r0, #0
 800a502:	dc91      	bgt.n	800a428 <_dtoa_r+0xaa8>
 800a504:	d102      	bne.n	800a50c <_dtoa_r+0xb8c>
 800a506:	f01a 0f01 	tst.w	sl, #1
 800a50a:	d18d      	bne.n	800a428 <_dtoa_r+0xaa8>
 800a50c:	462b      	mov	r3, r5
 800a50e:	461d      	mov	r5, r3
 800a510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a514:	2a30      	cmp	r2, #48	; 0x30
 800a516:	d0fa      	beq.n	800a50e <_dtoa_r+0xb8e>
 800a518:	e6d7      	b.n	800a2ca <_dtoa_r+0x94a>
 800a51a:	9a01      	ldr	r2, [sp, #4]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d184      	bne.n	800a42a <_dtoa_r+0xaaa>
 800a520:	9b00      	ldr	r3, [sp, #0]
 800a522:	3301      	adds	r3, #1
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	2331      	movs	r3, #49	; 0x31
 800a528:	7013      	strb	r3, [r2, #0]
 800a52a:	e6ce      	b.n	800a2ca <_dtoa_r+0x94a>
 800a52c:	4b09      	ldr	r3, [pc, #36]	; (800a554 <_dtoa_r+0xbd4>)
 800a52e:	f7ff ba95 	b.w	8009a5c <_dtoa_r+0xdc>
 800a532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a534:	2b00      	cmp	r3, #0
 800a536:	f47f aa6e 	bne.w	8009a16 <_dtoa_r+0x96>
 800a53a:	4b07      	ldr	r3, [pc, #28]	; (800a558 <_dtoa_r+0xbd8>)
 800a53c:	f7ff ba8e 	b.w	8009a5c <_dtoa_r+0xdc>
 800a540:	9b02      	ldr	r3, [sp, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	dcae      	bgt.n	800a4a4 <_dtoa_r+0xb24>
 800a546:	9b06      	ldr	r3, [sp, #24]
 800a548:	2b02      	cmp	r3, #2
 800a54a:	f73f aea8 	bgt.w	800a29e <_dtoa_r+0x91e>
 800a54e:	e7a9      	b.n	800a4a4 <_dtoa_r+0xb24>
 800a550:	0800bb87 	.word	0x0800bb87
 800a554:	0800bae4 	.word	0x0800bae4
 800a558:	0800bb08 	.word	0x0800bb08

0800a55c <__sflush_r>:
 800a55c:	898a      	ldrh	r2, [r1, #12]
 800a55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a562:	4605      	mov	r5, r0
 800a564:	0710      	lsls	r0, r2, #28
 800a566:	460c      	mov	r4, r1
 800a568:	d458      	bmi.n	800a61c <__sflush_r+0xc0>
 800a56a:	684b      	ldr	r3, [r1, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	dc05      	bgt.n	800a57c <__sflush_r+0x20>
 800a570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a572:	2b00      	cmp	r3, #0
 800a574:	dc02      	bgt.n	800a57c <__sflush_r+0x20>
 800a576:	2000      	movs	r0, #0
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a57e:	2e00      	cmp	r6, #0
 800a580:	d0f9      	beq.n	800a576 <__sflush_r+0x1a>
 800a582:	2300      	movs	r3, #0
 800a584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a588:	682f      	ldr	r7, [r5, #0]
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	d032      	beq.n	800a5f4 <__sflush_r+0x98>
 800a58e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	075a      	lsls	r2, r3, #29
 800a594:	d505      	bpl.n	800a5a2 <__sflush_r+0x46>
 800a596:	6863      	ldr	r3, [r4, #4]
 800a598:	1ac0      	subs	r0, r0, r3
 800a59a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a59c:	b10b      	cbz	r3, 800a5a2 <__sflush_r+0x46>
 800a59e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5a0:	1ac0      	subs	r0, r0, r3
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5a8:	6a21      	ldr	r1, [r4, #32]
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	47b0      	blx	r6
 800a5ae:	1c43      	adds	r3, r0, #1
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	d106      	bne.n	800a5c2 <__sflush_r+0x66>
 800a5b4:	6829      	ldr	r1, [r5, #0]
 800a5b6:	291d      	cmp	r1, #29
 800a5b8:	d82c      	bhi.n	800a614 <__sflush_r+0xb8>
 800a5ba:	4a2a      	ldr	r2, [pc, #168]	; (800a664 <__sflush_r+0x108>)
 800a5bc:	40ca      	lsrs	r2, r1
 800a5be:	07d6      	lsls	r6, r2, #31
 800a5c0:	d528      	bpl.n	800a614 <__sflush_r+0xb8>
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	6062      	str	r2, [r4, #4]
 800a5c6:	04d9      	lsls	r1, r3, #19
 800a5c8:	6922      	ldr	r2, [r4, #16]
 800a5ca:	6022      	str	r2, [r4, #0]
 800a5cc:	d504      	bpl.n	800a5d8 <__sflush_r+0x7c>
 800a5ce:	1c42      	adds	r2, r0, #1
 800a5d0:	d101      	bne.n	800a5d6 <__sflush_r+0x7a>
 800a5d2:	682b      	ldr	r3, [r5, #0]
 800a5d4:	b903      	cbnz	r3, 800a5d8 <__sflush_r+0x7c>
 800a5d6:	6560      	str	r0, [r4, #84]	; 0x54
 800a5d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5da:	602f      	str	r7, [r5, #0]
 800a5dc:	2900      	cmp	r1, #0
 800a5de:	d0ca      	beq.n	800a576 <__sflush_r+0x1a>
 800a5e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e4:	4299      	cmp	r1, r3
 800a5e6:	d002      	beq.n	800a5ee <__sflush_r+0x92>
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f000 fd8b 	bl	800b104 <_free_r>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	6360      	str	r0, [r4, #52]	; 0x34
 800a5f2:	e7c1      	b.n	800a578 <__sflush_r+0x1c>
 800a5f4:	6a21      	ldr	r1, [r4, #32]
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	47b0      	blx	r6
 800a5fc:	1c41      	adds	r1, r0, #1
 800a5fe:	d1c7      	bne.n	800a590 <__sflush_r+0x34>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0c4      	beq.n	800a590 <__sflush_r+0x34>
 800a606:	2b1d      	cmp	r3, #29
 800a608:	d001      	beq.n	800a60e <__sflush_r+0xb2>
 800a60a:	2b16      	cmp	r3, #22
 800a60c:	d101      	bne.n	800a612 <__sflush_r+0xb6>
 800a60e:	602f      	str	r7, [r5, #0]
 800a610:	e7b1      	b.n	800a576 <__sflush_r+0x1a>
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a618:	81a3      	strh	r3, [r4, #12]
 800a61a:	e7ad      	b.n	800a578 <__sflush_r+0x1c>
 800a61c:	690f      	ldr	r7, [r1, #16]
 800a61e:	2f00      	cmp	r7, #0
 800a620:	d0a9      	beq.n	800a576 <__sflush_r+0x1a>
 800a622:	0793      	lsls	r3, r2, #30
 800a624:	680e      	ldr	r6, [r1, #0]
 800a626:	bf08      	it	eq
 800a628:	694b      	ldreq	r3, [r1, #20]
 800a62a:	600f      	str	r7, [r1, #0]
 800a62c:	bf18      	it	ne
 800a62e:	2300      	movne	r3, #0
 800a630:	eba6 0807 	sub.w	r8, r6, r7
 800a634:	608b      	str	r3, [r1, #8]
 800a636:	f1b8 0f00 	cmp.w	r8, #0
 800a63a:	dd9c      	ble.n	800a576 <__sflush_r+0x1a>
 800a63c:	6a21      	ldr	r1, [r4, #32]
 800a63e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a640:	4643      	mov	r3, r8
 800a642:	463a      	mov	r2, r7
 800a644:	4628      	mov	r0, r5
 800a646:	47b0      	blx	r6
 800a648:	2800      	cmp	r0, #0
 800a64a:	dc06      	bgt.n	800a65a <__sflush_r+0xfe>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a652:	81a3      	strh	r3, [r4, #12]
 800a654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a658:	e78e      	b.n	800a578 <__sflush_r+0x1c>
 800a65a:	4407      	add	r7, r0
 800a65c:	eba8 0800 	sub.w	r8, r8, r0
 800a660:	e7e9      	b.n	800a636 <__sflush_r+0xda>
 800a662:	bf00      	nop
 800a664:	20400001 	.word	0x20400001

0800a668 <_fflush_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	690b      	ldr	r3, [r1, #16]
 800a66c:	4605      	mov	r5, r0
 800a66e:	460c      	mov	r4, r1
 800a670:	b913      	cbnz	r3, 800a678 <_fflush_r+0x10>
 800a672:	2500      	movs	r5, #0
 800a674:	4628      	mov	r0, r5
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	b118      	cbz	r0, 800a682 <_fflush_r+0x1a>
 800a67a:	6983      	ldr	r3, [r0, #24]
 800a67c:	b90b      	cbnz	r3, 800a682 <_fflush_r+0x1a>
 800a67e:	f000 f887 	bl	800a790 <__sinit>
 800a682:	4b14      	ldr	r3, [pc, #80]	; (800a6d4 <_fflush_r+0x6c>)
 800a684:	429c      	cmp	r4, r3
 800a686:	d11b      	bne.n	800a6c0 <_fflush_r+0x58>
 800a688:	686c      	ldr	r4, [r5, #4]
 800a68a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0ef      	beq.n	800a672 <_fflush_r+0xa>
 800a692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a694:	07d0      	lsls	r0, r2, #31
 800a696:	d404      	bmi.n	800a6a2 <_fflush_r+0x3a>
 800a698:	0599      	lsls	r1, r3, #22
 800a69a:	d402      	bmi.n	800a6a2 <_fflush_r+0x3a>
 800a69c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a69e:	f000 f91a 	bl	800a8d6 <__retarget_lock_acquire_recursive>
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	f7ff ff59 	bl	800a55c <__sflush_r>
 800a6aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6ac:	07da      	lsls	r2, r3, #31
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	d4e0      	bmi.n	800a674 <_fflush_r+0xc>
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	059b      	lsls	r3, r3, #22
 800a6b6:	d4dd      	bmi.n	800a674 <_fflush_r+0xc>
 800a6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ba:	f000 f90d 	bl	800a8d8 <__retarget_lock_release_recursive>
 800a6be:	e7d9      	b.n	800a674 <_fflush_r+0xc>
 800a6c0:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <_fflush_r+0x70>)
 800a6c2:	429c      	cmp	r4, r3
 800a6c4:	d101      	bne.n	800a6ca <_fflush_r+0x62>
 800a6c6:	68ac      	ldr	r4, [r5, #8]
 800a6c8:	e7df      	b.n	800a68a <_fflush_r+0x22>
 800a6ca:	4b04      	ldr	r3, [pc, #16]	; (800a6dc <_fflush_r+0x74>)
 800a6cc:	429c      	cmp	r4, r3
 800a6ce:	bf08      	it	eq
 800a6d0:	68ec      	ldreq	r4, [r5, #12]
 800a6d2:	e7da      	b.n	800a68a <_fflush_r+0x22>
 800a6d4:	0800bbb8 	.word	0x0800bbb8
 800a6d8:	0800bbd8 	.word	0x0800bbd8
 800a6dc:	0800bb98 	.word	0x0800bb98

0800a6e0 <std>:
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	b510      	push	{r4, lr}
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a6ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6ee:	6083      	str	r3, [r0, #8]
 800a6f0:	8181      	strh	r1, [r0, #12]
 800a6f2:	6643      	str	r3, [r0, #100]	; 0x64
 800a6f4:	81c2      	strh	r2, [r0, #14]
 800a6f6:	6183      	str	r3, [r0, #24]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	2208      	movs	r2, #8
 800a6fc:	305c      	adds	r0, #92	; 0x5c
 800a6fe:	f7fe faf1 	bl	8008ce4 <memset>
 800a702:	4b05      	ldr	r3, [pc, #20]	; (800a718 <std+0x38>)
 800a704:	6263      	str	r3, [r4, #36]	; 0x24
 800a706:	4b05      	ldr	r3, [pc, #20]	; (800a71c <std+0x3c>)
 800a708:	62a3      	str	r3, [r4, #40]	; 0x28
 800a70a:	4b05      	ldr	r3, [pc, #20]	; (800a720 <std+0x40>)
 800a70c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a70e:	4b05      	ldr	r3, [pc, #20]	; (800a724 <std+0x44>)
 800a710:	6224      	str	r4, [r4, #32]
 800a712:	6323      	str	r3, [r4, #48]	; 0x30
 800a714:	bd10      	pop	{r4, pc}
 800a716:	bf00      	nop
 800a718:	0800b599 	.word	0x0800b599
 800a71c:	0800b5bb 	.word	0x0800b5bb
 800a720:	0800b5f3 	.word	0x0800b5f3
 800a724:	0800b617 	.word	0x0800b617

0800a728 <_cleanup_r>:
 800a728:	4901      	ldr	r1, [pc, #4]	; (800a730 <_cleanup_r+0x8>)
 800a72a:	f000 b8af 	b.w	800a88c <_fwalk_reent>
 800a72e:	bf00      	nop
 800a730:	0800a669 	.word	0x0800a669

0800a734 <__sfmoreglue>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	2268      	movs	r2, #104	; 0x68
 800a738:	1e4d      	subs	r5, r1, #1
 800a73a:	4355      	muls	r5, r2
 800a73c:	460e      	mov	r6, r1
 800a73e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a742:	f000 fd4b 	bl	800b1dc <_malloc_r>
 800a746:	4604      	mov	r4, r0
 800a748:	b140      	cbz	r0, 800a75c <__sfmoreglue+0x28>
 800a74a:	2100      	movs	r1, #0
 800a74c:	e9c0 1600 	strd	r1, r6, [r0]
 800a750:	300c      	adds	r0, #12
 800a752:	60a0      	str	r0, [r4, #8]
 800a754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a758:	f7fe fac4 	bl	8008ce4 <memset>
 800a75c:	4620      	mov	r0, r4
 800a75e:	bd70      	pop	{r4, r5, r6, pc}

0800a760 <__sfp_lock_acquire>:
 800a760:	4801      	ldr	r0, [pc, #4]	; (800a768 <__sfp_lock_acquire+0x8>)
 800a762:	f000 b8b8 	b.w	800a8d6 <__retarget_lock_acquire_recursive>
 800a766:	bf00      	nop
 800a768:	200008b1 	.word	0x200008b1

0800a76c <__sfp_lock_release>:
 800a76c:	4801      	ldr	r0, [pc, #4]	; (800a774 <__sfp_lock_release+0x8>)
 800a76e:	f000 b8b3 	b.w	800a8d8 <__retarget_lock_release_recursive>
 800a772:	bf00      	nop
 800a774:	200008b1 	.word	0x200008b1

0800a778 <__sinit_lock_acquire>:
 800a778:	4801      	ldr	r0, [pc, #4]	; (800a780 <__sinit_lock_acquire+0x8>)
 800a77a:	f000 b8ac 	b.w	800a8d6 <__retarget_lock_acquire_recursive>
 800a77e:	bf00      	nop
 800a780:	200008b2 	.word	0x200008b2

0800a784 <__sinit_lock_release>:
 800a784:	4801      	ldr	r0, [pc, #4]	; (800a78c <__sinit_lock_release+0x8>)
 800a786:	f000 b8a7 	b.w	800a8d8 <__retarget_lock_release_recursive>
 800a78a:	bf00      	nop
 800a78c:	200008b2 	.word	0x200008b2

0800a790 <__sinit>:
 800a790:	b510      	push	{r4, lr}
 800a792:	4604      	mov	r4, r0
 800a794:	f7ff fff0 	bl	800a778 <__sinit_lock_acquire>
 800a798:	69a3      	ldr	r3, [r4, #24]
 800a79a:	b11b      	cbz	r3, 800a7a4 <__sinit+0x14>
 800a79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a0:	f7ff bff0 	b.w	800a784 <__sinit_lock_release>
 800a7a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7a8:	6523      	str	r3, [r4, #80]	; 0x50
 800a7aa:	4b13      	ldr	r3, [pc, #76]	; (800a7f8 <__sinit+0x68>)
 800a7ac:	4a13      	ldr	r2, [pc, #76]	; (800a7fc <__sinit+0x6c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7b2:	42a3      	cmp	r3, r4
 800a7b4:	bf04      	itt	eq
 800a7b6:	2301      	moveq	r3, #1
 800a7b8:	61a3      	streq	r3, [r4, #24]
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 f820 	bl	800a800 <__sfp>
 800a7c0:	6060      	str	r0, [r4, #4]
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 f81c 	bl	800a800 <__sfp>
 800a7c8:	60a0      	str	r0, [r4, #8]
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 f818 	bl	800a800 <__sfp>
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	60e0      	str	r0, [r4, #12]
 800a7d4:	2104      	movs	r1, #4
 800a7d6:	6860      	ldr	r0, [r4, #4]
 800a7d8:	f7ff ff82 	bl	800a6e0 <std>
 800a7dc:	68a0      	ldr	r0, [r4, #8]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	2109      	movs	r1, #9
 800a7e2:	f7ff ff7d 	bl	800a6e0 <std>
 800a7e6:	68e0      	ldr	r0, [r4, #12]
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	2112      	movs	r1, #18
 800a7ec:	f7ff ff78 	bl	800a6e0 <std>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	61a3      	str	r3, [r4, #24]
 800a7f4:	e7d2      	b.n	800a79c <__sinit+0xc>
 800a7f6:	bf00      	nop
 800a7f8:	0800bad0 	.word	0x0800bad0
 800a7fc:	0800a729 	.word	0x0800a729

0800a800 <__sfp>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	4607      	mov	r7, r0
 800a804:	f7ff ffac 	bl	800a760 <__sfp_lock_acquire>
 800a808:	4b1e      	ldr	r3, [pc, #120]	; (800a884 <__sfp+0x84>)
 800a80a:	681e      	ldr	r6, [r3, #0]
 800a80c:	69b3      	ldr	r3, [r6, #24]
 800a80e:	b913      	cbnz	r3, 800a816 <__sfp+0x16>
 800a810:	4630      	mov	r0, r6
 800a812:	f7ff ffbd 	bl	800a790 <__sinit>
 800a816:	3648      	adds	r6, #72	; 0x48
 800a818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	d503      	bpl.n	800a828 <__sfp+0x28>
 800a820:	6833      	ldr	r3, [r6, #0]
 800a822:	b30b      	cbz	r3, 800a868 <__sfp+0x68>
 800a824:	6836      	ldr	r6, [r6, #0]
 800a826:	e7f7      	b.n	800a818 <__sfp+0x18>
 800a828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a82c:	b9d5      	cbnz	r5, 800a864 <__sfp+0x64>
 800a82e:	4b16      	ldr	r3, [pc, #88]	; (800a888 <__sfp+0x88>)
 800a830:	60e3      	str	r3, [r4, #12]
 800a832:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a836:	6665      	str	r5, [r4, #100]	; 0x64
 800a838:	f000 f84c 	bl	800a8d4 <__retarget_lock_init_recursive>
 800a83c:	f7ff ff96 	bl	800a76c <__sfp_lock_release>
 800a840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a848:	6025      	str	r5, [r4, #0]
 800a84a:	61a5      	str	r5, [r4, #24]
 800a84c:	2208      	movs	r2, #8
 800a84e:	4629      	mov	r1, r5
 800a850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a854:	f7fe fa46 	bl	8008ce4 <memset>
 800a858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a85c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a860:	4620      	mov	r0, r4
 800a862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a864:	3468      	adds	r4, #104	; 0x68
 800a866:	e7d9      	b.n	800a81c <__sfp+0x1c>
 800a868:	2104      	movs	r1, #4
 800a86a:	4638      	mov	r0, r7
 800a86c:	f7ff ff62 	bl	800a734 <__sfmoreglue>
 800a870:	4604      	mov	r4, r0
 800a872:	6030      	str	r0, [r6, #0]
 800a874:	2800      	cmp	r0, #0
 800a876:	d1d5      	bne.n	800a824 <__sfp+0x24>
 800a878:	f7ff ff78 	bl	800a76c <__sfp_lock_release>
 800a87c:	230c      	movs	r3, #12
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	e7ee      	b.n	800a860 <__sfp+0x60>
 800a882:	bf00      	nop
 800a884:	0800bad0 	.word	0x0800bad0
 800a888:	ffff0001 	.word	0xffff0001

0800a88c <_fwalk_reent>:
 800a88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a890:	4606      	mov	r6, r0
 800a892:	4688      	mov	r8, r1
 800a894:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a898:	2700      	movs	r7, #0
 800a89a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a89e:	f1b9 0901 	subs.w	r9, r9, #1
 800a8a2:	d505      	bpl.n	800a8b0 <_fwalk_reent+0x24>
 800a8a4:	6824      	ldr	r4, [r4, #0]
 800a8a6:	2c00      	cmp	r4, #0
 800a8a8:	d1f7      	bne.n	800a89a <_fwalk_reent+0xe>
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b0:	89ab      	ldrh	r3, [r5, #12]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d907      	bls.n	800a8c6 <_fwalk_reent+0x3a>
 800a8b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	d003      	beq.n	800a8c6 <_fwalk_reent+0x3a>
 800a8be:	4629      	mov	r1, r5
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	47c0      	blx	r8
 800a8c4:	4307      	orrs	r7, r0
 800a8c6:	3568      	adds	r5, #104	; 0x68
 800a8c8:	e7e9      	b.n	800a89e <_fwalk_reent+0x12>
	...

0800a8cc <_localeconv_r>:
 800a8cc:	4800      	ldr	r0, [pc, #0]	; (800a8d0 <_localeconv_r+0x4>)
 800a8ce:	4770      	bx	lr
 800a8d0:	2000016c 	.word	0x2000016c

0800a8d4 <__retarget_lock_init_recursive>:
 800a8d4:	4770      	bx	lr

0800a8d6 <__retarget_lock_acquire_recursive>:
 800a8d6:	4770      	bx	lr

0800a8d8 <__retarget_lock_release_recursive>:
 800a8d8:	4770      	bx	lr

0800a8da <__swhatbuf_r>:
 800a8da:	b570      	push	{r4, r5, r6, lr}
 800a8dc:	460e      	mov	r6, r1
 800a8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e2:	2900      	cmp	r1, #0
 800a8e4:	b096      	sub	sp, #88	; 0x58
 800a8e6:	4614      	mov	r4, r2
 800a8e8:	461d      	mov	r5, r3
 800a8ea:	da08      	bge.n	800a8fe <__swhatbuf_r+0x24>
 800a8ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	602a      	str	r2, [r5, #0]
 800a8f4:	061a      	lsls	r2, r3, #24
 800a8f6:	d410      	bmi.n	800a91a <__swhatbuf_r+0x40>
 800a8f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8fc:	e00e      	b.n	800a91c <__swhatbuf_r+0x42>
 800a8fe:	466a      	mov	r2, sp
 800a900:	f000 fee0 	bl	800b6c4 <_fstat_r>
 800a904:	2800      	cmp	r0, #0
 800a906:	dbf1      	blt.n	800a8ec <__swhatbuf_r+0x12>
 800a908:	9a01      	ldr	r2, [sp, #4]
 800a90a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a90e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a912:	425a      	negs	r2, r3
 800a914:	415a      	adcs	r2, r3
 800a916:	602a      	str	r2, [r5, #0]
 800a918:	e7ee      	b.n	800a8f8 <__swhatbuf_r+0x1e>
 800a91a:	2340      	movs	r3, #64	; 0x40
 800a91c:	2000      	movs	r0, #0
 800a91e:	6023      	str	r3, [r4, #0]
 800a920:	b016      	add	sp, #88	; 0x58
 800a922:	bd70      	pop	{r4, r5, r6, pc}

0800a924 <__smakebuf_r>:
 800a924:	898b      	ldrh	r3, [r1, #12]
 800a926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a928:	079d      	lsls	r5, r3, #30
 800a92a:	4606      	mov	r6, r0
 800a92c:	460c      	mov	r4, r1
 800a92e:	d507      	bpl.n	800a940 <__smakebuf_r+0x1c>
 800a930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	6123      	str	r3, [r4, #16]
 800a938:	2301      	movs	r3, #1
 800a93a:	6163      	str	r3, [r4, #20]
 800a93c:	b002      	add	sp, #8
 800a93e:	bd70      	pop	{r4, r5, r6, pc}
 800a940:	ab01      	add	r3, sp, #4
 800a942:	466a      	mov	r2, sp
 800a944:	f7ff ffc9 	bl	800a8da <__swhatbuf_r>
 800a948:	9900      	ldr	r1, [sp, #0]
 800a94a:	4605      	mov	r5, r0
 800a94c:	4630      	mov	r0, r6
 800a94e:	f000 fc45 	bl	800b1dc <_malloc_r>
 800a952:	b948      	cbnz	r0, 800a968 <__smakebuf_r+0x44>
 800a954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a958:	059a      	lsls	r2, r3, #22
 800a95a:	d4ef      	bmi.n	800a93c <__smakebuf_r+0x18>
 800a95c:	f023 0303 	bic.w	r3, r3, #3
 800a960:	f043 0302 	orr.w	r3, r3, #2
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	e7e3      	b.n	800a930 <__smakebuf_r+0xc>
 800a968:	4b0d      	ldr	r3, [pc, #52]	; (800a9a0 <__smakebuf_r+0x7c>)
 800a96a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	6020      	str	r0, [r4, #0]
 800a970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	9b00      	ldr	r3, [sp, #0]
 800a978:	6163      	str	r3, [r4, #20]
 800a97a:	9b01      	ldr	r3, [sp, #4]
 800a97c:	6120      	str	r0, [r4, #16]
 800a97e:	b15b      	cbz	r3, 800a998 <__smakebuf_r+0x74>
 800a980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a984:	4630      	mov	r0, r6
 800a986:	f000 feaf 	bl	800b6e8 <_isatty_r>
 800a98a:	b128      	cbz	r0, 800a998 <__smakebuf_r+0x74>
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	f023 0303 	bic.w	r3, r3, #3
 800a992:	f043 0301 	orr.w	r3, r3, #1
 800a996:	81a3      	strh	r3, [r4, #12]
 800a998:	89a0      	ldrh	r0, [r4, #12]
 800a99a:	4305      	orrs	r5, r0
 800a99c:	81a5      	strh	r5, [r4, #12]
 800a99e:	e7cd      	b.n	800a93c <__smakebuf_r+0x18>
 800a9a0:	0800a729 	.word	0x0800a729

0800a9a4 <malloc>:
 800a9a4:	4b02      	ldr	r3, [pc, #8]	; (800a9b0 <malloc+0xc>)
 800a9a6:	4601      	mov	r1, r0
 800a9a8:	6818      	ldr	r0, [r3, #0]
 800a9aa:	f000 bc17 	b.w	800b1dc <_malloc_r>
 800a9ae:	bf00      	nop
 800a9b0:	20000018 	.word	0x20000018

0800a9b4 <memcpy>:
 800a9b4:	440a      	add	r2, r1
 800a9b6:	4291      	cmp	r1, r2
 800a9b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a9bc:	d100      	bne.n	800a9c0 <memcpy+0xc>
 800a9be:	4770      	bx	lr
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ca:	4291      	cmp	r1, r2
 800a9cc:	d1f9      	bne.n	800a9c2 <memcpy+0xe>
 800a9ce:	bd10      	pop	{r4, pc}

0800a9d0 <_Balloc>:
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	460d      	mov	r5, r1
 800a9d8:	b976      	cbnz	r6, 800a9f8 <_Balloc+0x28>
 800a9da:	2010      	movs	r0, #16
 800a9dc:	f7ff ffe2 	bl	800a9a4 <malloc>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	6260      	str	r0, [r4, #36]	; 0x24
 800a9e4:	b920      	cbnz	r0, 800a9f0 <_Balloc+0x20>
 800a9e6:	4b18      	ldr	r3, [pc, #96]	; (800aa48 <_Balloc+0x78>)
 800a9e8:	4818      	ldr	r0, [pc, #96]	; (800aa4c <_Balloc+0x7c>)
 800a9ea:	2166      	movs	r1, #102	; 0x66
 800a9ec:	f000 fe2a 	bl	800b644 <__assert_func>
 800a9f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9f4:	6006      	str	r6, [r0, #0]
 800a9f6:	60c6      	str	r6, [r0, #12]
 800a9f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a9fa:	68f3      	ldr	r3, [r6, #12]
 800a9fc:	b183      	cbz	r3, 800aa20 <_Balloc+0x50>
 800a9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa06:	b9b8      	cbnz	r0, 800aa38 <_Balloc+0x68>
 800aa08:	2101      	movs	r1, #1
 800aa0a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa0e:	1d72      	adds	r2, r6, #5
 800aa10:	0092      	lsls	r2, r2, #2
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 fb60 	bl	800b0d8 <_calloc_r>
 800aa18:	b160      	cbz	r0, 800aa34 <_Balloc+0x64>
 800aa1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa1e:	e00e      	b.n	800aa3e <_Balloc+0x6e>
 800aa20:	2221      	movs	r2, #33	; 0x21
 800aa22:	2104      	movs	r1, #4
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 fb57 	bl	800b0d8 <_calloc_r>
 800aa2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa2c:	60f0      	str	r0, [r6, #12]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1e4      	bne.n	800a9fe <_Balloc+0x2e>
 800aa34:	2000      	movs	r0, #0
 800aa36:	bd70      	pop	{r4, r5, r6, pc}
 800aa38:	6802      	ldr	r2, [r0, #0]
 800aa3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa44:	e7f7      	b.n	800aa36 <_Balloc+0x66>
 800aa46:	bf00      	nop
 800aa48:	0800bb15 	.word	0x0800bb15
 800aa4c:	0800bbf8 	.word	0x0800bbf8

0800aa50 <_Bfree>:
 800aa50:	b570      	push	{r4, r5, r6, lr}
 800aa52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa54:	4605      	mov	r5, r0
 800aa56:	460c      	mov	r4, r1
 800aa58:	b976      	cbnz	r6, 800aa78 <_Bfree+0x28>
 800aa5a:	2010      	movs	r0, #16
 800aa5c:	f7ff ffa2 	bl	800a9a4 <malloc>
 800aa60:	4602      	mov	r2, r0
 800aa62:	6268      	str	r0, [r5, #36]	; 0x24
 800aa64:	b920      	cbnz	r0, 800aa70 <_Bfree+0x20>
 800aa66:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <_Bfree+0x3c>)
 800aa68:	4809      	ldr	r0, [pc, #36]	; (800aa90 <_Bfree+0x40>)
 800aa6a:	218a      	movs	r1, #138	; 0x8a
 800aa6c:	f000 fdea 	bl	800b644 <__assert_func>
 800aa70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa74:	6006      	str	r6, [r0, #0]
 800aa76:	60c6      	str	r6, [r0, #12]
 800aa78:	b13c      	cbz	r4, 800aa8a <_Bfree+0x3a>
 800aa7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa7c:	6862      	ldr	r2, [r4, #4]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa84:	6021      	str	r1, [r4, #0]
 800aa86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}
 800aa8c:	0800bb15 	.word	0x0800bb15
 800aa90:	0800bbf8 	.word	0x0800bbf8

0800aa94 <__multadd>:
 800aa94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa98:	690d      	ldr	r5, [r1, #16]
 800aa9a:	4607      	mov	r7, r0
 800aa9c:	460c      	mov	r4, r1
 800aa9e:	461e      	mov	r6, r3
 800aaa0:	f101 0c14 	add.w	ip, r1, #20
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f8dc 3000 	ldr.w	r3, [ip]
 800aaaa:	b299      	uxth	r1, r3
 800aaac:	fb02 6101 	mla	r1, r2, r1, r6
 800aab0:	0c1e      	lsrs	r6, r3, #16
 800aab2:	0c0b      	lsrs	r3, r1, #16
 800aab4:	fb02 3306 	mla	r3, r2, r6, r3
 800aab8:	b289      	uxth	r1, r1
 800aaba:	3001      	adds	r0, #1
 800aabc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aac0:	4285      	cmp	r5, r0
 800aac2:	f84c 1b04 	str.w	r1, [ip], #4
 800aac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aaca:	dcec      	bgt.n	800aaa6 <__multadd+0x12>
 800aacc:	b30e      	cbz	r6, 800ab12 <__multadd+0x7e>
 800aace:	68a3      	ldr	r3, [r4, #8]
 800aad0:	42ab      	cmp	r3, r5
 800aad2:	dc19      	bgt.n	800ab08 <__multadd+0x74>
 800aad4:	6861      	ldr	r1, [r4, #4]
 800aad6:	4638      	mov	r0, r7
 800aad8:	3101      	adds	r1, #1
 800aada:	f7ff ff79 	bl	800a9d0 <_Balloc>
 800aade:	4680      	mov	r8, r0
 800aae0:	b928      	cbnz	r0, 800aaee <__multadd+0x5a>
 800aae2:	4602      	mov	r2, r0
 800aae4:	4b0c      	ldr	r3, [pc, #48]	; (800ab18 <__multadd+0x84>)
 800aae6:	480d      	ldr	r0, [pc, #52]	; (800ab1c <__multadd+0x88>)
 800aae8:	21b5      	movs	r1, #181	; 0xb5
 800aaea:	f000 fdab 	bl	800b644 <__assert_func>
 800aaee:	6922      	ldr	r2, [r4, #16]
 800aaf0:	3202      	adds	r2, #2
 800aaf2:	f104 010c 	add.w	r1, r4, #12
 800aaf6:	0092      	lsls	r2, r2, #2
 800aaf8:	300c      	adds	r0, #12
 800aafa:	f7ff ff5b 	bl	800a9b4 <memcpy>
 800aafe:	4621      	mov	r1, r4
 800ab00:	4638      	mov	r0, r7
 800ab02:	f7ff ffa5 	bl	800aa50 <_Bfree>
 800ab06:	4644      	mov	r4, r8
 800ab08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab0c:	3501      	adds	r5, #1
 800ab0e:	615e      	str	r6, [r3, #20]
 800ab10:	6125      	str	r5, [r4, #16]
 800ab12:	4620      	mov	r0, r4
 800ab14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab18:	0800bb87 	.word	0x0800bb87
 800ab1c:	0800bbf8 	.word	0x0800bbf8

0800ab20 <__hi0bits>:
 800ab20:	0c03      	lsrs	r3, r0, #16
 800ab22:	041b      	lsls	r3, r3, #16
 800ab24:	b9d3      	cbnz	r3, 800ab5c <__hi0bits+0x3c>
 800ab26:	0400      	lsls	r0, r0, #16
 800ab28:	2310      	movs	r3, #16
 800ab2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab2e:	bf04      	itt	eq
 800ab30:	0200      	lsleq	r0, r0, #8
 800ab32:	3308      	addeq	r3, #8
 800ab34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab38:	bf04      	itt	eq
 800ab3a:	0100      	lsleq	r0, r0, #4
 800ab3c:	3304      	addeq	r3, #4
 800ab3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab42:	bf04      	itt	eq
 800ab44:	0080      	lsleq	r0, r0, #2
 800ab46:	3302      	addeq	r3, #2
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	db05      	blt.n	800ab58 <__hi0bits+0x38>
 800ab4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab50:	f103 0301 	add.w	r3, r3, #1
 800ab54:	bf08      	it	eq
 800ab56:	2320      	moveq	r3, #32
 800ab58:	4618      	mov	r0, r3
 800ab5a:	4770      	bx	lr
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	e7e4      	b.n	800ab2a <__hi0bits+0xa>

0800ab60 <__lo0bits>:
 800ab60:	6803      	ldr	r3, [r0, #0]
 800ab62:	f013 0207 	ands.w	r2, r3, #7
 800ab66:	4601      	mov	r1, r0
 800ab68:	d00b      	beq.n	800ab82 <__lo0bits+0x22>
 800ab6a:	07da      	lsls	r2, r3, #31
 800ab6c:	d423      	bmi.n	800abb6 <__lo0bits+0x56>
 800ab6e:	0798      	lsls	r0, r3, #30
 800ab70:	bf49      	itett	mi
 800ab72:	085b      	lsrmi	r3, r3, #1
 800ab74:	089b      	lsrpl	r3, r3, #2
 800ab76:	2001      	movmi	r0, #1
 800ab78:	600b      	strmi	r3, [r1, #0]
 800ab7a:	bf5c      	itt	pl
 800ab7c:	600b      	strpl	r3, [r1, #0]
 800ab7e:	2002      	movpl	r0, #2
 800ab80:	4770      	bx	lr
 800ab82:	b298      	uxth	r0, r3
 800ab84:	b9a8      	cbnz	r0, 800abb2 <__lo0bits+0x52>
 800ab86:	0c1b      	lsrs	r3, r3, #16
 800ab88:	2010      	movs	r0, #16
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	b90a      	cbnz	r2, 800ab92 <__lo0bits+0x32>
 800ab8e:	3008      	adds	r0, #8
 800ab90:	0a1b      	lsrs	r3, r3, #8
 800ab92:	071a      	lsls	r2, r3, #28
 800ab94:	bf04      	itt	eq
 800ab96:	091b      	lsreq	r3, r3, #4
 800ab98:	3004      	addeq	r0, #4
 800ab9a:	079a      	lsls	r2, r3, #30
 800ab9c:	bf04      	itt	eq
 800ab9e:	089b      	lsreq	r3, r3, #2
 800aba0:	3002      	addeq	r0, #2
 800aba2:	07da      	lsls	r2, r3, #31
 800aba4:	d403      	bmi.n	800abae <__lo0bits+0x4e>
 800aba6:	085b      	lsrs	r3, r3, #1
 800aba8:	f100 0001 	add.w	r0, r0, #1
 800abac:	d005      	beq.n	800abba <__lo0bits+0x5a>
 800abae:	600b      	str	r3, [r1, #0]
 800abb0:	4770      	bx	lr
 800abb2:	4610      	mov	r0, r2
 800abb4:	e7e9      	b.n	800ab8a <__lo0bits+0x2a>
 800abb6:	2000      	movs	r0, #0
 800abb8:	4770      	bx	lr
 800abba:	2020      	movs	r0, #32
 800abbc:	4770      	bx	lr
	...

0800abc0 <__i2b>:
 800abc0:	b510      	push	{r4, lr}
 800abc2:	460c      	mov	r4, r1
 800abc4:	2101      	movs	r1, #1
 800abc6:	f7ff ff03 	bl	800a9d0 <_Balloc>
 800abca:	4602      	mov	r2, r0
 800abcc:	b928      	cbnz	r0, 800abda <__i2b+0x1a>
 800abce:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <__i2b+0x24>)
 800abd0:	4805      	ldr	r0, [pc, #20]	; (800abe8 <__i2b+0x28>)
 800abd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800abd6:	f000 fd35 	bl	800b644 <__assert_func>
 800abda:	2301      	movs	r3, #1
 800abdc:	6144      	str	r4, [r0, #20]
 800abde:	6103      	str	r3, [r0, #16]
 800abe0:	bd10      	pop	{r4, pc}
 800abe2:	bf00      	nop
 800abe4:	0800bb87 	.word	0x0800bb87
 800abe8:	0800bbf8 	.word	0x0800bbf8

0800abec <__multiply>:
 800abec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	4691      	mov	r9, r2
 800abf2:	690a      	ldr	r2, [r1, #16]
 800abf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	bfb8      	it	lt
 800abfc:	460b      	movlt	r3, r1
 800abfe:	460c      	mov	r4, r1
 800ac00:	bfbc      	itt	lt
 800ac02:	464c      	movlt	r4, r9
 800ac04:	4699      	movlt	r9, r3
 800ac06:	6927      	ldr	r7, [r4, #16]
 800ac08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac0c:	68a3      	ldr	r3, [r4, #8]
 800ac0e:	6861      	ldr	r1, [r4, #4]
 800ac10:	eb07 060a 	add.w	r6, r7, sl
 800ac14:	42b3      	cmp	r3, r6
 800ac16:	b085      	sub	sp, #20
 800ac18:	bfb8      	it	lt
 800ac1a:	3101      	addlt	r1, #1
 800ac1c:	f7ff fed8 	bl	800a9d0 <_Balloc>
 800ac20:	b930      	cbnz	r0, 800ac30 <__multiply+0x44>
 800ac22:	4602      	mov	r2, r0
 800ac24:	4b44      	ldr	r3, [pc, #272]	; (800ad38 <__multiply+0x14c>)
 800ac26:	4845      	ldr	r0, [pc, #276]	; (800ad3c <__multiply+0x150>)
 800ac28:	f240 115d 	movw	r1, #349	; 0x15d
 800ac2c:	f000 fd0a 	bl	800b644 <__assert_func>
 800ac30:	f100 0514 	add.w	r5, r0, #20
 800ac34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac38:	462b      	mov	r3, r5
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	4543      	cmp	r3, r8
 800ac3e:	d321      	bcc.n	800ac84 <__multiply+0x98>
 800ac40:	f104 0314 	add.w	r3, r4, #20
 800ac44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac48:	f109 0314 	add.w	r3, r9, #20
 800ac4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac50:	9202      	str	r2, [sp, #8]
 800ac52:	1b3a      	subs	r2, r7, r4
 800ac54:	3a15      	subs	r2, #21
 800ac56:	f022 0203 	bic.w	r2, r2, #3
 800ac5a:	3204      	adds	r2, #4
 800ac5c:	f104 0115 	add.w	r1, r4, #21
 800ac60:	428f      	cmp	r7, r1
 800ac62:	bf38      	it	cc
 800ac64:	2204      	movcc	r2, #4
 800ac66:	9201      	str	r2, [sp, #4]
 800ac68:	9a02      	ldr	r2, [sp, #8]
 800ac6a:	9303      	str	r3, [sp, #12]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d80c      	bhi.n	800ac8a <__multiply+0x9e>
 800ac70:	2e00      	cmp	r6, #0
 800ac72:	dd03      	ble.n	800ac7c <__multiply+0x90>
 800ac74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d05a      	beq.n	800ad32 <__multiply+0x146>
 800ac7c:	6106      	str	r6, [r0, #16]
 800ac7e:	b005      	add	sp, #20
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	f843 2b04 	str.w	r2, [r3], #4
 800ac88:	e7d8      	b.n	800ac3c <__multiply+0x50>
 800ac8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac8e:	f1ba 0f00 	cmp.w	sl, #0
 800ac92:	d024      	beq.n	800acde <__multiply+0xf2>
 800ac94:	f104 0e14 	add.w	lr, r4, #20
 800ac98:	46a9      	mov	r9, r5
 800ac9a:	f04f 0c00 	mov.w	ip, #0
 800ac9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aca2:	f8d9 1000 	ldr.w	r1, [r9]
 800aca6:	fa1f fb82 	uxth.w	fp, r2
 800acaa:	b289      	uxth	r1, r1
 800acac:	fb0a 110b 	mla	r1, sl, fp, r1
 800acb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800acb4:	f8d9 2000 	ldr.w	r2, [r9]
 800acb8:	4461      	add	r1, ip
 800acba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acbe:	fb0a c20b 	mla	r2, sl, fp, ip
 800acc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800acc6:	b289      	uxth	r1, r1
 800acc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800accc:	4577      	cmp	r7, lr
 800acce:	f849 1b04 	str.w	r1, [r9], #4
 800acd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acd6:	d8e2      	bhi.n	800ac9e <__multiply+0xb2>
 800acd8:	9a01      	ldr	r2, [sp, #4]
 800acda:	f845 c002 	str.w	ip, [r5, r2]
 800acde:	9a03      	ldr	r2, [sp, #12]
 800ace0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ace4:	3304      	adds	r3, #4
 800ace6:	f1b9 0f00 	cmp.w	r9, #0
 800acea:	d020      	beq.n	800ad2e <__multiply+0x142>
 800acec:	6829      	ldr	r1, [r5, #0]
 800acee:	f104 0c14 	add.w	ip, r4, #20
 800acf2:	46ae      	mov	lr, r5
 800acf4:	f04f 0a00 	mov.w	sl, #0
 800acf8:	f8bc b000 	ldrh.w	fp, [ip]
 800acfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad00:	fb09 220b 	mla	r2, r9, fp, r2
 800ad04:	4492      	add	sl, r2
 800ad06:	b289      	uxth	r1, r1
 800ad08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad0c:	f84e 1b04 	str.w	r1, [lr], #4
 800ad10:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad14:	f8be 1000 	ldrh.w	r1, [lr]
 800ad18:	0c12      	lsrs	r2, r2, #16
 800ad1a:	fb09 1102 	mla	r1, r9, r2, r1
 800ad1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad22:	4567      	cmp	r7, ip
 800ad24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad28:	d8e6      	bhi.n	800acf8 <__multiply+0x10c>
 800ad2a:	9a01      	ldr	r2, [sp, #4]
 800ad2c:	50a9      	str	r1, [r5, r2]
 800ad2e:	3504      	adds	r5, #4
 800ad30:	e79a      	b.n	800ac68 <__multiply+0x7c>
 800ad32:	3e01      	subs	r6, #1
 800ad34:	e79c      	b.n	800ac70 <__multiply+0x84>
 800ad36:	bf00      	nop
 800ad38:	0800bb87 	.word	0x0800bb87
 800ad3c:	0800bbf8 	.word	0x0800bbf8

0800ad40 <__pow5mult>:
 800ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad44:	4615      	mov	r5, r2
 800ad46:	f012 0203 	ands.w	r2, r2, #3
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460f      	mov	r7, r1
 800ad4e:	d007      	beq.n	800ad60 <__pow5mult+0x20>
 800ad50:	4c25      	ldr	r4, [pc, #148]	; (800ade8 <__pow5mult+0xa8>)
 800ad52:	3a01      	subs	r2, #1
 800ad54:	2300      	movs	r3, #0
 800ad56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad5a:	f7ff fe9b 	bl	800aa94 <__multadd>
 800ad5e:	4607      	mov	r7, r0
 800ad60:	10ad      	asrs	r5, r5, #2
 800ad62:	d03d      	beq.n	800ade0 <__pow5mult+0xa0>
 800ad64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad66:	b97c      	cbnz	r4, 800ad88 <__pow5mult+0x48>
 800ad68:	2010      	movs	r0, #16
 800ad6a:	f7ff fe1b 	bl	800a9a4 <malloc>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	6270      	str	r0, [r6, #36]	; 0x24
 800ad72:	b928      	cbnz	r0, 800ad80 <__pow5mult+0x40>
 800ad74:	4b1d      	ldr	r3, [pc, #116]	; (800adec <__pow5mult+0xac>)
 800ad76:	481e      	ldr	r0, [pc, #120]	; (800adf0 <__pow5mult+0xb0>)
 800ad78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad7c:	f000 fc62 	bl	800b644 <__assert_func>
 800ad80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad84:	6004      	str	r4, [r0, #0]
 800ad86:	60c4      	str	r4, [r0, #12]
 800ad88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad90:	b94c      	cbnz	r4, 800ada6 <__pow5mult+0x66>
 800ad92:	f240 2171 	movw	r1, #625	; 0x271
 800ad96:	4630      	mov	r0, r6
 800ad98:	f7ff ff12 	bl	800abc0 <__i2b>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ada2:	4604      	mov	r4, r0
 800ada4:	6003      	str	r3, [r0, #0]
 800ada6:	f04f 0900 	mov.w	r9, #0
 800adaa:	07eb      	lsls	r3, r5, #31
 800adac:	d50a      	bpl.n	800adc4 <__pow5mult+0x84>
 800adae:	4639      	mov	r1, r7
 800adb0:	4622      	mov	r2, r4
 800adb2:	4630      	mov	r0, r6
 800adb4:	f7ff ff1a 	bl	800abec <__multiply>
 800adb8:	4639      	mov	r1, r7
 800adba:	4680      	mov	r8, r0
 800adbc:	4630      	mov	r0, r6
 800adbe:	f7ff fe47 	bl	800aa50 <_Bfree>
 800adc2:	4647      	mov	r7, r8
 800adc4:	106d      	asrs	r5, r5, #1
 800adc6:	d00b      	beq.n	800ade0 <__pow5mult+0xa0>
 800adc8:	6820      	ldr	r0, [r4, #0]
 800adca:	b938      	cbnz	r0, 800addc <__pow5mult+0x9c>
 800adcc:	4622      	mov	r2, r4
 800adce:	4621      	mov	r1, r4
 800add0:	4630      	mov	r0, r6
 800add2:	f7ff ff0b 	bl	800abec <__multiply>
 800add6:	6020      	str	r0, [r4, #0]
 800add8:	f8c0 9000 	str.w	r9, [r0]
 800addc:	4604      	mov	r4, r0
 800adde:	e7e4      	b.n	800adaa <__pow5mult+0x6a>
 800ade0:	4638      	mov	r0, r7
 800ade2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ade6:	bf00      	nop
 800ade8:	0800bd48 	.word	0x0800bd48
 800adec:	0800bb15 	.word	0x0800bb15
 800adf0:	0800bbf8 	.word	0x0800bbf8

0800adf4 <__lshift>:
 800adf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adf8:	460c      	mov	r4, r1
 800adfa:	6849      	ldr	r1, [r1, #4]
 800adfc:	6923      	ldr	r3, [r4, #16]
 800adfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae02:	68a3      	ldr	r3, [r4, #8]
 800ae04:	4607      	mov	r7, r0
 800ae06:	4691      	mov	r9, r2
 800ae08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae0c:	f108 0601 	add.w	r6, r8, #1
 800ae10:	42b3      	cmp	r3, r6
 800ae12:	db0b      	blt.n	800ae2c <__lshift+0x38>
 800ae14:	4638      	mov	r0, r7
 800ae16:	f7ff fddb 	bl	800a9d0 <_Balloc>
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	b948      	cbnz	r0, 800ae32 <__lshift+0x3e>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	4b2a      	ldr	r3, [pc, #168]	; (800aecc <__lshift+0xd8>)
 800ae22:	482b      	ldr	r0, [pc, #172]	; (800aed0 <__lshift+0xdc>)
 800ae24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae28:	f000 fc0c 	bl	800b644 <__assert_func>
 800ae2c:	3101      	adds	r1, #1
 800ae2e:	005b      	lsls	r3, r3, #1
 800ae30:	e7ee      	b.n	800ae10 <__lshift+0x1c>
 800ae32:	2300      	movs	r3, #0
 800ae34:	f100 0114 	add.w	r1, r0, #20
 800ae38:	f100 0210 	add.w	r2, r0, #16
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	4553      	cmp	r3, sl
 800ae40:	db37      	blt.n	800aeb2 <__lshift+0xbe>
 800ae42:	6920      	ldr	r0, [r4, #16]
 800ae44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae48:	f104 0314 	add.w	r3, r4, #20
 800ae4c:	f019 091f 	ands.w	r9, r9, #31
 800ae50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae58:	d02f      	beq.n	800aeba <__lshift+0xc6>
 800ae5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae5e:	468a      	mov	sl, r1
 800ae60:	f04f 0c00 	mov.w	ip, #0
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	fa02 f209 	lsl.w	r2, r2, r9
 800ae6a:	ea42 020c 	orr.w	r2, r2, ip
 800ae6e:	f84a 2b04 	str.w	r2, [sl], #4
 800ae72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae76:	4298      	cmp	r0, r3
 800ae78:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ae7c:	d8f2      	bhi.n	800ae64 <__lshift+0x70>
 800ae7e:	1b03      	subs	r3, r0, r4
 800ae80:	3b15      	subs	r3, #21
 800ae82:	f023 0303 	bic.w	r3, r3, #3
 800ae86:	3304      	adds	r3, #4
 800ae88:	f104 0215 	add.w	r2, r4, #21
 800ae8c:	4290      	cmp	r0, r2
 800ae8e:	bf38      	it	cc
 800ae90:	2304      	movcc	r3, #4
 800ae92:	f841 c003 	str.w	ip, [r1, r3]
 800ae96:	f1bc 0f00 	cmp.w	ip, #0
 800ae9a:	d001      	beq.n	800aea0 <__lshift+0xac>
 800ae9c:	f108 0602 	add.w	r6, r8, #2
 800aea0:	3e01      	subs	r6, #1
 800aea2:	4638      	mov	r0, r7
 800aea4:	612e      	str	r6, [r5, #16]
 800aea6:	4621      	mov	r1, r4
 800aea8:	f7ff fdd2 	bl	800aa50 <_Bfree>
 800aeac:	4628      	mov	r0, r5
 800aeae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	e7c1      	b.n	800ae3e <__lshift+0x4a>
 800aeba:	3904      	subs	r1, #4
 800aebc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aec0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aec4:	4298      	cmp	r0, r3
 800aec6:	d8f9      	bhi.n	800aebc <__lshift+0xc8>
 800aec8:	e7ea      	b.n	800aea0 <__lshift+0xac>
 800aeca:	bf00      	nop
 800aecc:	0800bb87 	.word	0x0800bb87
 800aed0:	0800bbf8 	.word	0x0800bbf8

0800aed4 <__mcmp>:
 800aed4:	b530      	push	{r4, r5, lr}
 800aed6:	6902      	ldr	r2, [r0, #16]
 800aed8:	690c      	ldr	r4, [r1, #16]
 800aeda:	1b12      	subs	r2, r2, r4
 800aedc:	d10e      	bne.n	800aefc <__mcmp+0x28>
 800aede:	f100 0314 	add.w	r3, r0, #20
 800aee2:	3114      	adds	r1, #20
 800aee4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aee8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aeec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aef0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aef4:	42a5      	cmp	r5, r4
 800aef6:	d003      	beq.n	800af00 <__mcmp+0x2c>
 800aef8:	d305      	bcc.n	800af06 <__mcmp+0x32>
 800aefa:	2201      	movs	r2, #1
 800aefc:	4610      	mov	r0, r2
 800aefe:	bd30      	pop	{r4, r5, pc}
 800af00:	4283      	cmp	r3, r0
 800af02:	d3f3      	bcc.n	800aeec <__mcmp+0x18>
 800af04:	e7fa      	b.n	800aefc <__mcmp+0x28>
 800af06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af0a:	e7f7      	b.n	800aefc <__mcmp+0x28>

0800af0c <__mdiff>:
 800af0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af10:	460c      	mov	r4, r1
 800af12:	4606      	mov	r6, r0
 800af14:	4611      	mov	r1, r2
 800af16:	4620      	mov	r0, r4
 800af18:	4690      	mov	r8, r2
 800af1a:	f7ff ffdb 	bl	800aed4 <__mcmp>
 800af1e:	1e05      	subs	r5, r0, #0
 800af20:	d110      	bne.n	800af44 <__mdiff+0x38>
 800af22:	4629      	mov	r1, r5
 800af24:	4630      	mov	r0, r6
 800af26:	f7ff fd53 	bl	800a9d0 <_Balloc>
 800af2a:	b930      	cbnz	r0, 800af3a <__mdiff+0x2e>
 800af2c:	4b3a      	ldr	r3, [pc, #232]	; (800b018 <__mdiff+0x10c>)
 800af2e:	4602      	mov	r2, r0
 800af30:	f240 2132 	movw	r1, #562	; 0x232
 800af34:	4839      	ldr	r0, [pc, #228]	; (800b01c <__mdiff+0x110>)
 800af36:	f000 fb85 	bl	800b644 <__assert_func>
 800af3a:	2301      	movs	r3, #1
 800af3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af44:	bfa4      	itt	ge
 800af46:	4643      	movge	r3, r8
 800af48:	46a0      	movge	r8, r4
 800af4a:	4630      	mov	r0, r6
 800af4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af50:	bfa6      	itte	ge
 800af52:	461c      	movge	r4, r3
 800af54:	2500      	movge	r5, #0
 800af56:	2501      	movlt	r5, #1
 800af58:	f7ff fd3a 	bl	800a9d0 <_Balloc>
 800af5c:	b920      	cbnz	r0, 800af68 <__mdiff+0x5c>
 800af5e:	4b2e      	ldr	r3, [pc, #184]	; (800b018 <__mdiff+0x10c>)
 800af60:	4602      	mov	r2, r0
 800af62:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af66:	e7e5      	b.n	800af34 <__mdiff+0x28>
 800af68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af6c:	6926      	ldr	r6, [r4, #16]
 800af6e:	60c5      	str	r5, [r0, #12]
 800af70:	f104 0914 	add.w	r9, r4, #20
 800af74:	f108 0514 	add.w	r5, r8, #20
 800af78:	f100 0e14 	add.w	lr, r0, #20
 800af7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800af80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af84:	f108 0210 	add.w	r2, r8, #16
 800af88:	46f2      	mov	sl, lr
 800af8a:	2100      	movs	r1, #0
 800af8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800af90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af94:	fa1f f883 	uxth.w	r8, r3
 800af98:	fa11 f18b 	uxtah	r1, r1, fp
 800af9c:	0c1b      	lsrs	r3, r3, #16
 800af9e:	eba1 0808 	sub.w	r8, r1, r8
 800afa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800afa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800afaa:	fa1f f888 	uxth.w	r8, r8
 800afae:	1419      	asrs	r1, r3, #16
 800afb0:	454e      	cmp	r6, r9
 800afb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800afb6:	f84a 3b04 	str.w	r3, [sl], #4
 800afba:	d8e7      	bhi.n	800af8c <__mdiff+0x80>
 800afbc:	1b33      	subs	r3, r6, r4
 800afbe:	3b15      	subs	r3, #21
 800afc0:	f023 0303 	bic.w	r3, r3, #3
 800afc4:	3304      	adds	r3, #4
 800afc6:	3415      	adds	r4, #21
 800afc8:	42a6      	cmp	r6, r4
 800afca:	bf38      	it	cc
 800afcc:	2304      	movcc	r3, #4
 800afce:	441d      	add	r5, r3
 800afd0:	4473      	add	r3, lr
 800afd2:	469e      	mov	lr, r3
 800afd4:	462e      	mov	r6, r5
 800afd6:	4566      	cmp	r6, ip
 800afd8:	d30e      	bcc.n	800aff8 <__mdiff+0xec>
 800afda:	f10c 0203 	add.w	r2, ip, #3
 800afde:	1b52      	subs	r2, r2, r5
 800afe0:	f022 0203 	bic.w	r2, r2, #3
 800afe4:	3d03      	subs	r5, #3
 800afe6:	45ac      	cmp	ip, r5
 800afe8:	bf38      	it	cc
 800afea:	2200      	movcc	r2, #0
 800afec:	441a      	add	r2, r3
 800afee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aff2:	b17b      	cbz	r3, 800b014 <__mdiff+0x108>
 800aff4:	6107      	str	r7, [r0, #16]
 800aff6:	e7a3      	b.n	800af40 <__mdiff+0x34>
 800aff8:	f856 8b04 	ldr.w	r8, [r6], #4
 800affc:	fa11 f288 	uxtah	r2, r1, r8
 800b000:	1414      	asrs	r4, r2, #16
 800b002:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b006:	b292      	uxth	r2, r2
 800b008:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b00c:	f84e 2b04 	str.w	r2, [lr], #4
 800b010:	1421      	asrs	r1, r4, #16
 800b012:	e7e0      	b.n	800afd6 <__mdiff+0xca>
 800b014:	3f01      	subs	r7, #1
 800b016:	e7ea      	b.n	800afee <__mdiff+0xe2>
 800b018:	0800bb87 	.word	0x0800bb87
 800b01c:	0800bbf8 	.word	0x0800bbf8

0800b020 <__d2b>:
 800b020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b024:	4689      	mov	r9, r1
 800b026:	2101      	movs	r1, #1
 800b028:	ec57 6b10 	vmov	r6, r7, d0
 800b02c:	4690      	mov	r8, r2
 800b02e:	f7ff fccf 	bl	800a9d0 <_Balloc>
 800b032:	4604      	mov	r4, r0
 800b034:	b930      	cbnz	r0, 800b044 <__d2b+0x24>
 800b036:	4602      	mov	r2, r0
 800b038:	4b25      	ldr	r3, [pc, #148]	; (800b0d0 <__d2b+0xb0>)
 800b03a:	4826      	ldr	r0, [pc, #152]	; (800b0d4 <__d2b+0xb4>)
 800b03c:	f240 310a 	movw	r1, #778	; 0x30a
 800b040:	f000 fb00 	bl	800b644 <__assert_func>
 800b044:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b04c:	bb35      	cbnz	r5, 800b09c <__d2b+0x7c>
 800b04e:	2e00      	cmp	r6, #0
 800b050:	9301      	str	r3, [sp, #4]
 800b052:	d028      	beq.n	800b0a6 <__d2b+0x86>
 800b054:	4668      	mov	r0, sp
 800b056:	9600      	str	r6, [sp, #0]
 800b058:	f7ff fd82 	bl	800ab60 <__lo0bits>
 800b05c:	9900      	ldr	r1, [sp, #0]
 800b05e:	b300      	cbz	r0, 800b0a2 <__d2b+0x82>
 800b060:	9a01      	ldr	r2, [sp, #4]
 800b062:	f1c0 0320 	rsb	r3, r0, #32
 800b066:	fa02 f303 	lsl.w	r3, r2, r3
 800b06a:	430b      	orrs	r3, r1
 800b06c:	40c2      	lsrs	r2, r0
 800b06e:	6163      	str	r3, [r4, #20]
 800b070:	9201      	str	r2, [sp, #4]
 800b072:	9b01      	ldr	r3, [sp, #4]
 800b074:	61a3      	str	r3, [r4, #24]
 800b076:	2b00      	cmp	r3, #0
 800b078:	bf14      	ite	ne
 800b07a:	2202      	movne	r2, #2
 800b07c:	2201      	moveq	r2, #1
 800b07e:	6122      	str	r2, [r4, #16]
 800b080:	b1d5      	cbz	r5, 800b0b8 <__d2b+0x98>
 800b082:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b086:	4405      	add	r5, r0
 800b088:	f8c9 5000 	str.w	r5, [r9]
 800b08c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b090:	f8c8 0000 	str.w	r0, [r8]
 800b094:	4620      	mov	r0, r4
 800b096:	b003      	add	sp, #12
 800b098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b09c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0a0:	e7d5      	b.n	800b04e <__d2b+0x2e>
 800b0a2:	6161      	str	r1, [r4, #20]
 800b0a4:	e7e5      	b.n	800b072 <__d2b+0x52>
 800b0a6:	a801      	add	r0, sp, #4
 800b0a8:	f7ff fd5a 	bl	800ab60 <__lo0bits>
 800b0ac:	9b01      	ldr	r3, [sp, #4]
 800b0ae:	6163      	str	r3, [r4, #20]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	6122      	str	r2, [r4, #16]
 800b0b4:	3020      	adds	r0, #32
 800b0b6:	e7e3      	b.n	800b080 <__d2b+0x60>
 800b0b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0c0:	f8c9 0000 	str.w	r0, [r9]
 800b0c4:	6918      	ldr	r0, [r3, #16]
 800b0c6:	f7ff fd2b 	bl	800ab20 <__hi0bits>
 800b0ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0ce:	e7df      	b.n	800b090 <__d2b+0x70>
 800b0d0:	0800bb87 	.word	0x0800bb87
 800b0d4:	0800bbf8 	.word	0x0800bbf8

0800b0d8 <_calloc_r>:
 800b0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0da:	fba1 2402 	umull	r2, r4, r1, r2
 800b0de:	b94c      	cbnz	r4, 800b0f4 <_calloc_r+0x1c>
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	9201      	str	r2, [sp, #4]
 800b0e4:	f000 f87a 	bl	800b1dc <_malloc_r>
 800b0e8:	9a01      	ldr	r2, [sp, #4]
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	b930      	cbnz	r0, 800b0fc <_calloc_r+0x24>
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	b003      	add	sp, #12
 800b0f2:	bd30      	pop	{r4, r5, pc}
 800b0f4:	220c      	movs	r2, #12
 800b0f6:	6002      	str	r2, [r0, #0]
 800b0f8:	2500      	movs	r5, #0
 800b0fa:	e7f8      	b.n	800b0ee <_calloc_r+0x16>
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	f7fd fdf1 	bl	8008ce4 <memset>
 800b102:	e7f4      	b.n	800b0ee <_calloc_r+0x16>

0800b104 <_free_r>:
 800b104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b106:	2900      	cmp	r1, #0
 800b108:	d044      	beq.n	800b194 <_free_r+0x90>
 800b10a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b10e:	9001      	str	r0, [sp, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f1a1 0404 	sub.w	r4, r1, #4
 800b116:	bfb8      	it	lt
 800b118:	18e4      	addlt	r4, r4, r3
 800b11a:	f000 fb19 	bl	800b750 <__malloc_lock>
 800b11e:	4a1e      	ldr	r2, [pc, #120]	; (800b198 <_free_r+0x94>)
 800b120:	9801      	ldr	r0, [sp, #4]
 800b122:	6813      	ldr	r3, [r2, #0]
 800b124:	b933      	cbnz	r3, 800b134 <_free_r+0x30>
 800b126:	6063      	str	r3, [r4, #4]
 800b128:	6014      	str	r4, [r2, #0]
 800b12a:	b003      	add	sp, #12
 800b12c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b130:	f000 bb14 	b.w	800b75c <__malloc_unlock>
 800b134:	42a3      	cmp	r3, r4
 800b136:	d908      	bls.n	800b14a <_free_r+0x46>
 800b138:	6825      	ldr	r5, [r4, #0]
 800b13a:	1961      	adds	r1, r4, r5
 800b13c:	428b      	cmp	r3, r1
 800b13e:	bf01      	itttt	eq
 800b140:	6819      	ldreq	r1, [r3, #0]
 800b142:	685b      	ldreq	r3, [r3, #4]
 800b144:	1949      	addeq	r1, r1, r5
 800b146:	6021      	streq	r1, [r4, #0]
 800b148:	e7ed      	b.n	800b126 <_free_r+0x22>
 800b14a:	461a      	mov	r2, r3
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	b10b      	cbz	r3, 800b154 <_free_r+0x50>
 800b150:	42a3      	cmp	r3, r4
 800b152:	d9fa      	bls.n	800b14a <_free_r+0x46>
 800b154:	6811      	ldr	r1, [r2, #0]
 800b156:	1855      	adds	r5, r2, r1
 800b158:	42a5      	cmp	r5, r4
 800b15a:	d10b      	bne.n	800b174 <_free_r+0x70>
 800b15c:	6824      	ldr	r4, [r4, #0]
 800b15e:	4421      	add	r1, r4
 800b160:	1854      	adds	r4, r2, r1
 800b162:	42a3      	cmp	r3, r4
 800b164:	6011      	str	r1, [r2, #0]
 800b166:	d1e0      	bne.n	800b12a <_free_r+0x26>
 800b168:	681c      	ldr	r4, [r3, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	6053      	str	r3, [r2, #4]
 800b16e:	4421      	add	r1, r4
 800b170:	6011      	str	r1, [r2, #0]
 800b172:	e7da      	b.n	800b12a <_free_r+0x26>
 800b174:	d902      	bls.n	800b17c <_free_r+0x78>
 800b176:	230c      	movs	r3, #12
 800b178:	6003      	str	r3, [r0, #0]
 800b17a:	e7d6      	b.n	800b12a <_free_r+0x26>
 800b17c:	6825      	ldr	r5, [r4, #0]
 800b17e:	1961      	adds	r1, r4, r5
 800b180:	428b      	cmp	r3, r1
 800b182:	bf04      	itt	eq
 800b184:	6819      	ldreq	r1, [r3, #0]
 800b186:	685b      	ldreq	r3, [r3, #4]
 800b188:	6063      	str	r3, [r4, #4]
 800b18a:	bf04      	itt	eq
 800b18c:	1949      	addeq	r1, r1, r5
 800b18e:	6021      	streq	r1, [r4, #0]
 800b190:	6054      	str	r4, [r2, #4]
 800b192:	e7ca      	b.n	800b12a <_free_r+0x26>
 800b194:	b003      	add	sp, #12
 800b196:	bd30      	pop	{r4, r5, pc}
 800b198:	200008b4 	.word	0x200008b4

0800b19c <sbrk_aligned>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	4e0e      	ldr	r6, [pc, #56]	; (800b1d8 <sbrk_aligned+0x3c>)
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	6831      	ldr	r1, [r6, #0]
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	b911      	cbnz	r1, 800b1ae <sbrk_aligned+0x12>
 800b1a8:	f000 f9e6 	bl	800b578 <_sbrk_r>
 800b1ac:	6030      	str	r0, [r6, #0]
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	f000 f9e1 	bl	800b578 <_sbrk_r>
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	d00a      	beq.n	800b1d0 <sbrk_aligned+0x34>
 800b1ba:	1cc4      	adds	r4, r0, #3
 800b1bc:	f024 0403 	bic.w	r4, r4, #3
 800b1c0:	42a0      	cmp	r0, r4
 800b1c2:	d007      	beq.n	800b1d4 <sbrk_aligned+0x38>
 800b1c4:	1a21      	subs	r1, r4, r0
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f000 f9d6 	bl	800b578 <_sbrk_r>
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d101      	bne.n	800b1d4 <sbrk_aligned+0x38>
 800b1d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	bd70      	pop	{r4, r5, r6, pc}
 800b1d8:	200008b8 	.word	0x200008b8

0800b1dc <_malloc_r>:
 800b1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e0:	1ccd      	adds	r5, r1, #3
 800b1e2:	f025 0503 	bic.w	r5, r5, #3
 800b1e6:	3508      	adds	r5, #8
 800b1e8:	2d0c      	cmp	r5, #12
 800b1ea:	bf38      	it	cc
 800b1ec:	250c      	movcc	r5, #12
 800b1ee:	2d00      	cmp	r5, #0
 800b1f0:	4607      	mov	r7, r0
 800b1f2:	db01      	blt.n	800b1f8 <_malloc_r+0x1c>
 800b1f4:	42a9      	cmp	r1, r5
 800b1f6:	d905      	bls.n	800b204 <_malloc_r+0x28>
 800b1f8:	230c      	movs	r3, #12
 800b1fa:	603b      	str	r3, [r7, #0]
 800b1fc:	2600      	movs	r6, #0
 800b1fe:	4630      	mov	r0, r6
 800b200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b204:	4e2e      	ldr	r6, [pc, #184]	; (800b2c0 <_malloc_r+0xe4>)
 800b206:	f000 faa3 	bl	800b750 <__malloc_lock>
 800b20a:	6833      	ldr	r3, [r6, #0]
 800b20c:	461c      	mov	r4, r3
 800b20e:	bb34      	cbnz	r4, 800b25e <_malloc_r+0x82>
 800b210:	4629      	mov	r1, r5
 800b212:	4638      	mov	r0, r7
 800b214:	f7ff ffc2 	bl	800b19c <sbrk_aligned>
 800b218:	1c43      	adds	r3, r0, #1
 800b21a:	4604      	mov	r4, r0
 800b21c:	d14d      	bne.n	800b2ba <_malloc_r+0xde>
 800b21e:	6834      	ldr	r4, [r6, #0]
 800b220:	4626      	mov	r6, r4
 800b222:	2e00      	cmp	r6, #0
 800b224:	d140      	bne.n	800b2a8 <_malloc_r+0xcc>
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	4631      	mov	r1, r6
 800b22a:	4638      	mov	r0, r7
 800b22c:	eb04 0803 	add.w	r8, r4, r3
 800b230:	f000 f9a2 	bl	800b578 <_sbrk_r>
 800b234:	4580      	cmp	r8, r0
 800b236:	d13a      	bne.n	800b2ae <_malloc_r+0xd2>
 800b238:	6821      	ldr	r1, [r4, #0]
 800b23a:	3503      	adds	r5, #3
 800b23c:	1a6d      	subs	r5, r5, r1
 800b23e:	f025 0503 	bic.w	r5, r5, #3
 800b242:	3508      	adds	r5, #8
 800b244:	2d0c      	cmp	r5, #12
 800b246:	bf38      	it	cc
 800b248:	250c      	movcc	r5, #12
 800b24a:	4629      	mov	r1, r5
 800b24c:	4638      	mov	r0, r7
 800b24e:	f7ff ffa5 	bl	800b19c <sbrk_aligned>
 800b252:	3001      	adds	r0, #1
 800b254:	d02b      	beq.n	800b2ae <_malloc_r+0xd2>
 800b256:	6823      	ldr	r3, [r4, #0]
 800b258:	442b      	add	r3, r5
 800b25a:	6023      	str	r3, [r4, #0]
 800b25c:	e00e      	b.n	800b27c <_malloc_r+0xa0>
 800b25e:	6822      	ldr	r2, [r4, #0]
 800b260:	1b52      	subs	r2, r2, r5
 800b262:	d41e      	bmi.n	800b2a2 <_malloc_r+0xc6>
 800b264:	2a0b      	cmp	r2, #11
 800b266:	d916      	bls.n	800b296 <_malloc_r+0xba>
 800b268:	1961      	adds	r1, r4, r5
 800b26a:	42a3      	cmp	r3, r4
 800b26c:	6025      	str	r5, [r4, #0]
 800b26e:	bf18      	it	ne
 800b270:	6059      	strne	r1, [r3, #4]
 800b272:	6863      	ldr	r3, [r4, #4]
 800b274:	bf08      	it	eq
 800b276:	6031      	streq	r1, [r6, #0]
 800b278:	5162      	str	r2, [r4, r5]
 800b27a:	604b      	str	r3, [r1, #4]
 800b27c:	4638      	mov	r0, r7
 800b27e:	f104 060b 	add.w	r6, r4, #11
 800b282:	f000 fa6b 	bl	800b75c <__malloc_unlock>
 800b286:	f026 0607 	bic.w	r6, r6, #7
 800b28a:	1d23      	adds	r3, r4, #4
 800b28c:	1af2      	subs	r2, r6, r3
 800b28e:	d0b6      	beq.n	800b1fe <_malloc_r+0x22>
 800b290:	1b9b      	subs	r3, r3, r6
 800b292:	50a3      	str	r3, [r4, r2]
 800b294:	e7b3      	b.n	800b1fe <_malloc_r+0x22>
 800b296:	6862      	ldr	r2, [r4, #4]
 800b298:	42a3      	cmp	r3, r4
 800b29a:	bf0c      	ite	eq
 800b29c:	6032      	streq	r2, [r6, #0]
 800b29e:	605a      	strne	r2, [r3, #4]
 800b2a0:	e7ec      	b.n	800b27c <_malloc_r+0xa0>
 800b2a2:	4623      	mov	r3, r4
 800b2a4:	6864      	ldr	r4, [r4, #4]
 800b2a6:	e7b2      	b.n	800b20e <_malloc_r+0x32>
 800b2a8:	4634      	mov	r4, r6
 800b2aa:	6876      	ldr	r6, [r6, #4]
 800b2ac:	e7b9      	b.n	800b222 <_malloc_r+0x46>
 800b2ae:	230c      	movs	r3, #12
 800b2b0:	603b      	str	r3, [r7, #0]
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	f000 fa52 	bl	800b75c <__malloc_unlock>
 800b2b8:	e7a1      	b.n	800b1fe <_malloc_r+0x22>
 800b2ba:	6025      	str	r5, [r4, #0]
 800b2bc:	e7de      	b.n	800b27c <_malloc_r+0xa0>
 800b2be:	bf00      	nop
 800b2c0:	200008b4 	.word	0x200008b4

0800b2c4 <__sfputc_r>:
 800b2c4:	6893      	ldr	r3, [r2, #8]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	b410      	push	{r4}
 800b2cc:	6093      	str	r3, [r2, #8]
 800b2ce:	da08      	bge.n	800b2e2 <__sfputc_r+0x1e>
 800b2d0:	6994      	ldr	r4, [r2, #24]
 800b2d2:	42a3      	cmp	r3, r4
 800b2d4:	db01      	blt.n	800b2da <__sfputc_r+0x16>
 800b2d6:	290a      	cmp	r1, #10
 800b2d8:	d103      	bne.n	800b2e2 <__sfputc_r+0x1e>
 800b2da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2de:	f7fe ba01 	b.w	80096e4 <__swbuf_r>
 800b2e2:	6813      	ldr	r3, [r2, #0]
 800b2e4:	1c58      	adds	r0, r3, #1
 800b2e6:	6010      	str	r0, [r2, #0]
 800b2e8:	7019      	strb	r1, [r3, #0]
 800b2ea:	4608      	mov	r0, r1
 800b2ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <__sfputs_r>:
 800b2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	460f      	mov	r7, r1
 800b2f8:	4614      	mov	r4, r2
 800b2fa:	18d5      	adds	r5, r2, r3
 800b2fc:	42ac      	cmp	r4, r5
 800b2fe:	d101      	bne.n	800b304 <__sfputs_r+0x12>
 800b300:	2000      	movs	r0, #0
 800b302:	e007      	b.n	800b314 <__sfputs_r+0x22>
 800b304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b308:	463a      	mov	r2, r7
 800b30a:	4630      	mov	r0, r6
 800b30c:	f7ff ffda 	bl	800b2c4 <__sfputc_r>
 800b310:	1c43      	adds	r3, r0, #1
 800b312:	d1f3      	bne.n	800b2fc <__sfputs_r+0xa>
 800b314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b318 <_vfiprintf_r>:
 800b318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b31c:	460d      	mov	r5, r1
 800b31e:	b09d      	sub	sp, #116	; 0x74
 800b320:	4614      	mov	r4, r2
 800b322:	4698      	mov	r8, r3
 800b324:	4606      	mov	r6, r0
 800b326:	b118      	cbz	r0, 800b330 <_vfiprintf_r+0x18>
 800b328:	6983      	ldr	r3, [r0, #24]
 800b32a:	b90b      	cbnz	r3, 800b330 <_vfiprintf_r+0x18>
 800b32c:	f7ff fa30 	bl	800a790 <__sinit>
 800b330:	4b89      	ldr	r3, [pc, #548]	; (800b558 <_vfiprintf_r+0x240>)
 800b332:	429d      	cmp	r5, r3
 800b334:	d11b      	bne.n	800b36e <_vfiprintf_r+0x56>
 800b336:	6875      	ldr	r5, [r6, #4]
 800b338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b33a:	07d9      	lsls	r1, r3, #31
 800b33c:	d405      	bmi.n	800b34a <_vfiprintf_r+0x32>
 800b33e:	89ab      	ldrh	r3, [r5, #12]
 800b340:	059a      	lsls	r2, r3, #22
 800b342:	d402      	bmi.n	800b34a <_vfiprintf_r+0x32>
 800b344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b346:	f7ff fac6 	bl	800a8d6 <__retarget_lock_acquire_recursive>
 800b34a:	89ab      	ldrh	r3, [r5, #12]
 800b34c:	071b      	lsls	r3, r3, #28
 800b34e:	d501      	bpl.n	800b354 <_vfiprintf_r+0x3c>
 800b350:	692b      	ldr	r3, [r5, #16]
 800b352:	b9eb      	cbnz	r3, 800b390 <_vfiprintf_r+0x78>
 800b354:	4629      	mov	r1, r5
 800b356:	4630      	mov	r0, r6
 800b358:	f7fe fa16 	bl	8009788 <__swsetup_r>
 800b35c:	b1c0      	cbz	r0, 800b390 <_vfiprintf_r+0x78>
 800b35e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b360:	07dc      	lsls	r4, r3, #31
 800b362:	d50e      	bpl.n	800b382 <_vfiprintf_r+0x6a>
 800b364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b368:	b01d      	add	sp, #116	; 0x74
 800b36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36e:	4b7b      	ldr	r3, [pc, #492]	; (800b55c <_vfiprintf_r+0x244>)
 800b370:	429d      	cmp	r5, r3
 800b372:	d101      	bne.n	800b378 <_vfiprintf_r+0x60>
 800b374:	68b5      	ldr	r5, [r6, #8]
 800b376:	e7df      	b.n	800b338 <_vfiprintf_r+0x20>
 800b378:	4b79      	ldr	r3, [pc, #484]	; (800b560 <_vfiprintf_r+0x248>)
 800b37a:	429d      	cmp	r5, r3
 800b37c:	bf08      	it	eq
 800b37e:	68f5      	ldreq	r5, [r6, #12]
 800b380:	e7da      	b.n	800b338 <_vfiprintf_r+0x20>
 800b382:	89ab      	ldrh	r3, [r5, #12]
 800b384:	0598      	lsls	r0, r3, #22
 800b386:	d4ed      	bmi.n	800b364 <_vfiprintf_r+0x4c>
 800b388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b38a:	f7ff faa5 	bl	800a8d8 <__retarget_lock_release_recursive>
 800b38e:	e7e9      	b.n	800b364 <_vfiprintf_r+0x4c>
 800b390:	2300      	movs	r3, #0
 800b392:	9309      	str	r3, [sp, #36]	; 0x24
 800b394:	2320      	movs	r3, #32
 800b396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b39a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b39e:	2330      	movs	r3, #48	; 0x30
 800b3a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b564 <_vfiprintf_r+0x24c>
 800b3a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3a8:	f04f 0901 	mov.w	r9, #1
 800b3ac:	4623      	mov	r3, r4
 800b3ae:	469a      	mov	sl, r3
 800b3b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3b4:	b10a      	cbz	r2, 800b3ba <_vfiprintf_r+0xa2>
 800b3b6:	2a25      	cmp	r2, #37	; 0x25
 800b3b8:	d1f9      	bne.n	800b3ae <_vfiprintf_r+0x96>
 800b3ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b3be:	d00b      	beq.n	800b3d8 <_vfiprintf_r+0xc0>
 800b3c0:	465b      	mov	r3, fp
 800b3c2:	4622      	mov	r2, r4
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f7ff ff93 	bl	800b2f2 <__sfputs_r>
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	f000 80aa 	beq.w	800b526 <_vfiprintf_r+0x20e>
 800b3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3d4:	445a      	add	r2, fp
 800b3d6:	9209      	str	r2, [sp, #36]	; 0x24
 800b3d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 80a2 	beq.w	800b526 <_vfiprintf_r+0x20e>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ec:	f10a 0a01 	add.w	sl, sl, #1
 800b3f0:	9304      	str	r3, [sp, #16]
 800b3f2:	9307      	str	r3, [sp, #28]
 800b3f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3f8:	931a      	str	r3, [sp, #104]	; 0x68
 800b3fa:	4654      	mov	r4, sl
 800b3fc:	2205      	movs	r2, #5
 800b3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b402:	4858      	ldr	r0, [pc, #352]	; (800b564 <_vfiprintf_r+0x24c>)
 800b404:	f7f4 ff14 	bl	8000230 <memchr>
 800b408:	9a04      	ldr	r2, [sp, #16]
 800b40a:	b9d8      	cbnz	r0, 800b444 <_vfiprintf_r+0x12c>
 800b40c:	06d1      	lsls	r1, r2, #27
 800b40e:	bf44      	itt	mi
 800b410:	2320      	movmi	r3, #32
 800b412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b416:	0713      	lsls	r3, r2, #28
 800b418:	bf44      	itt	mi
 800b41a:	232b      	movmi	r3, #43	; 0x2b
 800b41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b420:	f89a 3000 	ldrb.w	r3, [sl]
 800b424:	2b2a      	cmp	r3, #42	; 0x2a
 800b426:	d015      	beq.n	800b454 <_vfiprintf_r+0x13c>
 800b428:	9a07      	ldr	r2, [sp, #28]
 800b42a:	4654      	mov	r4, sl
 800b42c:	2000      	movs	r0, #0
 800b42e:	f04f 0c0a 	mov.w	ip, #10
 800b432:	4621      	mov	r1, r4
 800b434:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b438:	3b30      	subs	r3, #48	; 0x30
 800b43a:	2b09      	cmp	r3, #9
 800b43c:	d94e      	bls.n	800b4dc <_vfiprintf_r+0x1c4>
 800b43e:	b1b0      	cbz	r0, 800b46e <_vfiprintf_r+0x156>
 800b440:	9207      	str	r2, [sp, #28]
 800b442:	e014      	b.n	800b46e <_vfiprintf_r+0x156>
 800b444:	eba0 0308 	sub.w	r3, r0, r8
 800b448:	fa09 f303 	lsl.w	r3, r9, r3
 800b44c:	4313      	orrs	r3, r2
 800b44e:	9304      	str	r3, [sp, #16]
 800b450:	46a2      	mov	sl, r4
 800b452:	e7d2      	b.n	800b3fa <_vfiprintf_r+0xe2>
 800b454:	9b03      	ldr	r3, [sp, #12]
 800b456:	1d19      	adds	r1, r3, #4
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	9103      	str	r1, [sp, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	bfbb      	ittet	lt
 800b460:	425b      	neglt	r3, r3
 800b462:	f042 0202 	orrlt.w	r2, r2, #2
 800b466:	9307      	strge	r3, [sp, #28]
 800b468:	9307      	strlt	r3, [sp, #28]
 800b46a:	bfb8      	it	lt
 800b46c:	9204      	strlt	r2, [sp, #16]
 800b46e:	7823      	ldrb	r3, [r4, #0]
 800b470:	2b2e      	cmp	r3, #46	; 0x2e
 800b472:	d10c      	bne.n	800b48e <_vfiprintf_r+0x176>
 800b474:	7863      	ldrb	r3, [r4, #1]
 800b476:	2b2a      	cmp	r3, #42	; 0x2a
 800b478:	d135      	bne.n	800b4e6 <_vfiprintf_r+0x1ce>
 800b47a:	9b03      	ldr	r3, [sp, #12]
 800b47c:	1d1a      	adds	r2, r3, #4
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	9203      	str	r2, [sp, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	bfb8      	it	lt
 800b486:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b48a:	3402      	adds	r4, #2
 800b48c:	9305      	str	r3, [sp, #20]
 800b48e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b574 <_vfiprintf_r+0x25c>
 800b492:	7821      	ldrb	r1, [r4, #0]
 800b494:	2203      	movs	r2, #3
 800b496:	4650      	mov	r0, sl
 800b498:	f7f4 feca 	bl	8000230 <memchr>
 800b49c:	b140      	cbz	r0, 800b4b0 <_vfiprintf_r+0x198>
 800b49e:	2340      	movs	r3, #64	; 0x40
 800b4a0:	eba0 000a 	sub.w	r0, r0, sl
 800b4a4:	fa03 f000 	lsl.w	r0, r3, r0
 800b4a8:	9b04      	ldr	r3, [sp, #16]
 800b4aa:	4303      	orrs	r3, r0
 800b4ac:	3401      	adds	r4, #1
 800b4ae:	9304      	str	r3, [sp, #16]
 800b4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b4:	482c      	ldr	r0, [pc, #176]	; (800b568 <_vfiprintf_r+0x250>)
 800b4b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ba:	2206      	movs	r2, #6
 800b4bc:	f7f4 feb8 	bl	8000230 <memchr>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d03f      	beq.n	800b544 <_vfiprintf_r+0x22c>
 800b4c4:	4b29      	ldr	r3, [pc, #164]	; (800b56c <_vfiprintf_r+0x254>)
 800b4c6:	bb1b      	cbnz	r3, 800b510 <_vfiprintf_r+0x1f8>
 800b4c8:	9b03      	ldr	r3, [sp, #12]
 800b4ca:	3307      	adds	r3, #7
 800b4cc:	f023 0307 	bic.w	r3, r3, #7
 800b4d0:	3308      	adds	r3, #8
 800b4d2:	9303      	str	r3, [sp, #12]
 800b4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d6:	443b      	add	r3, r7
 800b4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4da:	e767      	b.n	800b3ac <_vfiprintf_r+0x94>
 800b4dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	2001      	movs	r0, #1
 800b4e4:	e7a5      	b.n	800b432 <_vfiprintf_r+0x11a>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	3401      	adds	r4, #1
 800b4ea:	9305      	str	r3, [sp, #20]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	f04f 0c0a 	mov.w	ip, #10
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4f8:	3a30      	subs	r2, #48	; 0x30
 800b4fa:	2a09      	cmp	r2, #9
 800b4fc:	d903      	bls.n	800b506 <_vfiprintf_r+0x1ee>
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0c5      	beq.n	800b48e <_vfiprintf_r+0x176>
 800b502:	9105      	str	r1, [sp, #20]
 800b504:	e7c3      	b.n	800b48e <_vfiprintf_r+0x176>
 800b506:	fb0c 2101 	mla	r1, ip, r1, r2
 800b50a:	4604      	mov	r4, r0
 800b50c:	2301      	movs	r3, #1
 800b50e:	e7f0      	b.n	800b4f2 <_vfiprintf_r+0x1da>
 800b510:	ab03      	add	r3, sp, #12
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	462a      	mov	r2, r5
 800b516:	4b16      	ldr	r3, [pc, #88]	; (800b570 <_vfiprintf_r+0x258>)
 800b518:	a904      	add	r1, sp, #16
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7fd fc8a 	bl	8008e34 <_printf_float>
 800b520:	4607      	mov	r7, r0
 800b522:	1c78      	adds	r0, r7, #1
 800b524:	d1d6      	bne.n	800b4d4 <_vfiprintf_r+0x1bc>
 800b526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b528:	07d9      	lsls	r1, r3, #31
 800b52a:	d405      	bmi.n	800b538 <_vfiprintf_r+0x220>
 800b52c:	89ab      	ldrh	r3, [r5, #12]
 800b52e:	059a      	lsls	r2, r3, #22
 800b530:	d402      	bmi.n	800b538 <_vfiprintf_r+0x220>
 800b532:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b534:	f7ff f9d0 	bl	800a8d8 <__retarget_lock_release_recursive>
 800b538:	89ab      	ldrh	r3, [r5, #12]
 800b53a:	065b      	lsls	r3, r3, #25
 800b53c:	f53f af12 	bmi.w	800b364 <_vfiprintf_r+0x4c>
 800b540:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b542:	e711      	b.n	800b368 <_vfiprintf_r+0x50>
 800b544:	ab03      	add	r3, sp, #12
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	462a      	mov	r2, r5
 800b54a:	4b09      	ldr	r3, [pc, #36]	; (800b570 <_vfiprintf_r+0x258>)
 800b54c:	a904      	add	r1, sp, #16
 800b54e:	4630      	mov	r0, r6
 800b550:	f7fd ff14 	bl	800937c <_printf_i>
 800b554:	e7e4      	b.n	800b520 <_vfiprintf_r+0x208>
 800b556:	bf00      	nop
 800b558:	0800bbb8 	.word	0x0800bbb8
 800b55c:	0800bbd8 	.word	0x0800bbd8
 800b560:	0800bb98 	.word	0x0800bb98
 800b564:	0800bd54 	.word	0x0800bd54
 800b568:	0800bd5e 	.word	0x0800bd5e
 800b56c:	08008e35 	.word	0x08008e35
 800b570:	0800b2f3 	.word	0x0800b2f3
 800b574:	0800bd5a 	.word	0x0800bd5a

0800b578 <_sbrk_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4d06      	ldr	r5, [pc, #24]	; (800b594 <_sbrk_r+0x1c>)
 800b57c:	2300      	movs	r3, #0
 800b57e:	4604      	mov	r4, r0
 800b580:	4608      	mov	r0, r1
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	f7f9 f87a 	bl	800467c <_sbrk>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_sbrk_r+0x1a>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_sbrk_r+0x1a>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	200008bc 	.word	0x200008bc

0800b598 <__sread>:
 800b598:	b510      	push	{r4, lr}
 800b59a:	460c      	mov	r4, r1
 800b59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a0:	f000 f8e2 	bl	800b768 <_read_r>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	bfab      	itete	ge
 800b5a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5aa:	89a3      	ldrhlt	r3, [r4, #12]
 800b5ac:	181b      	addge	r3, r3, r0
 800b5ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5b2:	bfac      	ite	ge
 800b5b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5b6:	81a3      	strhlt	r3, [r4, #12]
 800b5b8:	bd10      	pop	{r4, pc}

0800b5ba <__swrite>:
 800b5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5be:	461f      	mov	r7, r3
 800b5c0:	898b      	ldrh	r3, [r1, #12]
 800b5c2:	05db      	lsls	r3, r3, #23
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	4616      	mov	r6, r2
 800b5ca:	d505      	bpl.n	800b5d8 <__swrite+0x1e>
 800b5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f000 f898 	bl	800b708 <_lseek_r>
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5e2:	81a3      	strh	r3, [r4, #12]
 800b5e4:	4632      	mov	r2, r6
 800b5e6:	463b      	mov	r3, r7
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ee:	f000 b817 	b.w	800b620 <_write_r>

0800b5f2 <__sseek>:
 800b5f2:	b510      	push	{r4, lr}
 800b5f4:	460c      	mov	r4, r1
 800b5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5fa:	f000 f885 	bl	800b708 <_lseek_r>
 800b5fe:	1c43      	adds	r3, r0, #1
 800b600:	89a3      	ldrh	r3, [r4, #12]
 800b602:	bf15      	itete	ne
 800b604:	6560      	strne	r0, [r4, #84]	; 0x54
 800b606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b60e:	81a3      	strheq	r3, [r4, #12]
 800b610:	bf18      	it	ne
 800b612:	81a3      	strhne	r3, [r4, #12]
 800b614:	bd10      	pop	{r4, pc}

0800b616 <__sclose>:
 800b616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61a:	f000 b831 	b.w	800b680 <_close_r>
	...

0800b620 <_write_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	4d07      	ldr	r5, [pc, #28]	; (800b640 <_write_r+0x20>)
 800b624:	4604      	mov	r4, r0
 800b626:	4608      	mov	r0, r1
 800b628:	4611      	mov	r1, r2
 800b62a:	2200      	movs	r2, #0
 800b62c:	602a      	str	r2, [r5, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	f7f8 ffd3 	bl	80045da <_write>
 800b634:	1c43      	adds	r3, r0, #1
 800b636:	d102      	bne.n	800b63e <_write_r+0x1e>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	b103      	cbz	r3, 800b63e <_write_r+0x1e>
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	200008bc 	.word	0x200008bc

0800b644 <__assert_func>:
 800b644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b646:	4614      	mov	r4, r2
 800b648:	461a      	mov	r2, r3
 800b64a:	4b09      	ldr	r3, [pc, #36]	; (800b670 <__assert_func+0x2c>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4605      	mov	r5, r0
 800b650:	68d8      	ldr	r0, [r3, #12]
 800b652:	b14c      	cbz	r4, 800b668 <__assert_func+0x24>
 800b654:	4b07      	ldr	r3, [pc, #28]	; (800b674 <__assert_func+0x30>)
 800b656:	9100      	str	r1, [sp, #0]
 800b658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b65c:	4906      	ldr	r1, [pc, #24]	; (800b678 <__assert_func+0x34>)
 800b65e:	462b      	mov	r3, r5
 800b660:	f000 f81e 	bl	800b6a0 <fiprintf>
 800b664:	f000 f89f 	bl	800b7a6 <abort>
 800b668:	4b04      	ldr	r3, [pc, #16]	; (800b67c <__assert_func+0x38>)
 800b66a:	461c      	mov	r4, r3
 800b66c:	e7f3      	b.n	800b656 <__assert_func+0x12>
 800b66e:	bf00      	nop
 800b670:	20000018 	.word	0x20000018
 800b674:	0800bd65 	.word	0x0800bd65
 800b678:	0800bd72 	.word	0x0800bd72
 800b67c:	0800bda0 	.word	0x0800bda0

0800b680 <_close_r>:
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	4d06      	ldr	r5, [pc, #24]	; (800b69c <_close_r+0x1c>)
 800b684:	2300      	movs	r3, #0
 800b686:	4604      	mov	r4, r0
 800b688:	4608      	mov	r0, r1
 800b68a:	602b      	str	r3, [r5, #0]
 800b68c:	f7f8 ffc1 	bl	8004612 <_close>
 800b690:	1c43      	adds	r3, r0, #1
 800b692:	d102      	bne.n	800b69a <_close_r+0x1a>
 800b694:	682b      	ldr	r3, [r5, #0]
 800b696:	b103      	cbz	r3, 800b69a <_close_r+0x1a>
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	bd38      	pop	{r3, r4, r5, pc}
 800b69c:	200008bc 	.word	0x200008bc

0800b6a0 <fiprintf>:
 800b6a0:	b40e      	push	{r1, r2, r3}
 800b6a2:	b503      	push	{r0, r1, lr}
 800b6a4:	4601      	mov	r1, r0
 800b6a6:	ab03      	add	r3, sp, #12
 800b6a8:	4805      	ldr	r0, [pc, #20]	; (800b6c0 <fiprintf+0x20>)
 800b6aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ae:	6800      	ldr	r0, [r0, #0]
 800b6b0:	9301      	str	r3, [sp, #4]
 800b6b2:	f7ff fe31 	bl	800b318 <_vfiprintf_r>
 800b6b6:	b002      	add	sp, #8
 800b6b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6bc:	b003      	add	sp, #12
 800b6be:	4770      	bx	lr
 800b6c0:	20000018 	.word	0x20000018

0800b6c4 <_fstat_r>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	4d07      	ldr	r5, [pc, #28]	; (800b6e4 <_fstat_r+0x20>)
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	4608      	mov	r0, r1
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	602b      	str	r3, [r5, #0]
 800b6d2:	f7f8 ffaa 	bl	800462a <_fstat>
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	d102      	bne.n	800b6e0 <_fstat_r+0x1c>
 800b6da:	682b      	ldr	r3, [r5, #0]
 800b6dc:	b103      	cbz	r3, 800b6e0 <_fstat_r+0x1c>
 800b6de:	6023      	str	r3, [r4, #0]
 800b6e0:	bd38      	pop	{r3, r4, r5, pc}
 800b6e2:	bf00      	nop
 800b6e4:	200008bc 	.word	0x200008bc

0800b6e8 <_isatty_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	4d06      	ldr	r5, [pc, #24]	; (800b704 <_isatty_r+0x1c>)
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	4608      	mov	r0, r1
 800b6f2:	602b      	str	r3, [r5, #0]
 800b6f4:	f7f8 ffa9 	bl	800464a <_isatty>
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d102      	bne.n	800b702 <_isatty_r+0x1a>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	b103      	cbz	r3, 800b702 <_isatty_r+0x1a>
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	bd38      	pop	{r3, r4, r5, pc}
 800b704:	200008bc 	.word	0x200008bc

0800b708 <_lseek_r>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4d07      	ldr	r5, [pc, #28]	; (800b728 <_lseek_r+0x20>)
 800b70c:	4604      	mov	r4, r0
 800b70e:	4608      	mov	r0, r1
 800b710:	4611      	mov	r1, r2
 800b712:	2200      	movs	r2, #0
 800b714:	602a      	str	r2, [r5, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	f7f8 ffa2 	bl	8004660 <_lseek>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_lseek_r+0x1e>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_lseek_r+0x1e>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	200008bc 	.word	0x200008bc

0800b72c <__ascii_mbtowc>:
 800b72c:	b082      	sub	sp, #8
 800b72e:	b901      	cbnz	r1, 800b732 <__ascii_mbtowc+0x6>
 800b730:	a901      	add	r1, sp, #4
 800b732:	b142      	cbz	r2, 800b746 <__ascii_mbtowc+0x1a>
 800b734:	b14b      	cbz	r3, 800b74a <__ascii_mbtowc+0x1e>
 800b736:	7813      	ldrb	r3, [r2, #0]
 800b738:	600b      	str	r3, [r1, #0]
 800b73a:	7812      	ldrb	r2, [r2, #0]
 800b73c:	1e10      	subs	r0, r2, #0
 800b73e:	bf18      	it	ne
 800b740:	2001      	movne	r0, #1
 800b742:	b002      	add	sp, #8
 800b744:	4770      	bx	lr
 800b746:	4610      	mov	r0, r2
 800b748:	e7fb      	b.n	800b742 <__ascii_mbtowc+0x16>
 800b74a:	f06f 0001 	mvn.w	r0, #1
 800b74e:	e7f8      	b.n	800b742 <__ascii_mbtowc+0x16>

0800b750 <__malloc_lock>:
 800b750:	4801      	ldr	r0, [pc, #4]	; (800b758 <__malloc_lock+0x8>)
 800b752:	f7ff b8c0 	b.w	800a8d6 <__retarget_lock_acquire_recursive>
 800b756:	bf00      	nop
 800b758:	200008b0 	.word	0x200008b0

0800b75c <__malloc_unlock>:
 800b75c:	4801      	ldr	r0, [pc, #4]	; (800b764 <__malloc_unlock+0x8>)
 800b75e:	f7ff b8bb 	b.w	800a8d8 <__retarget_lock_release_recursive>
 800b762:	bf00      	nop
 800b764:	200008b0 	.word	0x200008b0

0800b768 <_read_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4d07      	ldr	r5, [pc, #28]	; (800b788 <_read_r+0x20>)
 800b76c:	4604      	mov	r4, r0
 800b76e:	4608      	mov	r0, r1
 800b770:	4611      	mov	r1, r2
 800b772:	2200      	movs	r2, #0
 800b774:	602a      	str	r2, [r5, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	f7f8 ff12 	bl	80045a0 <_read>
 800b77c:	1c43      	adds	r3, r0, #1
 800b77e:	d102      	bne.n	800b786 <_read_r+0x1e>
 800b780:	682b      	ldr	r3, [r5, #0]
 800b782:	b103      	cbz	r3, 800b786 <_read_r+0x1e>
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	bd38      	pop	{r3, r4, r5, pc}
 800b788:	200008bc 	.word	0x200008bc

0800b78c <__ascii_wctomb>:
 800b78c:	b149      	cbz	r1, 800b7a2 <__ascii_wctomb+0x16>
 800b78e:	2aff      	cmp	r2, #255	; 0xff
 800b790:	bf85      	ittet	hi
 800b792:	238a      	movhi	r3, #138	; 0x8a
 800b794:	6003      	strhi	r3, [r0, #0]
 800b796:	700a      	strbls	r2, [r1, #0]
 800b798:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b79c:	bf98      	it	ls
 800b79e:	2001      	movls	r0, #1
 800b7a0:	4770      	bx	lr
 800b7a2:	4608      	mov	r0, r1
 800b7a4:	4770      	bx	lr

0800b7a6 <abort>:
 800b7a6:	b508      	push	{r3, lr}
 800b7a8:	2006      	movs	r0, #6
 800b7aa:	f000 f82b 	bl	800b804 <raise>
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	f7f8 feec 	bl	800458c <_exit>

0800b7b4 <_raise_r>:
 800b7b4:	291f      	cmp	r1, #31
 800b7b6:	b538      	push	{r3, r4, r5, lr}
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	d904      	bls.n	800b7c8 <_raise_r+0x14>
 800b7be:	2316      	movs	r3, #22
 800b7c0:	6003      	str	r3, [r0, #0]
 800b7c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7ca:	b112      	cbz	r2, 800b7d2 <_raise_r+0x1e>
 800b7cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7d0:	b94b      	cbnz	r3, 800b7e6 <_raise_r+0x32>
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f000 f830 	bl	800b838 <_getpid_r>
 800b7d8:	462a      	mov	r2, r5
 800b7da:	4601      	mov	r1, r0
 800b7dc:	4620      	mov	r0, r4
 800b7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7e2:	f000 b817 	b.w	800b814 <_kill_r>
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d00a      	beq.n	800b800 <_raise_r+0x4c>
 800b7ea:	1c59      	adds	r1, r3, #1
 800b7ec:	d103      	bne.n	800b7f6 <_raise_r+0x42>
 800b7ee:	2316      	movs	r3, #22
 800b7f0:	6003      	str	r3, [r0, #0]
 800b7f2:	2001      	movs	r0, #1
 800b7f4:	e7e7      	b.n	800b7c6 <_raise_r+0x12>
 800b7f6:	2400      	movs	r4, #0
 800b7f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	4798      	blx	r3
 800b800:	2000      	movs	r0, #0
 800b802:	e7e0      	b.n	800b7c6 <_raise_r+0x12>

0800b804 <raise>:
 800b804:	4b02      	ldr	r3, [pc, #8]	; (800b810 <raise+0xc>)
 800b806:	4601      	mov	r1, r0
 800b808:	6818      	ldr	r0, [r3, #0]
 800b80a:	f7ff bfd3 	b.w	800b7b4 <_raise_r>
 800b80e:	bf00      	nop
 800b810:	20000018 	.word	0x20000018

0800b814 <_kill_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d07      	ldr	r5, [pc, #28]	; (800b834 <_kill_r+0x20>)
 800b818:	2300      	movs	r3, #0
 800b81a:	4604      	mov	r4, r0
 800b81c:	4608      	mov	r0, r1
 800b81e:	4611      	mov	r1, r2
 800b820:	602b      	str	r3, [r5, #0]
 800b822:	f7f8 fea3 	bl	800456c <_kill>
 800b826:	1c43      	adds	r3, r0, #1
 800b828:	d102      	bne.n	800b830 <_kill_r+0x1c>
 800b82a:	682b      	ldr	r3, [r5, #0]
 800b82c:	b103      	cbz	r3, 800b830 <_kill_r+0x1c>
 800b82e:	6023      	str	r3, [r4, #0]
 800b830:	bd38      	pop	{r3, r4, r5, pc}
 800b832:	bf00      	nop
 800b834:	200008bc 	.word	0x200008bc

0800b838 <_getpid_r>:
 800b838:	f7f8 be90 	b.w	800455c <_getpid>

0800b83c <_init>:
 800b83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83e:	bf00      	nop
 800b840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b842:	bc08      	pop	{r3}
 800b844:	469e      	mov	lr, r3
 800b846:	4770      	bx	lr

0800b848 <_fini>:
 800b848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84a:	bf00      	nop
 800b84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b84e:	bc08      	pop	{r3}
 800b850:	469e      	mov	lr, r3
 800b852:	4770      	bx	lr
