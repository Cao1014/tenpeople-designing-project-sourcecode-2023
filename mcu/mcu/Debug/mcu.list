
mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009924  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  08009b08  08009b08  00019b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a144  0800a144  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a144  0800a144  0001a144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a14c  0800a14c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a14c  0800a14c  0001a14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a150  0800a150  0001a150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a154  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  200001e8  0800a338  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  0800a338  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b2f  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d9  00000000  00000000  00034d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00037420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00038630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027421  00000000  00000000  00039770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015105  00000000  00000000  00060b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd976  00000000  00000000  00075c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017360c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d98  00000000  00000000  0017365c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009aec 	.word	0x08009aec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08009aec 	.word	0x08009aec

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b974 	b.w	8000f38 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468e      	mov	lr, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4694      	mov	ip, r2
 8000c7a:	d969      	bls.n	8000d50 <__udivmoddi4+0xe8>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b152      	cbz	r2, 8000c98 <__udivmoddi4+0x30>
 8000c82:	fa01 f302 	lsl.w	r3, r1, r2
 8000c86:	f1c2 0120 	rsb	r1, r2, #32
 8000c8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c92:	ea41 0e03 	orr.w	lr, r1, r3
 8000c96:	4094      	lsls	r4, r2
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	0c21      	lsrs	r1, r4, #16
 8000c9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca2:	fa1f f78c 	uxth.w	r7, ip
 8000ca6:	fb08 e316 	mls	r3, r8, r6, lr
 8000caa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cae:	fb06 f107 	mul.w	r1, r6, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cbe:	f080 811f 	bcs.w	8000f00 <__udivmoddi4+0x298>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 811c 	bls.w	8000f00 <__udivmoddi4+0x298>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 f707 	mul.w	r7, r0, r7
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x92>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	f080 810a 	bcs.w	8000f04 <__udivmoddi4+0x29c>
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	f240 8107 	bls.w	8000f04 <__udivmoddi4+0x29c>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	1be4      	subs	r4, r4, r7
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa4>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xc2>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80ef 	beq.w	8000efa <__udivmoddi4+0x292>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x160>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd4>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80f9 	bhi.w	8000f2e <__udivmoddi4+0x2c6>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	469e      	mov	lr, r3
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa4>
 8000d4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xec>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 8092 	bne.w	8000e82 <__udivmoddi4+0x21a>
 8000d5e:	eba1 010c 	sub.w	r1, r1, ip
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0c20      	lsrs	r0, r4, #16
 8000d6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d72:	fb07 1113 	mls	r1, r7, r3, r1
 8000d76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7a:	fb0e f003 	mul.w	r0, lr, r3
 8000d7e:	4288      	cmp	r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x12c>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x12a>
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	f200 80cb 	bhi.w	8000f28 <__udivmoddi4+0x2c0>
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000da0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da4:	fb0e fe00 	mul.w	lr, lr, r0
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x156>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x154>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f200 80bb 	bhi.w	8000f32 <__udivmoddi4+0x2ca>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dc6:	e79c      	b.n	8000d02 <__udivmoddi4+0x9a>
 8000dc8:	f1c6 0720 	rsb	r7, r6, #32
 8000dcc:	40b3      	lsls	r3, r6
 8000dce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	431c      	orrs	r4, r3
 8000de0:	40f9      	lsrs	r1, r7
 8000de2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fb09 1118 	mls	r1, r9, r8, r1
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	fb08 f00e 	mul.w	r0, r8, lr
 8000e00:	4288      	cmp	r0, r1
 8000e02:	fa02 f206 	lsl.w	r2, r2, r6
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b8>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2bc>
 8000e14:	4288      	cmp	r0, r1
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2bc>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e28:	fb09 1110 	mls	r1, r9, r0, r1
 8000e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	458e      	cmp	lr, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1e2>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e40:	d26c      	bcs.n	8000f1c <__udivmoddi4+0x2b4>
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d96a      	bls.n	8000f1c <__udivmoddi4+0x2b4>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e52:	eba1 010e 	sub.w	r1, r1, lr
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	46c8      	mov	r8, r9
 8000e5a:	46a6      	mov	lr, r4
 8000e5c:	d356      	bcc.n	8000f0c <__udivmoddi4+0x2a4>
 8000e5e:	d053      	beq.n	8000f08 <__udivmoddi4+0x2a0>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x212>
 8000e62:	ebb3 0208 	subs.w	r2, r3, r8
 8000e66:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e72:	40f1      	lsrs	r1, r6
 8000e74:	431f      	orrs	r7, r3
 8000e76:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e90:	4091      	lsls	r1, r2
 8000e92:	4301      	orrs	r1, r0
 8000e94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e98:	fa1f fe8c 	uxth.w	lr, ip
 8000e9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea4:	0c0b      	lsrs	r3, r1, #16
 8000ea6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x260>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebe:	d22f      	bcs.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d92d      	bls.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	b289      	uxth	r1, r1
 8000ecc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb06 f30e 	mul.w	r3, r6, lr
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x28a>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee8:	d216      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d914      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000eee:	3e02      	subs	r6, #2
 8000ef0:	4461      	add	r1, ip
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef8:	e738      	b.n	8000d6c <__udivmoddi4+0x104>
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e705      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e3      	b.n	8000ccc <__udivmoddi4+0x64>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6f8      	b.n	8000cfa <__udivmoddi4+0x92>
 8000f08:	454b      	cmp	r3, r9
 8000f0a:	d2a9      	bcs.n	8000e60 <__udivmoddi4+0x1f8>
 8000f0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7a3      	b.n	8000e60 <__udivmoddi4+0x1f8>
 8000f18:	4646      	mov	r6, r8
 8000f1a:	e7ea      	b.n	8000ef2 <__udivmoddi4+0x28a>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	e794      	b.n	8000e4a <__udivmoddi4+0x1e2>
 8000f20:	4640      	mov	r0, r8
 8000f22:	e7d1      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f24:	46d0      	mov	r8, sl
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b8>
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e732      	b.n	8000d94 <__udivmoddi4+0x12c>
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e709      	b.n	8000d46 <__udivmoddi4+0xde>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e742      	b.n	8000dbe <__udivmoddi4+0x156>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	0000      	movs	r0, r0
	...

08000f40 <HAL_TIM_IC_CaptureCallback>:
  // printf("Working\r\n");
}

// interrupt handler for the timer
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f44:	b090      	sub	sp, #64	; 0x40
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (htim->Instance == TIM5)
 8000f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4bb6      	ldr	r3, [pc, #728]	; (8001228 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 80fa 	bne.w	800114a <HAL_TIM_IC_CaptureCallback+0x20a>
  {
    switch (htim->Channel)
 8000f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f58:	7f1b      	ldrb	r3, [r3, #28]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d07b      	beq.n	8001056 <HAL_TIM_IC_CaptureCallback+0x116>
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	f040 80ef 	bne.w	8001142 <HAL_TIM_IC_CaptureCallback+0x202>
    {
    case HAL_TIM_ACTIVE_CHANNEL_2: // right sensor
      if (timer_flag == 0)
 8000f64:	4bb1      	ldr	r3, [pc, #708]	; (800122c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d113      	bne.n	8000f94 <HAL_TIM_IC_CaptureCallback+0x54>
      {
        timer_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f70:	f004 f9ac 	bl	80052cc <HAL_TIM_ReadCapturedValue>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2200      	movs	r2, #0
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
 8000f7a:	637a      	str	r2, [r7, #52]	; 0x34
 8000f7c:	4bac      	ldr	r3, [pc, #688]	; (8001230 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8000f7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000f82:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo right counter tr1= %d\r\n",timer_1);
        timer_flag = 1;
 8000f86:	4ba9      	ldr	r3, [pc, #676]	; (800122c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
        timer_fin = 0;
 8000f8c:	4ba9      	ldr	r3, [pc, #676]	; (8001234 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e05b      	b.n	800104c <HAL_TIM_IC_CaptureCallback+0x10c>
      }
      else
      {
        timer_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f94:	2104      	movs	r1, #4
 8000f96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f98:	f004 f998 	bl	80052cc <HAL_TIM_ReadCapturedValue>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000fa4:	4ba4      	ldr	r3, [pc, #656]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8000fa6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000faa:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo right counter tr2= %d\r\n",timer_2);
        timer_flag = 0;
 8000fae:	4b9f      	ldr	r3, [pc, #636]	; (800122c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
        timer_fin = 1;
 8000fb4:	4b9f      	ldr	r3, [pc, #636]	; (8001234 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
        if (timer_1 < timer_2) // if the timer is not overflowed
 8000fba:	4b9d      	ldr	r3, [pc, #628]	; (8001230 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8000fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fc0:	4b9d      	ldr	r3, [pc, #628]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	4290      	cmp	r0, r2
 8000fc8:	eb71 0303 	sbcs.w	r3, r1, r3
 8000fcc:	d219      	bcs.n	8001002 <HAL_TIM_IC_CaptureCallback+0xc2>
        {
          cmr = (double)(timer_2 - timer_1) * 0.017; // 340*100/1e6/2
 8000fce:	4b9a      	ldr	r3, [pc, #616]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8000fd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd4:	4b96      	ldr	r3, [pc, #600]	; (8001230 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	1a84      	subs	r4, r0, r2
 8000fdc:	623c      	str	r4, [r7, #32]
 8000fde:	eb61 0303 	sbc.w	r3, r1, r3
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fe8:	f7ff faf8 	bl	80005dc <__aeabi_ul2d>
 8000fec:	a38a      	add	r3, pc, #552	; (adr r3, 8001218 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff fb29 	bl	8000648 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4990      	ldr	r1, [pc, #576]	; (800123c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8000ffc:	e9c1 2300 	strd	r2, r3, [r1]
 8001000:	e01d      	b.n	800103e <HAL_TIM_IC_CaptureCallback+0xfe>
        }
        else
        {
          cmr = (double)(timer_2 + 0xffffffff - timer_1) * 0.017; // 340*100/1e6/2
 8001002:	4b8d      	ldr	r3, [pc, #564]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001008:	4b89      	ldr	r3, [pc, #548]	; (8001230 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	ebb0 0802 	subs.w	r8, r0, r2
 8001012:	eb61 0903 	sbc.w	r9, r1, r3
 8001016:	f118 33ff 	adds.w	r3, r8, #4294967295
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	f149 0300 	adc.w	r3, r9, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001026:	f7ff fad9 	bl	80005dc <__aeabi_ul2d>
 800102a:	a37b      	add	r3, pc, #492	; (adr r3, 8001218 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fb0a 	bl	8000648 <__aeabi_dmul>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4980      	ldr	r1, [pc, #512]	; (800123c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 800103a:	e9c1 2300 	strd	r2, r3, [r1]
        }
        timer_1 = 0;
 800103e:	497c      	ldr	r1, [pc, #496]	; (8001230 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	e9c1 2300 	strd	r2, r3, [r1]
        // printf("Distance right = %.3f cm. \r\n",  cmr);
      }
      // printf("Echo right: t1= %.3f us,  t2= %.3f us\r",timer_1*10, timer_2*10);
      HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 800104c:	2104      	movs	r1, #4
 800104e:	487c      	ldr	r0, [pc, #496]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001050:	f003 fba6 	bl	80047a0 <HAL_TIM_IC_Start_IT>
      break;
 8001054:	e07a      	b.n	800114c <HAL_TIM_IC_CaptureCallback+0x20c>

    case HAL_TIM_ACTIVE_CHANNEL_1: // left sensor
      if (timel_flag == 0)
 8001056:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x304>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d113      	bne.n	8001086 <HAL_TIM_IC_CaptureCallback+0x146>
      {
        timel_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800105e:	2100      	movs	r1, #0
 8001060:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001062:	f004 f933 	bl	80052cc <HAL_TIM_ReadCapturedValue>
 8001066:	4603      	mov	r3, r0
 8001068:	2200      	movs	r2, #0
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	617a      	str	r2, [r7, #20]
 800106e:	4b76      	ldr	r3, [pc, #472]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001070:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001074:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo left counter tl1= %d\r\n",timel_1);
        timel_flag = 1;
 8001078:	4b72      	ldr	r3, [pc, #456]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x304>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
        timel_fin = 0;
 800107e:	4b73      	ldr	r3, [pc, #460]	; (800124c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	e058      	b.n	8001138 <HAL_TIM_IC_CaptureCallback+0x1f8>
      }
      else
      {
        timel_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001086:	2100      	movs	r1, #0
 8001088:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800108a:	f004 f91f 	bl	80052cc <HAL_TIM_ReadCapturedValue>
 800108e:	4603      	mov	r3, r0
 8001090:	2200      	movs	r2, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	60fa      	str	r2, [r7, #12]
 8001096:	4b6e      	ldr	r3, [pc, #440]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001098:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800109c:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo left counter tl2= %d\r\n",timel_2);
        timel_flag = 0;
 80010a0:	4b68      	ldr	r3, [pc, #416]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x304>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
        timel_fin = 1;
 80010a6:	4b69      	ldr	r3, [pc, #420]	; (800124c <HAL_TIM_IC_CaptureCallback+0x30c>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
        if (timel_1 < timel_2) // if the timer is not overflowed
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x308>)
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	4b67      	ldr	r3, [pc, #412]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x310>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	4290      	cmp	r0, r2
 80010ba:	eb71 0303 	sbcs.w	r3, r1, r3
 80010be:	d219      	bcs.n	80010f4 <HAL_TIM_IC_CaptureCallback+0x1b4>
        {
          cml = (double)(timel_2 - timel_1) * 0.017; // 340*100/1e6/2
 80010c0:	4b63      	ldr	r3, [pc, #396]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x310>)
 80010c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010c6:	4b60      	ldr	r3, [pc, #384]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x308>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	1a84      	subs	r4, r0, r2
 80010ce:	603c      	str	r4, [r7, #0]
 80010d0:	eb61 0303 	sbc.w	r3, r1, r3
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010da:	f7ff fa7f 	bl	80005dc <__aeabi_ul2d>
 80010de:	a34e      	add	r3, pc, #312	; (adr r3, 8001218 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff fab0 	bl	8000648 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4959      	ldr	r1, [pc, #356]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x314>)
 80010ee:	e9c1 2300 	strd	r2, r3, [r1]
 80010f2:	e01a      	b.n	800112a <HAL_TIM_IC_CaptureCallback+0x1ea>
        }
        else
        {
          cml = (double)(timel_2 + 0xffffffff - timel_1) * 0.017; // 340*100/1e6/2
 80010f4:	4b56      	ldr	r3, [pc, #344]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x310>)
 80010f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010fa:	4b53      	ldr	r3, [pc, #332]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x308>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	1a84      	subs	r4, r0, r2
 8001102:	eb61 0503 	sbc.w	r5, r1, r3
 8001106:	f114 3aff 	adds.w	sl, r4, #4294967295
 800110a:	f145 0b00 	adc.w	fp, r5, #0
 800110e:	4650      	mov	r0, sl
 8001110:	4659      	mov	r1, fp
 8001112:	f7ff fa63 	bl	80005dc <__aeabi_ul2d>
 8001116:	a340      	add	r3, pc, #256	; (adr r3, 8001218 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa94 	bl	8000648 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	494b      	ldr	r1, [pc, #300]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001126:	e9c1 2300 	strd	r2, r3, [r1]
        }
        timel_1 = 0;
 800112a:	4947      	ldr	r1, [pc, #284]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x308>)
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	e9c1 2300 	strd	r2, r3, [r1]
      }
      // printf("Echo left: t1= %.3f us,  t2= %.3f us\r",timel_1*10, timel_2*10);
      // printf("Distance left = %.3f cm. \r\n",  cml);
      HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001138:	2100      	movs	r1, #0
 800113a:	4841      	ldr	r0, [pc, #260]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x300>)
 800113c:	f003 fb30 	bl	80047a0 <HAL_TIM_IC_Start_IT>
      break;
 8001140:	e004      	b.n	800114c <HAL_TIM_IC_CaptureCallback+0x20c>
    default:
      printf("Error timer channel.\r\n");
 8001142:	4845      	ldr	r0, [pc, #276]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001144:	f006 fc1e 	bl	8007984 <puts>
      break;
 8001148:	e000      	b.n	800114c <HAL_TIM_IC_CaptureCallback+0x20c>
    }
  }
 800114a:	bf00      	nop
  if (htim->Instance == TIM4)
 800114c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a42      	ldr	r2, [pc, #264]	; (800125c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	f040 8090 	bne.w	8001278 <HAL_TIM_IC_CaptureCallback+0x338>
  {
    switch (htim->Channel)
 8001158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800115a:	7f1b      	ldrb	r3, [r3, #28]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d154      	bne.n	800120a <HAL_TIM_IC_CaptureCallback+0x2ca>
    {
    case HAL_TIM_ACTIVE_CHANNEL_1: // right sensor
      if (timef_flag == 0)
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10d      	bne.n	8001184 <HAL_TIM_IC_CaptureCallback+0x244>
      {
        timef_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001168:	2100      	movs	r1, #0
 800116a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800116c:	f004 f8ae 	bl	80052cc <HAL_TIM_ReadCapturedValue>
 8001170:	4603      	mov	r3, r0
 8001172:	4a3c      	ldr	r2, [pc, #240]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001174:	6013      	str	r3, [r2, #0]
        // printf("Echo front: tf1= %d us\r",timef_1*10);
        timef_flag = 1;
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
        timef_fin = 0;
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x328>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e03d      	b.n	8001200 <HAL_TIM_IC_CaptureCallback+0x2c0>
      }
      else
      {
        timef_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001188:	f004 f8a0 	bl	80052cc <HAL_TIM_ReadCapturedValue>
 800118c:	4603      	mov	r3, r0
 800118e:	4a37      	ldr	r2, [pc, #220]	; (800126c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001190:	6013      	str	r3, [r2, #0]
        timef_flag = 0;
 8001192:	4b33      	ldr	r3, [pc, #204]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
        timef_fin = 1;
 8001198:	4b33      	ldr	r3, [pc, #204]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x328>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
        if (timef_1 < timef_2) // if the timer is not overflowed
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x324>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <HAL_TIM_IC_CaptureCallback+0x32c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d212      	bcs.n	80011d0 <HAL_TIM_IC_CaptureCallback+0x290>
        {
          cmf = (double)(timef_2 - timef_1) * 3.4; // 340*100/5e3/2
 80011aa:	4b30      	ldr	r3, [pc, #192]	; (800126c <HAL_TIM_IC_CaptureCallback+0x32c>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x324>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9cd 	bl	8000554 <__aeabi_ui2d>
 80011ba:	a319      	add	r3, pc, #100	; (adr r3, 8001220 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fa42 	bl	8000648 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4929      	ldr	r1, [pc, #164]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x330>)
 80011ca:	e9c1 2300 	strd	r2, r3, [r1]
 80011ce:	e014      	b.n	80011fa <HAL_TIM_IC_CaptureCallback+0x2ba>
        }
        else
        {
          cmf = (double)(timef_2 + 0xffff - timef_1) * 3.4; // 340*100/5e3/2
 80011d0:	4b26      	ldr	r3, [pc, #152]	; (800126c <HAL_TIM_IC_CaptureCallback+0x32c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x324>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011de:	33ff      	adds	r3, #255	; 0xff
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9b7 	bl	8000554 <__aeabi_ui2d>
 80011e6:	a30e      	add	r3, pc, #56	; (adr r3, 8001220 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff fa2c 	bl	8000648 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	491e      	ldr	r1, [pc, #120]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x330>)
 80011f6:	e9c1 2300 	strd	r2, r3, [r1]
        }
        timef_1 = 0;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x324>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
      }
      // printf("Echo front: t= %.3f us\r\n",timel_1*10, timer_2*10);
      // printf("Distance front = %.3f cm. \r\n",  cmf);
      HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001200:	2100      	movs	r1, #0
 8001202:	481c      	ldr	r0, [pc, #112]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x334>)
 8001204:	f003 facc 	bl	80047a0 <HAL_TIM_IC_Start_IT>
      break;
 8001208:	e037      	b.n	800127a <HAL_TIM_IC_CaptureCallback+0x33a>
    default:
      printf("Error timer channel.\r\n");
 800120a:	4813      	ldr	r0, [pc, #76]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x318>)
 800120c:	f006 fbba 	bl	8007984 <puts>
      break;
 8001210:	e033      	b.n	800127a <HAL_TIM_IC_CaptureCallback+0x33a>
 8001212:	bf00      	nop
 8001214:	f3af 8000 	nop.w
 8001218:	b020c49c 	.word	0xb020c49c
 800121c:	3f916872 	.word	0x3f916872
 8001220:	33333333 	.word	0x33333333
 8001224:	400b3333 	.word	0x400b3333
 8001228:	40000c00 	.word	0x40000c00
 800122c:	20000620 	.word	0x20000620
 8001230:	20000628 	.word	0x20000628
 8001234:	20000621 	.word	0x20000621
 8001238:	20000630 	.word	0x20000630
 800123c:	20000638 	.word	0x20000638
 8001240:	200005b8 	.word	0x200005b8
 8001244:	20000604 	.word	0x20000604
 8001248:	20000608 	.word	0x20000608
 800124c:	20000605 	.word	0x20000605
 8001250:	20000610 	.word	0x20000610
 8001254:	20000618 	.word	0x20000618
 8001258:	08009b08 	.word	0x08009b08
 800125c:	40000800 	.word	0x40000800
 8001260:	20000640 	.word	0x20000640
 8001264:	20000644 	.word	0x20000644
 8001268:	20000641 	.word	0x20000641
 800126c:	20000648 	.word	0x20000648
 8001270:	20000650 	.word	0x20000650
 8001274:	2000056c 	.word	0x2000056c
    }
  }
 8001278:	bf00      	nop
}
 800127a:	bf00      	nop
 800127c:	3740      	adds	r7, #64	; 0x40
 800127e:	46bd      	mov	sp, r7
 8001280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001284 <hc12send>:
    }
  }
}

uint8_t hc12send(uint8_t data)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  return HAL_UART_Transmit(&huart5, &data, 1, 100);
 800128e:	1df9      	adds	r1, r7, #7
 8001290:	2364      	movs	r3, #100	; 0x64
 8001292:	2201      	movs	r2, #1
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <hc12send+0x20>)
 8001296:	f005 f821 	bl	80062dc <HAL_UART_Transmit>
 800129a:	4603      	mov	r3, r0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000324 	.word	0x20000324

080012a8 <Set_angle>:
  // qwq[3] = '\n';
  // HAL_UART_Transmit(&huart5, qwq, 4, HAL_MAX_DELAY);
}

void Set_angle(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t angle, uint32_t countPeriod, uint32_t CycleTime)
{
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	4613      	mov	r3, r2
 80012b6:	71fb      	strb	r3, [r7, #7]
  uint16_t compare_value = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	82fb      	strh	r3, [r7, #22]
  if (angle <= 180)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2bb4      	cmp	r3, #180	; 0xb4
 80012c0:	d861      	bhi.n	8001386 <Set_angle+0xde>
  {
    compare_value = 0.5 * countPeriod / CycleTime + angle * countPeriod / CycleTime / 90; // compute the compare_value
 80012c2:	6838      	ldr	r0, [r7, #0]
 80012c4:	f7ff f946 	bl	8000554 <__aeabi_ui2d>
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <Set_angle+0xe8>)
 80012ce:	f7ff f9bb 	bl	8000648 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4614      	mov	r4, r2
 80012d8:	461d      	mov	r5, r3
 80012da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012dc:	f7ff f93a 	bl	8000554 <__aeabi_ui2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4620      	mov	r0, r4
 80012e6:	4629      	mov	r1, r5
 80012e8:	f7ff fad8 	bl	800089c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	461d      	mov	r5, r3
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	fb03 f202 	mul.w	r2, r3, r2
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	085b      	lsrs	r3, r3, #1
 8001304:	4a23      	ldr	r2, [pc, #140]	; (8001394 <Set_angle+0xec>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f921 	bl	8000554 <__aeabi_ui2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	f7fe ffdf 	bl	80002dc <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc67 	bl	8000bf8 <__aeabi_d2uiz>
 800132a:	4603      	mov	r3, r0
 800132c:	82fb      	strh	r3, [r7, #22]
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d104      	bne.n	800133e <Set_angle+0x96>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	8afa      	ldrh	r2, [r7, #22]
 800133a:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800133c:	e023      	b.n	8001386 <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d104      	bne.n	800134e <Set_angle+0xa6>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	8afb      	ldrh	r3, [r7, #22]
 800134a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800134c:	e01b      	b.n	8001386 <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b08      	cmp	r3, #8
 8001352:	d104      	bne.n	800135e <Set_angle+0xb6>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	8afb      	ldrh	r3, [r7, #22]
 800135a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800135c:	e013      	b.n	8001386 <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b0c      	cmp	r3, #12
 8001362:	d104      	bne.n	800136e <Set_angle+0xc6>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	8afb      	ldrh	r3, [r7, #22]
 800136a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800136c:	e00b      	b.n	8001386 <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b10      	cmp	r3, #16
 8001372:	d104      	bne.n	800137e <Set_angle+0xd6>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	8afb      	ldrh	r3, [r7, #22]
 800137a:	6493      	str	r3, [r2, #72]	; 0x48
}
 800137c:	e003      	b.n	8001386 <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	8afb      	ldrh	r3, [r7, #22]
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bdb0      	pop	{r4, r5, r7, pc}
 800138e:	bf00      	nop
 8001390:	3fe00000 	.word	0x3fe00000
 8001394:	b60b60b7 	.word	0xb60b60b7

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139e:	f001 fc3c 	bl	8002c1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a2:	f000 f953 	bl	800164c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a6:	f000 fd45 	bl	8001e34 <MX_GPIO_Init>
  MX_TIM5_Init();
 80013aa:	f000 fcc7 	bl	8001d3c <MX_TIM5_Init>
  MX_TIM1_Init();
 80013ae:	f000 fb13 	bl	80019d8 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 80013b2:	f000 f997 	bl	80016e4 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80013b6:	f000 f9df 	bl	8001778 <MX_UART4_Init>
  MX_TIM4_Init();
 80013ba:	f000 fc4d 	bl	8001c58 <MX_TIM4_Init>
  MX_UART5_Init();
 80013be:	f000 fa27 	bl	8001810 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80013c2:	f000 fa71 	bl	80018a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80013c6:	f000 fabb 	bl	8001940 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80013ca:	f000 fbb7 	bl	8001b3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting\r\n");
 80013ce:	4888      	ldr	r0, [pc, #544]	; (80015f0 <main+0x258>)
 80013d0:	f006 fad8 	bl	8007984 <puts>
  // Load parameters to PID
  PID(&myPIDultra, &Inputultra, &Outputultra, &Setpointultra, 1.2, 1, 0.8, _PID_P_ON_E, _PID_CD_DIRECT);
 80013d4:	2300      	movs	r3, #0
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	2301      	movs	r3, #1
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	ed9f 2b64 	vldr	d2, [pc, #400]	; 8001570 <main+0x1d8>
 80013e0:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8001578 <main+0x1e0>
 80013e4:	ed9f 0b66 	vldr	d0, [pc, #408]	; 8001580 <main+0x1e8>
 80013e8:	4b82      	ldr	r3, [pc, #520]	; (80015f4 <main+0x25c>)
 80013ea:	4a83      	ldr	r2, [pc, #524]	; (80015f8 <main+0x260>)
 80013ec:	4983      	ldr	r1, [pc, #524]	; (80015fc <main+0x264>)
 80013ee:	4884      	ldr	r0, [pc, #528]	; (8001600 <main+0x268>)
 80013f0:	f000 fe02 	bl	8001ff8 <PID>
  PID_SetMode(&myPIDultra, _PID_MODE_AUTOMATIC);
 80013f4:	2101      	movs	r1, #1
 80013f6:	4882      	ldr	r0, [pc, #520]	; (8001600 <main+0x268>)
 80013f8:	f000 fe4a 	bl	8002090 <PID_SetMode>
  PID_SetSampleTime(&myPIDultra, 50);
 80013fc:	2132      	movs	r1, #50	; 0x32
 80013fe:	4880      	ldr	r0, [pc, #512]	; (8001600 <main+0x268>)
 8001400:	f000 ffba 	bl	8002378 <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDultra, -10, 10);
 8001404:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8001588 <main+0x1f0>
 8001408:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8001590 <main+0x1f8>
 800140c:	487c      	ldr	r0, [pc, #496]	; (8001600 <main+0x268>)
 800140e:	f000 fe5d 	bl	80020cc <PID_SetOutputLimits>

  PID(&myPIDdistance, &Inputdistance, &Outputdistance, &Setpointdistance, 0.8, 200, 15, _PID_P_ON_E, _PID_CD_DIRECT);
 8001412:	2300      	movs	r3, #0
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	2301      	movs	r3, #1
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	ed9f 2b5f 	vldr	d2, [pc, #380]	; 8001598 <main+0x200>
 800141e:	ed9f 1b60 	vldr	d1, [pc, #384]	; 80015a0 <main+0x208>
 8001422:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8001570 <main+0x1d8>
 8001426:	4b77      	ldr	r3, [pc, #476]	; (8001604 <main+0x26c>)
 8001428:	4a77      	ldr	r2, [pc, #476]	; (8001608 <main+0x270>)
 800142a:	4978      	ldr	r1, [pc, #480]	; (800160c <main+0x274>)
 800142c:	4878      	ldr	r0, [pc, #480]	; (8001610 <main+0x278>)
 800142e:	f000 fde3 	bl	8001ff8 <PID>
  PID_SetMode(&myPIDdistance, _PID_MODE_AUTOMATIC);
 8001432:	2101      	movs	r1, #1
 8001434:	4876      	ldr	r0, [pc, #472]	; (8001610 <main+0x278>)
 8001436:	f000 fe2b 	bl	8002090 <PID_SetMode>
  PID_SetSampleTime(&myPIDdistance, 50);
 800143a:	2132      	movs	r1, #50	; 0x32
 800143c:	4874      	ldr	r0, [pc, #464]	; (8001610 <main+0x278>)
 800143e:	f000 ff9b 	bl	8002378 <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDdistance, -5, 5);
 8001442:	ed9f 1b59 	vldr	d1, [pc, #356]	; 80015a8 <main+0x210>
 8001446:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 80015b0 <main+0x218>
 800144a:	4871      	ldr	r0, [pc, #452]	; (8001610 <main+0x278>)
 800144c:	f000 fe3e 	bl	80020cc <PID_SetOutputLimits>

  PID(&myPIDopenmv, &Inputopenmv, &Outputopenmv, &Setpointopenmv, 0.2, 0, 0.12, _PID_P_ON_E, _PID_CD_DIRECT);
 8001450:	2300      	movs	r3, #0
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	2301      	movs	r3, #1
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	ed9f 2b57 	vldr	d2, [pc, #348]	; 80015b8 <main+0x220>
 800145c:	ed9f 1b58 	vldr	d1, [pc, #352]	; 80015c0 <main+0x228>
 8001460:	ed9f 0b59 	vldr	d0, [pc, #356]	; 80015c8 <main+0x230>
 8001464:	4b6b      	ldr	r3, [pc, #428]	; (8001614 <main+0x27c>)
 8001466:	4a6c      	ldr	r2, [pc, #432]	; (8001618 <main+0x280>)
 8001468:	496c      	ldr	r1, [pc, #432]	; (800161c <main+0x284>)
 800146a:	486d      	ldr	r0, [pc, #436]	; (8001620 <main+0x288>)
 800146c:	f000 fdc4 	bl	8001ff8 <PID>
  PID_SetMode(&myPIDopenmv, _PID_MODE_AUTOMATIC);
 8001470:	2101      	movs	r1, #1
 8001472:	486b      	ldr	r0, [pc, #428]	; (8001620 <main+0x288>)
 8001474:	f000 fe0c 	bl	8002090 <PID_SetMode>
  PID_SetSampleTime(&myPIDopenmv, 170);
 8001478:	21aa      	movs	r1, #170	; 0xaa
 800147a:	4869      	ldr	r0, [pc, #420]	; (8001620 <main+0x288>)
 800147c:	f000 ff7c 	bl	8002378 <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDopenmv, -10, 10);
 8001480:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001588 <main+0x1f0>
 8001484:	ed9f 0b42 	vldr	d0, [pc, #264]	; 8001590 <main+0x1f8>
 8001488:	4865      	ldr	r0, [pc, #404]	; (8001620 <main+0x288>)
 800148a:	f000 fe1f 	bl	80020cc <PID_SetOutputLimits>

  PID(&myPIDgyro, &Inputgyro, &Outputgyro, &Setpointgyro, 0.5, 0.1, 1.2, _PID_P_ON_E, _PID_CD_DIRECT);
 800148e:	2300      	movs	r3, #0
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	2301      	movs	r3, #1
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	ed9f 2b3a 	vldr	d2, [pc, #232]	; 8001580 <main+0x1e8>
 800149a:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 80015d0 <main+0x238>
 800149e:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 80015d8 <main+0x240>
 80014a2:	4b60      	ldr	r3, [pc, #384]	; (8001624 <main+0x28c>)
 80014a4:	4a60      	ldr	r2, [pc, #384]	; (8001628 <main+0x290>)
 80014a6:	4961      	ldr	r1, [pc, #388]	; (800162c <main+0x294>)
 80014a8:	4861      	ldr	r0, [pc, #388]	; (8001630 <main+0x298>)
 80014aa:	f000 fda5 	bl	8001ff8 <PID>
  PID_SetMode(&myPIDgyro, _PID_MODE_AUTOMATIC);
 80014ae:	2101      	movs	r1, #1
 80014b0:	485f      	ldr	r0, [pc, #380]	; (8001630 <main+0x298>)
 80014b2:	f000 fded 	bl	8002090 <PID_SetMode>
  PID_SetSampleTime(&myPIDgyro, 50);
 80014b6:	2132      	movs	r1, #50	; 0x32
 80014b8:	485d      	ldr	r0, [pc, #372]	; (8001630 <main+0x298>)
 80014ba:	f000 ff5d 	bl	8002378 <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDgyro, -4, 4);
 80014be:	ed9f 1b48 	vldr	d1, [pc, #288]	; 80015e0 <main+0x248>
 80014c2:	ed9f 0b49 	vldr	d0, [pc, #292]	; 80015e8 <main+0x250>
 80014c6:	485a      	ldr	r0, [pc, #360]	; (8001630 <main+0x298>)
 80014c8:	f000 fe00 	bl	80020cc <PID_SetOutputLimits>

  // start TIM1 PWM generator
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014cc:	2100      	movs	r1, #0
 80014ce:	4859      	ldr	r0, [pc, #356]	; (8001634 <main+0x29c>)
 80014d0:	f002 fff2 	bl	80044b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Machine Arm: 0(normal) and 180(putting)
 80014d4:	2100      	movs	r1, #0
 80014d6:	4858      	ldr	r0, [pc, #352]	; (8001638 <main+0x2a0>)
 80014d8:	f002 ffee 	bl	80044b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Bule servo(top): 90
 80014dc:	2108      	movs	r1, #8
 80014de:	4856      	ldr	r0, [pc, #344]	; (8001638 <main+0x2a0>)
 80014e0:	f002 ffea 	bl	80044b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Bule servo(openmv): 110(rectangle) and 65(45 degree)
 80014e4:	210c      	movs	r1, #12
 80014e6:	4854      	ldr	r0, [pc, #336]	; (8001638 <main+0x2a0>)
 80014e8:	f002 ffe6 	bl	80044b8 <HAL_TIM_PWM_Start>
  // start TIM5 IT left and right sensor
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80014ec:	2100      	movs	r1, #0
 80014ee:	4853      	ldr	r0, [pc, #332]	; (800163c <main+0x2a4>)
 80014f0:	f003 f956 	bl	80047a0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 80014f4:	2104      	movs	r1, #4
 80014f6:	4851      	ldr	r0, [pc, #324]	; (800163c <main+0x2a4>)
 80014f8:	f003 f952 	bl	80047a0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80014fc:	2100      	movs	r1, #0
 80014fe:	4850      	ldr	r0, [pc, #320]	; (8001640 <main+0x2a8>)
 8001500:	f003 f94e 	bl	80047a0 <HAL_TIM_IC_Start_IT>

  // Servo initial position
  Set_angle(&htim2, TIM_CHANNEL_1, 0, 20000, 20);
 8001504:	2314      	movs	r3, #20
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	f644 6320 	movw	r3, #20000	; 0x4e20
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	4849      	ldr	r0, [pc, #292]	; (8001638 <main+0x2a0>)
 8001512:	f7ff fec9 	bl	80012a8 <Set_angle>
  Set_angle(&htim2, TIM_CHANNEL_3, 90, 20000, 20);//90 for task 2
 8001516:	2314      	movs	r3, #20
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800151e:	225a      	movs	r2, #90	; 0x5a
 8001520:	2108      	movs	r1, #8
 8001522:	4845      	ldr	r0, [pc, #276]	; (8001638 <main+0x2a0>)
 8001524:	f7ff fec0 	bl	80012a8 <Set_angle>
  // Set_angle(&htim2,TIM_CHANNEL_4, 110,20000,20);
  Set_angle(&htim2, TIM_CHANNEL_4, 110, 20000, 20);
 8001528:	2314      	movs	r3, #20
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001530:	226e      	movs	r2, #110	; 0x6e
 8001532:	210c      	movs	r1, #12
 8001534:	4840      	ldr	r0, [pc, #256]	; (8001638 <main+0x2a0>)
 8001536:	f7ff feb7 	bl	80012a8 <Set_angle>

  //Recode initial Pitch
  UART_DISABLE_RE(huart1);
 800153a:	4b42      	ldr	r3, [pc, #264]	; (8001644 <main+0x2ac>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b40      	ldr	r3, [pc, #256]	; (8001644 <main+0x2ac>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0204 	bic.w	r2, r2, #4
 8001548:	601a      	str	r2, [r3, #0]
  // UART_DISABLE_RE(huart3);
  
  //HAL_Delay(5000);
  
  
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2120      	movs	r1, #32
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f001 fe87 	bl	8003264 <HAL_GPIO_WritePin>
  printf("Initialized. \r\n");
 8001556:	483c      	ldr	r0, [pc, #240]	; (8001648 <main+0x2b0>)
 8001558:	f006 fa14 	bl	8007984 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /****************Test******************/
    hc12send('a');
 800155c:	2061      	movs	r0, #97	; 0x61
 800155e:	f7ff fe91 	bl	8001284 <hc12send>

    HAL_Delay(100);
 8001562:	2064      	movs	r0, #100	; 0x64
 8001564:	f001 fbca 	bl	8002cfc <HAL_Delay>
    hc12send('a');
 8001568:	e7f8      	b.n	800155c <main+0x1c4>
 800156a:	bf00      	nop
 800156c:	f3af 8000 	nop.w
 8001570:	9999999a 	.word	0x9999999a
 8001574:	3fe99999 	.word	0x3fe99999
 8001578:	00000000 	.word	0x00000000
 800157c:	3ff00000 	.word	0x3ff00000
 8001580:	33333333 	.word	0x33333333
 8001584:	3ff33333 	.word	0x3ff33333
 8001588:	00000000 	.word	0x00000000
 800158c:	40240000 	.word	0x40240000
 8001590:	00000000 	.word	0x00000000
 8001594:	c0240000 	.word	0xc0240000
 8001598:	00000000 	.word	0x00000000
 800159c:	402e0000 	.word	0x402e0000
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40690000 	.word	0x40690000
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40140000 	.word	0x40140000
 80015b0:	00000000 	.word	0x00000000
 80015b4:	c0140000 	.word	0xc0140000
 80015b8:	eb851eb8 	.word	0xeb851eb8
 80015bc:	3fbeb851 	.word	0x3fbeb851
	...
 80015c8:	9999999a 	.word	0x9999999a
 80015cc:	3fc99999 	.word	0x3fc99999
 80015d0:	9999999a 	.word	0x9999999a
 80015d4:	3fb99999 	.word	0x3fb99999
 80015d8:	00000000 	.word	0x00000000
 80015dc:	3fe00000 	.word	0x3fe00000
 80015e0:	00000000 	.word	0x00000000
 80015e4:	40100000 	.word	0x40100000
 80015e8:	00000000 	.word	0x00000000
 80015ec:	c0100000 	.word	0xc0100000
 80015f0:	08009d0c 	.word	0x08009d0c
 80015f4:	20000668 	.word	0x20000668
 80015f8:	20000660 	.word	0x20000660
 80015fc:	20000658 	.word	0x20000658
 8001600:	200006b0 	.word	0x200006b0
 8001604:	20000000 	.word	0x20000000
 8001608:	20000678 	.word	0x20000678
 800160c:	20000670 	.word	0x20000670
 8001610:	20000720 	.word	0x20000720
 8001614:	20000690 	.word	0x20000690
 8001618:	20000688 	.word	0x20000688
 800161c:	20000680 	.word	0x20000680
 8001620:	20000790 	.word	0x20000790
 8001624:	200006a8 	.word	0x200006a8
 8001628:	200006a0 	.word	0x200006a0
 800162c:	20000698 	.word	0x20000698
 8001630:	20000800 	.word	0x20000800
 8001634:	200004d4 	.word	0x200004d4
 8001638:	20000520 	.word	0x20000520
 800163c:	200005b8 	.word	0x200005b8
 8001640:	2000056c 	.word	0x2000056c
 8001644:	200003b4 	.word	0x200003b4
 8001648:	08009d18 	.word	0x08009d18

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b094      	sub	sp, #80	; 0x50
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	f107 0318 	add.w	r3, r7, #24
 8001656:	2238      	movs	r2, #56	; 0x38
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f005 fcb2 	bl	8006fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800166e:	2000      	movs	r0, #0
 8001670:	f001 fe34 	bl	80032dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800167e:	2340      	movs	r3, #64	; 0x40
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001682:	2302      	movs	r3, #2
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001686:	2302      	movs	r3, #2
 8001688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800168a:	2304      	movs	r3, #4
 800168c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800168e:	2355      	movs	r3, #85	; 0x55
 8001690:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001692:	2302      	movs	r3, #2
 8001694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001696:	2302      	movs	r3, #2
 8001698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800169a:	2302      	movs	r3, #2
 800169c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169e:	f107 0318 	add.w	r3, r7, #24
 80016a2:	4618      	mov	r0, r3
 80016a4:	f001 fece 	bl	8003444 <HAL_RCC_OscConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016ae:	f000 fc63 	bl	8001f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b2:	230f      	movs	r3, #15
 80016b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b6:	2303      	movs	r3, #3
 80016b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2104      	movs	r1, #4
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 f9d2 	bl	8003a74 <HAL_RCC_ClockConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016d6:	f000 fc4f 	bl	8001f78 <Error_Handler>
  }
}
 80016da:	bf00      	nop
 80016dc:	3750      	adds	r7, #80	; 0x50
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 80016ea:	4a22      	ldr	r2, [pc, #136]	; (8001774 <MX_LPUART1_UART_Init+0x90>)
 80016ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 8001716:	2200      	movs	r2, #0
 8001718:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 800171c:	2200      	movs	r2, #0
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 8001722:	2200      	movs	r2, #0
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001726:	4812      	ldr	r0, [pc, #72]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 8001728:	f004 fd88 	bl	800623c <HAL_UART_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001732:	f000 fc21 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001736:	2100      	movs	r1, #0
 8001738:	480d      	ldr	r0, [pc, #52]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 800173a:	f005 fb4f 	bl	8006ddc <HAL_UARTEx_SetTxFifoThreshold>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001744:	f000 fc18 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001748:	2100      	movs	r1, #0
 800174a:	4809      	ldr	r0, [pc, #36]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 800174c:	f005 fb84 	bl	8006e58 <HAL_UARTEx_SetRxFifoThreshold>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001756:	f000 fc0f 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_LPUART1_UART_Init+0x8c>)
 800175c:	f005 fb05 	bl	8006d6a <HAL_UARTEx_DisableFifoMode>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001766:	f000 fc07 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000204 	.word	0x20000204
 8001774:	40008000 	.word	0x40008000

08001778 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <MX_UART4_Init+0x90>)
 800177e:	4a23      	ldr	r2, [pc, #140]	; (800180c <MX_UART4_Init+0x94>)
 8001780:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_UART4_Init+0x90>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <MX_UART4_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <MX_UART4_Init+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_UART4_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_UART4_Init+0x90>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_UART4_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_UART4_Init+0x90>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_UART4_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_UART4_Init+0x90>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_UART4_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017c0:	4811      	ldr	r0, [pc, #68]	; (8001808 <MX_UART4_Init+0x90>)
 80017c2:	f004 fd3b 	bl	800623c <HAL_UART_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80017cc:	f000 fbd4 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d0:	2100      	movs	r1, #0
 80017d2:	480d      	ldr	r0, [pc, #52]	; (8001808 <MX_UART4_Init+0x90>)
 80017d4:	f005 fb02 	bl	8006ddc <HAL_UARTEx_SetTxFifoThreshold>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80017de:	f000 fbcb 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <MX_UART4_Init+0x90>)
 80017e6:	f005 fb37 	bl	8006e58 <HAL_UARTEx_SetRxFifoThreshold>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80017f0:	f000 fbc2 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_UART4_Init+0x90>)
 80017f6:	f005 fab8 	bl	8006d6a <HAL_UARTEx_DisableFifoMode>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001800:	f000 fbba 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000294 	.word	0x20000294
 800180c:	40004c00 	.word	0x40004c00

08001810 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_UART5_Init+0x90>)
 8001816:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <MX_UART5_Init+0x94>)
 8001818:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <MX_UART5_Init+0x90>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <MX_UART5_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001828:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <MX_UART5_Init+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800182e:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <MX_UART5_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_UART5_Init+0x90>)
 8001836:	220c      	movs	r2, #12
 8001838:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_UART5_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_UART5_Init+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_UART5_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_UART5_Init+0x90>)
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <MX_UART5_Init+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001858:	4811      	ldr	r0, [pc, #68]	; (80018a0 <MX_UART5_Init+0x90>)
 800185a:	f004 fcef 	bl	800623c <HAL_UART_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001864:	f000 fb88 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001868:	2100      	movs	r1, #0
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <MX_UART5_Init+0x90>)
 800186c:	f005 fab6 	bl	8006ddc <HAL_UARTEx_SetTxFifoThreshold>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001876:	f000 fb7f 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800187a:	2100      	movs	r1, #0
 800187c:	4808      	ldr	r0, [pc, #32]	; (80018a0 <MX_UART5_Init+0x90>)
 800187e:	f005 faeb 	bl	8006e58 <HAL_UARTEx_SetRxFifoThreshold>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001888:	f000 fb76 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_UART5_Init+0x90>)
 800188e:	f005 fa6c 	bl	8006d6a <HAL_UARTEx_DisableFifoMode>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001898:	f000 fb6e 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000324 	.word	0x20000324
 80018a4:	40005000 	.word	0x40005000

080018a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <MX_USART1_UART_Init+0x94>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f0:	4811      	ldr	r0, [pc, #68]	; (8001938 <MX_USART1_UART_Init+0x90>)
 80018f2:	f004 fca3 	bl	800623c <HAL_UART_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018fc:	f000 fb3c 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001900:	2100      	movs	r1, #0
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <MX_USART1_UART_Init+0x90>)
 8001904:	f005 fa6a 	bl	8006ddc <HAL_UARTEx_SetTxFifoThreshold>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800190e:	f000 fb33 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001912:	2100      	movs	r1, #0
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <MX_USART1_UART_Init+0x90>)
 8001916:	f005 fa9f 	bl	8006e58 <HAL_UARTEx_SetRxFifoThreshold>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001920:	f000 fb2a 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_USART1_UART_Init+0x90>)
 8001926:	f005 fa20 	bl	8006d6a <HAL_UARTEx_DisableFifoMode>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001930:	f000 fb22 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200003b4 	.word	0x200003b4
 800193c:	40013800 	.word	0x40013800

08001940 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 8001946:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <MX_USART3_UART_Init+0x94>)
 8001948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 800194c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001988:	4811      	ldr	r0, [pc, #68]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 800198a:	f004 fc57 	bl	800623c <HAL_UART_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001994:	f000 faf0 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001998:	2100      	movs	r1, #0
 800199a:	480d      	ldr	r0, [pc, #52]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 800199c:	f005 fa1e 	bl	8006ddc <HAL_UARTEx_SetTxFifoThreshold>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019a6:	f000 fae7 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019aa:	2100      	movs	r1, #0
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 80019ae:	f005 fa53 	bl	8006e58 <HAL_UARTEx_SetRxFifoThreshold>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019b8:	f000 fade 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_USART3_UART_Init+0x90>)
 80019be:	f005 f9d4 	bl	8006d6a <HAL_UARTEx_DisableFifoMode>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019c8:	f000 fad6 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000444 	.word	0x20000444
 80019d4:	40004800 	.word	0x40004800

080019d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b09c      	sub	sp, #112	; 0x70
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2234      	movs	r2, #52	; 0x34
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f005 fad6 	bl	8006fc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001a1a:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <MX_TIM1_Init+0x160>)
 8001a1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1699;
 8001a1e:	4b45      	ldr	r3, [pc, #276]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001a20:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001a24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3499;
 8001a2c:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001a2e:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001a32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a34:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a40:	4b3c      	ldr	r3, [pc, #240]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a46:	483b      	ldr	r0, [pc, #236]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001a48:	f002 fc7e 	bl	8004348 <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001a52:	f000 fa91 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a5c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a60:	4619      	mov	r1, r3
 8001a62:	4834      	ldr	r0, [pc, #208]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001a64:	f003 fb1c 	bl	80050a0 <HAL_TIM_ConfigClockSource>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001a6e:	f000 fa83 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a72:	4830      	ldr	r0, [pc, #192]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001a74:	f002 fcbf 	bl	80043f6 <HAL_TIM_PWM_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001a7e:	f000 fa7b 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a92:	4619      	mov	r1, r3
 8001a94:	4827      	ldr	r0, [pc, #156]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001a96:	f004 fa43 	bl	8005f20 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001aa0:	f000 fa6a 	bl	8001f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa4:	2360      	movs	r3, #96	; 0x60
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aac:	2300      	movs	r3, #0
 8001aae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	481a      	ldr	r0, [pc, #104]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001aca:	f003 f9d5 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ad4:	f000 fa50 	bl	8001f78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001afe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001b16:	f004 fa99 	bl	800604c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001b20:	f000 fa2a 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <MX_TIM1_Init+0x15c>)
 8001b26:	f000 fec3 	bl	80028b0 <HAL_TIM_MspPostInit>

}
 8001b2a:	bf00      	nop
 8001b2c:	3770      	adds	r7, #112	; 0x70
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200004d4 	.word	0x200004d4
 8001b38:	40012c00 	.word	0x40012c00

08001b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08e      	sub	sp, #56	; 0x38
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]
 8001b6a:	615a      	str	r2, [r3, #20]
 8001b6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b6e:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001b70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001b76:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001b78:	22a9      	movs	r2, #169	; 0xa9
 8001b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001b82:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001b84:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b96:	482f      	ldr	r0, [pc, #188]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001b98:	f002 fbd6 	bl	8004348 <HAL_TIM_Base_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ba2:	f000 f9e9 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4828      	ldr	r0, [pc, #160]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001bb4:	f003 fa74 	bl	80050a0 <HAL_TIM_ConfigClockSource>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001bbe:	f000 f9db 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bc2:	4824      	ldr	r0, [pc, #144]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001bc4:	f002 fc17 	bl	80043f6 <HAL_TIM_PWM_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001bce:	f000 f9d3 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	481c      	ldr	r0, [pc, #112]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001be2:	f004 f99d 	bl	8005f20 <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001bec:	f000 f9c4 	bl	8001f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf0:	2360      	movs	r3, #96	; 0x60
 8001bf2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001bf4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	4619      	mov	r1, r3
 8001c08:	4812      	ldr	r0, [pc, #72]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001c0a:	f003 f935 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001c14:	f000 f9b0 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001c20:	f003 f92a 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001c2a:	f000 f9a5 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c2e:	463b      	mov	r3, r7
 8001c30:	220c      	movs	r2, #12
 8001c32:	4619      	mov	r1, r3
 8001c34:	4807      	ldr	r0, [pc, #28]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001c36:	f003 f91f 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8001c40:	f000 f99a 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c44:	4803      	ldr	r0, [pc, #12]	; (8001c54 <MX_TIM2_Init+0x118>)
 8001c46:	f000 fe33 	bl	80028b0 <HAL_TIM_MspPostInit>

}
 8001c4a:	bf00      	nop
 8001c4c:	3738      	adds	r7, #56	; 0x38
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000520 	.word	0x20000520

08001c58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	f107 0320 	add.w	r3, r7, #32
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <MX_TIM4_Init+0xdc>)
 8001c86:	4a2c      	ldr	r2, [pc, #176]	; (8001d38 <MX_TIM4_Init+0xe0>)
 8001c88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 33999;
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <MX_TIM4_Init+0xdc>)
 8001c8c:	f248 42cf 	movw	r2, #33999	; 0x84cf
 8001c90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <MX_TIM4_Init+0xdc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <MX_TIM4_Init+0xdc>)
 8001c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <MX_TIM4_Init+0xdc>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <MX_TIM4_Init+0xdc>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cac:	4821      	ldr	r0, [pc, #132]	; (8001d34 <MX_TIM4_Init+0xdc>)
 8001cae:	f002 fb4b 	bl	8004348 <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001cb8:	f000 f95e 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	481a      	ldr	r0, [pc, #104]	; (8001d34 <MX_TIM4_Init+0xdc>)
 8001cca:	f003 f9e9 	bl	80050a0 <HAL_TIM_ConfigClockSource>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001cd4:	f000 f950 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001cd8:	4816      	ldr	r0, [pc, #88]	; (8001d34 <MX_TIM4_Init+0xdc>)
 8001cda:	f002 fcff 	bl	80046dc <HAL_TIM_IC_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001ce4:	f000 f948 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480f      	ldr	r0, [pc, #60]	; (8001d34 <MX_TIM4_Init+0xdc>)
 8001cf8:	f004 f912 	bl	8005f20 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001d02:	f000 f939 	bl	8001f78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001d06:	230a      	movs	r3, #10
 8001d08:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_TIM4_Init+0xdc>)
 8001d1e:	f003 f80e 	bl	8004d3e <HAL_TIM_IC_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001d28:	f000 f926 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	3730      	adds	r7, #48	; 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	2000056c 	.word	0x2000056c
 8001d38:	40000800 	.word	0x40000800

08001d3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0320 	add.w	r3, r7, #32
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001d6a:	4a31      	ldr	r2, [pc, #196]	; (8001e30 <MX_TIM5_Init+0xf4>)
 8001d6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001d70:	22a9      	movs	r2, #169	; 0xa9
 8001d72:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d82:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d88:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d8e:	4827      	ldr	r0, [pc, #156]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001d90:	f002 fada 	bl	8004348 <HAL_TIM_Base_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8001d9a:	f000 f8ed 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	4619      	mov	r1, r3
 8001daa:	4820      	ldr	r0, [pc, #128]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001dac:	f003 f978 	bl	80050a0 <HAL_TIM_ConfigClockSource>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001db6:	f000 f8df 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001dba:	481c      	ldr	r0, [pc, #112]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001dbc:	f002 fc8e 	bl	80046dc <HAL_TIM_IC_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001dc6:	f000 f8d7 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4814      	ldr	r0, [pc, #80]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001dda:	f004 f8a1 	bl	8005f20 <HAL_TIMEx_MasterConfigSynchronization>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001de4:	f000 f8c8 	bl	8001f78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001de8:	230a      	movs	r3, #10
 8001dea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dec:	2301      	movs	r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480b      	ldr	r0, [pc, #44]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001e00:	f002 ff9d 	bl	8004d3e <HAL_TIM_IC_ConfigChannel>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8001e0a:	f000 f8b5 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2204      	movs	r2, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_TIM5_Init+0xf0>)
 8001e16:	f002 ff92 	bl	8004d3e <HAL_TIM_IC_ConfigChannel>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 8001e20:	f000 f8aa 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	3730      	adds	r7, #48	; 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200005b8 	.word	0x200005b8
 8001e30:	40000c00 	.word	0x40000c00

08001e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	4a3e      	ldr	r2, [pc, #248]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e56:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e62:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a38      	ldr	r2, [pc, #224]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001e68:	f043 0320 	orr.w	r3, r3, #32
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	4a32      	ldr	r2, [pc, #200]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e86:	4b30      	ldr	r3, [pc, #192]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a2c      	ldr	r2, [pc, #176]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9e:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eaa:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001eb0:	f043 0308 	orr.w	r3, r3, #8
 8001eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2120      	movs	r1, #32
 8001ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eca:	f001 f9cb 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ldr_Pin|ldg_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2106      	movs	r1, #6
 8001ed2:	481e      	ldr	r0, [pc, #120]	; (8001f4c <MX_GPIO_Init+0x118>)
 8001ed4:	f001 f9c6 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ede:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	4818      	ldr	r0, [pc, #96]	; (8001f50 <MX_GPIO_Init+0x11c>)
 8001ef0:	f001 f836 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0e:	f001 f827 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ldr_Pin ldg_Pin */
  GPIO_InitStruct.Pin = ldr_Pin|ldg_Pin;
 8001f12:	2306      	movs	r3, #6
 8001f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	4808      	ldr	r0, [pc, #32]	; (8001f4c <MX_GPIO_Init+0x118>)
 8001f2a:	f001 f819 	bl	8002f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	2028      	movs	r0, #40	; 0x28
 8001f34:	f000 ffdf 	bl	8002ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f38:	2028      	movs	r0, #40	; 0x28
 8001f3a:	f000 fff6 	bl	8002f2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f3e:	bf00      	nop
 8001f40:	3728      	adds	r7, #40	; 0x28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	48000400 	.word	0x48000400
 8001f50:	48000800 	.word	0x48000800

08001f54 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001f5c:	1d39      	adds	r1, r7, #4
 8001f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f62:	2201      	movs	r2, #1
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <__io_putchar+0x20>)
 8001f66:	f004 f9b9 	bl	80062dc <HAL_UART_Transmit>

  return ch;
 8001f6a:	687b      	ldr	r3, [r7, #4]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000204 	.word	0x20000204

08001f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7c:	b672      	cpsid	i
}
 8001f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <Error_Handler+0x8>

08001f82 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001fb2:	f7fe fdd9 	bl	8000b68 <__aeabi_dcmpgt>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8001fc8:	e011      	b.n	8001fee <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001fd6:	f7fe fda9 	bl	8000b2c <__aeabi_dcmplt>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d100      	bne.n	8001fe2 <PID_Init+0x60>
}
 8001fe0:	e005      	b.n	8001fee <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8002000:	6239      	str	r1, [r7, #32]
 8002002:	61fa      	str	r2, [r7, #28]
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	ed87 0b04 	vstr	d0, [r7, #16]
 800200a:	ed87 1b02 	vstr	d1, [r7, #8]
 800200e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	6a3a      	ldr	r2, [r7, #32]
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	2200      	movs	r2, #0
 8002028:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800202a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002080 <PID+0x88>
 800202e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002088 <PID+0x90>
 8002032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002034:	f000 f84a 	bl	80020cc <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	2264      	movs	r2, #100	; 0x64
 800203c:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800203e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002042:	4619      	mov	r1, r3
 8002044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002046:	f000 f957 	bl	80022f8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800204a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800204e:	4619      	mov	r1, r3
 8002050:	ed97 2b00 	vldr	d2, [r7]
 8002054:	ed97 1b02 	vldr	d1, [r7, #8]
 8002058:	ed97 0b04 	vldr	d0, [r7, #16]
 800205c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800205e:	f000 f8a3 	bl	80021a8 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002062:	f000 fe3f 	bl	8002ce4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	1ad2      	subs	r2, r2, r3
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	605a      	str	r2, [r3, #4]
	
}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	; 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w
 8002080:	00000000 	.word	0x00000000
 8002084:	406fe000 	.word	0x406fe000
	...

08002090 <PID_SetMode>:
	
}

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	bf0c      	ite	eq
 80020a2:	2301      	moveq	r3, #1
 80020a4:	2300      	movne	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <PID_SetMode+0x2e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	785b      	ldrb	r3, [r3, #1]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff62 	bl	8001f82 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	705a      	strb	r2, [r3, #1]
	
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6178      	str	r0, [r7, #20]
 80020d4:	ed87 0b02 	vstr	d0, [r7, #8]
 80020d8:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80020dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020e4:	f7fe fd36 	bl	8000b54 <__aeabi_dcmpge>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d158      	bne.n	80021a0 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80020ee:	6979      	ldr	r1, [r7, #20]
 80020f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020f4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80020f8:	6979      	ldr	r1, [r7, #20]
 80020fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020fe:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	785b      	ldrb	r3, [r3, #1]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d04b      	beq.n	80021a2 <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002118:	f7fe fd26 	bl	8000b68 <__aeabi_dcmpgt>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800212c:	e9c1 2300 	strd	r2, r3, [r1]
 8002130:	e012      	b.n	8002158 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002140:	f7fe fcf4 	bl	8000b2c <__aeabi_dcmplt>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002154:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002164:	f7fe fd00 	bl	8000b68 <__aeabi_dcmpgt>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002174:	6979      	ldr	r1, [r7, #20]
 8002176:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800217a:	e012      	b.n	80021a2 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002188:	f7fe fcd0 	bl	8000b2c <__aeabi_dcmplt>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d007      	beq.n	80021a2 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800219e:	e000      	b.n	80021a2 <PID_SetOutputLimits+0xd6>
		return;
 80021a0:	bf00      	nop
		}
		else { }
		
	}
	
}
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	61f8      	str	r0, [r7, #28]
 80021b0:	ed87 0b04 	vstr	d0, [r7, #16]
 80021b4:	ed87 1b02 	vstr	d1, [r7, #8]
 80021b8:	ed87 2b00 	vstr	d2, [r7]
 80021bc:	460b      	mov	r3, r1
 80021be:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021cc:	f7fe fcae 	bl	8000b2c <__aeabi_dcmplt>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 8089 	bne.w	80022ea <PID_SetTunings2+0x142>
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021e4:	f7fe fca2 	bl	8000b2c <__aeabi_dcmplt>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d17d      	bne.n	80022ea <PID_SetTunings2+0x142>
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021fa:	f7fe fc97 	bl	8000b2c <__aeabi_dcmplt>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d172      	bne.n	80022ea <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	7efa      	ldrb	r2, [r7, #27]
 8002208:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800220a:	7efb      	ldrb	r3, [r7, #27]
 800220c:	2b01      	cmp	r3, #1
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 800221c:	69f9      	ldr	r1, [r7, #28]
 800221e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002222:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002226:	69f9      	ldr	r1, [r7, #28]
 8002228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800222c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002230:	69f9      	ldr	r1, [r7, #28]
 8002232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002236:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f988 	bl	8000554 <__aeabi_ui2d>
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <PID_SetTunings2+0x14c>)
 800224a:	f7fe fb27 	bl	800089c <__aeabi_ddiv>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8002256:	69f9      	ldr	r1, [r7, #28]
 8002258:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800225c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002260:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002264:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002268:	f7fe f9ee 	bl	8000648 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	69f9      	ldr	r1, [r7, #28]
 8002272:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800227a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800227e:	f7fe fb0d 	bl	800089c <__aeabi_ddiv>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	69f9      	ldr	r1, [r7, #28]
 8002288:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	78db      	ldrb	r3, [r3, #3]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d12b      	bne.n	80022ec <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800229a:	f04f 0000 	mov.w	r0, #0
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	f7fe f819 	bl	80002d8 <__aeabi_dsub>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	69f9      	ldr	r1, [r7, #28]
 80022ac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	f7fe f80b 	bl	80002d8 <__aeabi_dsub>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	69f9      	ldr	r1, [r7, #28]
 80022c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80022d2:	f04f 0000 	mov.w	r0, #0
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	f7fd fffd 	bl	80002d8 <__aeabi_dsub>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	69f9      	ldr	r1, [r7, #28]
 80022e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80022e8:	e000      	b.n	80022ec <PID_SetTunings2+0x144>
		return;
 80022ea:	bf00      	nop
		
	}
	
}
 80022ec:	3728      	adds	r7, #40	; 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	408f4000 	.word	0x408f4000

080022f8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	785b      	ldrb	r3, [r3, #1]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02e      	beq.n	800236a <PID_SetControllerDirection+0x72>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	78db      	ldrb	r3, [r3, #3]
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	429a      	cmp	r2, r3
 8002314:	d029      	beq.n	800236a <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800231c:	f04f 0000 	mov.w	r0, #0
 8002320:	f04f 0100 	mov.w	r1, #0
 8002324:	f7fd ffd8 	bl	80002d8 <__aeabi_dsub>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002338:	f04f 0000 	mov.w	r0, #0
 800233c:	f04f 0100 	mov.w	r1, #0
 8002340:	f7fd ffca 	bl	80002d8 <__aeabi_dsub>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002354:	f04f 0000 	mov.w	r0, #0
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	f7fd ffbc 	bl	80002d8 <__aeabi_dsub>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	70da      	strb	r2, [r3, #3]
	
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	dd2e      	ble.n	80023e6 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002388:	6838      	ldr	r0, [r7, #0]
 800238a:	f7fe f8f3 	bl	8000574 <__aeabi_i2d>
 800238e:	4604      	mov	r4, r0
 8002390:	460d      	mov	r5, r1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f8dc 	bl	8000554 <__aeabi_ui2d>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4620      	mov	r0, r4
 80023a2:	4629      	mov	r1, r5
 80023a4:	f7fe fa7a 	bl	800089c <__aeabi_ddiv>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80023b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ba:	f7fe f945 	bl	8000648 <__aeabi_dmul>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80023ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023d2:	f7fe fa63 	bl	800089c <__aeabi_ddiv>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	609a      	str	r2, [r3, #8]
		
	}
	
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080023f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f6:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <HAL_MspInit+0x44>)
 80023f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fa:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <HAL_MspInit+0x44>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6613      	str	r3, [r2, #96]	; 0x60
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <HAL_MspInit+0x44>)
 8002404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_MspInit+0x44>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	4a08      	ldr	r2, [pc, #32]	; (8002434 <HAL_MspInit+0x44>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	6593      	str	r3, [r2, #88]	; 0x58
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_MspInit+0x44>)
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002426:	f000 fffd 	bl	8003424 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000

08002438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0a8      	sub	sp, #160	; 0xa0
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002450:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002454:	2254      	movs	r2, #84	; 0x54
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fdb3 	bl	8006fc4 <memset>
  if(huart->Instance==LPUART1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4ab5      	ldr	r2, [pc, #724]	; (8002738 <HAL_UART_MspInit+0x300>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d13c      	bne.n	80024e2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002468:	2320      	movs	r3, #32
 800246a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800246c:	2300      	movs	r3, #0
 800246e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002470:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002474:	4618      	mov	r0, r3
 8002476:	f001 fd19 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002480:	f7ff fd7a 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002484:	4bad      	ldr	r3, [pc, #692]	; (800273c <HAL_UART_MspInit+0x304>)
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	4aac      	ldr	r2, [pc, #688]	; (800273c <HAL_UART_MspInit+0x304>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002490:	4baa      	ldr	r3, [pc, #680]	; (800273c <HAL_UART_MspInit+0x304>)
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
 800249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249c:	4ba7      	ldr	r3, [pc, #668]	; (800273c <HAL_UART_MspInit+0x304>)
 800249e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a0:	4aa6      	ldr	r2, [pc, #664]	; (800273c <HAL_UART_MspInit+0x304>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a8:	4ba4      	ldr	r3, [pc, #656]	; (800273c <HAL_UART_MspInit+0x304>)
 80024aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80024b4:	230c      	movs	r3, #12
 80024b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80024cc:	230c      	movs	r3, #12
 80024ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024d6:	4619      	mov	r1, r3
 80024d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024dc:	f000 fd40 	bl	8002f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024e0:	e126      	b.n	8002730 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==UART4)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a96      	ldr	r2, [pc, #600]	; (8002740 <HAL_UART_MspInit+0x308>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d13c      	bne.n	8002566 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80024ec:	2308      	movs	r3, #8
 80024ee:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80024f0:	2300      	movs	r3, #0
 80024f2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024f8:	4618      	mov	r0, r3
 80024fa:	f001 fcd7 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002504:	f7ff fd38 	bl	8001f78 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002508:	4b8c      	ldr	r3, [pc, #560]	; (800273c <HAL_UART_MspInit+0x304>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	4a8b      	ldr	r2, [pc, #556]	; (800273c <HAL_UART_MspInit+0x304>)
 800250e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002512:	6593      	str	r3, [r2, #88]	; 0x58
 8002514:	4b89      	ldr	r3, [pc, #548]	; (800273c <HAL_UART_MspInit+0x304>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002520:	4b86      	ldr	r3, [pc, #536]	; (800273c <HAL_UART_MspInit+0x304>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002524:	4a85      	ldr	r2, [pc, #532]	; (800273c <HAL_UART_MspInit+0x304>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800252c:	4b83      	ldr	r3, [pc, #524]	; (800273c <HAL_UART_MspInit+0x304>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002538:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800253c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002552:	2305      	movs	r3, #5
 8002554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002558:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800255c:	4619      	mov	r1, r3
 800255e:	4879      	ldr	r0, [pc, #484]	; (8002744 <HAL_UART_MspInit+0x30c>)
 8002560:	f000 fcfe 	bl	8002f60 <HAL_GPIO_Init>
}
 8002564:	e0e4      	b.n	8002730 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==UART5)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a77      	ldr	r2, [pc, #476]	; (8002748 <HAL_UART_MspInit+0x310>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d15d      	bne.n	800262c <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002570:	2310      	movs	r3, #16
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002574:	2300      	movs	r3, #0
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002578:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800257c:	4618      	mov	r0, r3
 800257e:	f001 fc95 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_UART_MspInit+0x154>
      Error_Handler();
 8002588:	f7ff fcf6 	bl	8001f78 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800258c:	4b6b      	ldr	r3, [pc, #428]	; (800273c <HAL_UART_MspInit+0x304>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	4a6a      	ldr	r2, [pc, #424]	; (800273c <HAL_UART_MspInit+0x304>)
 8002592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002596:	6593      	str	r3, [r2, #88]	; 0x58
 8002598:	4b68      	ldr	r3, [pc, #416]	; (800273c <HAL_UART_MspInit+0x304>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a4:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_UART_MspInit+0x304>)
 80025a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a8:	4a64      	ldr	r2, [pc, #400]	; (800273c <HAL_UART_MspInit+0x304>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b0:	4b62      	ldr	r3, [pc, #392]	; (800273c <HAL_UART_MspInit+0x304>)
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	623b      	str	r3, [r7, #32]
 80025ba:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025bc:	4b5f      	ldr	r3, [pc, #380]	; (800273c <HAL_UART_MspInit+0x304>)
 80025be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c0:	4a5e      	ldr	r2, [pc, #376]	; (800273c <HAL_UART_MspInit+0x304>)
 80025c2:	f043 0308 	orr.w	r3, r3, #8
 80025c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c8:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_UART_MspInit+0x304>)
 80025ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80025ee:	2305      	movs	r3, #5
 80025f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80025f8:	4619      	mov	r1, r3
 80025fa:	4852      	ldr	r0, [pc, #328]	; (8002744 <HAL_UART_MspInit+0x30c>)
 80025fc:	f000 fcb0 	bl	8002f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002600:	2304      	movs	r3, #4
 8002602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002618:	2305      	movs	r3, #5
 800261a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800261e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002622:	4619      	mov	r1, r3
 8002624:	4849      	ldr	r0, [pc, #292]	; (800274c <HAL_UART_MspInit+0x314>)
 8002626:	f000 fc9b 	bl	8002f60 <HAL_GPIO_Init>
}
 800262a:	e081      	b.n	8002730 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==USART1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a47      	ldr	r2, [pc, #284]	; (8002750 <HAL_UART_MspInit+0x318>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d13b      	bne.n	80026ae <HAL_UART_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002636:	2301      	movs	r3, #1
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800263a:	2300      	movs	r3, #0
 800263c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800263e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002642:	4618      	mov	r0, r3
 8002644:	f001 fc32 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 800264e:	f7ff fc93 	bl	8001f78 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002652:	4b3a      	ldr	r3, [pc, #232]	; (800273c <HAL_UART_MspInit+0x304>)
 8002654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002656:	4a39      	ldr	r2, [pc, #228]	; (800273c <HAL_UART_MspInit+0x304>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265c:	6613      	str	r3, [r2, #96]	; 0x60
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_UART_MspInit+0x304>)
 8002660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	4b34      	ldr	r3, [pc, #208]	; (800273c <HAL_UART_MspInit+0x304>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	4a33      	ldr	r2, [pc, #204]	; (800273c <HAL_UART_MspInit+0x304>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_UART_MspInit+0x304>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002682:	2330      	movs	r3, #48	; 0x30
 8002684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800269a:	2307      	movs	r3, #7
 800269c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80026a4:	4619      	mov	r1, r3
 80026a6:	4827      	ldr	r0, [pc, #156]	; (8002744 <HAL_UART_MspInit+0x30c>)
 80026a8:	f000 fc5a 	bl	8002f60 <HAL_GPIO_Init>
}
 80026ac:	e040      	b.n	8002730 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==USART3)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a28      	ldr	r2, [pc, #160]	; (8002754 <HAL_UART_MspInit+0x31c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d13b      	bne.n	8002730 <HAL_UART_MspInit+0x2f8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026b8:	2304      	movs	r3, #4
 80026ba:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026bc:	2300      	movs	r3, #0
 80026be:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026c4:	4618      	mov	r0, r3
 80026c6:	f001 fbf1 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_UART_MspInit+0x29c>
      Error_Handler();
 80026d0:	f7ff fc52 	bl	8001f78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_UART_MspInit+0x304>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_UART_MspInit+0x304>)
 80026da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026de:	6593      	str	r3, [r2, #88]	; 0x58
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_UART_MspInit+0x304>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_UART_MspInit+0x304>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	4a12      	ldr	r2, [pc, #72]	; (800273c <HAL_UART_MspInit+0x304>)
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_UART_MspInit+0x304>)
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002704:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800271e:	2307      	movs	r3, #7
 8002720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002724:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002728:	4619      	mov	r1, r3
 800272a:	480b      	ldr	r0, [pc, #44]	; (8002758 <HAL_UART_MspInit+0x320>)
 800272c:	f000 fc18 	bl	8002f60 <HAL_GPIO_Init>
}
 8002730:	bf00      	nop
 8002732:	37a0      	adds	r7, #160	; 0xa0
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40008000 	.word	0x40008000
 800273c:	40021000 	.word	0x40021000
 8002740:	40004c00 	.word	0x40004c00
 8002744:	48000800 	.word	0x48000800
 8002748:	40005000 	.word	0x40005000
 800274c:	48000c00 	.word	0x48000c00
 8002750:	40013800 	.word	0x40013800
 8002754:	40004800 	.word	0x40004800
 8002758:	48000400 	.word	0x48000400

0800275c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08e      	sub	sp, #56	; 0x38
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a49      	ldr	r2, [pc, #292]	; (80028a0 <HAL_TIM_Base_MspInit+0x144>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10c      	bne.n	8002798 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277e:	4b49      	ldr	r3, [pc, #292]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	4a48      	ldr	r2, [pc, #288]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 8002784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002788:	6613      	str	r3, [r2, #96]	; 0x60
 800278a:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 800278c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002796:	e07f      	b.n	8002898 <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d10c      	bne.n	80027bc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a2:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	4a3f      	ldr	r2, [pc, #252]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6593      	str	r3, [r2, #88]	; 0x58
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	69fb      	ldr	r3, [r7, #28]
}
 80027ba:	e06d      	b.n	8002898 <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM4)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a39      	ldr	r2, [pc, #228]	; (80028a8 <HAL_TIM_Base_MspInit+0x14c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d132      	bne.n	800282c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027c6:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	4a36      	ldr	r2, [pc, #216]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6593      	str	r3, [r2, #88]	; 0x58
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4a30      	ldr	r2, [pc, #192]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ea:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002808:	230a      	movs	r3, #10
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002810:	4619      	mov	r1, r3
 8002812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002816:	f000 fba3 	bl	8002f60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	201e      	movs	r0, #30
 8002820:	f000 fb69 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002824:	201e      	movs	r0, #30
 8002826:	f000 fb80 	bl	8002f2a <HAL_NVIC_EnableIRQ>
}
 800282a:	e035      	b.n	8002898 <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM5)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_TIM_Base_MspInit+0x150>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d130      	bne.n	8002898 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	6593      	str	r3, [r2, #88]	; 0x58
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_TIM_Base_MspInit+0x148>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ul_Pin|ur_Pin;
 8002866:	2303      	movs	r3, #3
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002876:	2302      	movs	r3, #2
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287e:	4619      	mov	r1, r3
 8002880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002884:	f000 fb6c 	bl	8002f60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	2032      	movs	r0, #50	; 0x32
 800288e:	f000 fb32 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002892:	2032      	movs	r0, #50	; 0x32
 8002894:	f000 fb49 	bl	8002f2a <HAL_NVIC_EnableIRQ>
}
 8002898:	bf00      	nop
 800289a:	3738      	adds	r7, #56	; 0x38
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40000c00 	.word	0x40000c00

080028b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2c      	ldr	r2, [pc, #176]	; (8002980 <HAL_TIM_MspPostInit+0xd0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11c      	bne.n	800290c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d2:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <HAL_TIM_MspPostInit+0xd4>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	4a2b      	ldr	r2, [pc, #172]	; (8002984 <HAL_TIM_MspPostInit+0xd4>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028de:	4b29      	ldr	r3, [pc, #164]	; (8002984 <HAL_TIM_MspPostInit+0xd4>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = uen_Pin;
 80028ea:	2301      	movs	r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80028fa:	2302      	movs	r3, #2
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uen_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4619      	mov	r1, r3
 8002904:	4820      	ldr	r0, [pc, #128]	; (8002988 <HAL_TIM_MspPostInit+0xd8>)
 8002906:	f000 fb2b 	bl	8002f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800290a:	e034      	b.n	8002976 <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d12f      	bne.n	8002976 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_TIM_MspPostInit+0xd4>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a1a      	ldr	r2, [pc, #104]	; (8002984 <HAL_TIM_MspPostInit+0xd4>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002922:	4b18      	ldr	r3, [pc, #96]	; (8002984 <HAL_TIM_MspPostInit+0xd4>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800292e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8002940:	230a      	movs	r3, #10
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	4619      	mov	r1, r3
 800294a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294e:	f000 fb07 	bl	8002f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002964:	2301      	movs	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002972:	f000 faf5 	bl	8002f60 <HAL_GPIO_Init>
}
 8002976:	bf00      	nop
 8002978:	3728      	adds	r7, #40	; 0x28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40021000 	.word	0x40021000
 8002988:	48000800 	.word	0x48000800

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <NMI_Handler+0x4>

08002992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <HardFault_Handler+0x4>

08002998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800299c:	e7fe      	b.n	800299c <MemManage_Handler+0x4>

0800299e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <BusFault_Handler+0x4>

080029a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <UsageFault_Handler+0x4>

080029aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029d8:	f000 f972 	bl	8002cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}

080029e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <TIM4_IRQHandler+0x10>)
 80029e6:	f002 f82b 	bl	8004a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000056c 	.word	0x2000056c

080029f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80029f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029fc:	f000 fc4a 	bl	8003294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <TIM5_IRQHandler+0x10>)
 8002a0a:	f002 f819 	bl	8004a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200005b8 	.word	0x200005b8

08002a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return 1;
 8002a1c:	2301      	movs	r3, #1
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_kill>:

int _kill(int pid, int sig)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a32:	f004 fa9d 	bl	8006f70 <__errno>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2216      	movs	r2, #22
 8002a3a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_exit>:

void _exit (int status)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ffe7 	bl	8002a28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a5a:	e7fe      	b.n	8002a5a <_exit+0x12>

08002a5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e00a      	b.n	8002a84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a6e:	f3af 8000 	nop.w
 8002a72:	4601      	mov	r1, r0
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	60ba      	str	r2, [r7, #8]
 8002a7a:	b2ca      	uxtb	r2, r1
 8002a7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dbf0      	blt.n	8002a6e <_read+0x12>
  }

  return len;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e009      	b.n	8002abc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	60ba      	str	r2, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fa4f 	bl	8001f54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	dbf1      	blt.n	8002aa8 <_write+0x12>
  }
  return len;
 8002ac4:	687b      	ldr	r3, [r7, #4]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_close>:

int _close(int file)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af6:	605a      	str	r2, [r3, #4]
  return 0;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_isatty>:

int _isatty(int file)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b0e:	2301      	movs	r3, #1
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <_sbrk+0x5c>)
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <_sbrk+0x60>)
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <_sbrk+0x64>)
 8002b56:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <_sbrk+0x68>)
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <_sbrk+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d207      	bcs.n	8002b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b68:	f004 fa02 	bl	8006f70 <__errno>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	220c      	movs	r2, #12
 8002b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	e009      	b.n	8002b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <_sbrk+0x64>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <_sbrk+0x64>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <_sbrk+0x64>)
 8002b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20020000 	.word	0x20020000
 8002b98:	00000400 	.word	0x00000400
 8002b9c:	20000870 	.word	0x20000870
 8002ba0:	20000888 	.word	0x20000888

08002ba4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <SystemInit+0x20>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <SystemInit+0x20>)
 8002bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bc8:	480d      	ldr	r0, [pc, #52]	; (8002c00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bce:	490e      	ldr	r1, [pc, #56]	; (8002c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bd0:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <LoopForever+0xe>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002bd4:	e002      	b.n	8002bdc <LoopCopyDataInit>

08002bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bda:	3304      	adds	r3, #4

08002bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be0:	d3f9      	bcc.n	8002bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be2:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002be4:	4c0b      	ldr	r4, [pc, #44]	; (8002c14 <LoopForever+0x16>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be8:	e001      	b.n	8002bee <LoopFillZerobss>

08002bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bec:	3204      	adds	r2, #4

08002bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf0:	d3fb      	bcc.n	8002bea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bf2:	f7ff ffd7 	bl	8002ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bf6:	f004 f9c1 	bl	8006f7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bfa:	f7fe fbcd 	bl	8001398 <main>

08002bfe <LoopForever>:

LoopForever:
    b LoopForever
 8002bfe:	e7fe      	b.n	8002bfe <LoopForever>
  ldr   r0, =_estack
 8002c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c08:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002c0c:	0800a154 	.word	0x0800a154
  ldr r2, =_sbss
 8002c10:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002c14:	20000888 	.word	0x20000888

08002c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c18:	e7fe      	b.n	8002c18 <ADC1_2_IRQHandler>

08002c1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c24:	2003      	movs	r0, #3
 8002c26:	f000 f95b 	bl	8002ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f000 f80e 	bl	8002c4c <HAL_InitTick>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	71fb      	strb	r3, [r7, #7]
 8002c3a:	e001      	b.n	8002c40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c3c:	f7ff fbd8 	bl	80023f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c40:	79fb      	ldrb	r3, [r7, #7]

}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_InitTick+0x68>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d022      	beq.n	8002ca6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_InitTick+0x6c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_InitTick+0x68>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f966 	bl	8002f46 <HAL_SYSTICK_Config>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	d809      	bhi.n	8002c9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c86:	2200      	movs	r2, #0
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8e:	f000 f932 	bl	8002ef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_InitTick+0x70>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	e007      	b.n	8002caa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	e004      	b.n	8002caa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
 8002ca4:	e001      	b.n	8002caa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000010 	.word	0x20000010
 8002cb8:	20000008 	.word	0x20000008
 8002cbc:	2000000c 	.word	0x2000000c

08002cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_IncTick+0x1c>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_IncTick+0x20>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4413      	add	r3, r2
 8002cce:	4a03      	ldr	r2, [pc, #12]	; (8002cdc <HAL_IncTick+0x1c>)
 8002cd0:	6013      	str	r3, [r2, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	20000874 	.word	0x20000874
 8002ce0:	20000010 	.word	0x20000010

08002ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_GetTick+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000874 	.word	0x20000874

08002cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff ffee 	bl	8002ce4 <HAL_GetTick>
 8002d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d004      	beq.n	8002d20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_Delay+0x40>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d20:	bf00      	nop
 8002d22:	f7ff ffdf 	bl	8002ce4 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d8f7      	bhi.n	8002d22 <HAL_Delay+0x26>
  {
  }
}
 8002d32:	bf00      	nop
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000010 	.word	0x20000010

08002d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d72:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	60d3      	str	r3, [r2, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 0307 	and.w	r3, r3, #7
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	db0b      	blt.n	8002dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	f003 021f 	and.w	r2, r3, #31
 8002dbc:	4907      	ldr	r1, [pc, #28]	; (8002ddc <__NVIC_EnableIRQ+0x38>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	e000e100 	.word	0xe000e100

08002de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	db0a      	blt.n	8002e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	490c      	ldr	r1, [pc, #48]	; (8002e2c <__NVIC_SetPriority+0x4c>)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	0112      	lsls	r2, r2, #4
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	440b      	add	r3, r1
 8002e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e08:	e00a      	b.n	8002e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4908      	ldr	r1, [pc, #32]	; (8002e30 <__NVIC_SetPriority+0x50>)
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	3b04      	subs	r3, #4
 8002e18:	0112      	lsls	r2, r2, #4
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	761a      	strb	r2, [r3, #24]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e100 	.word	0xe000e100
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b089      	sub	sp, #36	; 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f1c3 0307 	rsb	r3, r3, #7
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	bf28      	it	cs
 8002e52:	2304      	movcs	r3, #4
 8002e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d902      	bls.n	8002e64 <NVIC_EncodePriority+0x30>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3b03      	subs	r3, #3
 8002e62:	e000      	b.n	8002e66 <NVIC_EncodePriority+0x32>
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	f04f 32ff 	mov.w	r2, #4294967295
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	401a      	ands	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	43d9      	mvns	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	4313      	orrs	r3, r2
         );
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3724      	adds	r7, #36	; 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eac:	d301      	bcc.n	8002eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e00f      	b.n	8002ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <SysTick_Config+0x40>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eba:	210f      	movs	r1, #15
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	f7ff ff8e 	bl	8002de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <SysTick_Config+0x40>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <SysTick_Config+0x40>)
 8002ecc:	2207      	movs	r2, #7
 8002ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	e000e010 	.word	0xe000e010

08002ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ff29 	bl	8002d40 <__NVIC_SetPriorityGrouping>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f04:	f7ff ff40 	bl	8002d88 <__NVIC_GetPriorityGrouping>
 8002f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	6978      	ldr	r0, [r7, #20]
 8002f10:	f7ff ff90 	bl	8002e34 <NVIC_EncodePriority>
 8002f14:	4602      	mov	r2, r0
 8002f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff5f 	bl	8002de0 <__NVIC_SetPriority>
}
 8002f22:	bf00      	nop
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff33 	bl	8002da4 <__NVIC_EnableIRQ>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ffa4 	bl	8002e9c <SysTick_Config>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f6e:	e15a      	b.n	8003226 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 814c 	beq.w	8003220 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d005      	beq.n	8002fa0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d130      	bne.n	8003002 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	2203      	movs	r2, #3
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	f003 0201 	and.w	r2, r3, #1
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b03      	cmp	r3, #3
 800300c:	d017      	beq.n	800303e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	2203      	movs	r2, #3
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d123      	bne.n	8003092 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	08da      	lsrs	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3208      	adds	r2, #8
 8003052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	220f      	movs	r2, #15
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	08da      	lsrs	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3208      	adds	r2, #8
 800308c:	6939      	ldr	r1, [r7, #16]
 800308e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2203      	movs	r2, #3
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0203 	and.w	r2, r3, #3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80a6 	beq.w	8003220 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d4:	4b5b      	ldr	r3, [pc, #364]	; (8003244 <HAL_GPIO_Init+0x2e4>)
 80030d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d8:	4a5a      	ldr	r2, [pc, #360]	; (8003244 <HAL_GPIO_Init+0x2e4>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6613      	str	r3, [r2, #96]	; 0x60
 80030e0:	4b58      	ldr	r3, [pc, #352]	; (8003244 <HAL_GPIO_Init+0x2e4>)
 80030e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ec:	4a56      	ldr	r2, [pc, #344]	; (8003248 <HAL_GPIO_Init+0x2e8>)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	220f      	movs	r2, #15
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003116:	d01f      	beq.n	8003158 <HAL_GPIO_Init+0x1f8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a4c      	ldr	r2, [pc, #304]	; (800324c <HAL_GPIO_Init+0x2ec>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d019      	beq.n	8003154 <HAL_GPIO_Init+0x1f4>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a4b      	ldr	r2, [pc, #300]	; (8003250 <HAL_GPIO_Init+0x2f0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d013      	beq.n	8003150 <HAL_GPIO_Init+0x1f0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a4a      	ldr	r2, [pc, #296]	; (8003254 <HAL_GPIO_Init+0x2f4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00d      	beq.n	800314c <HAL_GPIO_Init+0x1ec>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a49      	ldr	r2, [pc, #292]	; (8003258 <HAL_GPIO_Init+0x2f8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d007      	beq.n	8003148 <HAL_GPIO_Init+0x1e8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a48      	ldr	r2, [pc, #288]	; (800325c <HAL_GPIO_Init+0x2fc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <HAL_GPIO_Init+0x1e4>
 8003140:	2305      	movs	r3, #5
 8003142:	e00a      	b.n	800315a <HAL_GPIO_Init+0x1fa>
 8003144:	2306      	movs	r3, #6
 8003146:	e008      	b.n	800315a <HAL_GPIO_Init+0x1fa>
 8003148:	2304      	movs	r3, #4
 800314a:	e006      	b.n	800315a <HAL_GPIO_Init+0x1fa>
 800314c:	2303      	movs	r3, #3
 800314e:	e004      	b.n	800315a <HAL_GPIO_Init+0x1fa>
 8003150:	2302      	movs	r3, #2
 8003152:	e002      	b.n	800315a <HAL_GPIO_Init+0x1fa>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <HAL_GPIO_Init+0x1fa>
 8003158:	2300      	movs	r3, #0
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	f002 0203 	and.w	r2, r2, #3
 8003160:	0092      	lsls	r2, r2, #2
 8003162:	4093      	lsls	r3, r2
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800316a:	4937      	ldr	r1, [pc, #220]	; (8003248 <HAL_GPIO_Init+0x2e8>)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3302      	adds	r3, #2
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003178:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_GPIO_Init+0x300>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	43db      	mvns	r3, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800319c:	4a30      	ldr	r2, [pc, #192]	; (8003260 <HAL_GPIO_Init+0x300>)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <HAL_GPIO_Init+0x300>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4013      	ands	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031c6:	4a26      	ldr	r2, [pc, #152]	; (8003260 <HAL_GPIO_Init+0x300>)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031cc:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_GPIO_Init+0x300>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031f0:	4a1b      	ldr	r2, [pc, #108]	; (8003260 <HAL_GPIO_Init+0x300>)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031f6:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <HAL_GPIO_Init+0x300>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	43db      	mvns	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800321a:	4a11      	ldr	r2, [pc, #68]	; (8003260 <HAL_GPIO_Init+0x300>)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3301      	adds	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	f47f ae9d 	bne.w	8002f70 <HAL_GPIO_Init+0x10>
  }
}
 8003236:	bf00      	nop
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40021000 	.word	0x40021000
 8003248:	40010000 	.word	0x40010000
 800324c:	48000400 	.word	0x48000400
 8003250:	48000800 	.word	0x48000800
 8003254:	48000c00 	.word	0x48000c00
 8003258:	48001000 	.word	0x48001000
 800325c:	48001400 	.word	0x48001400
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003280:	e002      	b.n	8003288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d006      	beq.n	80032b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032aa:	4a05      	ldr	r2, [pc, #20]	; (80032c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f806 	bl	80032c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40010400 	.word	0x40010400

080032c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d141      	bne.n	800336e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ea:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f6:	d131      	bne.n	800335c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f8:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fe:	4a46      	ldr	r2, [pc, #280]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003308:	4b43      	ldr	r3, [pc, #268]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003310:	4a41      	ldr	r2, [pc, #260]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003318:	4b40      	ldr	r3, [pc, #256]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2232      	movs	r2, #50	; 0x32
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	4a3f      	ldr	r2, [pc, #252]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	0c9b      	lsrs	r3, r3, #18
 800332a:	3301      	adds	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332e:	e002      	b.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3b01      	subs	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d102      	bne.n	800334a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f2      	bne.n	8003330 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800334a:	4b33      	ldr	r3, [pc, #204]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003356:	d158      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e057      	b.n	800340c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800335c:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003362:	4a2d      	ldr	r2, [pc, #180]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800336c:	e04d      	b.n	800340a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003374:	d141      	bne.n	80033fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003376:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003382:	d131      	bne.n	80033e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003384:	4b24      	ldr	r3, [pc, #144]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800338a:	4a23      	ldr	r2, [pc, #140]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003394:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800339c:	4a1e      	ldr	r2, [pc, #120]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2232      	movs	r2, #50	; 0x32
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	0c9b      	lsrs	r3, r3, #18
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ba:	e002      	b.n	80033c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3b01      	subs	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ce:	d102      	bne.n	80033d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f2      	bne.n	80033bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e2:	d112      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e011      	b.n	800340c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ee:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033f8:	e007      	b.n	800340a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003402:	4a05      	ldr	r2, [pc, #20]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003404:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003408:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40007000 	.word	0x40007000
 800341c:	20000008 	.word	0x20000008
 8003420:	431bde83 	.word	0x431bde83

08003424 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a04      	ldr	r2, [pc, #16]	; (8003440 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800342e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003432:	6093      	str	r3, [r2, #8]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40007000 	.word	0x40007000

08003444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e306      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d075      	beq.n	800354e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003462:	4b97      	ldr	r3, [pc, #604]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346c:	4b94      	ldr	r3, [pc, #592]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b0c      	cmp	r3, #12
 800347a:	d102      	bne.n	8003482 <HAL_RCC_OscConfig+0x3e>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d002      	beq.n	8003488 <HAL_RCC_OscConfig+0x44>
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d10b      	bne.n	80034a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	4b8d      	ldr	r3, [pc, #564]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05b      	beq.n	800354c <HAL_RCC_OscConfig+0x108>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d157      	bne.n	800354c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e2e1      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d106      	bne.n	80034b8 <HAL_RCC_OscConfig+0x74>
 80034aa:	4b85      	ldr	r3, [pc, #532]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a84      	ldr	r2, [pc, #528]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e01d      	b.n	80034f4 <HAL_RCC_OscConfig+0xb0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x98>
 80034c2:	4b7f      	ldr	r3, [pc, #508]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a7e      	ldr	r2, [pc, #504]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80034c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b7c      	ldr	r3, [pc, #496]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7b      	ldr	r2, [pc, #492]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e00b      	b.n	80034f4 <HAL_RCC_OscConfig+0xb0>
 80034dc:	4b78      	ldr	r3, [pc, #480]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a77      	ldr	r2, [pc, #476]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80034e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b75      	ldr	r3, [pc, #468]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a74      	ldr	r2, [pc, #464]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80034ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7ff fbf2 	bl	8002ce4 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003504:	f7ff fbee 	bl	8002ce4 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	; 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e2a6      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003516:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0xc0>
 8003522:	e014      	b.n	800354e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7ff fbde 	bl	8002ce4 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800352c:	f7ff fbda 	bl	8002ce4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e292      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800353e:	4b60      	ldr	r3, [pc, #384]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0xe8>
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d075      	beq.n	8003646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355a:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003564:	4b56      	ldr	r3, [pc, #344]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	d102      	bne.n	800357a <HAL_RCC_OscConfig+0x136>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d002      	beq.n	8003580 <HAL_RCC_OscConfig+0x13c>
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d11f      	bne.n	80035c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003580:	4b4f      	ldr	r3, [pc, #316]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_OscConfig+0x154>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e265      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003598:	4b49      	ldr	r3, [pc, #292]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	4946      	ldr	r1, [pc, #280]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035ac:	4b45      	ldr	r3, [pc, #276]	; (80036c4 <HAL_RCC_OscConfig+0x280>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fb4b 	bl	8002c4c <HAL_InitTick>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d043      	beq.n	8003644 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e251      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d023      	beq.n	8003610 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c8:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3c      	ldr	r2, [pc, #240]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80035ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7ff fb86 	bl	8002ce4 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035dc:	f7ff fb82 	bl	8002ce4 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e23a      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ee:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fa:	4b31      	ldr	r3, [pc, #196]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	061b      	lsls	r3, r3, #24
 8003608:	492d      	ldr	r1, [pc, #180]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
 800360e:	e01a      	b.n	8003646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 8003616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7ff fb62 	bl	8002ce4 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003624:	f7ff fb5e 	bl	8002ce4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e216      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x1e0>
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003644:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d041      	beq.n	80036d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01c      	beq.n	8003694 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365a:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 800365c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003660:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7ff fb3b 	bl	8002ce4 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003672:	f7ff fb37 	bl	8002ce4 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1ef      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003684:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 8003686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0ef      	beq.n	8003672 <HAL_RCC_OscConfig+0x22e>
 8003692:	e020      	b.n	80036d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 8003696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_RCC_OscConfig+0x27c>)
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7ff fb1e 	bl	8002ce4 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036aa:	e00d      	b.n	80036c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ac:	f7ff fb1a 	bl	8002ce4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d906      	bls.n	80036c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e1d2      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
 80036c4:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036c8:	4b8c      	ldr	r3, [pc, #560]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 80036ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ea      	bne.n	80036ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80a6 	beq.w	8003830 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036e8:	4b84      	ldr	r3, [pc, #528]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_OscConfig+0x2b4>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <HAL_RCC_OscConfig+0x2b6>
 80036f8:	2300      	movs	r3, #0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00d      	beq.n	800371a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	4b7f      	ldr	r3, [pc, #508]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	4a7e      	ldr	r2, [pc, #504]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
 800370a:	4b7c      	ldr	r3, [pc, #496]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003716:	2301      	movs	r3, #1
 8003718:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371a:	4b79      	ldr	r3, [pc, #484]	; (8003900 <HAL_RCC_OscConfig+0x4bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d118      	bne.n	8003758 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003726:	4b76      	ldr	r3, [pc, #472]	; (8003900 <HAL_RCC_OscConfig+0x4bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a75      	ldr	r2, [pc, #468]	; (8003900 <HAL_RCC_OscConfig+0x4bc>)
 800372c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003732:	f7ff fad7 	bl	8002ce4 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373a:	f7ff fad3 	bl	8002ce4 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e18b      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800374c:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <HAL_RCC_OscConfig+0x4bc>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d108      	bne.n	8003772 <HAL_RCC_OscConfig+0x32e>
 8003760:	4b66      	ldr	r3, [pc, #408]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	4a65      	ldr	r2, [pc, #404]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003770:	e024      	b.n	80037bc <HAL_RCC_OscConfig+0x378>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b05      	cmp	r3, #5
 8003778:	d110      	bne.n	800379c <HAL_RCC_OscConfig+0x358>
 800377a:	4b60      	ldr	r3, [pc, #384]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	4a5e      	ldr	r2, [pc, #376]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003782:	f043 0304 	orr.w	r3, r3, #4
 8003786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800378a:	4b5c      	ldr	r3, [pc, #368]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	4a5a      	ldr	r2, [pc, #360]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800379a:	e00f      	b.n	80037bc <HAL_RCC_OscConfig+0x378>
 800379c:	4b57      	ldr	r3, [pc, #348]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	4a56      	ldr	r2, [pc, #344]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d016      	beq.n	80037f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7ff fa8e 	bl	8002ce4 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7ff fa8a 	bl	8002ce4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e140      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e2:	4b46      	ldr	r3, [pc, #280]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0ed      	beq.n	80037cc <HAL_RCC_OscConfig+0x388>
 80037f0:	e015      	b.n	800381e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7ff fa77 	bl	8002ce4 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037f8:	e00a      	b.n	8003810 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fa:	f7ff fa73 	bl	8002ce4 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f241 3288 	movw	r2, #5000	; 0x1388
 8003808:	4293      	cmp	r3, r2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e129      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003810:	4b3a      	ldr	r3, [pc, #232]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ed      	bne.n	80037fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800381e:	7ffb      	ldrb	r3, [r7, #31]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d105      	bne.n	8003830 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003824:	4b35      	ldr	r3, [pc, #212]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	4a34      	ldr	r2, [pc, #208]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 800382a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d03c      	beq.n	80038b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01c      	beq.n	800387e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003844:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800384a:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7ff fa46 	bl	8002ce4 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800385c:	f7ff fa42 	bl	8002ce4 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0fa      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800386e:	4b23      	ldr	r3, [pc, #140]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003870:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ef      	beq.n	800385c <HAL_RCC_OscConfig+0x418>
 800387c:	e01b      	b.n	80038b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800387e:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003880:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003884:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7ff fa29 	bl	8002ce4 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003896:	f7ff fa25 	bl	8002ce4 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e0dd      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038a8:	4b14      	ldr	r3, [pc, #80]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 80038aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ef      	bne.n	8003896 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80d1 	beq.w	8003a62 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038c0:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b0c      	cmp	r3, #12
 80038ca:	f000 808b 	beq.w	80039e4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d15e      	bne.n	8003994 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a08      	ldr	r2, [pc, #32]	; (80038fc <HAL_RCC_OscConfig+0x4b8>)
 80038dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7ff f9ff 	bl	8002ce4 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e8:	e00c      	b.n	8003904 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ea:	f7ff f9fb 	bl	8002ce4 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d905      	bls.n	8003904 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e0b3      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
 80038fc:	40021000 	.word	0x40021000
 8003900:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003904:	4b59      	ldr	r3, [pc, #356]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1ec      	bne.n	80038ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003910:	4b56      	ldr	r3, [pc, #344]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	4b56      	ldr	r3, [pc, #344]	; (8003a70 <HAL_RCC_OscConfig+0x62c>)
 8003916:	4013      	ands	r3, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6a11      	ldr	r1, [r2, #32]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003920:	3a01      	subs	r2, #1
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	4311      	orrs	r1, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800392a:	0212      	lsls	r2, r2, #8
 800392c:	4311      	orrs	r1, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003932:	0852      	lsrs	r2, r2, #1
 8003934:	3a01      	subs	r2, #1
 8003936:	0552      	lsls	r2, r2, #21
 8003938:	4311      	orrs	r1, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800393e:	0852      	lsrs	r2, r2, #1
 8003940:	3a01      	subs	r2, #1
 8003942:	0652      	lsls	r2, r2, #25
 8003944:	4311      	orrs	r1, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800394a:	06d2      	lsls	r2, r2, #27
 800394c:	430a      	orrs	r2, r1
 800394e:	4947      	ldr	r1, [pc, #284]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 8003950:	4313      	orrs	r3, r2
 8003952:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003954:	4b45      	ldr	r3, [pc, #276]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a44      	ldr	r2, [pc, #272]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003960:	4b42      	ldr	r3, [pc, #264]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4a41      	ldr	r2, [pc, #260]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 8003966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800396a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7ff f9ba 	bl	8002ce4 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003974:	f7ff f9b6 	bl	8002ce4 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e06e      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003986:	4b39      	ldr	r3, [pc, #228]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x530>
 8003992:	e066      	b.n	8003a62 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003994:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a34      	ldr	r2, [pc, #208]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 800399a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800399e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039a0:	4b32      	ldr	r3, [pc, #200]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a31      	ldr	r2, [pc, #196]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039ac:	4b2f      	ldr	r3, [pc, #188]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a2e      	ldr	r2, [pc, #184]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 80039b2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7ff f992 	bl	8002ce4 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c4:	f7ff f98e 	bl	8002ce4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e046      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d6:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x580>
 80039e2:	e03e      	b.n	8003a62 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e039      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039f0:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 0203 	and.w	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d12c      	bne.n	8003a5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d123      	bne.n	8003a5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d11b      	bne.n	8003a5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d113      	bne.n	8003a5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d109      	bne.n	8003a5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	3b01      	subs	r3, #1
 8003a58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	019f800c 	.word	0x019f800c

08003a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e11e      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b91      	ldr	r3, [pc, #580]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d910      	bls.n	8003abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b8e      	ldr	r3, [pc, #568]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 020f 	bic.w	r2, r3, #15
 8003aa2:	498c      	ldr	r1, [pc, #560]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b8a      	ldr	r3, [pc, #552]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e106      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d073      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d129      	bne.n	8003b24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad0:	4b81      	ldr	r3, [pc, #516]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0f4      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ae0:	f000 f99e 	bl	8003e20 <RCC_GetSysClockFreqFromPLLSource>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4a7c      	ldr	r2, [pc, #496]	; (8003cdc <HAL_RCC_ClockConfig+0x268>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d93f      	bls.n	8003b6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003aee:	4b7a      	ldr	r3, [pc, #488]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d033      	beq.n	8003b6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d12f      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b0e:	4b72      	ldr	r3, [pc, #456]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b16:	4a70      	ldr	r2, [pc, #448]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e024      	b.n	8003b6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2c:	4b6a      	ldr	r3, [pc, #424]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0c6      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b3c:	4b66      	ldr	r3, [pc, #408]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0be      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b4c:	f000 f8ce 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4a61      	ldr	r2, [pc, #388]	; (8003cdc <HAL_RCC_ClockConfig+0x268>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d909      	bls.n	8003b6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b62:	4a5d      	ldr	r2, [pc, #372]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b6e:	4b5a      	ldr	r3, [pc, #360]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f023 0203 	bic.w	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4957      	ldr	r1, [pc, #348]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7ff f8b0 	bl	8002ce4 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b88:	f7ff f8ac 	bl	8002ce4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e095      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	4b4e      	ldr	r3, [pc, #312]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 020c 	and.w	r2, r3, #12
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d1eb      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d023      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc8:	4b43      	ldr	r3, [pc, #268]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a42      	ldr	r2, [pc, #264]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003bce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bd2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003be0:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003be8:	4a3b      	ldr	r2, [pc, #236]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf0:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4936      	ldr	r1, [pc, #216]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b80      	cmp	r3, #128	; 0x80
 8003c08:	d105      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c0a:	4b33      	ldr	r3, [pc, #204]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	4a32      	ldr	r2, [pc, #200]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c16:	4b2f      	ldr	r3, [pc, #188]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d21d      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c24:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 020f 	bic.w	r2, r3, #15
 8003c2c:	4929      	ldr	r1, [pc, #164]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c34:	f7ff f856 	bl	8002ce4 <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c3c:	f7ff f852 	bl	8002ce4 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e03b      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1ed      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c6c:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4917      	ldr	r1, [pc, #92]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	490f      	ldr	r1, [pc, #60]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c9e:	f000 f825 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	490c      	ldr	r1, [pc, #48]	; (8003ce0 <HAL_RCC_ClockConfig+0x26c>)
 8003cb0:	5ccb      	ldrb	r3, [r1, r3]
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <HAL_RCC_ClockConfig+0x270>)
 8003cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <HAL_RCC_ClockConfig+0x274>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe ffc2 	bl	8002c4c <HAL_InitTick>
 8003cc8:	4603      	mov	r3, r0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40022000 	.word	0x40022000
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	04c4b400 	.word	0x04c4b400
 8003ce0:	08009d28 	.word	0x08009d28
 8003ce4:	20000008 	.word	0x20000008
 8003ce8:	2000000c 	.word	0x2000000c

08003cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cf2:	4b2c      	ldr	r3, [pc, #176]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d102      	bne.n	8003d04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cfe:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	e047      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d04:	4b27      	ldr	r3, [pc, #156]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d102      	bne.n	8003d16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d10:	4b26      	ldr	r3, [pc, #152]	; (8003dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	e03e      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d16:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	d136      	bne.n	8003d90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	3301      	adds	r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d10c      	bne.n	8003d5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d40:	4a1a      	ldr	r2, [pc, #104]	; (8003dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	4a16      	ldr	r2, [pc, #88]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4a:	68d2      	ldr	r2, [r2, #12]
 8003d4c:	0a12      	lsrs	r2, r2, #8
 8003d4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	617b      	str	r3, [r7, #20]
      break;
 8003d58:	e00c      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d5a:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	4a10      	ldr	r2, [pc, #64]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	0a12      	lsrs	r2, r2, #8
 8003d68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
      break;
 8003d72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	0e5b      	lsrs	r3, r3, #25
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	e001      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d94:	693b      	ldr	r3, [r7, #16]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	00f42400 	.word	0x00f42400
 8003dac:	016e3600 	.word	0x016e3600

08003db0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db4:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db6:	681b      	ldr	r3, [r3, #0]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20000008 	.word	0x20000008

08003dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dcc:	f7ff fff0 	bl	8003db0 <HAL_RCC_GetHCLKFreq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b06      	ldr	r3, [pc, #24]	; (8003dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	4904      	ldr	r1, [pc, #16]	; (8003df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dde:	5ccb      	ldrb	r3, [r1, r3]
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	08009d38 	.word	0x08009d38

08003df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003df8:	f7ff ffda 	bl	8003db0 <HAL_RCC_GetHCLKFreq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	0adb      	lsrs	r3, r3, #11
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4904      	ldr	r1, [pc, #16]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e0a:	5ccb      	ldrb	r3, [r1, r3]
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	08009d38 	.word	0x08009d38

08003e20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e26:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d10c      	bne.n	8003e5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e44:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e4e:	68d2      	ldr	r2, [r2, #12]
 8003e50:	0a12      	lsrs	r2, r2, #8
 8003e52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	617b      	str	r3, [r7, #20]
    break;
 8003e5c:	e00c      	b.n	8003e78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e68:	68d2      	ldr	r2, [r2, #12]
 8003e6a:	0a12      	lsrs	r2, r2, #8
 8003e6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
    break;
 8003e76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e78:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	0e5b      	lsrs	r3, r3, #25
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	3301      	adds	r3, #1
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e92:	687b      	ldr	r3, [r7, #4]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	016e3600 	.word	0x016e3600
 8003ea8:	00f42400 	.word	0x00f42400

08003eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003eb8:	2300      	movs	r3, #0
 8003eba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8098 	beq.w	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ece:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10d      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eda:	4b40      	ldr	r3, [pc, #256]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	4a3f      	ldr	r2, [pc, #252]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a39      	ldr	r2, [pc, #228]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f02:	f7fe feef 	bl	8002ce4 <HAL_GetTick>
 8003f06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f08:	e009      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0a:	f7fe feeb 	bl	8002ce4 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d902      	bls.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f1c:	e005      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f1e:	4b30      	ldr	r3, [pc, #192]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ef      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d159      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f30:	4b2a      	ldr	r3, [pc, #168]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01e      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d019      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f4c:	4b23      	ldr	r3, [pc, #140]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f58:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f68:	4b1c      	ldr	r3, [pc, #112]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f78:	4a18      	ldr	r2, [pc, #96]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fe feab 	bl	8002ce4 <HAL_GetTick>
 8003f8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f90:	e00b      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f92:	f7fe fea7 	bl	8002ce4 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d902      	bls.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	74fb      	strb	r3, [r7, #19]
            break;
 8003fa8:	e006      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ec      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fcc:	4903      	ldr	r1, [pc, #12]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	74bb      	strb	r3, [r7, #18]
 8003fda:	e005      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe8:	7c7b      	ldrb	r3, [r7, #17]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4ba7      	ldr	r3, [pc, #668]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	4aa6      	ldr	r2, [pc, #664]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004006:	4ba1      	ldr	r3, [pc, #644]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f023 0203 	bic.w	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	499d      	ldr	r1, [pc, #628]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004028:	4b98      	ldr	r3, [pc, #608]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 020c 	bic.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4995      	ldr	r1, [pc, #596]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800404a:	4b90      	ldr	r3, [pc, #576]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	498c      	ldr	r1, [pc, #560]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800406c:	4b87      	ldr	r3, [pc, #540]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	4984      	ldr	r1, [pc, #528]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800408e:	4b7f      	ldr	r3, [pc, #508]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	497b      	ldr	r1, [pc, #492]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b0:	4b76      	ldr	r3, [pc, #472]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	4973      	ldr	r1, [pc, #460]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040d2:	4b6e      	ldr	r3, [pc, #440]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	496a      	ldr	r1, [pc, #424]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040f4:	4b65      	ldr	r3, [pc, #404]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	4962      	ldr	r1, [pc, #392]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004116:	4b5d      	ldr	r3, [pc, #372]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	4959      	ldr	r1, [pc, #356]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004138:	4b54      	ldr	r3, [pc, #336]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	4951      	ldr	r1, [pc, #324]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800415a:	4b4c      	ldr	r3, [pc, #304]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	4948      	ldr	r1, [pc, #288]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800417c:	4b43      	ldr	r3, [pc, #268]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	4940      	ldr	r1, [pc, #256]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419a:	d105      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800419c:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4a3a      	ldr	r2, [pc, #232]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d015      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041b4:	4b35      	ldr	r3, [pc, #212]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	4932      	ldr	r1, [pc, #200]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d2:	d105      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d4:	4b2d      	ldr	r3, [pc, #180]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a2c      	ldr	r2, [pc, #176]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d015      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041ec:	4b27      	ldr	r3, [pc, #156]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	4924      	ldr	r1, [pc, #144]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800420a:	d105      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800420c:	4b1f      	ldr	r3, [pc, #124]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a1e      	ldr	r2, [pc, #120]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004216:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d015      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	4916      	ldr	r1, [pc, #88]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004242:	d105      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a10      	ldr	r2, [pc, #64]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800424e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d019      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	4908      	ldr	r1, [pc, #32]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427a:	d109      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a02      	ldr	r2, [pc, #8]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004286:	60d3      	str	r3, [r2, #12]
 8004288:	e002      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d015      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800429c:	4b29      	ldr	r3, [pc, #164]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	4926      	ldr	r1, [pc, #152]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ba:	d105      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042bc:	4b21      	ldr	r3, [pc, #132]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4a20      	ldr	r2, [pc, #128]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d015      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042d4:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e2:	4918      	ldr	r1, [pc, #96]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d105      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042f4:	4b13      	ldr	r3, [pc, #76]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4a12      	ldr	r2, [pc, #72]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d015      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800430c:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800430e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004312:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	490a      	ldr	r1, [pc, #40]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800432a:	d105      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a04      	ldr	r2, [pc, #16]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004336:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004338:	7cbb      	ldrb	r3, [r7, #18]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40021000 	.word	0x40021000

08004348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e049      	b.n	80043ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fe f9f4 	bl	800275c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f001 f80c 	bl	80053a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e049      	b.n	800449c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d106      	bne.n	8004422 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f841 	bl	80044a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f000 ffb5 	bl	80053a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <HAL_TIM_PWM_Start+0x24>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e03c      	b.n	8004556 <HAL_TIM_PWM_Start+0x9e>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d109      	bne.n	80044f6 <HAL_TIM_PWM_Start+0x3e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	bf14      	ite	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	2300      	moveq	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	e02f      	b.n	8004556 <HAL_TIM_PWM_Start+0x9e>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d109      	bne.n	8004510 <HAL_TIM_PWM_Start+0x58>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e022      	b.n	8004556 <HAL_TIM_PWM_Start+0x9e>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d109      	bne.n	800452a <HAL_TIM_PWM_Start+0x72>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e015      	b.n	8004556 <HAL_TIM_PWM_Start+0x9e>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b10      	cmp	r3, #16
 800452e:	d109      	bne.n	8004544 <HAL_TIM_PWM_Start+0x8c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	bf14      	ite	ne
 800453c:	2301      	movne	r3, #1
 800453e:	2300      	moveq	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e008      	b.n	8004556 <HAL_TIM_PWM_Start+0x9e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e0a6      	b.n	80046ac <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <HAL_TIM_PWM_Start+0xb6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456c:	e023      	b.n	80045b6 <HAL_TIM_PWM_Start+0xfe>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d104      	bne.n	800457e <HAL_TIM_PWM_Start+0xc6>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800457c:	e01b      	b.n	80045b6 <HAL_TIM_PWM_Start+0xfe>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d104      	bne.n	800458e <HAL_TIM_PWM_Start+0xd6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	e013      	b.n	80045b6 <HAL_TIM_PWM_Start+0xfe>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	d104      	bne.n	800459e <HAL_TIM_PWM_Start+0xe6>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800459c:	e00b      	b.n	80045b6 <HAL_TIM_PWM_Start+0xfe>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Start+0xf6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045ac:	e003      	b.n	80045b6 <HAL_TIM_PWM_Start+0xfe>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2201      	movs	r2, #1
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 fc88 	bl	8005ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a3a      	ldr	r2, [pc, #232]	; (80046b4 <HAL_TIM_PWM_Start+0x1fc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d018      	beq.n	8004600 <HAL_TIM_PWM_Start+0x148>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a39      	ldr	r2, [pc, #228]	; (80046b8 <HAL_TIM_PWM_Start+0x200>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d013      	beq.n	8004600 <HAL_TIM_PWM_Start+0x148>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a37      	ldr	r2, [pc, #220]	; (80046bc <HAL_TIM_PWM_Start+0x204>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00e      	beq.n	8004600 <HAL_TIM_PWM_Start+0x148>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a36      	ldr	r2, [pc, #216]	; (80046c0 <HAL_TIM_PWM_Start+0x208>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d009      	beq.n	8004600 <HAL_TIM_PWM_Start+0x148>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <HAL_TIM_PWM_Start+0x20c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d004      	beq.n	8004600 <HAL_TIM_PWM_Start+0x148>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a33      	ldr	r2, [pc, #204]	; (80046c8 <HAL_TIM_PWM_Start+0x210>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d101      	bne.n	8004604 <HAL_TIM_PWM_Start+0x14c>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <HAL_TIM_PWM_Start+0x14e>
 8004604:	2300      	movs	r3, #0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a25      	ldr	r2, [pc, #148]	; (80046b4 <HAL_TIM_PWM_Start+0x1fc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d022      	beq.n	800466a <HAL_TIM_PWM_Start+0x1b2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462c:	d01d      	beq.n	800466a <HAL_TIM_PWM_Start+0x1b2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a26      	ldr	r2, [pc, #152]	; (80046cc <HAL_TIM_PWM_Start+0x214>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d018      	beq.n	800466a <HAL_TIM_PWM_Start+0x1b2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a24      	ldr	r2, [pc, #144]	; (80046d0 <HAL_TIM_PWM_Start+0x218>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_TIM_PWM_Start+0x1b2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a23      	ldr	r2, [pc, #140]	; (80046d4 <HAL_TIM_PWM_Start+0x21c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00e      	beq.n	800466a <HAL_TIM_PWM_Start+0x1b2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <HAL_TIM_PWM_Start+0x200>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d009      	beq.n	800466a <HAL_TIM_PWM_Start+0x1b2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a18      	ldr	r2, [pc, #96]	; (80046bc <HAL_TIM_PWM_Start+0x204>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_TIM_PWM_Start+0x1b2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <HAL_TIM_PWM_Start+0x210>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d115      	bne.n	8004696 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <HAL_TIM_PWM_Start+0x220>)
 8004672:	4013      	ands	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b06      	cmp	r3, #6
 800467a:	d015      	beq.n	80046a8 <HAL_TIM_PWM_Start+0x1f0>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004682:	d011      	beq.n	80046a8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	e008      	b.n	80046a8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e000      	b.n	80046aa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	40013400 	.word	0x40013400
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800
 80046c8:	40015000 	.word	0x40015000
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40000800 	.word	0x40000800
 80046d4:	40000c00 	.word	0x40000c00
 80046d8:	00010007 	.word	0x00010007

080046dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e049      	b.n	8004782 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f841 	bl	800478a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3304      	adds	r3, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f000 fe42 	bl	80053a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <HAL_TIM_IC_Start_IT+0x1e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	e023      	b.n	8004806 <HAL_TIM_IC_Start_IT+0x66>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_IC_Start_IT+0x2e>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e01b      	b.n	8004806 <HAL_TIM_IC_Start_IT+0x66>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d104      	bne.n	80047de <HAL_TIM_IC_Start_IT+0x3e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e013      	b.n	8004806 <HAL_TIM_IC_Start_IT+0x66>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_IC_Start_IT+0x4e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	e00b      	b.n	8004806 <HAL_TIM_IC_Start_IT+0x66>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_IC_Start_IT+0x5e>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	e003      	b.n	8004806 <HAL_TIM_IC_Start_IT+0x66>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004804:	b2db      	uxtb	r3, r3
 8004806:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d104      	bne.n	8004818 <HAL_TIM_IC_Start_IT+0x78>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e013      	b.n	8004840 <HAL_TIM_IC_Start_IT+0xa0>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b04      	cmp	r3, #4
 800481c:	d104      	bne.n	8004828 <HAL_TIM_IC_Start_IT+0x88>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e00b      	b.n	8004840 <HAL_TIM_IC_Start_IT+0xa0>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b08      	cmp	r3, #8
 800482c:	d104      	bne.n	8004838 <HAL_TIM_IC_Start_IT+0x98>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004834:	b2db      	uxtb	r3, r3
 8004836:	e003      	b.n	8004840 <HAL_TIM_IC_Start_IT+0xa0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800483e:	b2db      	uxtb	r3, r3
 8004840:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004842:	7bbb      	ldrb	r3, [r7, #14]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d102      	bne.n	800484e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004848:	7b7b      	ldrb	r3, [r7, #13]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d001      	beq.n	8004852 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e0e2      	b.n	8004a18 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d104      	bne.n	8004862 <HAL_TIM_IC_Start_IT+0xc2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004860:	e023      	b.n	80048aa <HAL_TIM_IC_Start_IT+0x10a>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d104      	bne.n	8004872 <HAL_TIM_IC_Start_IT+0xd2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004870:	e01b      	b.n	80048aa <HAL_TIM_IC_Start_IT+0x10a>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d104      	bne.n	8004882 <HAL_TIM_IC_Start_IT+0xe2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004880:	e013      	b.n	80048aa <HAL_TIM_IC_Start_IT+0x10a>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b0c      	cmp	r3, #12
 8004886:	d104      	bne.n	8004892 <HAL_TIM_IC_Start_IT+0xf2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004890:	e00b      	b.n	80048aa <HAL_TIM_IC_Start_IT+0x10a>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b10      	cmp	r3, #16
 8004896:	d104      	bne.n	80048a2 <HAL_TIM_IC_Start_IT+0x102>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a0:	e003      	b.n	80048aa <HAL_TIM_IC_Start_IT+0x10a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_IC_Start_IT+0x11a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b8:	e013      	b.n	80048e2 <HAL_TIM_IC_Start_IT+0x142>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d104      	bne.n	80048ca <HAL_TIM_IC_Start_IT+0x12a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c8:	e00b      	b.n	80048e2 <HAL_TIM_IC_Start_IT+0x142>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d104      	bne.n	80048da <HAL_TIM_IC_Start_IT+0x13a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048d8:	e003      	b.n	80048e2 <HAL_TIM_IC_Start_IT+0x142>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b0c      	cmp	r3, #12
 80048e6:	d841      	bhi.n	800496c <HAL_TIM_IC_Start_IT+0x1cc>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <HAL_TIM_IC_Start_IT+0x150>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004925 	.word	0x08004925
 80048f4:	0800496d 	.word	0x0800496d
 80048f8:	0800496d 	.word	0x0800496d
 80048fc:	0800496d 	.word	0x0800496d
 8004900:	08004937 	.word	0x08004937
 8004904:	0800496d 	.word	0x0800496d
 8004908:	0800496d 	.word	0x0800496d
 800490c:	0800496d 	.word	0x0800496d
 8004910:	08004949 	.word	0x08004949
 8004914:	0800496d 	.word	0x0800496d
 8004918:	0800496d 	.word	0x0800496d
 800491c:	0800496d 	.word	0x0800496d
 8004920:	0800495b 	.word	0x0800495b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0202 	orr.w	r2, r2, #2
 8004932:	60da      	str	r2, [r3, #12]
      break;
 8004934:	e01d      	b.n	8004972 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0204 	orr.w	r2, r2, #4
 8004944:	60da      	str	r2, [r3, #12]
      break;
 8004946:	e014      	b.n	8004972 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0208 	orr.w	r2, r2, #8
 8004956:	60da      	str	r2, [r3, #12]
      break;
 8004958:	e00b      	b.n	8004972 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0210 	orr.w	r2, r2, #16
 8004968:	60da      	str	r2, [r3, #12]
      break;
 800496a:	e002      	b.n	8004972 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      break;
 8004970:	bf00      	nop
  }

  if (status == HAL_OK)
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d14e      	bne.n	8004a16 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2201      	movs	r2, #1
 800497e:	6839      	ldr	r1, [r7, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f001 faa7 	bl	8005ed4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a25      	ldr	r2, [pc, #148]	; (8004a20 <HAL_TIM_IC_Start_IT+0x280>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <HAL_TIM_IC_Start_IT+0x236>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004998:	d01d      	beq.n	80049d6 <HAL_TIM_IC_Start_IT+0x236>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a21      	ldr	r2, [pc, #132]	; (8004a24 <HAL_TIM_IC_Start_IT+0x284>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <HAL_TIM_IC_Start_IT+0x236>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1f      	ldr	r2, [pc, #124]	; (8004a28 <HAL_TIM_IC_Start_IT+0x288>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_TIM_IC_Start_IT+0x236>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1e      	ldr	r2, [pc, #120]	; (8004a2c <HAL_TIM_IC_Start_IT+0x28c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <HAL_TIM_IC_Start_IT+0x236>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1c      	ldr	r2, [pc, #112]	; (8004a30 <HAL_TIM_IC_Start_IT+0x290>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_TIM_IC_Start_IT+0x236>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <HAL_TIM_IC_Start_IT+0x294>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_TIM_IC_Start_IT+0x236>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <HAL_TIM_IC_Start_IT+0x298>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d115      	bne.n	8004a02 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <HAL_TIM_IC_Start_IT+0x29c>)
 80049de:	4013      	ands	r3, r2
 80049e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b06      	cmp	r3, #6
 80049e6:	d015      	beq.n	8004a14 <HAL_TIM_IC_Start_IT+0x274>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ee:	d011      	beq.n	8004a14 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a00:	e008      	b.n	8004a14 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e000      	b.n	8004a16 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800
 8004a2c:	40000c00 	.word	0x40000c00
 8004a30:	40013400 	.word	0x40013400
 8004a34:	40014000 	.word	0x40014000
 8004a38:	40015000 	.word	0x40015000
 8004a3c:	00010007 	.word	0x00010007

08004a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d122      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d11b      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0202 	mvn.w	r2, #2
 8004a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fa5c 	bl	8000f40 <HAL_TIM_IC_CaptureCallback>
 8004a88:	e005      	b.n	8004a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fc6c 	bl	8005368 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fc73 	bl	800537c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d122      	bne.n	8004af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d11b      	bne.n	8004af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0204 	mvn.w	r2, #4
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fc fa32 	bl	8000f40 <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fc42 	bl	8005368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fc49 	bl	800537c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d122      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d11b      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0208 	mvn.w	r2, #8
 8004b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2204      	movs	r2, #4
 8004b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fc fa08 	bl	8000f40 <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fc18 	bl	8005368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fc1f 	bl	800537c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	d122      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d11b      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0210 	mvn.w	r2, #16
 8004b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc f9de 	bl	8000f40 <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fbee 	bl	8005368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fbf5 	bl	800537c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d10e      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d107      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0201 	mvn.w	r2, #1
 8004bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fbc8 	bl	8005354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bdc:	2b80      	cmp	r3, #128	; 0x80
 8004bde:	d107      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f001 faea 	bl	80061c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfe:	d10e      	bne.n	8004c1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d107      	bne.n	8004c1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f001 fadd 	bl	80061d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d10e      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d107      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fba3 	bl	8005390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d10e      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d107      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f06f 0220 	mvn.w	r2, #32
 8004c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f001 fa9d 	bl	80061b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c84:	d10f      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c94:	d107      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 faa3 	bl	80061ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cb4:	d10f      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc4:	d107      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f001 fa95 	bl	8006200 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce4:	d10f      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf4:	d107      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f001 fa87 	bl	8006214 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d14:	d10f      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d24:	d107      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 fa79 	bl	8006228 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b086      	sub	sp, #24
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e088      	b.n	8004e6e <HAL_TIM_IC_ConfigChannel+0x130>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11b      	bne.n	8004da2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6819      	ldr	r1, [r3, #0]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f000 fee5 	bl	8005b48 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 020c 	bic.w	r2, r2, #12
 8004d8c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6999      	ldr	r1, [r3, #24]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	619a      	str	r2, [r3, #24]
 8004da0:	e060      	b.n	8004e64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d11c      	bne.n	8004de2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	6819      	ldr	r1, [r3, #0]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f000 ff69 	bl	8005c8e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004dca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6999      	ldr	r1, [r3, #24]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	021a      	lsls	r2, r3, #8
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	619a      	str	r2, [r3, #24]
 8004de0:	e040      	b.n	8004e64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d11b      	bne.n	8004e20 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f000 ffb6 	bl	8005d68 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69da      	ldr	r2, [r3, #28]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 020c 	bic.w	r2, r2, #12
 8004e0a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69d9      	ldr	r1, [r3, #28]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	61da      	str	r2, [r3, #28]
 8004e1e:	e021      	b.n	8004e64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b0c      	cmp	r3, #12
 8004e24:	d11c      	bne.n	8004e60 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6819      	ldr	r1, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f000 ffd3 	bl	8005de0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e48:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69d9      	ldr	r1, [r3, #28]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	021a      	lsls	r2, r3, #8
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	61da      	str	r2, [r3, #28]
 8004e5e:	e001      	b.n	8004e64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0ff      	b.n	8005096 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b14      	cmp	r3, #20
 8004ea2:	f200 80f0 	bhi.w	8005086 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004f01 	.word	0x08004f01
 8004eb0:	08005087 	.word	0x08005087
 8004eb4:	08005087 	.word	0x08005087
 8004eb8:	08005087 	.word	0x08005087
 8004ebc:	08004f41 	.word	0x08004f41
 8004ec0:	08005087 	.word	0x08005087
 8004ec4:	08005087 	.word	0x08005087
 8004ec8:	08005087 	.word	0x08005087
 8004ecc:	08004f83 	.word	0x08004f83
 8004ed0:	08005087 	.word	0x08005087
 8004ed4:	08005087 	.word	0x08005087
 8004ed8:	08005087 	.word	0x08005087
 8004edc:	08004fc3 	.word	0x08004fc3
 8004ee0:	08005087 	.word	0x08005087
 8004ee4:	08005087 	.word	0x08005087
 8004ee8:	08005087 	.word	0x08005087
 8004eec:	08005005 	.word	0x08005005
 8004ef0:	08005087 	.word	0x08005087
 8004ef4:	08005087 	.word	0x08005087
 8004ef8:	08005087 	.word	0x08005087
 8004efc:	08005045 	.word	0x08005045
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 faf4 	bl	80054f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0208 	orr.w	r2, r2, #8
 8004f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0204 	bic.w	r2, r2, #4
 8004f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6999      	ldr	r1, [r3, #24]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	619a      	str	r2, [r3, #24]
      break;
 8004f3e:	e0a5      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fb6e 	bl	8005628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6999      	ldr	r1, [r3, #24]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	021a      	lsls	r2, r3, #8
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	619a      	str	r2, [r3, #24]
      break;
 8004f80:	e084      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fbe1 	bl	8005750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0208 	orr.w	r2, r2, #8
 8004f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0204 	bic.w	r2, r2, #4
 8004fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69d9      	ldr	r1, [r3, #28]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	61da      	str	r2, [r3, #28]
      break;
 8004fc0:	e064      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fc53 	bl	8005874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69d9      	ldr	r1, [r3, #28]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	021a      	lsls	r2, r3, #8
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	61da      	str	r2, [r3, #28]
      break;
 8005002:	e043      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fcc6 	bl	800599c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0208 	orr.w	r2, r2, #8
 800501e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0204 	bic.w	r2, r2, #4
 800502e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005042:	e023      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fd10 	bl	8005a70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005084:	e002      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
      break;
 800508a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005094:	7dfb      	ldrb	r3, [r7, #23]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop

080050a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_TIM_ConfigClockSource+0x1c>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e0f6      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x20a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80050da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a6f      	ldr	r2, [pc, #444]	; (80052b4 <HAL_TIM_ConfigClockSource+0x214>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	f000 80c1 	beq.w	800527e <HAL_TIM_ConfigClockSource+0x1de>
 80050fc:	4a6d      	ldr	r2, [pc, #436]	; (80052b4 <HAL_TIM_ConfigClockSource+0x214>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	f200 80c6 	bhi.w	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 8005104:	4a6c      	ldr	r2, [pc, #432]	; (80052b8 <HAL_TIM_ConfigClockSource+0x218>)
 8005106:	4293      	cmp	r3, r2
 8005108:	f000 80b9 	beq.w	800527e <HAL_TIM_ConfigClockSource+0x1de>
 800510c:	4a6a      	ldr	r2, [pc, #424]	; (80052b8 <HAL_TIM_ConfigClockSource+0x218>)
 800510e:	4293      	cmp	r3, r2
 8005110:	f200 80be 	bhi.w	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 8005114:	4a69      	ldr	r2, [pc, #420]	; (80052bc <HAL_TIM_ConfigClockSource+0x21c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	f000 80b1 	beq.w	800527e <HAL_TIM_ConfigClockSource+0x1de>
 800511c:	4a67      	ldr	r2, [pc, #412]	; (80052bc <HAL_TIM_ConfigClockSource+0x21c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	f200 80b6 	bhi.w	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 8005124:	4a66      	ldr	r2, [pc, #408]	; (80052c0 <HAL_TIM_ConfigClockSource+0x220>)
 8005126:	4293      	cmp	r3, r2
 8005128:	f000 80a9 	beq.w	800527e <HAL_TIM_ConfigClockSource+0x1de>
 800512c:	4a64      	ldr	r2, [pc, #400]	; (80052c0 <HAL_TIM_ConfigClockSource+0x220>)
 800512e:	4293      	cmp	r3, r2
 8005130:	f200 80ae 	bhi.w	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 8005134:	4a63      	ldr	r2, [pc, #396]	; (80052c4 <HAL_TIM_ConfigClockSource+0x224>)
 8005136:	4293      	cmp	r3, r2
 8005138:	f000 80a1 	beq.w	800527e <HAL_TIM_ConfigClockSource+0x1de>
 800513c:	4a61      	ldr	r2, [pc, #388]	; (80052c4 <HAL_TIM_ConfigClockSource+0x224>)
 800513e:	4293      	cmp	r3, r2
 8005140:	f200 80a6 	bhi.w	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 8005144:	4a60      	ldr	r2, [pc, #384]	; (80052c8 <HAL_TIM_ConfigClockSource+0x228>)
 8005146:	4293      	cmp	r3, r2
 8005148:	f000 8099 	beq.w	800527e <HAL_TIM_ConfigClockSource+0x1de>
 800514c:	4a5e      	ldr	r2, [pc, #376]	; (80052c8 <HAL_TIM_ConfigClockSource+0x228>)
 800514e:	4293      	cmp	r3, r2
 8005150:	f200 809e 	bhi.w	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 8005154:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005158:	f000 8091 	beq.w	800527e <HAL_TIM_ConfigClockSource+0x1de>
 800515c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005160:	f200 8096 	bhi.w	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 8005164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005168:	f000 8089 	beq.w	800527e <HAL_TIM_ConfigClockSource+0x1de>
 800516c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005170:	f200 808e 	bhi.w	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 8005174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005178:	d03e      	beq.n	80051f8 <HAL_TIM_ConfigClockSource+0x158>
 800517a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800517e:	f200 8087 	bhi.w	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 8005182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005186:	f000 8086 	beq.w	8005296 <HAL_TIM_ConfigClockSource+0x1f6>
 800518a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518e:	d87f      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 8005190:	2b70      	cmp	r3, #112	; 0x70
 8005192:	d01a      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x12a>
 8005194:	2b70      	cmp	r3, #112	; 0x70
 8005196:	d87b      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 8005198:	2b60      	cmp	r3, #96	; 0x60
 800519a:	d050      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x19e>
 800519c:	2b60      	cmp	r3, #96	; 0x60
 800519e:	d877      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 80051a0:	2b50      	cmp	r3, #80	; 0x50
 80051a2:	d03c      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x17e>
 80051a4:	2b50      	cmp	r3, #80	; 0x50
 80051a6:	d873      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d058      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x1be>
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	d86f      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 80051b0:	2b30      	cmp	r3, #48	; 0x30
 80051b2:	d064      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x1de>
 80051b4:	2b30      	cmp	r3, #48	; 0x30
 80051b6:	d86b      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d060      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x1de>
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d867      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d05c      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x1de>
 80051c4:	2b10      	cmp	r3, #16
 80051c6:	d05a      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x1de>
 80051c8:	e062      	b.n	8005290 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6899      	ldr	r1, [r3, #8]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f000 fe5b 	bl	8005e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	609a      	str	r2, [r3, #8]
      break;
 80051f6:	e04f      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	6899      	ldr	r1, [r3, #8]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f000 fe44 	bl	8005e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800521a:	609a      	str	r2, [r3, #8]
      break;
 800521c:	e03c      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6859      	ldr	r1, [r3, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	461a      	mov	r2, r3
 800522c:	f000 fd00 	bl	8005c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2150      	movs	r1, #80	; 0x50
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fe0f 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 800523c:	e02c      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6859      	ldr	r1, [r3, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	461a      	mov	r2, r3
 800524c:	f000 fd5c 	bl	8005d08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2160      	movs	r1, #96	; 0x60
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fdff 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 800525c:	e01c      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6859      	ldr	r1, [r3, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	461a      	mov	r2, r3
 800526c:	f000 fce0 	bl	8005c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2140      	movs	r1, #64	; 0x40
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fdef 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 800527c:	e00c      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f000 fde6 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 800528e:	e003      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
      break;
 8005294:	e000      	b.n	8005298 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	00100070 	.word	0x00100070
 80052b8:	00100060 	.word	0x00100060
 80052bc:	00100050 	.word	0x00100050
 80052c0:	00100040 	.word	0x00100040
 80052c4:	00100030 	.word	0x00100030
 80052c8:	00100020 	.word	0x00100020

080052cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	d831      	bhi.n	8005344 <HAL_TIM_ReadCapturedValue+0x78>
 80052e0:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	0800531d 	.word	0x0800531d
 80052ec:	08005345 	.word	0x08005345
 80052f0:	08005345 	.word	0x08005345
 80052f4:	08005345 	.word	0x08005345
 80052f8:	08005327 	.word	0x08005327
 80052fc:	08005345 	.word	0x08005345
 8005300:	08005345 	.word	0x08005345
 8005304:	08005345 	.word	0x08005345
 8005308:	08005331 	.word	0x08005331
 800530c:	08005345 	.word	0x08005345
 8005310:	08005345 	.word	0x08005345
 8005314:	08005345 	.word	0x08005345
 8005318:	0800533b 	.word	0x0800533b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005322:	60fb      	str	r3, [r7, #12]

      break;
 8005324:	e00f      	b.n	8005346 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	60fb      	str	r3, [r7, #12]

      break;
 800532e:	e00a      	b.n	8005346 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005336:	60fb      	str	r3, [r7, #12]

      break;
 8005338:	e005      	b.n	8005346 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	60fb      	str	r3, [r7, #12]

      break;
 8005342:	e000      	b.n	8005346 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005344:	bf00      	nop
  }

  return tmpreg;
 8005346:	68fb      	ldr	r3, [r7, #12]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a46      	ldr	r2, [pc, #280]	; (80054d0 <TIM_Base_SetConfig+0x12c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d017      	beq.n	80053ec <TIM_Base_SetConfig+0x48>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c2:	d013      	beq.n	80053ec <TIM_Base_SetConfig+0x48>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a43      	ldr	r2, [pc, #268]	; (80054d4 <TIM_Base_SetConfig+0x130>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00f      	beq.n	80053ec <TIM_Base_SetConfig+0x48>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a42      	ldr	r2, [pc, #264]	; (80054d8 <TIM_Base_SetConfig+0x134>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00b      	beq.n	80053ec <TIM_Base_SetConfig+0x48>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a41      	ldr	r2, [pc, #260]	; (80054dc <TIM_Base_SetConfig+0x138>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_Base_SetConfig+0x48>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a40      	ldr	r2, [pc, #256]	; (80054e0 <TIM_Base_SetConfig+0x13c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_Base_SetConfig+0x48>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a3f      	ldr	r2, [pc, #252]	; (80054e4 <TIM_Base_SetConfig+0x140>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d108      	bne.n	80053fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a33      	ldr	r2, [pc, #204]	; (80054d0 <TIM_Base_SetConfig+0x12c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d023      	beq.n	800544e <TIM_Base_SetConfig+0xaa>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540c:	d01f      	beq.n	800544e <TIM_Base_SetConfig+0xaa>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a30      	ldr	r2, [pc, #192]	; (80054d4 <TIM_Base_SetConfig+0x130>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01b      	beq.n	800544e <TIM_Base_SetConfig+0xaa>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a2f      	ldr	r2, [pc, #188]	; (80054d8 <TIM_Base_SetConfig+0x134>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d017      	beq.n	800544e <TIM_Base_SetConfig+0xaa>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2e      	ldr	r2, [pc, #184]	; (80054dc <TIM_Base_SetConfig+0x138>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <TIM_Base_SetConfig+0xaa>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2d      	ldr	r2, [pc, #180]	; (80054e0 <TIM_Base_SetConfig+0x13c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00f      	beq.n	800544e <TIM_Base_SetConfig+0xaa>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2d      	ldr	r2, [pc, #180]	; (80054e8 <TIM_Base_SetConfig+0x144>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00b      	beq.n	800544e <TIM_Base_SetConfig+0xaa>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a2c      	ldr	r2, [pc, #176]	; (80054ec <TIM_Base_SetConfig+0x148>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <TIM_Base_SetConfig+0xaa>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2b      	ldr	r2, [pc, #172]	; (80054f0 <TIM_Base_SetConfig+0x14c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_Base_SetConfig+0xaa>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a26      	ldr	r2, [pc, #152]	; (80054e4 <TIM_Base_SetConfig+0x140>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d108      	bne.n	8005460 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a12      	ldr	r2, [pc, #72]	; (80054d0 <TIM_Base_SetConfig+0x12c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d013      	beq.n	80054b4 <TIM_Base_SetConfig+0x110>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <TIM_Base_SetConfig+0x13c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00f      	beq.n	80054b4 <TIM_Base_SetConfig+0x110>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a14      	ldr	r2, [pc, #80]	; (80054e8 <TIM_Base_SetConfig+0x144>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00b      	beq.n	80054b4 <TIM_Base_SetConfig+0x110>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a13      	ldr	r2, [pc, #76]	; (80054ec <TIM_Base_SetConfig+0x148>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_Base_SetConfig+0x110>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a12      	ldr	r2, [pc, #72]	; (80054f0 <TIM_Base_SetConfig+0x14c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0x110>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a0d      	ldr	r2, [pc, #52]	; (80054e4 <TIM_Base_SetConfig+0x140>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d103      	bne.n	80054bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	615a      	str	r2, [r3, #20]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40013400 	.word	0x40013400
 80054e4:	40015000 	.word	0x40015000
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40014400 	.word	0x40014400
 80054f0:	40014800 	.word	0x40014800

080054f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f023 0201 	bic.w	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f023 0302 	bic.w	r3, r3, #2
 8005540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a30      	ldr	r2, [pc, #192]	; (8005610 <TIM_OC1_SetConfig+0x11c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d013      	beq.n	800557c <TIM_OC1_SetConfig+0x88>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a2f      	ldr	r2, [pc, #188]	; (8005614 <TIM_OC1_SetConfig+0x120>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00f      	beq.n	800557c <TIM_OC1_SetConfig+0x88>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a2e      	ldr	r2, [pc, #184]	; (8005618 <TIM_OC1_SetConfig+0x124>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00b      	beq.n	800557c <TIM_OC1_SetConfig+0x88>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a2d      	ldr	r2, [pc, #180]	; (800561c <TIM_OC1_SetConfig+0x128>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d007      	beq.n	800557c <TIM_OC1_SetConfig+0x88>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a2c      	ldr	r2, [pc, #176]	; (8005620 <TIM_OC1_SetConfig+0x12c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_OC1_SetConfig+0x88>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a2b      	ldr	r2, [pc, #172]	; (8005624 <TIM_OC1_SetConfig+0x130>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d10c      	bne.n	8005596 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0308 	bic.w	r3, r3, #8
 8005582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f023 0304 	bic.w	r3, r3, #4
 8005594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a1d      	ldr	r2, [pc, #116]	; (8005610 <TIM_OC1_SetConfig+0x11c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <TIM_OC1_SetConfig+0xd2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a1c      	ldr	r2, [pc, #112]	; (8005614 <TIM_OC1_SetConfig+0x120>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_OC1_SetConfig+0xd2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1b      	ldr	r2, [pc, #108]	; (8005618 <TIM_OC1_SetConfig+0x124>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_OC1_SetConfig+0xd2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1a      	ldr	r2, [pc, #104]	; (800561c <TIM_OC1_SetConfig+0x128>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_OC1_SetConfig+0xd2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a19      	ldr	r2, [pc, #100]	; (8005620 <TIM_OC1_SetConfig+0x12c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC1_SetConfig+0xd2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a18      	ldr	r2, [pc, #96]	; (8005624 <TIM_OC1_SetConfig+0x130>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d111      	bne.n	80055ea <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	621a      	str	r2, [r3, #32]
}
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40014000 	.word	0x40014000
 800561c:	40014400 	.word	0x40014400
 8005620:	40014800 	.word	0x40014800
 8005624:	40015000 	.word	0x40015000

08005628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f023 0210 	bic.w	r2, r3, #16
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 0320 	bic.w	r3, r3, #32
 8005676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a2c      	ldr	r2, [pc, #176]	; (8005738 <TIM_OC2_SetConfig+0x110>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_OC2_SetConfig+0x74>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a2b      	ldr	r2, [pc, #172]	; (800573c <TIM_OC2_SetConfig+0x114>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_OC2_SetConfig+0x74>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a2a      	ldr	r2, [pc, #168]	; (8005740 <TIM_OC2_SetConfig+0x118>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d10d      	bne.n	80056b8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <TIM_OC2_SetConfig+0x110>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <TIM_OC2_SetConfig+0xc0>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a1e      	ldr	r2, [pc, #120]	; (800573c <TIM_OC2_SetConfig+0x114>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00f      	beq.n	80056e8 <TIM_OC2_SetConfig+0xc0>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <TIM_OC2_SetConfig+0x11c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <TIM_OC2_SetConfig+0xc0>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <TIM_OC2_SetConfig+0x120>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <TIM_OC2_SetConfig+0xc0>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a1c      	ldr	r2, [pc, #112]	; (800574c <TIM_OC2_SetConfig+0x124>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_OC2_SetConfig+0xc0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a17      	ldr	r2, [pc, #92]	; (8005740 <TIM_OC2_SetConfig+0x118>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d113      	bne.n	8005710 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	621a      	str	r2, [r3, #32]
}
 800572a:	bf00      	nop
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40012c00 	.word	0x40012c00
 800573c:	40013400 	.word	0x40013400
 8005740:	40015000 	.word	0x40015000
 8005744:	40014000 	.word	0x40014000
 8005748:	40014400 	.word	0x40014400
 800574c:	40014800 	.word	0x40014800

08005750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800579c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	021b      	lsls	r3, r3, #8
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a2b      	ldr	r2, [pc, #172]	; (800585c <TIM_OC3_SetConfig+0x10c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d007      	beq.n	80057c2 <TIM_OC3_SetConfig+0x72>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a2a      	ldr	r2, [pc, #168]	; (8005860 <TIM_OC3_SetConfig+0x110>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d003      	beq.n	80057c2 <TIM_OC3_SetConfig+0x72>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a29      	ldr	r2, [pc, #164]	; (8005864 <TIM_OC3_SetConfig+0x114>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d10d      	bne.n	80057de <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a1e      	ldr	r2, [pc, #120]	; (800585c <TIM_OC3_SetConfig+0x10c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <TIM_OC3_SetConfig+0xbe>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <TIM_OC3_SetConfig+0x110>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00f      	beq.n	800580e <TIM_OC3_SetConfig+0xbe>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <TIM_OC3_SetConfig+0x118>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00b      	beq.n	800580e <TIM_OC3_SetConfig+0xbe>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1c      	ldr	r2, [pc, #112]	; (800586c <TIM_OC3_SetConfig+0x11c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d007      	beq.n	800580e <TIM_OC3_SetConfig+0xbe>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1b      	ldr	r2, [pc, #108]	; (8005870 <TIM_OC3_SetConfig+0x120>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d003      	beq.n	800580e <TIM_OC3_SetConfig+0xbe>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a16      	ldr	r2, [pc, #88]	; (8005864 <TIM_OC3_SetConfig+0x114>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d113      	bne.n	8005836 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800581c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	40012c00 	.word	0x40012c00
 8005860:	40013400 	.word	0x40013400
 8005864:	40015000 	.word	0x40015000
 8005868:	40014000 	.word	0x40014000
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800

08005874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	031b      	lsls	r3, r3, #12
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a2c      	ldr	r2, [pc, #176]	; (8005984 <TIM_OC4_SetConfig+0x110>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_OC4_SetConfig+0x74>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a2b      	ldr	r2, [pc, #172]	; (8005988 <TIM_OC4_SetConfig+0x114>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_OC4_SetConfig+0x74>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a2a      	ldr	r2, [pc, #168]	; (800598c <TIM_OC4_SetConfig+0x118>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d10d      	bne.n	8005904 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	031b      	lsls	r3, r3, #12
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005902:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a1f      	ldr	r2, [pc, #124]	; (8005984 <TIM_OC4_SetConfig+0x110>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <TIM_OC4_SetConfig+0xc0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a1e      	ldr	r2, [pc, #120]	; (8005988 <TIM_OC4_SetConfig+0x114>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00f      	beq.n	8005934 <TIM_OC4_SetConfig+0xc0>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1e      	ldr	r2, [pc, #120]	; (8005990 <TIM_OC4_SetConfig+0x11c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00b      	beq.n	8005934 <TIM_OC4_SetConfig+0xc0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <TIM_OC4_SetConfig+0x120>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_OC4_SetConfig+0xc0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <TIM_OC4_SetConfig+0x124>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_OC4_SetConfig+0xc0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <TIM_OC4_SetConfig+0x118>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d113      	bne.n	800595c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800593a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005942:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	019b      	lsls	r3, r3, #6
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	019b      	lsls	r3, r3, #6
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40012c00 	.word	0x40012c00
 8005988:	40013400 	.word	0x40013400
 800598c:	40015000 	.word	0x40015000
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800

0800599c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <TIM_OC5_SetConfig+0xbc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d013      	beq.n	8005a1e <TIM_OC5_SetConfig+0x82>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a18      	ldr	r2, [pc, #96]	; (8005a5c <TIM_OC5_SetConfig+0xc0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00f      	beq.n	8005a1e <TIM_OC5_SetConfig+0x82>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a17      	ldr	r2, [pc, #92]	; (8005a60 <TIM_OC5_SetConfig+0xc4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00b      	beq.n	8005a1e <TIM_OC5_SetConfig+0x82>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <TIM_OC5_SetConfig+0xc8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d007      	beq.n	8005a1e <TIM_OC5_SetConfig+0x82>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <TIM_OC5_SetConfig+0xcc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_OC5_SetConfig+0x82>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a14      	ldr	r2, [pc, #80]	; (8005a6c <TIM_OC5_SetConfig+0xd0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d109      	bne.n	8005a32 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	621a      	str	r2, [r3, #32]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40013400 	.word	0x40013400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800
 8005a6c:	40015000 	.word	0x40015000

08005a70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	051b      	lsls	r3, r3, #20
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a1a      	ldr	r2, [pc, #104]	; (8005b30 <TIM_OC6_SetConfig+0xc0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d013      	beq.n	8005af4 <TIM_OC6_SetConfig+0x84>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a19      	ldr	r2, [pc, #100]	; (8005b34 <TIM_OC6_SetConfig+0xc4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00f      	beq.n	8005af4 <TIM_OC6_SetConfig+0x84>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <TIM_OC6_SetConfig+0xc8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00b      	beq.n	8005af4 <TIM_OC6_SetConfig+0x84>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <TIM_OC6_SetConfig+0xcc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <TIM_OC6_SetConfig+0x84>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a16      	ldr	r2, [pc, #88]	; (8005b40 <TIM_OC6_SetConfig+0xd0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC6_SetConfig+0x84>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a15      	ldr	r2, [pc, #84]	; (8005b44 <TIM_OC6_SetConfig+0xd4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d109      	bne.n	8005b08 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005afa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	029b      	lsls	r3, r3, #10
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40012c00 	.word	0x40012c00
 8005b34:	40013400 	.word	0x40013400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800
 8005b44:	40015000 	.word	0x40015000

08005b48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f023 0201 	bic.w	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <TIM_TI1_SetConfig+0xcc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01b      	beq.n	8005bae <TIM_TI1_SetConfig+0x66>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7c:	d017      	beq.n	8005bae <TIM_TI1_SetConfig+0x66>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4a25      	ldr	r2, [pc, #148]	; (8005c18 <TIM_TI1_SetConfig+0xd0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <TIM_TI1_SetConfig+0x66>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4a24      	ldr	r2, [pc, #144]	; (8005c1c <TIM_TI1_SetConfig+0xd4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00f      	beq.n	8005bae <TIM_TI1_SetConfig+0x66>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4a23      	ldr	r2, [pc, #140]	; (8005c20 <TIM_TI1_SetConfig+0xd8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00b      	beq.n	8005bae <TIM_TI1_SetConfig+0x66>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a22      	ldr	r2, [pc, #136]	; (8005c24 <TIM_TI1_SetConfig+0xdc>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d007      	beq.n	8005bae <TIM_TI1_SetConfig+0x66>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <TIM_TI1_SetConfig+0xe0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d003      	beq.n	8005bae <TIM_TI1_SetConfig+0x66>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a20      	ldr	r2, [pc, #128]	; (8005c2c <TIM_TI1_SetConfig+0xe4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d101      	bne.n	8005bb2 <TIM_TI1_SetConfig+0x6a>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <TIM_TI1_SetConfig+0x6c>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	e003      	b.n	8005bd2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f023 030a 	bic.w	r3, r3, #10
 8005bec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f003 030a 	and.w	r3, r3, #10
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800
 8005c20:	40000c00 	.word	0x40000c00
 8005c24:	40013400 	.word	0x40013400
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	40015000 	.word	0x40015000

08005c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 030a 	bic.w	r3, r3, #10
 8005c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b087      	sub	sp, #28
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f023 0210 	bic.w	r2, r3, #16
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	031b      	lsls	r3, r3, #12
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ce0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	621a      	str	r2, [r3, #32]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	f023 0210 	bic.w	r2, r3, #16
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	031b      	lsls	r3, r3, #12
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	621a      	str	r2, [r3, #32]
}
 8005d5c:	bf00      	nop
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f023 0303 	bic.w	r3, r3, #3
 8005d94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005db8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	621a      	str	r2, [r3, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	031b      	lsls	r3, r3, #12
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005e32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	031b      	lsls	r3, r3, #12
 8005e38:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f043 0307 	orr.w	r3, r3, #7
 8005e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	609a      	str	r2, [r3, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	021a      	lsls	r2, r3, #8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	609a      	str	r2, [r3, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a1a      	ldr	r2, [r3, #32]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
	...

08005f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e074      	b.n	8006022 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a34      	ldr	r2, [pc, #208]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d009      	beq.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a33      	ldr	r2, [pc, #204]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a31      	ldr	r2, [pc, #196]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d108      	bne.n	8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a21      	ldr	r2, [pc, #132]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d022      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb8:	d01d      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1f      	ldr	r2, [pc, #124]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d018      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1d      	ldr	r2, [pc, #116]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00e      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a15      	ldr	r2, [pc, #84]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d009      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a18      	ldr	r2, [pc, #96]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a11      	ldr	r2, [pc, #68]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d10c      	bne.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	4313      	orrs	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40012c00 	.word	0x40012c00
 8006034:	40013400 	.word	0x40013400
 8006038:	40015000 	.word	0x40015000
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40000c00 	.word	0x40000c00
 8006048:	40014000 	.word	0x40014000

0800604c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006064:	2302      	movs	r3, #2
 8006066:	e096      	b.n	8006196 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	041b      	lsls	r3, r3, #16
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a2f      	ldr	r2, [pc, #188]	; (80061a4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d009      	beq.n	8006100 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a2d      	ldr	r2, [pc, #180]	; (80061a8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d004      	beq.n	8006100 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a2c      	ldr	r2, [pc, #176]	; (80061ac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d106      	bne.n	800610e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a24      	ldr	r2, [pc, #144]	; (80061a4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d009      	beq.n	800612c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d004      	beq.n	800612c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a21      	ldr	r2, [pc, #132]	; (80061ac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d12b      	bne.n	8006184 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	051b      	lsls	r3, r3, #20
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a11      	ldr	r2, [pc, #68]	; (80061a4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d009      	beq.n	8006176 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a10      	ldr	r2, [pc, #64]	; (80061a8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a0e      	ldr	r2, [pc, #56]	; (80061ac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d106      	bne.n	8006184 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40013400 	.word	0x40013400
 80061ac:	40015000 	.word	0x40015000

080061b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e042      	b.n	80062d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7fc f8e9 	bl	8002438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2224      	movs	r2, #36	; 0x24
 800626a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f8c2 	bl	8006408 <UART_SetConfig>
 8006284:	4603      	mov	r3, r0
 8006286:	2b01      	cmp	r3, #1
 8006288:	d101      	bne.n	800628e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e022      	b.n	80062d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fbb2 	bl	8006a00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0201 	orr.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fc39 	bl	8006b44 <UART_CheckIdleState>
 80062d2:	4603      	mov	r3, r0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	f040 8083 	bne.w	80063fe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_UART_Transmit+0x28>
 80062fe:	88fb      	ldrh	r3, [r7, #6]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e07b      	b.n	8006400 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_UART_Transmit+0x3a>
 8006312:	2302      	movs	r3, #2
 8006314:	e074      	b.n	8006400 <HAL_UART_Transmit+0x124>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2221      	movs	r2, #33	; 0x21
 800632a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800632e:	f7fc fcd9 	bl	8002ce4 <HAL_GetTick>
 8006332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	88fa      	ldrh	r2, [r7, #6]
 8006338:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	88fa      	ldrh	r2, [r7, #6]
 8006340:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634c:	d108      	bne.n	8006360 <HAL_UART_Transmit+0x84>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d104      	bne.n	8006360 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	61bb      	str	r3, [r7, #24]
 800635e:	e003      	b.n	8006368 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006364:	2300      	movs	r3, #0
 8006366:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006370:	e02c      	b.n	80063cc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2200      	movs	r2, #0
 800637a:	2180      	movs	r1, #128	; 0x80
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fc2c 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e039      	b.n	8006400 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10b      	bne.n	80063aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	3302      	adds	r3, #2
 80063a6:	61bb      	str	r3, [r7, #24]
 80063a8:	e007      	b.n	80063ba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	3301      	adds	r3, #1
 80063b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1cc      	bne.n	8006372 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2200      	movs	r2, #0
 80063e0:	2140      	movs	r1, #64	; 0x40
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 fbf9 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e006      	b.n	8006400 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	e000      	b.n	8006400 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80063fe:	2302      	movs	r3, #2
  }
}
 8006400:	4618      	mov	r0, r3
 8006402:	3720      	adds	r7, #32
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800640c:	b08c      	sub	sp, #48	; 0x30
 800640e:	af00      	add	r7, sp, #0
 8006410:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	431a      	orrs	r2, r3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	431a      	orrs	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	4313      	orrs	r3, r2
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4baa      	ldr	r3, [pc, #680]	; (80066e0 <UART_SetConfig+0x2d8>)
 8006438:	4013      	ands	r3, r2
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006440:	430b      	orrs	r3, r1
 8006442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a9f      	ldr	r2, [pc, #636]	; (80066e4 <UART_SetConfig+0x2dc>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d004      	beq.n	8006474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006470:	4313      	orrs	r3, r2
 8006472:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800647e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006488:	430b      	orrs	r3, r1
 800648a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	f023 010f 	bic.w	r1, r3, #15
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a90      	ldr	r2, [pc, #576]	; (80066e8 <UART_SetConfig+0x2e0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d125      	bne.n	80064f8 <UART_SetConfig+0xf0>
 80064ac:	4b8f      	ldr	r3, [pc, #572]	; (80066ec <UART_SetConfig+0x2e4>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d81a      	bhi.n	80064f0 <UART_SetConfig+0xe8>
 80064ba:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <UART_SetConfig+0xb8>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064e1 	.word	0x080064e1
 80064c8:	080064d9 	.word	0x080064d9
 80064cc:	080064e9 	.word	0x080064e9
 80064d0:	2301      	movs	r3, #1
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064d6:	e116      	b.n	8006706 <UART_SetConfig+0x2fe>
 80064d8:	2302      	movs	r3, #2
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064de:	e112      	b.n	8006706 <UART_SetConfig+0x2fe>
 80064e0:	2304      	movs	r3, #4
 80064e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e6:	e10e      	b.n	8006706 <UART_SetConfig+0x2fe>
 80064e8:	2308      	movs	r3, #8
 80064ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ee:	e10a      	b.n	8006706 <UART_SetConfig+0x2fe>
 80064f0:	2310      	movs	r3, #16
 80064f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064f6:	e106      	b.n	8006706 <UART_SetConfig+0x2fe>
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a7c      	ldr	r2, [pc, #496]	; (80066f0 <UART_SetConfig+0x2e8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d138      	bne.n	8006574 <UART_SetConfig+0x16c>
 8006502:	4b7a      	ldr	r3, [pc, #488]	; (80066ec <UART_SetConfig+0x2e4>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	f003 030c 	and.w	r3, r3, #12
 800650c:	2b0c      	cmp	r3, #12
 800650e:	d82d      	bhi.n	800656c <UART_SetConfig+0x164>
 8006510:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <UART_SetConfig+0x110>)
 8006512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006516:	bf00      	nop
 8006518:	0800654d 	.word	0x0800654d
 800651c:	0800656d 	.word	0x0800656d
 8006520:	0800656d 	.word	0x0800656d
 8006524:	0800656d 	.word	0x0800656d
 8006528:	0800655d 	.word	0x0800655d
 800652c:	0800656d 	.word	0x0800656d
 8006530:	0800656d 	.word	0x0800656d
 8006534:	0800656d 	.word	0x0800656d
 8006538:	08006555 	.word	0x08006555
 800653c:	0800656d 	.word	0x0800656d
 8006540:	0800656d 	.word	0x0800656d
 8006544:	0800656d 	.word	0x0800656d
 8006548:	08006565 	.word	0x08006565
 800654c:	2300      	movs	r3, #0
 800654e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006552:	e0d8      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006554:	2302      	movs	r3, #2
 8006556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800655a:	e0d4      	b.n	8006706 <UART_SetConfig+0x2fe>
 800655c:	2304      	movs	r3, #4
 800655e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006562:	e0d0      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006564:	2308      	movs	r3, #8
 8006566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800656a:	e0cc      	b.n	8006706 <UART_SetConfig+0x2fe>
 800656c:	2310      	movs	r3, #16
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006572:	e0c8      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5e      	ldr	r2, [pc, #376]	; (80066f4 <UART_SetConfig+0x2ec>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d125      	bne.n	80065ca <UART_SetConfig+0x1c2>
 800657e:	4b5b      	ldr	r3, [pc, #364]	; (80066ec <UART_SetConfig+0x2e4>)
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006584:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006588:	2b30      	cmp	r3, #48	; 0x30
 800658a:	d016      	beq.n	80065ba <UART_SetConfig+0x1b2>
 800658c:	2b30      	cmp	r3, #48	; 0x30
 800658e:	d818      	bhi.n	80065c2 <UART_SetConfig+0x1ba>
 8006590:	2b20      	cmp	r3, #32
 8006592:	d00a      	beq.n	80065aa <UART_SetConfig+0x1a2>
 8006594:	2b20      	cmp	r3, #32
 8006596:	d814      	bhi.n	80065c2 <UART_SetConfig+0x1ba>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <UART_SetConfig+0x19a>
 800659c:	2b10      	cmp	r3, #16
 800659e:	d008      	beq.n	80065b2 <UART_SetConfig+0x1aa>
 80065a0:	e00f      	b.n	80065c2 <UART_SetConfig+0x1ba>
 80065a2:	2300      	movs	r3, #0
 80065a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a8:	e0ad      	b.n	8006706 <UART_SetConfig+0x2fe>
 80065aa:	2302      	movs	r3, #2
 80065ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b0:	e0a9      	b.n	8006706 <UART_SetConfig+0x2fe>
 80065b2:	2304      	movs	r3, #4
 80065b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b8:	e0a5      	b.n	8006706 <UART_SetConfig+0x2fe>
 80065ba:	2308      	movs	r3, #8
 80065bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c0:	e0a1      	b.n	8006706 <UART_SetConfig+0x2fe>
 80065c2:	2310      	movs	r3, #16
 80065c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c8:	e09d      	b.n	8006706 <UART_SetConfig+0x2fe>
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a4a      	ldr	r2, [pc, #296]	; (80066f8 <UART_SetConfig+0x2f0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d125      	bne.n	8006620 <UART_SetConfig+0x218>
 80065d4:	4b45      	ldr	r3, [pc, #276]	; (80066ec <UART_SetConfig+0x2e4>)
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065de:	2bc0      	cmp	r3, #192	; 0xc0
 80065e0:	d016      	beq.n	8006610 <UART_SetConfig+0x208>
 80065e2:	2bc0      	cmp	r3, #192	; 0xc0
 80065e4:	d818      	bhi.n	8006618 <UART_SetConfig+0x210>
 80065e6:	2b80      	cmp	r3, #128	; 0x80
 80065e8:	d00a      	beq.n	8006600 <UART_SetConfig+0x1f8>
 80065ea:	2b80      	cmp	r3, #128	; 0x80
 80065ec:	d814      	bhi.n	8006618 <UART_SetConfig+0x210>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <UART_SetConfig+0x1f0>
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	d008      	beq.n	8006608 <UART_SetConfig+0x200>
 80065f6:	e00f      	b.n	8006618 <UART_SetConfig+0x210>
 80065f8:	2300      	movs	r3, #0
 80065fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065fe:	e082      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006600:	2302      	movs	r3, #2
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006606:	e07e      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006608:	2304      	movs	r3, #4
 800660a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800660e:	e07a      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006610:	2308      	movs	r3, #8
 8006612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006616:	e076      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006618:	2310      	movs	r3, #16
 800661a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661e:	e072      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a35      	ldr	r2, [pc, #212]	; (80066fc <UART_SetConfig+0x2f4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d12a      	bne.n	8006680 <UART_SetConfig+0x278>
 800662a:	4b30      	ldr	r3, [pc, #192]	; (80066ec <UART_SetConfig+0x2e4>)
 800662c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006638:	d01a      	beq.n	8006670 <UART_SetConfig+0x268>
 800663a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800663e:	d81b      	bhi.n	8006678 <UART_SetConfig+0x270>
 8006640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006644:	d00c      	beq.n	8006660 <UART_SetConfig+0x258>
 8006646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800664a:	d815      	bhi.n	8006678 <UART_SetConfig+0x270>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <UART_SetConfig+0x250>
 8006650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006654:	d008      	beq.n	8006668 <UART_SetConfig+0x260>
 8006656:	e00f      	b.n	8006678 <UART_SetConfig+0x270>
 8006658:	2300      	movs	r3, #0
 800665a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800665e:	e052      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006660:	2302      	movs	r3, #2
 8006662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006666:	e04e      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006668:	2304      	movs	r3, #4
 800666a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800666e:	e04a      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006670:	2308      	movs	r3, #8
 8006672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006676:	e046      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006678:	2310      	movs	r3, #16
 800667a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667e:	e042      	b.n	8006706 <UART_SetConfig+0x2fe>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a17      	ldr	r2, [pc, #92]	; (80066e4 <UART_SetConfig+0x2dc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d13a      	bne.n	8006700 <UART_SetConfig+0x2f8>
 800668a:	4b18      	ldr	r3, [pc, #96]	; (80066ec <UART_SetConfig+0x2e4>)
 800668c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006698:	d01a      	beq.n	80066d0 <UART_SetConfig+0x2c8>
 800669a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800669e:	d81b      	bhi.n	80066d8 <UART_SetConfig+0x2d0>
 80066a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a4:	d00c      	beq.n	80066c0 <UART_SetConfig+0x2b8>
 80066a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066aa:	d815      	bhi.n	80066d8 <UART_SetConfig+0x2d0>
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <UART_SetConfig+0x2b0>
 80066b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b4:	d008      	beq.n	80066c8 <UART_SetConfig+0x2c0>
 80066b6:	e00f      	b.n	80066d8 <UART_SetConfig+0x2d0>
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066be:	e022      	b.n	8006706 <UART_SetConfig+0x2fe>
 80066c0:	2302      	movs	r3, #2
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066c6:	e01e      	b.n	8006706 <UART_SetConfig+0x2fe>
 80066c8:	2304      	movs	r3, #4
 80066ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ce:	e01a      	b.n	8006706 <UART_SetConfig+0x2fe>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d6:	e016      	b.n	8006706 <UART_SetConfig+0x2fe>
 80066d8:	2310      	movs	r3, #16
 80066da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066de:	e012      	b.n	8006706 <UART_SetConfig+0x2fe>
 80066e0:	cfff69f3 	.word	0xcfff69f3
 80066e4:	40008000 	.word	0x40008000
 80066e8:	40013800 	.word	0x40013800
 80066ec:	40021000 	.word	0x40021000
 80066f0:	40004400 	.word	0x40004400
 80066f4:	40004800 	.word	0x40004800
 80066f8:	40004c00 	.word	0x40004c00
 80066fc:	40005000 	.word	0x40005000
 8006700:	2310      	movs	r3, #16
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4aae      	ldr	r2, [pc, #696]	; (80069c4 <UART_SetConfig+0x5bc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	f040 8097 	bne.w	8006840 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006716:	2b08      	cmp	r3, #8
 8006718:	d823      	bhi.n	8006762 <UART_SetConfig+0x35a>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <UART_SetConfig+0x318>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006745 	.word	0x08006745
 8006724:	08006763 	.word	0x08006763
 8006728:	0800674d 	.word	0x0800674d
 800672c:	08006763 	.word	0x08006763
 8006730:	08006753 	.word	0x08006753
 8006734:	08006763 	.word	0x08006763
 8006738:	08006763 	.word	0x08006763
 800673c:	08006763 	.word	0x08006763
 8006740:	0800675b 	.word	0x0800675b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006744:	f7fd fb40 	bl	8003dc8 <HAL_RCC_GetPCLK1Freq>
 8006748:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800674a:	e010      	b.n	800676e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800674c:	4b9e      	ldr	r3, [pc, #632]	; (80069c8 <UART_SetConfig+0x5c0>)
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006750:	e00d      	b.n	800676e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006752:	f7fd facb 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006758:	e009      	b.n	800676e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006760:	e005      	b.n	800676e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800676c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8130 	beq.w	80069d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	4a94      	ldr	r2, [pc, #592]	; (80069cc <UART_SetConfig+0x5c4>)
 800677c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006780:	461a      	mov	r2, r3
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	fbb3 f3f2 	udiv	r3, r3, r2
 8006788:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	4413      	add	r3, r2
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	429a      	cmp	r2, r3
 8006798:	d305      	bcc.n	80067a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d903      	bls.n	80067ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067ac:	e113      	b.n	80069d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	2200      	movs	r2, #0
 80067b2:	60bb      	str	r3, [r7, #8]
 80067b4:	60fa      	str	r2, [r7, #12]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	4a84      	ldr	r2, [pc, #528]	; (80069cc <UART_SetConfig+0x5c4>)
 80067bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2200      	movs	r2, #0
 80067c4:	603b      	str	r3, [r7, #0]
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067d0:	f7fa fa32 	bl	8000c38 <__aeabi_uldivmod>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4610      	mov	r0, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	020b      	lsls	r3, r1, #8
 80067e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067ea:	0202      	lsls	r2, r0, #8
 80067ec:	6979      	ldr	r1, [r7, #20]
 80067ee:	6849      	ldr	r1, [r1, #4]
 80067f0:	0849      	lsrs	r1, r1, #1
 80067f2:	2000      	movs	r0, #0
 80067f4:	460c      	mov	r4, r1
 80067f6:	4605      	mov	r5, r0
 80067f8:	eb12 0804 	adds.w	r8, r2, r4
 80067fc:	eb43 0905 	adc.w	r9, r3, r5
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	469a      	mov	sl, r3
 8006808:	4693      	mov	fp, r2
 800680a:	4652      	mov	r2, sl
 800680c:	465b      	mov	r3, fp
 800680e:	4640      	mov	r0, r8
 8006810:	4649      	mov	r1, r9
 8006812:	f7fa fa11 	bl	8000c38 <__aeabi_uldivmod>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4613      	mov	r3, r2
 800681c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006824:	d308      	bcc.n	8006838 <UART_SetConfig+0x430>
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800682c:	d204      	bcs.n	8006838 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6a3a      	ldr	r2, [r7, #32]
 8006834:	60da      	str	r2, [r3, #12]
 8006836:	e0ce      	b.n	80069d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800683e:	e0ca      	b.n	80069d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006848:	d166      	bne.n	8006918 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800684a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800684e:	2b08      	cmp	r3, #8
 8006850:	d827      	bhi.n	80068a2 <UART_SetConfig+0x49a>
 8006852:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <UART_SetConfig+0x450>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	0800687d 	.word	0x0800687d
 800685c:	08006885 	.word	0x08006885
 8006860:	0800688d 	.word	0x0800688d
 8006864:	080068a3 	.word	0x080068a3
 8006868:	08006893 	.word	0x08006893
 800686c:	080068a3 	.word	0x080068a3
 8006870:	080068a3 	.word	0x080068a3
 8006874:	080068a3 	.word	0x080068a3
 8006878:	0800689b 	.word	0x0800689b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800687c:	f7fd faa4 	bl	8003dc8 <HAL_RCC_GetPCLK1Freq>
 8006880:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006882:	e014      	b.n	80068ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006884:	f7fd fab6 	bl	8003df4 <HAL_RCC_GetPCLK2Freq>
 8006888:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800688a:	e010      	b.n	80068ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800688c:	4b4e      	ldr	r3, [pc, #312]	; (80069c8 <UART_SetConfig+0x5c0>)
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006890:	e00d      	b.n	80068ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006892:	f7fd fa2b 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8006896:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006898:	e009      	b.n	80068ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800689a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068a0:	e005      	b.n	80068ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8090 	beq.w	80069d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	4a44      	ldr	r2, [pc, #272]	; (80069cc <UART_SetConfig+0x5c4>)
 80068bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068c0:	461a      	mov	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80068c8:	005a      	lsls	r2, r3, #1
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	441a      	add	r2, r3
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	2b0f      	cmp	r3, #15
 80068e0:	d916      	bls.n	8006910 <UART_SetConfig+0x508>
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e8:	d212      	bcs.n	8006910 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	f023 030f 	bic.w	r3, r3, #15
 80068f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	085b      	lsrs	r3, r3, #1
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	b29a      	uxth	r2, r3
 8006900:	8bfb      	ldrh	r3, [r7, #30]
 8006902:	4313      	orrs	r3, r2
 8006904:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	8bfa      	ldrh	r2, [r7, #30]
 800690c:	60da      	str	r2, [r3, #12]
 800690e:	e062      	b.n	80069d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006916:	e05e      	b.n	80069d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006918:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800691c:	2b08      	cmp	r3, #8
 800691e:	d828      	bhi.n	8006972 <UART_SetConfig+0x56a>
 8006920:	a201      	add	r2, pc, #4	; (adr r2, 8006928 <UART_SetConfig+0x520>)
 8006922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006926:	bf00      	nop
 8006928:	0800694d 	.word	0x0800694d
 800692c:	08006955 	.word	0x08006955
 8006930:	0800695d 	.word	0x0800695d
 8006934:	08006973 	.word	0x08006973
 8006938:	08006963 	.word	0x08006963
 800693c:	08006973 	.word	0x08006973
 8006940:	08006973 	.word	0x08006973
 8006944:	08006973 	.word	0x08006973
 8006948:	0800696b 	.word	0x0800696b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800694c:	f7fd fa3c 	bl	8003dc8 <HAL_RCC_GetPCLK1Freq>
 8006950:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006952:	e014      	b.n	800697e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006954:	f7fd fa4e 	bl	8003df4 <HAL_RCC_GetPCLK2Freq>
 8006958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800695a:	e010      	b.n	800697e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800695c:	4b1a      	ldr	r3, [pc, #104]	; (80069c8 <UART_SetConfig+0x5c0>)
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006960:	e00d      	b.n	800697e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006962:	f7fd f9c3 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8006966:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006968:	e009      	b.n	800697e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006970:	e005      	b.n	800697e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800697c:	bf00      	nop
    }

    if (pclk != 0U)
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	d028      	beq.n	80069d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	4a10      	ldr	r2, [pc, #64]	; (80069cc <UART_SetConfig+0x5c4>)
 800698a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800698e:	461a      	mov	r2, r3
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	fbb3 f2f2 	udiv	r2, r3, r2
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	085b      	lsrs	r3, r3, #1
 800699c:	441a      	add	r2, r3
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	2b0f      	cmp	r3, #15
 80069ac:	d910      	bls.n	80069d0 <UART_SetConfig+0x5c8>
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b4:	d20c      	bcs.n	80069d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60da      	str	r2, [r3, #12]
 80069c0:	e009      	b.n	80069d6 <UART_SetConfig+0x5ce>
 80069c2:	bf00      	nop
 80069c4:	40008000 	.word	0x40008000
 80069c8:	00f42400 	.word	0x00f42400
 80069cc:	08009d40 	.word	0x08009d40
      }
      else
      {
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2201      	movs	r2, #1
 80069da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2200      	movs	r2, #0
 80069ea:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2200      	movs	r2, #0
 80069f0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80069f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3730      	adds	r7, #48	; 0x30
 80069fa:	46bd      	mov	sp, r7
 80069fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00a      	beq.n	8006a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01a      	beq.n	8006b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006afe:	d10a      	bne.n	8006b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	605a      	str	r2, [r3, #4]
  }
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b54:	f7fc f8c6 	bl	8002ce4 <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d10e      	bne.n	8006b86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f82f 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e025      	b.n	8006bd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d10e      	bne.n	8006bb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f819 	bl	8006bda <UART_WaitOnFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e00f      	b.n	8006bd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b09c      	sub	sp, #112	; 0x70
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	603b      	str	r3, [r7, #0]
 8006be6:	4613      	mov	r3, r2
 8006be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bea:	e0a9      	b.n	8006d40 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	f000 80a5 	beq.w	8006d40 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf6:	f7fc f875 	bl	8002ce4 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d302      	bcc.n	8006c0c <UART_WaitOnFlagUntilTimeout+0x32>
 8006c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d140      	bne.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c20:	667b      	str	r3, [r7, #100]	; 0x64
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e6      	bne.n	8006c0c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3308      	adds	r3, #8
 8006c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	663b      	str	r3, [r7, #96]	; 0x60
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e5      	bne.n	8006c3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e069      	b.n	8006d62 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d051      	beq.n	8006d40 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006caa:	d149      	bne.n	8006d40 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e6      	bne.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3308      	adds	r3, #8
 8006cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f023 0301 	bic.w	r3, r3, #1
 8006cfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3308      	adds	r3, #8
 8006d06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d08:	623a      	str	r2, [r7, #32]
 8006d0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	69f9      	ldr	r1, [r7, #28]
 8006d0e:	6a3a      	ldr	r2, [r7, #32]
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e5      	bne.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e010      	b.n	8006d62 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	69da      	ldr	r2, [r3, #28]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	bf0c      	ite	eq
 8006d50:	2301      	moveq	r3, #1
 8006d52:	2300      	movne	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	79fb      	ldrb	r3, [r7, #7]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	f43f af46 	beq.w	8006bec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3770      	adds	r7, #112	; 0x70
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e027      	b.n	8006dd0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2224      	movs	r2, #36	; 0x24
 8006d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0201 	bic.w	r2, r2, #1
 8006da6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006dae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e02d      	b.n	8006e50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2224      	movs	r2, #36	; 0x24
 8006e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0201 	bic.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f84f 	bl	8006ed4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e02d      	b.n	8006ecc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2224      	movs	r2, #36	; 0x24
 8006e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0201 	bic.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f811 	bl	8006ed4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d108      	bne.n	8006ef6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ef4:	e031      	b.n	8006f5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ef6:	2308      	movs	r3, #8
 8006ef8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006efa:	2308      	movs	r3, #8
 8006efc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	0e5b      	lsrs	r3, r3, #25
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	0f5b      	lsrs	r3, r3, #29
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	7b3a      	ldrb	r2, [r7, #12]
 8006f22:	4911      	ldr	r1, [pc, #68]	; (8006f68 <UARTEx_SetNbDataToProcess+0x94>)
 8006f24:	5c8a      	ldrb	r2, [r1, r2]
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f2a:	7b3a      	ldrb	r2, [r7, #12]
 8006f2c:	490f      	ldr	r1, [pc, #60]	; (8006f6c <UARTEx_SetNbDataToProcess+0x98>)
 8006f2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f30:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	7b7a      	ldrb	r2, [r7, #13]
 8006f40:	4909      	ldr	r1, [pc, #36]	; (8006f68 <UARTEx_SetNbDataToProcess+0x94>)
 8006f42:	5c8a      	ldrb	r2, [r1, r2]
 8006f44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f48:	7b7a      	ldrb	r2, [r7, #13]
 8006f4a:	4908      	ldr	r1, [pc, #32]	; (8006f6c <UARTEx_SetNbDataToProcess+0x98>)
 8006f4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f5a:	bf00      	nop
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	08009d58 	.word	0x08009d58
 8006f6c:	08009d60 	.word	0x08009d60

08006f70 <__errno>:
 8006f70:	4b01      	ldr	r3, [pc, #4]	; (8006f78 <__errno+0x8>)
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	20000014 	.word	0x20000014

08006f7c <__libc_init_array>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	4d0d      	ldr	r5, [pc, #52]	; (8006fb4 <__libc_init_array+0x38>)
 8006f80:	4c0d      	ldr	r4, [pc, #52]	; (8006fb8 <__libc_init_array+0x3c>)
 8006f82:	1b64      	subs	r4, r4, r5
 8006f84:	10a4      	asrs	r4, r4, #2
 8006f86:	2600      	movs	r6, #0
 8006f88:	42a6      	cmp	r6, r4
 8006f8a:	d109      	bne.n	8006fa0 <__libc_init_array+0x24>
 8006f8c:	4d0b      	ldr	r5, [pc, #44]	; (8006fbc <__libc_init_array+0x40>)
 8006f8e:	4c0c      	ldr	r4, [pc, #48]	; (8006fc0 <__libc_init_array+0x44>)
 8006f90:	f002 fdac 	bl	8009aec <_init>
 8006f94:	1b64      	subs	r4, r4, r5
 8006f96:	10a4      	asrs	r4, r4, #2
 8006f98:	2600      	movs	r6, #0
 8006f9a:	42a6      	cmp	r6, r4
 8006f9c:	d105      	bne.n	8006faa <__libc_init_array+0x2e>
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa4:	4798      	blx	r3
 8006fa6:	3601      	adds	r6, #1
 8006fa8:	e7ee      	b.n	8006f88 <__libc_init_array+0xc>
 8006faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fae:	4798      	blx	r3
 8006fb0:	3601      	adds	r6, #1
 8006fb2:	e7f2      	b.n	8006f9a <__libc_init_array+0x1e>
 8006fb4:	0800a14c 	.word	0x0800a14c
 8006fb8:	0800a14c 	.word	0x0800a14c
 8006fbc:	0800a14c 	.word	0x0800a14c
 8006fc0:	0800a150 	.word	0x0800a150

08006fc4 <memset>:
 8006fc4:	4402      	add	r2, r0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d100      	bne.n	8006fce <memset+0xa>
 8006fcc:	4770      	bx	lr
 8006fce:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd2:	e7f9      	b.n	8006fc8 <memset+0x4>

08006fd4 <__cvt>:
 8006fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	ec55 4b10 	vmov	r4, r5, d0
 8006fdc:	2d00      	cmp	r5, #0
 8006fde:	460e      	mov	r6, r1
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	462b      	mov	r3, r5
 8006fe4:	bfbb      	ittet	lt
 8006fe6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006fea:	461d      	movlt	r5, r3
 8006fec:	2300      	movge	r3, #0
 8006fee:	232d      	movlt	r3, #45	; 0x2d
 8006ff0:	700b      	strb	r3, [r1, #0]
 8006ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ff8:	4691      	mov	r9, r2
 8006ffa:	f023 0820 	bic.w	r8, r3, #32
 8006ffe:	bfbc      	itt	lt
 8007000:	4622      	movlt	r2, r4
 8007002:	4614      	movlt	r4, r2
 8007004:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007008:	d005      	beq.n	8007016 <__cvt+0x42>
 800700a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800700e:	d100      	bne.n	8007012 <__cvt+0x3e>
 8007010:	3601      	adds	r6, #1
 8007012:	2102      	movs	r1, #2
 8007014:	e000      	b.n	8007018 <__cvt+0x44>
 8007016:	2103      	movs	r1, #3
 8007018:	ab03      	add	r3, sp, #12
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	ab02      	add	r3, sp, #8
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	ec45 4b10 	vmov	d0, r4, r5
 8007024:	4653      	mov	r3, sl
 8007026:	4632      	mov	r2, r6
 8007028:	f000 fe02 	bl	8007c30 <_dtoa_r>
 800702c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007030:	4607      	mov	r7, r0
 8007032:	d102      	bne.n	800703a <__cvt+0x66>
 8007034:	f019 0f01 	tst.w	r9, #1
 8007038:	d022      	beq.n	8007080 <__cvt+0xac>
 800703a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800703e:	eb07 0906 	add.w	r9, r7, r6
 8007042:	d110      	bne.n	8007066 <__cvt+0x92>
 8007044:	783b      	ldrb	r3, [r7, #0]
 8007046:	2b30      	cmp	r3, #48	; 0x30
 8007048:	d10a      	bne.n	8007060 <__cvt+0x8c>
 800704a:	2200      	movs	r2, #0
 800704c:	2300      	movs	r3, #0
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 fd61 	bl	8000b18 <__aeabi_dcmpeq>
 8007056:	b918      	cbnz	r0, 8007060 <__cvt+0x8c>
 8007058:	f1c6 0601 	rsb	r6, r6, #1
 800705c:	f8ca 6000 	str.w	r6, [sl]
 8007060:	f8da 3000 	ldr.w	r3, [sl]
 8007064:	4499      	add	r9, r3
 8007066:	2200      	movs	r2, #0
 8007068:	2300      	movs	r3, #0
 800706a:	4620      	mov	r0, r4
 800706c:	4629      	mov	r1, r5
 800706e:	f7f9 fd53 	bl	8000b18 <__aeabi_dcmpeq>
 8007072:	b108      	cbz	r0, 8007078 <__cvt+0xa4>
 8007074:	f8cd 900c 	str.w	r9, [sp, #12]
 8007078:	2230      	movs	r2, #48	; 0x30
 800707a:	9b03      	ldr	r3, [sp, #12]
 800707c:	454b      	cmp	r3, r9
 800707e:	d307      	bcc.n	8007090 <__cvt+0xbc>
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007084:	1bdb      	subs	r3, r3, r7
 8007086:	4638      	mov	r0, r7
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	b004      	add	sp, #16
 800708c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007090:	1c59      	adds	r1, r3, #1
 8007092:	9103      	str	r1, [sp, #12]
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	e7f0      	b.n	800707a <__cvt+0xa6>

08007098 <__exponent>:
 8007098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800709a:	4603      	mov	r3, r0
 800709c:	2900      	cmp	r1, #0
 800709e:	bfb8      	it	lt
 80070a0:	4249      	neglt	r1, r1
 80070a2:	f803 2b02 	strb.w	r2, [r3], #2
 80070a6:	bfb4      	ite	lt
 80070a8:	222d      	movlt	r2, #45	; 0x2d
 80070aa:	222b      	movge	r2, #43	; 0x2b
 80070ac:	2909      	cmp	r1, #9
 80070ae:	7042      	strb	r2, [r0, #1]
 80070b0:	dd2a      	ble.n	8007108 <__exponent+0x70>
 80070b2:	f10d 0407 	add.w	r4, sp, #7
 80070b6:	46a4      	mov	ip, r4
 80070b8:	270a      	movs	r7, #10
 80070ba:	46a6      	mov	lr, r4
 80070bc:	460a      	mov	r2, r1
 80070be:	fb91 f6f7 	sdiv	r6, r1, r7
 80070c2:	fb07 1516 	mls	r5, r7, r6, r1
 80070c6:	3530      	adds	r5, #48	; 0x30
 80070c8:	2a63      	cmp	r2, #99	; 0x63
 80070ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80070ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070d2:	4631      	mov	r1, r6
 80070d4:	dcf1      	bgt.n	80070ba <__exponent+0x22>
 80070d6:	3130      	adds	r1, #48	; 0x30
 80070d8:	f1ae 0502 	sub.w	r5, lr, #2
 80070dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070e0:	1c44      	adds	r4, r0, #1
 80070e2:	4629      	mov	r1, r5
 80070e4:	4561      	cmp	r1, ip
 80070e6:	d30a      	bcc.n	80070fe <__exponent+0x66>
 80070e8:	f10d 0209 	add.w	r2, sp, #9
 80070ec:	eba2 020e 	sub.w	r2, r2, lr
 80070f0:	4565      	cmp	r5, ip
 80070f2:	bf88      	it	hi
 80070f4:	2200      	movhi	r2, #0
 80070f6:	4413      	add	r3, r2
 80070f8:	1a18      	subs	r0, r3, r0
 80070fa:	b003      	add	sp, #12
 80070fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007102:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007106:	e7ed      	b.n	80070e4 <__exponent+0x4c>
 8007108:	2330      	movs	r3, #48	; 0x30
 800710a:	3130      	adds	r1, #48	; 0x30
 800710c:	7083      	strb	r3, [r0, #2]
 800710e:	70c1      	strb	r1, [r0, #3]
 8007110:	1d03      	adds	r3, r0, #4
 8007112:	e7f1      	b.n	80070f8 <__exponent+0x60>

08007114 <_printf_float>:
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	ed2d 8b02 	vpush	{d8}
 800711c:	b08d      	sub	sp, #52	; 0x34
 800711e:	460c      	mov	r4, r1
 8007120:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007124:	4616      	mov	r6, r2
 8007126:	461f      	mov	r7, r3
 8007128:	4605      	mov	r5, r0
 800712a:	f001 fd27 	bl	8008b7c <_localeconv_r>
 800712e:	f8d0 a000 	ldr.w	sl, [r0]
 8007132:	4650      	mov	r0, sl
 8007134:	f7f9 f874 	bl	8000220 <strlen>
 8007138:	2300      	movs	r3, #0
 800713a:	930a      	str	r3, [sp, #40]	; 0x28
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	9305      	str	r3, [sp, #20]
 8007140:	f8d8 3000 	ldr.w	r3, [r8]
 8007144:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007148:	3307      	adds	r3, #7
 800714a:	f023 0307 	bic.w	r3, r3, #7
 800714e:	f103 0208 	add.w	r2, r3, #8
 8007152:	f8c8 2000 	str.w	r2, [r8]
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800715e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007162:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007166:	9307      	str	r3, [sp, #28]
 8007168:	f8cd 8018 	str.w	r8, [sp, #24]
 800716c:	ee08 0a10 	vmov	s16, r0
 8007170:	4b9f      	ldr	r3, [pc, #636]	; (80073f0 <_printf_float+0x2dc>)
 8007172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007176:	f04f 32ff 	mov.w	r2, #4294967295
 800717a:	f7f9 fcff 	bl	8000b7c <__aeabi_dcmpun>
 800717e:	bb88      	cbnz	r0, 80071e4 <_printf_float+0xd0>
 8007180:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007184:	4b9a      	ldr	r3, [pc, #616]	; (80073f0 <_printf_float+0x2dc>)
 8007186:	f04f 32ff 	mov.w	r2, #4294967295
 800718a:	f7f9 fcd9 	bl	8000b40 <__aeabi_dcmple>
 800718e:	bb48      	cbnz	r0, 80071e4 <_printf_float+0xd0>
 8007190:	2200      	movs	r2, #0
 8007192:	2300      	movs	r3, #0
 8007194:	4640      	mov	r0, r8
 8007196:	4649      	mov	r1, r9
 8007198:	f7f9 fcc8 	bl	8000b2c <__aeabi_dcmplt>
 800719c:	b110      	cbz	r0, 80071a4 <_printf_float+0x90>
 800719e:	232d      	movs	r3, #45	; 0x2d
 80071a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a4:	4b93      	ldr	r3, [pc, #588]	; (80073f4 <_printf_float+0x2e0>)
 80071a6:	4894      	ldr	r0, [pc, #592]	; (80073f8 <_printf_float+0x2e4>)
 80071a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071ac:	bf94      	ite	ls
 80071ae:	4698      	movls	r8, r3
 80071b0:	4680      	movhi	r8, r0
 80071b2:	2303      	movs	r3, #3
 80071b4:	6123      	str	r3, [r4, #16]
 80071b6:	9b05      	ldr	r3, [sp, #20]
 80071b8:	f023 0204 	bic.w	r2, r3, #4
 80071bc:	6022      	str	r2, [r4, #0]
 80071be:	f04f 0900 	mov.w	r9, #0
 80071c2:	9700      	str	r7, [sp, #0]
 80071c4:	4633      	mov	r3, r6
 80071c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80071c8:	4621      	mov	r1, r4
 80071ca:	4628      	mov	r0, r5
 80071cc:	f000 f9d8 	bl	8007580 <_printf_common>
 80071d0:	3001      	adds	r0, #1
 80071d2:	f040 8090 	bne.w	80072f6 <_printf_float+0x1e2>
 80071d6:	f04f 30ff 	mov.w	r0, #4294967295
 80071da:	b00d      	add	sp, #52	; 0x34
 80071dc:	ecbd 8b02 	vpop	{d8}
 80071e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e4:	4642      	mov	r2, r8
 80071e6:	464b      	mov	r3, r9
 80071e8:	4640      	mov	r0, r8
 80071ea:	4649      	mov	r1, r9
 80071ec:	f7f9 fcc6 	bl	8000b7c <__aeabi_dcmpun>
 80071f0:	b140      	cbz	r0, 8007204 <_printf_float+0xf0>
 80071f2:	464b      	mov	r3, r9
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bfbc      	itt	lt
 80071f8:	232d      	movlt	r3, #45	; 0x2d
 80071fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071fe:	487f      	ldr	r0, [pc, #508]	; (80073fc <_printf_float+0x2e8>)
 8007200:	4b7f      	ldr	r3, [pc, #508]	; (8007400 <_printf_float+0x2ec>)
 8007202:	e7d1      	b.n	80071a8 <_printf_float+0x94>
 8007204:	6863      	ldr	r3, [r4, #4]
 8007206:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800720a:	9206      	str	r2, [sp, #24]
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	d13f      	bne.n	8007290 <_printf_float+0x17c>
 8007210:	2306      	movs	r3, #6
 8007212:	6063      	str	r3, [r4, #4]
 8007214:	9b05      	ldr	r3, [sp, #20]
 8007216:	6861      	ldr	r1, [r4, #4]
 8007218:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800721c:	2300      	movs	r3, #0
 800721e:	9303      	str	r3, [sp, #12]
 8007220:	ab0a      	add	r3, sp, #40	; 0x28
 8007222:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007226:	ab09      	add	r3, sp, #36	; 0x24
 8007228:	ec49 8b10 	vmov	d0, r8, r9
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	6022      	str	r2, [r4, #0]
 8007230:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007234:	4628      	mov	r0, r5
 8007236:	f7ff fecd 	bl	8006fd4 <__cvt>
 800723a:	9b06      	ldr	r3, [sp, #24]
 800723c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800723e:	2b47      	cmp	r3, #71	; 0x47
 8007240:	4680      	mov	r8, r0
 8007242:	d108      	bne.n	8007256 <_printf_float+0x142>
 8007244:	1cc8      	adds	r0, r1, #3
 8007246:	db02      	blt.n	800724e <_printf_float+0x13a>
 8007248:	6863      	ldr	r3, [r4, #4]
 800724a:	4299      	cmp	r1, r3
 800724c:	dd41      	ble.n	80072d2 <_printf_float+0x1be>
 800724e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007252:	fa5f fb8b 	uxtb.w	fp, fp
 8007256:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800725a:	d820      	bhi.n	800729e <_printf_float+0x18a>
 800725c:	3901      	subs	r1, #1
 800725e:	465a      	mov	r2, fp
 8007260:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007264:	9109      	str	r1, [sp, #36]	; 0x24
 8007266:	f7ff ff17 	bl	8007098 <__exponent>
 800726a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800726c:	1813      	adds	r3, r2, r0
 800726e:	2a01      	cmp	r2, #1
 8007270:	4681      	mov	r9, r0
 8007272:	6123      	str	r3, [r4, #16]
 8007274:	dc02      	bgt.n	800727c <_printf_float+0x168>
 8007276:	6822      	ldr	r2, [r4, #0]
 8007278:	07d2      	lsls	r2, r2, #31
 800727a:	d501      	bpl.n	8007280 <_printf_float+0x16c>
 800727c:	3301      	adds	r3, #1
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007284:	2b00      	cmp	r3, #0
 8007286:	d09c      	beq.n	80071c2 <_printf_float+0xae>
 8007288:	232d      	movs	r3, #45	; 0x2d
 800728a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800728e:	e798      	b.n	80071c2 <_printf_float+0xae>
 8007290:	9a06      	ldr	r2, [sp, #24]
 8007292:	2a47      	cmp	r2, #71	; 0x47
 8007294:	d1be      	bne.n	8007214 <_printf_float+0x100>
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1bc      	bne.n	8007214 <_printf_float+0x100>
 800729a:	2301      	movs	r3, #1
 800729c:	e7b9      	b.n	8007212 <_printf_float+0xfe>
 800729e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072a2:	d118      	bne.n	80072d6 <_printf_float+0x1c2>
 80072a4:	2900      	cmp	r1, #0
 80072a6:	6863      	ldr	r3, [r4, #4]
 80072a8:	dd0b      	ble.n	80072c2 <_printf_float+0x1ae>
 80072aa:	6121      	str	r1, [r4, #16]
 80072ac:	b913      	cbnz	r3, 80072b4 <_printf_float+0x1a0>
 80072ae:	6822      	ldr	r2, [r4, #0]
 80072b0:	07d0      	lsls	r0, r2, #31
 80072b2:	d502      	bpl.n	80072ba <_printf_float+0x1a6>
 80072b4:	3301      	adds	r3, #1
 80072b6:	440b      	add	r3, r1
 80072b8:	6123      	str	r3, [r4, #16]
 80072ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80072bc:	f04f 0900 	mov.w	r9, #0
 80072c0:	e7de      	b.n	8007280 <_printf_float+0x16c>
 80072c2:	b913      	cbnz	r3, 80072ca <_printf_float+0x1b6>
 80072c4:	6822      	ldr	r2, [r4, #0]
 80072c6:	07d2      	lsls	r2, r2, #31
 80072c8:	d501      	bpl.n	80072ce <_printf_float+0x1ba>
 80072ca:	3302      	adds	r3, #2
 80072cc:	e7f4      	b.n	80072b8 <_printf_float+0x1a4>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e7f2      	b.n	80072b8 <_printf_float+0x1a4>
 80072d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d8:	4299      	cmp	r1, r3
 80072da:	db05      	blt.n	80072e8 <_printf_float+0x1d4>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	6121      	str	r1, [r4, #16]
 80072e0:	07d8      	lsls	r0, r3, #31
 80072e2:	d5ea      	bpl.n	80072ba <_printf_float+0x1a6>
 80072e4:	1c4b      	adds	r3, r1, #1
 80072e6:	e7e7      	b.n	80072b8 <_printf_float+0x1a4>
 80072e8:	2900      	cmp	r1, #0
 80072ea:	bfd4      	ite	le
 80072ec:	f1c1 0202 	rsble	r2, r1, #2
 80072f0:	2201      	movgt	r2, #1
 80072f2:	4413      	add	r3, r2
 80072f4:	e7e0      	b.n	80072b8 <_printf_float+0x1a4>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	055a      	lsls	r2, r3, #21
 80072fa:	d407      	bmi.n	800730c <_printf_float+0x1f8>
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	4642      	mov	r2, r8
 8007300:	4631      	mov	r1, r6
 8007302:	4628      	mov	r0, r5
 8007304:	47b8      	blx	r7
 8007306:	3001      	adds	r0, #1
 8007308:	d12c      	bne.n	8007364 <_printf_float+0x250>
 800730a:	e764      	b.n	80071d6 <_printf_float+0xc2>
 800730c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007310:	f240 80e0 	bls.w	80074d4 <_printf_float+0x3c0>
 8007314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007318:	2200      	movs	r2, #0
 800731a:	2300      	movs	r3, #0
 800731c:	f7f9 fbfc 	bl	8000b18 <__aeabi_dcmpeq>
 8007320:	2800      	cmp	r0, #0
 8007322:	d034      	beq.n	800738e <_printf_float+0x27a>
 8007324:	4a37      	ldr	r2, [pc, #220]	; (8007404 <_printf_float+0x2f0>)
 8007326:	2301      	movs	r3, #1
 8007328:	4631      	mov	r1, r6
 800732a:	4628      	mov	r0, r5
 800732c:	47b8      	blx	r7
 800732e:	3001      	adds	r0, #1
 8007330:	f43f af51 	beq.w	80071d6 <_printf_float+0xc2>
 8007334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007338:	429a      	cmp	r2, r3
 800733a:	db02      	blt.n	8007342 <_printf_float+0x22e>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	07d8      	lsls	r0, r3, #31
 8007340:	d510      	bpl.n	8007364 <_printf_float+0x250>
 8007342:	ee18 3a10 	vmov	r3, s16
 8007346:	4652      	mov	r2, sl
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f af41 	beq.w	80071d6 <_printf_float+0xc2>
 8007354:	f04f 0800 	mov.w	r8, #0
 8007358:	f104 091a 	add.w	r9, r4, #26
 800735c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735e:	3b01      	subs	r3, #1
 8007360:	4543      	cmp	r3, r8
 8007362:	dc09      	bgt.n	8007378 <_printf_float+0x264>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	079b      	lsls	r3, r3, #30
 8007368:	f100 8105 	bmi.w	8007576 <_printf_float+0x462>
 800736c:	68e0      	ldr	r0, [r4, #12]
 800736e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007370:	4298      	cmp	r0, r3
 8007372:	bfb8      	it	lt
 8007374:	4618      	movlt	r0, r3
 8007376:	e730      	b.n	80071da <_printf_float+0xc6>
 8007378:	2301      	movs	r3, #1
 800737a:	464a      	mov	r2, r9
 800737c:	4631      	mov	r1, r6
 800737e:	4628      	mov	r0, r5
 8007380:	47b8      	blx	r7
 8007382:	3001      	adds	r0, #1
 8007384:	f43f af27 	beq.w	80071d6 <_printf_float+0xc2>
 8007388:	f108 0801 	add.w	r8, r8, #1
 800738c:	e7e6      	b.n	800735c <_printf_float+0x248>
 800738e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	dc39      	bgt.n	8007408 <_printf_float+0x2f4>
 8007394:	4a1b      	ldr	r2, [pc, #108]	; (8007404 <_printf_float+0x2f0>)
 8007396:	2301      	movs	r3, #1
 8007398:	4631      	mov	r1, r6
 800739a:	4628      	mov	r0, r5
 800739c:	47b8      	blx	r7
 800739e:	3001      	adds	r0, #1
 80073a0:	f43f af19 	beq.w	80071d6 <_printf_float+0xc2>
 80073a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a8:	4313      	orrs	r3, r2
 80073aa:	d102      	bne.n	80073b2 <_printf_float+0x29e>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	07d9      	lsls	r1, r3, #31
 80073b0:	d5d8      	bpl.n	8007364 <_printf_float+0x250>
 80073b2:	ee18 3a10 	vmov	r3, s16
 80073b6:	4652      	mov	r2, sl
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	f43f af09 	beq.w	80071d6 <_printf_float+0xc2>
 80073c4:	f04f 0900 	mov.w	r9, #0
 80073c8:	f104 0a1a 	add.w	sl, r4, #26
 80073cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ce:	425b      	negs	r3, r3
 80073d0:	454b      	cmp	r3, r9
 80073d2:	dc01      	bgt.n	80073d8 <_printf_float+0x2c4>
 80073d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d6:	e792      	b.n	80072fe <_printf_float+0x1ea>
 80073d8:	2301      	movs	r3, #1
 80073da:	4652      	mov	r2, sl
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	f43f aef7 	beq.w	80071d6 <_printf_float+0xc2>
 80073e8:	f109 0901 	add.w	r9, r9, #1
 80073ec:	e7ee      	b.n	80073cc <_printf_float+0x2b8>
 80073ee:	bf00      	nop
 80073f0:	7fefffff 	.word	0x7fefffff
 80073f4:	08009d6c 	.word	0x08009d6c
 80073f8:	08009d70 	.word	0x08009d70
 80073fc:	08009d78 	.word	0x08009d78
 8007400:	08009d74 	.word	0x08009d74
 8007404:	08009d7c 	.word	0x08009d7c
 8007408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800740a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800740c:	429a      	cmp	r2, r3
 800740e:	bfa8      	it	ge
 8007410:	461a      	movge	r2, r3
 8007412:	2a00      	cmp	r2, #0
 8007414:	4691      	mov	r9, r2
 8007416:	dc37      	bgt.n	8007488 <_printf_float+0x374>
 8007418:	f04f 0b00 	mov.w	fp, #0
 800741c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007420:	f104 021a 	add.w	r2, r4, #26
 8007424:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007426:	9305      	str	r3, [sp, #20]
 8007428:	eba3 0309 	sub.w	r3, r3, r9
 800742c:	455b      	cmp	r3, fp
 800742e:	dc33      	bgt.n	8007498 <_printf_float+0x384>
 8007430:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007434:	429a      	cmp	r2, r3
 8007436:	db3b      	blt.n	80074b0 <_printf_float+0x39c>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	07da      	lsls	r2, r3, #31
 800743c:	d438      	bmi.n	80074b0 <_printf_float+0x39c>
 800743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007440:	9a05      	ldr	r2, [sp, #20]
 8007442:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007444:	1a9a      	subs	r2, r3, r2
 8007446:	eba3 0901 	sub.w	r9, r3, r1
 800744a:	4591      	cmp	r9, r2
 800744c:	bfa8      	it	ge
 800744e:	4691      	movge	r9, r2
 8007450:	f1b9 0f00 	cmp.w	r9, #0
 8007454:	dc35      	bgt.n	80074c2 <_printf_float+0x3ae>
 8007456:	f04f 0800 	mov.w	r8, #0
 800745a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800745e:	f104 0a1a 	add.w	sl, r4, #26
 8007462:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007466:	1a9b      	subs	r3, r3, r2
 8007468:	eba3 0309 	sub.w	r3, r3, r9
 800746c:	4543      	cmp	r3, r8
 800746e:	f77f af79 	ble.w	8007364 <_printf_float+0x250>
 8007472:	2301      	movs	r3, #1
 8007474:	4652      	mov	r2, sl
 8007476:	4631      	mov	r1, r6
 8007478:	4628      	mov	r0, r5
 800747a:	47b8      	blx	r7
 800747c:	3001      	adds	r0, #1
 800747e:	f43f aeaa 	beq.w	80071d6 <_printf_float+0xc2>
 8007482:	f108 0801 	add.w	r8, r8, #1
 8007486:	e7ec      	b.n	8007462 <_printf_float+0x34e>
 8007488:	4613      	mov	r3, r2
 800748a:	4631      	mov	r1, r6
 800748c:	4642      	mov	r2, r8
 800748e:	4628      	mov	r0, r5
 8007490:	47b8      	blx	r7
 8007492:	3001      	adds	r0, #1
 8007494:	d1c0      	bne.n	8007418 <_printf_float+0x304>
 8007496:	e69e      	b.n	80071d6 <_printf_float+0xc2>
 8007498:	2301      	movs	r3, #1
 800749a:	4631      	mov	r1, r6
 800749c:	4628      	mov	r0, r5
 800749e:	9205      	str	r2, [sp, #20]
 80074a0:	47b8      	blx	r7
 80074a2:	3001      	adds	r0, #1
 80074a4:	f43f ae97 	beq.w	80071d6 <_printf_float+0xc2>
 80074a8:	9a05      	ldr	r2, [sp, #20]
 80074aa:	f10b 0b01 	add.w	fp, fp, #1
 80074ae:	e7b9      	b.n	8007424 <_printf_float+0x310>
 80074b0:	ee18 3a10 	vmov	r3, s16
 80074b4:	4652      	mov	r2, sl
 80074b6:	4631      	mov	r1, r6
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b8      	blx	r7
 80074bc:	3001      	adds	r0, #1
 80074be:	d1be      	bne.n	800743e <_printf_float+0x32a>
 80074c0:	e689      	b.n	80071d6 <_printf_float+0xc2>
 80074c2:	9a05      	ldr	r2, [sp, #20]
 80074c4:	464b      	mov	r3, r9
 80074c6:	4442      	add	r2, r8
 80074c8:	4631      	mov	r1, r6
 80074ca:	4628      	mov	r0, r5
 80074cc:	47b8      	blx	r7
 80074ce:	3001      	adds	r0, #1
 80074d0:	d1c1      	bne.n	8007456 <_printf_float+0x342>
 80074d2:	e680      	b.n	80071d6 <_printf_float+0xc2>
 80074d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074d6:	2a01      	cmp	r2, #1
 80074d8:	dc01      	bgt.n	80074de <_printf_float+0x3ca>
 80074da:	07db      	lsls	r3, r3, #31
 80074dc:	d538      	bpl.n	8007550 <_printf_float+0x43c>
 80074de:	2301      	movs	r3, #1
 80074e0:	4642      	mov	r2, r8
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	f43f ae74 	beq.w	80071d6 <_printf_float+0xc2>
 80074ee:	ee18 3a10 	vmov	r3, s16
 80074f2:	4652      	mov	r2, sl
 80074f4:	4631      	mov	r1, r6
 80074f6:	4628      	mov	r0, r5
 80074f8:	47b8      	blx	r7
 80074fa:	3001      	adds	r0, #1
 80074fc:	f43f ae6b 	beq.w	80071d6 <_printf_float+0xc2>
 8007500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007504:	2200      	movs	r2, #0
 8007506:	2300      	movs	r3, #0
 8007508:	f7f9 fb06 	bl	8000b18 <__aeabi_dcmpeq>
 800750c:	b9d8      	cbnz	r0, 8007546 <_printf_float+0x432>
 800750e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007510:	f108 0201 	add.w	r2, r8, #1
 8007514:	3b01      	subs	r3, #1
 8007516:	4631      	mov	r1, r6
 8007518:	4628      	mov	r0, r5
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	d10e      	bne.n	800753e <_printf_float+0x42a>
 8007520:	e659      	b.n	80071d6 <_printf_float+0xc2>
 8007522:	2301      	movs	r3, #1
 8007524:	4652      	mov	r2, sl
 8007526:	4631      	mov	r1, r6
 8007528:	4628      	mov	r0, r5
 800752a:	47b8      	blx	r7
 800752c:	3001      	adds	r0, #1
 800752e:	f43f ae52 	beq.w	80071d6 <_printf_float+0xc2>
 8007532:	f108 0801 	add.w	r8, r8, #1
 8007536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007538:	3b01      	subs	r3, #1
 800753a:	4543      	cmp	r3, r8
 800753c:	dcf1      	bgt.n	8007522 <_printf_float+0x40e>
 800753e:	464b      	mov	r3, r9
 8007540:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007544:	e6dc      	b.n	8007300 <_printf_float+0x1ec>
 8007546:	f04f 0800 	mov.w	r8, #0
 800754a:	f104 0a1a 	add.w	sl, r4, #26
 800754e:	e7f2      	b.n	8007536 <_printf_float+0x422>
 8007550:	2301      	movs	r3, #1
 8007552:	4642      	mov	r2, r8
 8007554:	e7df      	b.n	8007516 <_printf_float+0x402>
 8007556:	2301      	movs	r3, #1
 8007558:	464a      	mov	r2, r9
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	47b8      	blx	r7
 8007560:	3001      	adds	r0, #1
 8007562:	f43f ae38 	beq.w	80071d6 <_printf_float+0xc2>
 8007566:	f108 0801 	add.w	r8, r8, #1
 800756a:	68e3      	ldr	r3, [r4, #12]
 800756c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800756e:	1a5b      	subs	r3, r3, r1
 8007570:	4543      	cmp	r3, r8
 8007572:	dcf0      	bgt.n	8007556 <_printf_float+0x442>
 8007574:	e6fa      	b.n	800736c <_printf_float+0x258>
 8007576:	f04f 0800 	mov.w	r8, #0
 800757a:	f104 0919 	add.w	r9, r4, #25
 800757e:	e7f4      	b.n	800756a <_printf_float+0x456>

08007580 <_printf_common>:
 8007580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007584:	4616      	mov	r6, r2
 8007586:	4699      	mov	r9, r3
 8007588:	688a      	ldr	r2, [r1, #8]
 800758a:	690b      	ldr	r3, [r1, #16]
 800758c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007590:	4293      	cmp	r3, r2
 8007592:	bfb8      	it	lt
 8007594:	4613      	movlt	r3, r2
 8007596:	6033      	str	r3, [r6, #0]
 8007598:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800759c:	4607      	mov	r7, r0
 800759e:	460c      	mov	r4, r1
 80075a0:	b10a      	cbz	r2, 80075a6 <_printf_common+0x26>
 80075a2:	3301      	adds	r3, #1
 80075a4:	6033      	str	r3, [r6, #0]
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	0699      	lsls	r1, r3, #26
 80075aa:	bf42      	ittt	mi
 80075ac:	6833      	ldrmi	r3, [r6, #0]
 80075ae:	3302      	addmi	r3, #2
 80075b0:	6033      	strmi	r3, [r6, #0]
 80075b2:	6825      	ldr	r5, [r4, #0]
 80075b4:	f015 0506 	ands.w	r5, r5, #6
 80075b8:	d106      	bne.n	80075c8 <_printf_common+0x48>
 80075ba:	f104 0a19 	add.w	sl, r4, #25
 80075be:	68e3      	ldr	r3, [r4, #12]
 80075c0:	6832      	ldr	r2, [r6, #0]
 80075c2:	1a9b      	subs	r3, r3, r2
 80075c4:	42ab      	cmp	r3, r5
 80075c6:	dc26      	bgt.n	8007616 <_printf_common+0x96>
 80075c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075cc:	1e13      	subs	r3, r2, #0
 80075ce:	6822      	ldr	r2, [r4, #0]
 80075d0:	bf18      	it	ne
 80075d2:	2301      	movne	r3, #1
 80075d4:	0692      	lsls	r2, r2, #26
 80075d6:	d42b      	bmi.n	8007630 <_printf_common+0xb0>
 80075d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075dc:	4649      	mov	r1, r9
 80075de:	4638      	mov	r0, r7
 80075e0:	47c0      	blx	r8
 80075e2:	3001      	adds	r0, #1
 80075e4:	d01e      	beq.n	8007624 <_printf_common+0xa4>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	68e5      	ldr	r5, [r4, #12]
 80075ea:	6832      	ldr	r2, [r6, #0]
 80075ec:	f003 0306 	and.w	r3, r3, #6
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	bf08      	it	eq
 80075f4:	1aad      	subeq	r5, r5, r2
 80075f6:	68a3      	ldr	r3, [r4, #8]
 80075f8:	6922      	ldr	r2, [r4, #16]
 80075fa:	bf0c      	ite	eq
 80075fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007600:	2500      	movne	r5, #0
 8007602:	4293      	cmp	r3, r2
 8007604:	bfc4      	itt	gt
 8007606:	1a9b      	subgt	r3, r3, r2
 8007608:	18ed      	addgt	r5, r5, r3
 800760a:	2600      	movs	r6, #0
 800760c:	341a      	adds	r4, #26
 800760e:	42b5      	cmp	r5, r6
 8007610:	d11a      	bne.n	8007648 <_printf_common+0xc8>
 8007612:	2000      	movs	r0, #0
 8007614:	e008      	b.n	8007628 <_printf_common+0xa8>
 8007616:	2301      	movs	r3, #1
 8007618:	4652      	mov	r2, sl
 800761a:	4649      	mov	r1, r9
 800761c:	4638      	mov	r0, r7
 800761e:	47c0      	blx	r8
 8007620:	3001      	adds	r0, #1
 8007622:	d103      	bne.n	800762c <_printf_common+0xac>
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762c:	3501      	adds	r5, #1
 800762e:	e7c6      	b.n	80075be <_printf_common+0x3e>
 8007630:	18e1      	adds	r1, r4, r3
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	2030      	movs	r0, #48	; 0x30
 8007636:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800763a:	4422      	add	r2, r4
 800763c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007640:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007644:	3302      	adds	r3, #2
 8007646:	e7c7      	b.n	80075d8 <_printf_common+0x58>
 8007648:	2301      	movs	r3, #1
 800764a:	4622      	mov	r2, r4
 800764c:	4649      	mov	r1, r9
 800764e:	4638      	mov	r0, r7
 8007650:	47c0      	blx	r8
 8007652:	3001      	adds	r0, #1
 8007654:	d0e6      	beq.n	8007624 <_printf_common+0xa4>
 8007656:	3601      	adds	r6, #1
 8007658:	e7d9      	b.n	800760e <_printf_common+0x8e>
	...

0800765c <_printf_i>:
 800765c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007660:	7e0f      	ldrb	r7, [r1, #24]
 8007662:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007664:	2f78      	cmp	r7, #120	; 0x78
 8007666:	4691      	mov	r9, r2
 8007668:	4680      	mov	r8, r0
 800766a:	460c      	mov	r4, r1
 800766c:	469a      	mov	sl, r3
 800766e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007672:	d807      	bhi.n	8007684 <_printf_i+0x28>
 8007674:	2f62      	cmp	r7, #98	; 0x62
 8007676:	d80a      	bhi.n	800768e <_printf_i+0x32>
 8007678:	2f00      	cmp	r7, #0
 800767a:	f000 80d8 	beq.w	800782e <_printf_i+0x1d2>
 800767e:	2f58      	cmp	r7, #88	; 0x58
 8007680:	f000 80a3 	beq.w	80077ca <_printf_i+0x16e>
 8007684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007688:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800768c:	e03a      	b.n	8007704 <_printf_i+0xa8>
 800768e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007692:	2b15      	cmp	r3, #21
 8007694:	d8f6      	bhi.n	8007684 <_printf_i+0x28>
 8007696:	a101      	add	r1, pc, #4	; (adr r1, 800769c <_printf_i+0x40>)
 8007698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800769c:	080076f5 	.word	0x080076f5
 80076a0:	08007709 	.word	0x08007709
 80076a4:	08007685 	.word	0x08007685
 80076a8:	08007685 	.word	0x08007685
 80076ac:	08007685 	.word	0x08007685
 80076b0:	08007685 	.word	0x08007685
 80076b4:	08007709 	.word	0x08007709
 80076b8:	08007685 	.word	0x08007685
 80076bc:	08007685 	.word	0x08007685
 80076c0:	08007685 	.word	0x08007685
 80076c4:	08007685 	.word	0x08007685
 80076c8:	08007815 	.word	0x08007815
 80076cc:	08007739 	.word	0x08007739
 80076d0:	080077f7 	.word	0x080077f7
 80076d4:	08007685 	.word	0x08007685
 80076d8:	08007685 	.word	0x08007685
 80076dc:	08007837 	.word	0x08007837
 80076e0:	08007685 	.word	0x08007685
 80076e4:	08007739 	.word	0x08007739
 80076e8:	08007685 	.word	0x08007685
 80076ec:	08007685 	.word	0x08007685
 80076f0:	080077ff 	.word	0x080077ff
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	1d1a      	adds	r2, r3, #4
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	602a      	str	r2, [r5, #0]
 80076fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007704:	2301      	movs	r3, #1
 8007706:	e0a3      	b.n	8007850 <_printf_i+0x1f4>
 8007708:	6820      	ldr	r0, [r4, #0]
 800770a:	6829      	ldr	r1, [r5, #0]
 800770c:	0606      	lsls	r6, r0, #24
 800770e:	f101 0304 	add.w	r3, r1, #4
 8007712:	d50a      	bpl.n	800772a <_printf_i+0xce>
 8007714:	680e      	ldr	r6, [r1, #0]
 8007716:	602b      	str	r3, [r5, #0]
 8007718:	2e00      	cmp	r6, #0
 800771a:	da03      	bge.n	8007724 <_printf_i+0xc8>
 800771c:	232d      	movs	r3, #45	; 0x2d
 800771e:	4276      	negs	r6, r6
 8007720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007724:	485e      	ldr	r0, [pc, #376]	; (80078a0 <_printf_i+0x244>)
 8007726:	230a      	movs	r3, #10
 8007728:	e019      	b.n	800775e <_printf_i+0x102>
 800772a:	680e      	ldr	r6, [r1, #0]
 800772c:	602b      	str	r3, [r5, #0]
 800772e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007732:	bf18      	it	ne
 8007734:	b236      	sxthne	r6, r6
 8007736:	e7ef      	b.n	8007718 <_printf_i+0xbc>
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	6820      	ldr	r0, [r4, #0]
 800773c:	1d19      	adds	r1, r3, #4
 800773e:	6029      	str	r1, [r5, #0]
 8007740:	0601      	lsls	r1, r0, #24
 8007742:	d501      	bpl.n	8007748 <_printf_i+0xec>
 8007744:	681e      	ldr	r6, [r3, #0]
 8007746:	e002      	b.n	800774e <_printf_i+0xf2>
 8007748:	0646      	lsls	r6, r0, #25
 800774a:	d5fb      	bpl.n	8007744 <_printf_i+0xe8>
 800774c:	881e      	ldrh	r6, [r3, #0]
 800774e:	4854      	ldr	r0, [pc, #336]	; (80078a0 <_printf_i+0x244>)
 8007750:	2f6f      	cmp	r7, #111	; 0x6f
 8007752:	bf0c      	ite	eq
 8007754:	2308      	moveq	r3, #8
 8007756:	230a      	movne	r3, #10
 8007758:	2100      	movs	r1, #0
 800775a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800775e:	6865      	ldr	r5, [r4, #4]
 8007760:	60a5      	str	r5, [r4, #8]
 8007762:	2d00      	cmp	r5, #0
 8007764:	bfa2      	ittt	ge
 8007766:	6821      	ldrge	r1, [r4, #0]
 8007768:	f021 0104 	bicge.w	r1, r1, #4
 800776c:	6021      	strge	r1, [r4, #0]
 800776e:	b90e      	cbnz	r6, 8007774 <_printf_i+0x118>
 8007770:	2d00      	cmp	r5, #0
 8007772:	d04d      	beq.n	8007810 <_printf_i+0x1b4>
 8007774:	4615      	mov	r5, r2
 8007776:	fbb6 f1f3 	udiv	r1, r6, r3
 800777a:	fb03 6711 	mls	r7, r3, r1, r6
 800777e:	5dc7      	ldrb	r7, [r0, r7]
 8007780:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007784:	4637      	mov	r7, r6
 8007786:	42bb      	cmp	r3, r7
 8007788:	460e      	mov	r6, r1
 800778a:	d9f4      	bls.n	8007776 <_printf_i+0x11a>
 800778c:	2b08      	cmp	r3, #8
 800778e:	d10b      	bne.n	80077a8 <_printf_i+0x14c>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	07de      	lsls	r6, r3, #31
 8007794:	d508      	bpl.n	80077a8 <_printf_i+0x14c>
 8007796:	6923      	ldr	r3, [r4, #16]
 8007798:	6861      	ldr	r1, [r4, #4]
 800779a:	4299      	cmp	r1, r3
 800779c:	bfde      	ittt	le
 800779e:	2330      	movle	r3, #48	; 0x30
 80077a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077a8:	1b52      	subs	r2, r2, r5
 80077aa:	6122      	str	r2, [r4, #16]
 80077ac:	f8cd a000 	str.w	sl, [sp]
 80077b0:	464b      	mov	r3, r9
 80077b2:	aa03      	add	r2, sp, #12
 80077b4:	4621      	mov	r1, r4
 80077b6:	4640      	mov	r0, r8
 80077b8:	f7ff fee2 	bl	8007580 <_printf_common>
 80077bc:	3001      	adds	r0, #1
 80077be:	d14c      	bne.n	800785a <_printf_i+0x1fe>
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295
 80077c4:	b004      	add	sp, #16
 80077c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ca:	4835      	ldr	r0, [pc, #212]	; (80078a0 <_printf_i+0x244>)
 80077cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80077d0:	6829      	ldr	r1, [r5, #0]
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80077d8:	6029      	str	r1, [r5, #0]
 80077da:	061d      	lsls	r5, r3, #24
 80077dc:	d514      	bpl.n	8007808 <_printf_i+0x1ac>
 80077de:	07df      	lsls	r7, r3, #31
 80077e0:	bf44      	itt	mi
 80077e2:	f043 0320 	orrmi.w	r3, r3, #32
 80077e6:	6023      	strmi	r3, [r4, #0]
 80077e8:	b91e      	cbnz	r6, 80077f2 <_printf_i+0x196>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	f023 0320 	bic.w	r3, r3, #32
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	2310      	movs	r3, #16
 80077f4:	e7b0      	b.n	8007758 <_printf_i+0xfc>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	f043 0320 	orr.w	r3, r3, #32
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	2378      	movs	r3, #120	; 0x78
 8007800:	4828      	ldr	r0, [pc, #160]	; (80078a4 <_printf_i+0x248>)
 8007802:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007806:	e7e3      	b.n	80077d0 <_printf_i+0x174>
 8007808:	0659      	lsls	r1, r3, #25
 800780a:	bf48      	it	mi
 800780c:	b2b6      	uxthmi	r6, r6
 800780e:	e7e6      	b.n	80077de <_printf_i+0x182>
 8007810:	4615      	mov	r5, r2
 8007812:	e7bb      	b.n	800778c <_printf_i+0x130>
 8007814:	682b      	ldr	r3, [r5, #0]
 8007816:	6826      	ldr	r6, [r4, #0]
 8007818:	6961      	ldr	r1, [r4, #20]
 800781a:	1d18      	adds	r0, r3, #4
 800781c:	6028      	str	r0, [r5, #0]
 800781e:	0635      	lsls	r5, r6, #24
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	d501      	bpl.n	8007828 <_printf_i+0x1cc>
 8007824:	6019      	str	r1, [r3, #0]
 8007826:	e002      	b.n	800782e <_printf_i+0x1d2>
 8007828:	0670      	lsls	r0, r6, #25
 800782a:	d5fb      	bpl.n	8007824 <_printf_i+0x1c8>
 800782c:	8019      	strh	r1, [r3, #0]
 800782e:	2300      	movs	r3, #0
 8007830:	6123      	str	r3, [r4, #16]
 8007832:	4615      	mov	r5, r2
 8007834:	e7ba      	b.n	80077ac <_printf_i+0x150>
 8007836:	682b      	ldr	r3, [r5, #0]
 8007838:	1d1a      	adds	r2, r3, #4
 800783a:	602a      	str	r2, [r5, #0]
 800783c:	681d      	ldr	r5, [r3, #0]
 800783e:	6862      	ldr	r2, [r4, #4]
 8007840:	2100      	movs	r1, #0
 8007842:	4628      	mov	r0, r5
 8007844:	f7f8 fcf4 	bl	8000230 <memchr>
 8007848:	b108      	cbz	r0, 800784e <_printf_i+0x1f2>
 800784a:	1b40      	subs	r0, r0, r5
 800784c:	6060      	str	r0, [r4, #4]
 800784e:	6863      	ldr	r3, [r4, #4]
 8007850:	6123      	str	r3, [r4, #16]
 8007852:	2300      	movs	r3, #0
 8007854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007858:	e7a8      	b.n	80077ac <_printf_i+0x150>
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	462a      	mov	r2, r5
 800785e:	4649      	mov	r1, r9
 8007860:	4640      	mov	r0, r8
 8007862:	47d0      	blx	sl
 8007864:	3001      	adds	r0, #1
 8007866:	d0ab      	beq.n	80077c0 <_printf_i+0x164>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	079b      	lsls	r3, r3, #30
 800786c:	d413      	bmi.n	8007896 <_printf_i+0x23a>
 800786e:	68e0      	ldr	r0, [r4, #12]
 8007870:	9b03      	ldr	r3, [sp, #12]
 8007872:	4298      	cmp	r0, r3
 8007874:	bfb8      	it	lt
 8007876:	4618      	movlt	r0, r3
 8007878:	e7a4      	b.n	80077c4 <_printf_i+0x168>
 800787a:	2301      	movs	r3, #1
 800787c:	4632      	mov	r2, r6
 800787e:	4649      	mov	r1, r9
 8007880:	4640      	mov	r0, r8
 8007882:	47d0      	blx	sl
 8007884:	3001      	adds	r0, #1
 8007886:	d09b      	beq.n	80077c0 <_printf_i+0x164>
 8007888:	3501      	adds	r5, #1
 800788a:	68e3      	ldr	r3, [r4, #12]
 800788c:	9903      	ldr	r1, [sp, #12]
 800788e:	1a5b      	subs	r3, r3, r1
 8007890:	42ab      	cmp	r3, r5
 8007892:	dcf2      	bgt.n	800787a <_printf_i+0x21e>
 8007894:	e7eb      	b.n	800786e <_printf_i+0x212>
 8007896:	2500      	movs	r5, #0
 8007898:	f104 0619 	add.w	r6, r4, #25
 800789c:	e7f5      	b.n	800788a <_printf_i+0x22e>
 800789e:	bf00      	nop
 80078a0:	08009d7e 	.word	0x08009d7e
 80078a4:	08009d8f 	.word	0x08009d8f

080078a8 <_puts_r>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	460e      	mov	r6, r1
 80078ac:	4605      	mov	r5, r0
 80078ae:	b118      	cbz	r0, 80078b8 <_puts_r+0x10>
 80078b0:	6983      	ldr	r3, [r0, #24]
 80078b2:	b90b      	cbnz	r3, 80078b8 <_puts_r+0x10>
 80078b4:	f001 f8c4 	bl	8008a40 <__sinit>
 80078b8:	69ab      	ldr	r3, [r5, #24]
 80078ba:	68ac      	ldr	r4, [r5, #8]
 80078bc:	b913      	cbnz	r3, 80078c4 <_puts_r+0x1c>
 80078be:	4628      	mov	r0, r5
 80078c0:	f001 f8be 	bl	8008a40 <__sinit>
 80078c4:	4b2c      	ldr	r3, [pc, #176]	; (8007978 <_puts_r+0xd0>)
 80078c6:	429c      	cmp	r4, r3
 80078c8:	d120      	bne.n	800790c <_puts_r+0x64>
 80078ca:	686c      	ldr	r4, [r5, #4]
 80078cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078ce:	07db      	lsls	r3, r3, #31
 80078d0:	d405      	bmi.n	80078de <_puts_r+0x36>
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	0598      	lsls	r0, r3, #22
 80078d6:	d402      	bmi.n	80078de <_puts_r+0x36>
 80078d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078da:	f001 f954 	bl	8008b86 <__retarget_lock_acquire_recursive>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	0719      	lsls	r1, r3, #28
 80078e2:	d51d      	bpl.n	8007920 <_puts_r+0x78>
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	b1db      	cbz	r3, 8007920 <_puts_r+0x78>
 80078e8:	3e01      	subs	r6, #1
 80078ea:	68a3      	ldr	r3, [r4, #8]
 80078ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078f0:	3b01      	subs	r3, #1
 80078f2:	60a3      	str	r3, [r4, #8]
 80078f4:	bb39      	cbnz	r1, 8007946 <_puts_r+0x9e>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	da38      	bge.n	800796c <_puts_r+0xc4>
 80078fa:	4622      	mov	r2, r4
 80078fc:	210a      	movs	r1, #10
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 f848 	bl	8007994 <__swbuf_r>
 8007904:	3001      	adds	r0, #1
 8007906:	d011      	beq.n	800792c <_puts_r+0x84>
 8007908:	250a      	movs	r5, #10
 800790a:	e011      	b.n	8007930 <_puts_r+0x88>
 800790c:	4b1b      	ldr	r3, [pc, #108]	; (800797c <_puts_r+0xd4>)
 800790e:	429c      	cmp	r4, r3
 8007910:	d101      	bne.n	8007916 <_puts_r+0x6e>
 8007912:	68ac      	ldr	r4, [r5, #8]
 8007914:	e7da      	b.n	80078cc <_puts_r+0x24>
 8007916:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <_puts_r+0xd8>)
 8007918:	429c      	cmp	r4, r3
 800791a:	bf08      	it	eq
 800791c:	68ec      	ldreq	r4, [r5, #12]
 800791e:	e7d5      	b.n	80078cc <_puts_r+0x24>
 8007920:	4621      	mov	r1, r4
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f888 	bl	8007a38 <__swsetup_r>
 8007928:	2800      	cmp	r0, #0
 800792a:	d0dd      	beq.n	80078e8 <_puts_r+0x40>
 800792c:	f04f 35ff 	mov.w	r5, #4294967295
 8007930:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007932:	07da      	lsls	r2, r3, #31
 8007934:	d405      	bmi.n	8007942 <_puts_r+0x9a>
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	059b      	lsls	r3, r3, #22
 800793a:	d402      	bmi.n	8007942 <_puts_r+0x9a>
 800793c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800793e:	f001 f923 	bl	8008b88 <__retarget_lock_release_recursive>
 8007942:	4628      	mov	r0, r5
 8007944:	bd70      	pop	{r4, r5, r6, pc}
 8007946:	2b00      	cmp	r3, #0
 8007948:	da04      	bge.n	8007954 <_puts_r+0xac>
 800794a:	69a2      	ldr	r2, [r4, #24]
 800794c:	429a      	cmp	r2, r3
 800794e:	dc06      	bgt.n	800795e <_puts_r+0xb6>
 8007950:	290a      	cmp	r1, #10
 8007952:	d004      	beq.n	800795e <_puts_r+0xb6>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	6022      	str	r2, [r4, #0]
 800795a:	7019      	strb	r1, [r3, #0]
 800795c:	e7c5      	b.n	80078ea <_puts_r+0x42>
 800795e:	4622      	mov	r2, r4
 8007960:	4628      	mov	r0, r5
 8007962:	f000 f817 	bl	8007994 <__swbuf_r>
 8007966:	3001      	adds	r0, #1
 8007968:	d1bf      	bne.n	80078ea <_puts_r+0x42>
 800796a:	e7df      	b.n	800792c <_puts_r+0x84>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	250a      	movs	r5, #10
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	6022      	str	r2, [r4, #0]
 8007974:	701d      	strb	r5, [r3, #0]
 8007976:	e7db      	b.n	8007930 <_puts_r+0x88>
 8007978:	08009e50 	.word	0x08009e50
 800797c:	08009e70 	.word	0x08009e70
 8007980:	08009e30 	.word	0x08009e30

08007984 <puts>:
 8007984:	4b02      	ldr	r3, [pc, #8]	; (8007990 <puts+0xc>)
 8007986:	4601      	mov	r1, r0
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	f7ff bf8d 	b.w	80078a8 <_puts_r>
 800798e:	bf00      	nop
 8007990:	20000014 	.word	0x20000014

08007994 <__swbuf_r>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	460e      	mov	r6, r1
 8007998:	4614      	mov	r4, r2
 800799a:	4605      	mov	r5, r0
 800799c:	b118      	cbz	r0, 80079a6 <__swbuf_r+0x12>
 800799e:	6983      	ldr	r3, [r0, #24]
 80079a0:	b90b      	cbnz	r3, 80079a6 <__swbuf_r+0x12>
 80079a2:	f001 f84d 	bl	8008a40 <__sinit>
 80079a6:	4b21      	ldr	r3, [pc, #132]	; (8007a2c <__swbuf_r+0x98>)
 80079a8:	429c      	cmp	r4, r3
 80079aa:	d12b      	bne.n	8007a04 <__swbuf_r+0x70>
 80079ac:	686c      	ldr	r4, [r5, #4]
 80079ae:	69a3      	ldr	r3, [r4, #24]
 80079b0:	60a3      	str	r3, [r4, #8]
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	071a      	lsls	r2, r3, #28
 80079b6:	d52f      	bpl.n	8007a18 <__swbuf_r+0x84>
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	b36b      	cbz	r3, 8007a18 <__swbuf_r+0x84>
 80079bc:	6923      	ldr	r3, [r4, #16]
 80079be:	6820      	ldr	r0, [r4, #0]
 80079c0:	1ac0      	subs	r0, r0, r3
 80079c2:	6963      	ldr	r3, [r4, #20]
 80079c4:	b2f6      	uxtb	r6, r6
 80079c6:	4283      	cmp	r3, r0
 80079c8:	4637      	mov	r7, r6
 80079ca:	dc04      	bgt.n	80079d6 <__swbuf_r+0x42>
 80079cc:	4621      	mov	r1, r4
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 ffa2 	bl	8008918 <_fflush_r>
 80079d4:	bb30      	cbnz	r0, 8007a24 <__swbuf_r+0x90>
 80079d6:	68a3      	ldr	r3, [r4, #8]
 80079d8:	3b01      	subs	r3, #1
 80079da:	60a3      	str	r3, [r4, #8]
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	6022      	str	r2, [r4, #0]
 80079e2:	701e      	strb	r6, [r3, #0]
 80079e4:	6963      	ldr	r3, [r4, #20]
 80079e6:	3001      	adds	r0, #1
 80079e8:	4283      	cmp	r3, r0
 80079ea:	d004      	beq.n	80079f6 <__swbuf_r+0x62>
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	07db      	lsls	r3, r3, #31
 80079f0:	d506      	bpl.n	8007a00 <__swbuf_r+0x6c>
 80079f2:	2e0a      	cmp	r6, #10
 80079f4:	d104      	bne.n	8007a00 <__swbuf_r+0x6c>
 80079f6:	4621      	mov	r1, r4
 80079f8:	4628      	mov	r0, r5
 80079fa:	f000 ff8d 	bl	8008918 <_fflush_r>
 80079fe:	b988      	cbnz	r0, 8007a24 <__swbuf_r+0x90>
 8007a00:	4638      	mov	r0, r7
 8007a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a04:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <__swbuf_r+0x9c>)
 8007a06:	429c      	cmp	r4, r3
 8007a08:	d101      	bne.n	8007a0e <__swbuf_r+0x7a>
 8007a0a:	68ac      	ldr	r4, [r5, #8]
 8007a0c:	e7cf      	b.n	80079ae <__swbuf_r+0x1a>
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <__swbuf_r+0xa0>)
 8007a10:	429c      	cmp	r4, r3
 8007a12:	bf08      	it	eq
 8007a14:	68ec      	ldreq	r4, [r5, #12]
 8007a16:	e7ca      	b.n	80079ae <__swbuf_r+0x1a>
 8007a18:	4621      	mov	r1, r4
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f000 f80c 	bl	8007a38 <__swsetup_r>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d0cb      	beq.n	80079bc <__swbuf_r+0x28>
 8007a24:	f04f 37ff 	mov.w	r7, #4294967295
 8007a28:	e7ea      	b.n	8007a00 <__swbuf_r+0x6c>
 8007a2a:	bf00      	nop
 8007a2c:	08009e50 	.word	0x08009e50
 8007a30:	08009e70 	.word	0x08009e70
 8007a34:	08009e30 	.word	0x08009e30

08007a38 <__swsetup_r>:
 8007a38:	4b32      	ldr	r3, [pc, #200]	; (8007b04 <__swsetup_r+0xcc>)
 8007a3a:	b570      	push	{r4, r5, r6, lr}
 8007a3c:	681d      	ldr	r5, [r3, #0]
 8007a3e:	4606      	mov	r6, r0
 8007a40:	460c      	mov	r4, r1
 8007a42:	b125      	cbz	r5, 8007a4e <__swsetup_r+0x16>
 8007a44:	69ab      	ldr	r3, [r5, #24]
 8007a46:	b913      	cbnz	r3, 8007a4e <__swsetup_r+0x16>
 8007a48:	4628      	mov	r0, r5
 8007a4a:	f000 fff9 	bl	8008a40 <__sinit>
 8007a4e:	4b2e      	ldr	r3, [pc, #184]	; (8007b08 <__swsetup_r+0xd0>)
 8007a50:	429c      	cmp	r4, r3
 8007a52:	d10f      	bne.n	8007a74 <__swsetup_r+0x3c>
 8007a54:	686c      	ldr	r4, [r5, #4]
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a5c:	0719      	lsls	r1, r3, #28
 8007a5e:	d42c      	bmi.n	8007aba <__swsetup_r+0x82>
 8007a60:	06dd      	lsls	r5, r3, #27
 8007a62:	d411      	bmi.n	8007a88 <__swsetup_r+0x50>
 8007a64:	2309      	movs	r3, #9
 8007a66:	6033      	str	r3, [r6, #0]
 8007a68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a6c:	81a3      	strh	r3, [r4, #12]
 8007a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a72:	e03e      	b.n	8007af2 <__swsetup_r+0xba>
 8007a74:	4b25      	ldr	r3, [pc, #148]	; (8007b0c <__swsetup_r+0xd4>)
 8007a76:	429c      	cmp	r4, r3
 8007a78:	d101      	bne.n	8007a7e <__swsetup_r+0x46>
 8007a7a:	68ac      	ldr	r4, [r5, #8]
 8007a7c:	e7eb      	b.n	8007a56 <__swsetup_r+0x1e>
 8007a7e:	4b24      	ldr	r3, [pc, #144]	; (8007b10 <__swsetup_r+0xd8>)
 8007a80:	429c      	cmp	r4, r3
 8007a82:	bf08      	it	eq
 8007a84:	68ec      	ldreq	r4, [r5, #12]
 8007a86:	e7e6      	b.n	8007a56 <__swsetup_r+0x1e>
 8007a88:	0758      	lsls	r0, r3, #29
 8007a8a:	d512      	bpl.n	8007ab2 <__swsetup_r+0x7a>
 8007a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a8e:	b141      	cbz	r1, 8007aa2 <__swsetup_r+0x6a>
 8007a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a94:	4299      	cmp	r1, r3
 8007a96:	d002      	beq.n	8007a9e <__swsetup_r+0x66>
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f001 fc8b 	bl	80093b4 <_free_r>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6363      	str	r3, [r4, #52]	; 0x34
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	6063      	str	r3, [r4, #4]
 8007aae:	6923      	ldr	r3, [r4, #16]
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	f043 0308 	orr.w	r3, r3, #8
 8007ab8:	81a3      	strh	r3, [r4, #12]
 8007aba:	6923      	ldr	r3, [r4, #16]
 8007abc:	b94b      	cbnz	r3, 8007ad2 <__swsetup_r+0x9a>
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac8:	d003      	beq.n	8007ad2 <__swsetup_r+0x9a>
 8007aca:	4621      	mov	r1, r4
 8007acc:	4630      	mov	r0, r6
 8007ace:	f001 f881 	bl	8008bd4 <__smakebuf_r>
 8007ad2:	89a0      	ldrh	r0, [r4, #12]
 8007ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ad8:	f010 0301 	ands.w	r3, r0, #1
 8007adc:	d00a      	beq.n	8007af4 <__swsetup_r+0xbc>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60a3      	str	r3, [r4, #8]
 8007ae2:	6963      	ldr	r3, [r4, #20]
 8007ae4:	425b      	negs	r3, r3
 8007ae6:	61a3      	str	r3, [r4, #24]
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	b943      	cbnz	r3, 8007afe <__swsetup_r+0xc6>
 8007aec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007af0:	d1ba      	bne.n	8007a68 <__swsetup_r+0x30>
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	0781      	lsls	r1, r0, #30
 8007af6:	bf58      	it	pl
 8007af8:	6963      	ldrpl	r3, [r4, #20]
 8007afa:	60a3      	str	r3, [r4, #8]
 8007afc:	e7f4      	b.n	8007ae8 <__swsetup_r+0xb0>
 8007afe:	2000      	movs	r0, #0
 8007b00:	e7f7      	b.n	8007af2 <__swsetup_r+0xba>
 8007b02:	bf00      	nop
 8007b04:	20000014 	.word	0x20000014
 8007b08:	08009e50 	.word	0x08009e50
 8007b0c:	08009e70 	.word	0x08009e70
 8007b10:	08009e30 	.word	0x08009e30

08007b14 <quorem>:
 8007b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b18:	6903      	ldr	r3, [r0, #16]
 8007b1a:	690c      	ldr	r4, [r1, #16]
 8007b1c:	42a3      	cmp	r3, r4
 8007b1e:	4607      	mov	r7, r0
 8007b20:	f2c0 8081 	blt.w	8007c26 <quorem+0x112>
 8007b24:	3c01      	subs	r4, #1
 8007b26:	f101 0814 	add.w	r8, r1, #20
 8007b2a:	f100 0514 	add.w	r5, r0, #20
 8007b2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b48:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b4c:	d331      	bcc.n	8007bb2 <quorem+0x9e>
 8007b4e:	f04f 0e00 	mov.w	lr, #0
 8007b52:	4640      	mov	r0, r8
 8007b54:	46ac      	mov	ip, r5
 8007b56:	46f2      	mov	sl, lr
 8007b58:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b5c:	b293      	uxth	r3, r2
 8007b5e:	fb06 e303 	mla	r3, r6, r3, lr
 8007b62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	ebaa 0303 	sub.w	r3, sl, r3
 8007b6c:	f8dc a000 	ldr.w	sl, [ip]
 8007b70:	0c12      	lsrs	r2, r2, #16
 8007b72:	fa13 f38a 	uxtah	r3, r3, sl
 8007b76:	fb06 e202 	mla	r2, r6, r2, lr
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	9b00      	ldr	r3, [sp, #0]
 8007b7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b82:	b292      	uxth	r2, r2
 8007b84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b8c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b90:	4581      	cmp	r9, r0
 8007b92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b96:	f84c 3b04 	str.w	r3, [ip], #4
 8007b9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b9e:	d2db      	bcs.n	8007b58 <quorem+0x44>
 8007ba0:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ba4:	b92b      	cbnz	r3, 8007bb2 <quorem+0x9e>
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	3b04      	subs	r3, #4
 8007baa:	429d      	cmp	r5, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	d32e      	bcc.n	8007c0e <quorem+0xfa>
 8007bb0:	613c      	str	r4, [r7, #16]
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	f001 fae6 	bl	8009184 <__mcmp>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	db24      	blt.n	8007c06 <quorem+0xf2>
 8007bbc:	3601      	adds	r6, #1
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f04f 0c00 	mov.w	ip, #0
 8007bc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bc8:	f8d0 e000 	ldr.w	lr, [r0]
 8007bcc:	b293      	uxth	r3, r2
 8007bce:	ebac 0303 	sub.w	r3, ip, r3
 8007bd2:	0c12      	lsrs	r2, r2, #16
 8007bd4:	fa13 f38e 	uxtah	r3, r3, lr
 8007bd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007bdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007be6:	45c1      	cmp	r9, r8
 8007be8:	f840 3b04 	str.w	r3, [r0], #4
 8007bec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bf0:	d2e8      	bcs.n	8007bc4 <quorem+0xb0>
 8007bf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bfa:	b922      	cbnz	r2, 8007c06 <quorem+0xf2>
 8007bfc:	3b04      	subs	r3, #4
 8007bfe:	429d      	cmp	r5, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	d30a      	bcc.n	8007c1a <quorem+0x106>
 8007c04:	613c      	str	r4, [r7, #16]
 8007c06:	4630      	mov	r0, r6
 8007c08:	b003      	add	sp, #12
 8007c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0e:	6812      	ldr	r2, [r2, #0]
 8007c10:	3b04      	subs	r3, #4
 8007c12:	2a00      	cmp	r2, #0
 8007c14:	d1cc      	bne.n	8007bb0 <quorem+0x9c>
 8007c16:	3c01      	subs	r4, #1
 8007c18:	e7c7      	b.n	8007baa <quorem+0x96>
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	3b04      	subs	r3, #4
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	d1f0      	bne.n	8007c04 <quorem+0xf0>
 8007c22:	3c01      	subs	r4, #1
 8007c24:	e7eb      	b.n	8007bfe <quorem+0xea>
 8007c26:	2000      	movs	r0, #0
 8007c28:	e7ee      	b.n	8007c08 <quorem+0xf4>
 8007c2a:	0000      	movs	r0, r0
 8007c2c:	0000      	movs	r0, r0
	...

08007c30 <_dtoa_r>:
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	ed2d 8b04 	vpush	{d8-d9}
 8007c38:	ec57 6b10 	vmov	r6, r7, d0
 8007c3c:	b093      	sub	sp, #76	; 0x4c
 8007c3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007c44:	9106      	str	r1, [sp, #24]
 8007c46:	ee10 aa10 	vmov	sl, s0
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c50:	46bb      	mov	fp, r7
 8007c52:	b975      	cbnz	r5, 8007c72 <_dtoa_r+0x42>
 8007c54:	2010      	movs	r0, #16
 8007c56:	f000 fffd 	bl	8008c54 <malloc>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	6260      	str	r0, [r4, #36]	; 0x24
 8007c5e:	b920      	cbnz	r0, 8007c6a <_dtoa_r+0x3a>
 8007c60:	4ba7      	ldr	r3, [pc, #668]	; (8007f00 <_dtoa_r+0x2d0>)
 8007c62:	21ea      	movs	r1, #234	; 0xea
 8007c64:	48a7      	ldr	r0, [pc, #668]	; (8007f04 <_dtoa_r+0x2d4>)
 8007c66:	f001 fe45 	bl	80098f4 <__assert_func>
 8007c6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c6e:	6005      	str	r5, [r0, #0]
 8007c70:	60c5      	str	r5, [r0, #12]
 8007c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c74:	6819      	ldr	r1, [r3, #0]
 8007c76:	b151      	cbz	r1, 8007c8e <_dtoa_r+0x5e>
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	604a      	str	r2, [r1, #4]
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	4093      	lsls	r3, r2
 8007c80:	608b      	str	r3, [r1, #8]
 8007c82:	4620      	mov	r0, r4
 8007c84:	f001 f83c 	bl	8008d00 <_Bfree>
 8007c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	1e3b      	subs	r3, r7, #0
 8007c90:	bfaa      	itet	ge
 8007c92:	2300      	movge	r3, #0
 8007c94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c98:	f8c8 3000 	strge.w	r3, [r8]
 8007c9c:	4b9a      	ldr	r3, [pc, #616]	; (8007f08 <_dtoa_r+0x2d8>)
 8007c9e:	bfbc      	itt	lt
 8007ca0:	2201      	movlt	r2, #1
 8007ca2:	f8c8 2000 	strlt.w	r2, [r8]
 8007ca6:	ea33 030b 	bics.w	r3, r3, fp
 8007caa:	d11b      	bne.n	8007ce4 <_dtoa_r+0xb4>
 8007cac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cae:	f242 730f 	movw	r3, #9999	; 0x270f
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cb8:	4333      	orrs	r3, r6
 8007cba:	f000 8592 	beq.w	80087e2 <_dtoa_r+0xbb2>
 8007cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cc0:	b963      	cbnz	r3, 8007cdc <_dtoa_r+0xac>
 8007cc2:	4b92      	ldr	r3, [pc, #584]	; (8007f0c <_dtoa_r+0x2dc>)
 8007cc4:	e022      	b.n	8007d0c <_dtoa_r+0xdc>
 8007cc6:	4b92      	ldr	r3, [pc, #584]	; (8007f10 <_dtoa_r+0x2e0>)
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	9801      	ldr	r0, [sp, #4]
 8007cd2:	b013      	add	sp, #76	; 0x4c
 8007cd4:	ecbd 8b04 	vpop	{d8-d9}
 8007cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cdc:	4b8b      	ldr	r3, [pc, #556]	; (8007f0c <_dtoa_r+0x2dc>)
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	3303      	adds	r3, #3
 8007ce2:	e7f3      	b.n	8007ccc <_dtoa_r+0x9c>
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	4650      	mov	r0, sl
 8007cea:	4659      	mov	r1, fp
 8007cec:	f7f8 ff14 	bl	8000b18 <__aeabi_dcmpeq>
 8007cf0:	ec4b ab19 	vmov	d9, sl, fp
 8007cf4:	4680      	mov	r8, r0
 8007cf6:	b158      	cbz	r0, 8007d10 <_dtoa_r+0xe0>
 8007cf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 856b 	beq.w	80087dc <_dtoa_r+0xbac>
 8007d06:	4883      	ldr	r0, [pc, #524]	; (8007f14 <_dtoa_r+0x2e4>)
 8007d08:	6018      	str	r0, [r3, #0]
 8007d0a:	1e43      	subs	r3, r0, #1
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	e7df      	b.n	8007cd0 <_dtoa_r+0xa0>
 8007d10:	ec4b ab10 	vmov	d0, sl, fp
 8007d14:	aa10      	add	r2, sp, #64	; 0x40
 8007d16:	a911      	add	r1, sp, #68	; 0x44
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f001 fad9 	bl	80092d0 <__d2b>
 8007d1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007d22:	ee08 0a10 	vmov	s16, r0
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	f000 8084 	beq.w	8007e34 <_dtoa_r+0x204>
 8007d2c:	ee19 3a90 	vmov	r3, s19
 8007d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007d38:	4656      	mov	r6, sl
 8007d3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007d3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007d46:	4b74      	ldr	r3, [pc, #464]	; (8007f18 <_dtoa_r+0x2e8>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	4639      	mov	r1, r7
 8007d4e:	f7f8 fac3 	bl	80002d8 <__aeabi_dsub>
 8007d52:	a365      	add	r3, pc, #404	; (adr r3, 8007ee8 <_dtoa_r+0x2b8>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 fc76 	bl	8000648 <__aeabi_dmul>
 8007d5c:	a364      	add	r3, pc, #400	; (adr r3, 8007ef0 <_dtoa_r+0x2c0>)
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	f7f8 fabb 	bl	80002dc <__adddf3>
 8007d66:	4606      	mov	r6, r0
 8007d68:	4628      	mov	r0, r5
 8007d6a:	460f      	mov	r7, r1
 8007d6c:	f7f8 fc02 	bl	8000574 <__aeabi_i2d>
 8007d70:	a361      	add	r3, pc, #388	; (adr r3, 8007ef8 <_dtoa_r+0x2c8>)
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f7f8 fc67 	bl	8000648 <__aeabi_dmul>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4630      	mov	r0, r6
 8007d80:	4639      	mov	r1, r7
 8007d82:	f7f8 faab 	bl	80002dc <__adddf3>
 8007d86:	4606      	mov	r6, r0
 8007d88:	460f      	mov	r7, r1
 8007d8a:	f7f8 ff0d 	bl	8000ba8 <__aeabi_d2iz>
 8007d8e:	2200      	movs	r2, #0
 8007d90:	9000      	str	r0, [sp, #0]
 8007d92:	2300      	movs	r3, #0
 8007d94:	4630      	mov	r0, r6
 8007d96:	4639      	mov	r1, r7
 8007d98:	f7f8 fec8 	bl	8000b2c <__aeabi_dcmplt>
 8007d9c:	b150      	cbz	r0, 8007db4 <_dtoa_r+0x184>
 8007d9e:	9800      	ldr	r0, [sp, #0]
 8007da0:	f7f8 fbe8 	bl	8000574 <__aeabi_i2d>
 8007da4:	4632      	mov	r2, r6
 8007da6:	463b      	mov	r3, r7
 8007da8:	f7f8 feb6 	bl	8000b18 <__aeabi_dcmpeq>
 8007dac:	b910      	cbnz	r0, 8007db4 <_dtoa_r+0x184>
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	9b00      	ldr	r3, [sp, #0]
 8007db6:	2b16      	cmp	r3, #22
 8007db8:	d85a      	bhi.n	8007e70 <_dtoa_r+0x240>
 8007dba:	9a00      	ldr	r2, [sp, #0]
 8007dbc:	4b57      	ldr	r3, [pc, #348]	; (8007f1c <_dtoa_r+0x2ec>)
 8007dbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	ec51 0b19 	vmov	r0, r1, d9
 8007dca:	f7f8 feaf 	bl	8000b2c <__aeabi_dcmplt>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d050      	beq.n	8007e74 <_dtoa_r+0x244>
 8007dd2:	9b00      	ldr	r3, [sp, #0]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dde:	1b5d      	subs	r5, r3, r5
 8007de0:	1e6b      	subs	r3, r5, #1
 8007de2:	9305      	str	r3, [sp, #20]
 8007de4:	bf45      	ittet	mi
 8007de6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007dea:	9304      	strmi	r3, [sp, #16]
 8007dec:	2300      	movpl	r3, #0
 8007dee:	2300      	movmi	r3, #0
 8007df0:	bf4c      	ite	mi
 8007df2:	9305      	strmi	r3, [sp, #20]
 8007df4:	9304      	strpl	r3, [sp, #16]
 8007df6:	9b00      	ldr	r3, [sp, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	db3d      	blt.n	8007e78 <_dtoa_r+0x248>
 8007dfc:	9b05      	ldr	r3, [sp, #20]
 8007dfe:	9a00      	ldr	r2, [sp, #0]
 8007e00:	920a      	str	r2, [sp, #40]	; 0x28
 8007e02:	4413      	add	r3, r2
 8007e04:	9305      	str	r3, [sp, #20]
 8007e06:	2300      	movs	r3, #0
 8007e08:	9307      	str	r3, [sp, #28]
 8007e0a:	9b06      	ldr	r3, [sp, #24]
 8007e0c:	2b09      	cmp	r3, #9
 8007e0e:	f200 8089 	bhi.w	8007f24 <_dtoa_r+0x2f4>
 8007e12:	2b05      	cmp	r3, #5
 8007e14:	bfc4      	itt	gt
 8007e16:	3b04      	subgt	r3, #4
 8007e18:	9306      	strgt	r3, [sp, #24]
 8007e1a:	9b06      	ldr	r3, [sp, #24]
 8007e1c:	f1a3 0302 	sub.w	r3, r3, #2
 8007e20:	bfcc      	ite	gt
 8007e22:	2500      	movgt	r5, #0
 8007e24:	2501      	movle	r5, #1
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	f200 8087 	bhi.w	8007f3a <_dtoa_r+0x30a>
 8007e2c:	e8df f003 	tbb	[pc, r3]
 8007e30:	59383a2d 	.word	0x59383a2d
 8007e34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007e38:	441d      	add	r5, r3
 8007e3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007e3e:	2b20      	cmp	r3, #32
 8007e40:	bfc1      	itttt	gt
 8007e42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007e4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007e4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e52:	bfda      	itte	le
 8007e54:	f1c3 0320 	rsble	r3, r3, #32
 8007e58:	fa06 f003 	lslle.w	r0, r6, r3
 8007e5c:	4318      	orrgt	r0, r3
 8007e5e:	f7f8 fb79 	bl	8000554 <__aeabi_ui2d>
 8007e62:	2301      	movs	r3, #1
 8007e64:	4606      	mov	r6, r0
 8007e66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007e6a:	3d01      	subs	r5, #1
 8007e6c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e6e:	e76a      	b.n	8007d46 <_dtoa_r+0x116>
 8007e70:	2301      	movs	r3, #1
 8007e72:	e7b2      	b.n	8007dda <_dtoa_r+0x1aa>
 8007e74:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e76:	e7b1      	b.n	8007ddc <_dtoa_r+0x1ac>
 8007e78:	9b04      	ldr	r3, [sp, #16]
 8007e7a:	9a00      	ldr	r2, [sp, #0]
 8007e7c:	1a9b      	subs	r3, r3, r2
 8007e7e:	9304      	str	r3, [sp, #16]
 8007e80:	4253      	negs	r3, r2
 8007e82:	9307      	str	r3, [sp, #28]
 8007e84:	2300      	movs	r3, #0
 8007e86:	930a      	str	r3, [sp, #40]	; 0x28
 8007e88:	e7bf      	b.n	8007e0a <_dtoa_r+0x1da>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	9308      	str	r3, [sp, #32]
 8007e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	dc55      	bgt.n	8007f40 <_dtoa_r+0x310>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e9e:	e00c      	b.n	8007eba <_dtoa_r+0x28a>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e7f3      	b.n	8007e8c <_dtoa_r+0x25c>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea8:	9308      	str	r3, [sp, #32]
 8007eaa:	9b00      	ldr	r3, [sp, #0]
 8007eac:	4413      	add	r3, r2
 8007eae:	9302      	str	r3, [sp, #8]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	9303      	str	r3, [sp, #12]
 8007eb6:	bfb8      	it	lt
 8007eb8:	2301      	movlt	r3, #1
 8007eba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	6042      	str	r2, [r0, #4]
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	f102 0614 	add.w	r6, r2, #20
 8007ec6:	429e      	cmp	r6, r3
 8007ec8:	6841      	ldr	r1, [r0, #4]
 8007eca:	d93d      	bls.n	8007f48 <_dtoa_r+0x318>
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 fed7 	bl	8008c80 <_Balloc>
 8007ed2:	9001      	str	r0, [sp, #4]
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d13b      	bne.n	8007f50 <_dtoa_r+0x320>
 8007ed8:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <_dtoa_r+0x2f0>)
 8007eda:	4602      	mov	r2, r0
 8007edc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ee0:	e6c0      	b.n	8007c64 <_dtoa_r+0x34>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e7df      	b.n	8007ea6 <_dtoa_r+0x276>
 8007ee6:	bf00      	nop
 8007ee8:	636f4361 	.word	0x636f4361
 8007eec:	3fd287a7 	.word	0x3fd287a7
 8007ef0:	8b60c8b3 	.word	0x8b60c8b3
 8007ef4:	3fc68a28 	.word	0x3fc68a28
 8007ef8:	509f79fb 	.word	0x509f79fb
 8007efc:	3fd34413 	.word	0x3fd34413
 8007f00:	08009dad 	.word	0x08009dad
 8007f04:	08009dc4 	.word	0x08009dc4
 8007f08:	7ff00000 	.word	0x7ff00000
 8007f0c:	08009da9 	.word	0x08009da9
 8007f10:	08009da0 	.word	0x08009da0
 8007f14:	08009d7d 	.word	0x08009d7d
 8007f18:	3ff80000 	.word	0x3ff80000
 8007f1c:	08009f18 	.word	0x08009f18
 8007f20:	08009e1f 	.word	0x08009e1f
 8007f24:	2501      	movs	r5, #1
 8007f26:	2300      	movs	r3, #0
 8007f28:	9306      	str	r3, [sp, #24]
 8007f2a:	9508      	str	r5, [sp, #32]
 8007f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f34:	2200      	movs	r2, #0
 8007f36:	2312      	movs	r3, #18
 8007f38:	e7b0      	b.n	8007e9c <_dtoa_r+0x26c>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	9308      	str	r3, [sp, #32]
 8007f3e:	e7f5      	b.n	8007f2c <_dtoa_r+0x2fc>
 8007f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f46:	e7b8      	b.n	8007eba <_dtoa_r+0x28a>
 8007f48:	3101      	adds	r1, #1
 8007f4a:	6041      	str	r1, [r0, #4]
 8007f4c:	0052      	lsls	r2, r2, #1
 8007f4e:	e7b8      	b.n	8007ec2 <_dtoa_r+0x292>
 8007f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f52:	9a01      	ldr	r2, [sp, #4]
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	2b0e      	cmp	r3, #14
 8007f5a:	f200 809d 	bhi.w	8008098 <_dtoa_r+0x468>
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	f000 809a 	beq.w	8008098 <_dtoa_r+0x468>
 8007f64:	9b00      	ldr	r3, [sp, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dd32      	ble.n	8007fd0 <_dtoa_r+0x3a0>
 8007f6a:	4ab7      	ldr	r2, [pc, #732]	; (8008248 <_dtoa_r+0x618>)
 8007f6c:	f003 030f 	and.w	r3, r3, #15
 8007f70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f78:	9b00      	ldr	r3, [sp, #0]
 8007f7a:	05d8      	lsls	r0, r3, #23
 8007f7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007f80:	d516      	bpl.n	8007fb0 <_dtoa_r+0x380>
 8007f82:	4bb2      	ldr	r3, [pc, #712]	; (800824c <_dtoa_r+0x61c>)
 8007f84:	ec51 0b19 	vmov	r0, r1, d9
 8007f88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f8c:	f7f8 fc86 	bl	800089c <__aeabi_ddiv>
 8007f90:	f007 070f 	and.w	r7, r7, #15
 8007f94:	4682      	mov	sl, r0
 8007f96:	468b      	mov	fp, r1
 8007f98:	2503      	movs	r5, #3
 8007f9a:	4eac      	ldr	r6, [pc, #688]	; (800824c <_dtoa_r+0x61c>)
 8007f9c:	b957      	cbnz	r7, 8007fb4 <_dtoa_r+0x384>
 8007f9e:	4642      	mov	r2, r8
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	4659      	mov	r1, fp
 8007fa6:	f7f8 fc79 	bl	800089c <__aeabi_ddiv>
 8007faa:	4682      	mov	sl, r0
 8007fac:	468b      	mov	fp, r1
 8007fae:	e028      	b.n	8008002 <_dtoa_r+0x3d2>
 8007fb0:	2502      	movs	r5, #2
 8007fb2:	e7f2      	b.n	8007f9a <_dtoa_r+0x36a>
 8007fb4:	07f9      	lsls	r1, r7, #31
 8007fb6:	d508      	bpl.n	8007fca <_dtoa_r+0x39a>
 8007fb8:	4640      	mov	r0, r8
 8007fba:	4649      	mov	r1, r9
 8007fbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fc0:	f7f8 fb42 	bl	8000648 <__aeabi_dmul>
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	4680      	mov	r8, r0
 8007fc8:	4689      	mov	r9, r1
 8007fca:	107f      	asrs	r7, r7, #1
 8007fcc:	3608      	adds	r6, #8
 8007fce:	e7e5      	b.n	8007f9c <_dtoa_r+0x36c>
 8007fd0:	f000 809b 	beq.w	800810a <_dtoa_r+0x4da>
 8007fd4:	9b00      	ldr	r3, [sp, #0]
 8007fd6:	4f9d      	ldr	r7, [pc, #628]	; (800824c <_dtoa_r+0x61c>)
 8007fd8:	425e      	negs	r6, r3
 8007fda:	4b9b      	ldr	r3, [pc, #620]	; (8008248 <_dtoa_r+0x618>)
 8007fdc:	f006 020f 	and.w	r2, r6, #15
 8007fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	ec51 0b19 	vmov	r0, r1, d9
 8007fec:	f7f8 fb2c 	bl	8000648 <__aeabi_dmul>
 8007ff0:	1136      	asrs	r6, r6, #4
 8007ff2:	4682      	mov	sl, r0
 8007ff4:	468b      	mov	fp, r1
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2502      	movs	r5, #2
 8007ffa:	2e00      	cmp	r6, #0
 8007ffc:	d17a      	bne.n	80080f4 <_dtoa_r+0x4c4>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1d3      	bne.n	8007faa <_dtoa_r+0x37a>
 8008002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8082 	beq.w	800810e <_dtoa_r+0x4de>
 800800a:	4b91      	ldr	r3, [pc, #580]	; (8008250 <_dtoa_r+0x620>)
 800800c:	2200      	movs	r2, #0
 800800e:	4650      	mov	r0, sl
 8008010:	4659      	mov	r1, fp
 8008012:	f7f8 fd8b 	bl	8000b2c <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	d079      	beq.n	800810e <_dtoa_r+0x4de>
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d076      	beq.n	800810e <_dtoa_r+0x4de>
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	dd36      	ble.n	8008094 <_dtoa_r+0x464>
 8008026:	9b00      	ldr	r3, [sp, #0]
 8008028:	4650      	mov	r0, sl
 800802a:	4659      	mov	r1, fp
 800802c:	1e5f      	subs	r7, r3, #1
 800802e:	2200      	movs	r2, #0
 8008030:	4b88      	ldr	r3, [pc, #544]	; (8008254 <_dtoa_r+0x624>)
 8008032:	f7f8 fb09 	bl	8000648 <__aeabi_dmul>
 8008036:	9e02      	ldr	r6, [sp, #8]
 8008038:	4682      	mov	sl, r0
 800803a:	468b      	mov	fp, r1
 800803c:	3501      	adds	r5, #1
 800803e:	4628      	mov	r0, r5
 8008040:	f7f8 fa98 	bl	8000574 <__aeabi_i2d>
 8008044:	4652      	mov	r2, sl
 8008046:	465b      	mov	r3, fp
 8008048:	f7f8 fafe 	bl	8000648 <__aeabi_dmul>
 800804c:	4b82      	ldr	r3, [pc, #520]	; (8008258 <_dtoa_r+0x628>)
 800804e:	2200      	movs	r2, #0
 8008050:	f7f8 f944 	bl	80002dc <__adddf3>
 8008054:	46d0      	mov	r8, sl
 8008056:	46d9      	mov	r9, fp
 8008058:	4682      	mov	sl, r0
 800805a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800805e:	2e00      	cmp	r6, #0
 8008060:	d158      	bne.n	8008114 <_dtoa_r+0x4e4>
 8008062:	4b7e      	ldr	r3, [pc, #504]	; (800825c <_dtoa_r+0x62c>)
 8008064:	2200      	movs	r2, #0
 8008066:	4640      	mov	r0, r8
 8008068:	4649      	mov	r1, r9
 800806a:	f7f8 f935 	bl	80002d8 <__aeabi_dsub>
 800806e:	4652      	mov	r2, sl
 8008070:	465b      	mov	r3, fp
 8008072:	4680      	mov	r8, r0
 8008074:	4689      	mov	r9, r1
 8008076:	f7f8 fd77 	bl	8000b68 <__aeabi_dcmpgt>
 800807a:	2800      	cmp	r0, #0
 800807c:	f040 8295 	bne.w	80085aa <_dtoa_r+0x97a>
 8008080:	4652      	mov	r2, sl
 8008082:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008086:	4640      	mov	r0, r8
 8008088:	4649      	mov	r1, r9
 800808a:	f7f8 fd4f 	bl	8000b2c <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	f040 8289 	bne.w	80085a6 <_dtoa_r+0x976>
 8008094:	ec5b ab19 	vmov	sl, fp, d9
 8008098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800809a:	2b00      	cmp	r3, #0
 800809c:	f2c0 8148 	blt.w	8008330 <_dtoa_r+0x700>
 80080a0:	9a00      	ldr	r2, [sp, #0]
 80080a2:	2a0e      	cmp	r2, #14
 80080a4:	f300 8144 	bgt.w	8008330 <_dtoa_r+0x700>
 80080a8:	4b67      	ldr	r3, [pc, #412]	; (8008248 <_dtoa_r+0x618>)
 80080aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f280 80d5 	bge.w	8008264 <_dtoa_r+0x634>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f300 80d1 	bgt.w	8008264 <_dtoa_r+0x634>
 80080c2:	f040 826f 	bne.w	80085a4 <_dtoa_r+0x974>
 80080c6:	4b65      	ldr	r3, [pc, #404]	; (800825c <_dtoa_r+0x62c>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	4640      	mov	r0, r8
 80080cc:	4649      	mov	r1, r9
 80080ce:	f7f8 fabb 	bl	8000648 <__aeabi_dmul>
 80080d2:	4652      	mov	r2, sl
 80080d4:	465b      	mov	r3, fp
 80080d6:	f7f8 fd3d 	bl	8000b54 <__aeabi_dcmpge>
 80080da:	9e03      	ldr	r6, [sp, #12]
 80080dc:	4637      	mov	r7, r6
 80080de:	2800      	cmp	r0, #0
 80080e0:	f040 8245 	bne.w	800856e <_dtoa_r+0x93e>
 80080e4:	9d01      	ldr	r5, [sp, #4]
 80080e6:	2331      	movs	r3, #49	; 0x31
 80080e8:	f805 3b01 	strb.w	r3, [r5], #1
 80080ec:	9b00      	ldr	r3, [sp, #0]
 80080ee:	3301      	adds	r3, #1
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	e240      	b.n	8008576 <_dtoa_r+0x946>
 80080f4:	07f2      	lsls	r2, r6, #31
 80080f6:	d505      	bpl.n	8008104 <_dtoa_r+0x4d4>
 80080f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080fc:	f7f8 faa4 	bl	8000648 <__aeabi_dmul>
 8008100:	3501      	adds	r5, #1
 8008102:	2301      	movs	r3, #1
 8008104:	1076      	asrs	r6, r6, #1
 8008106:	3708      	adds	r7, #8
 8008108:	e777      	b.n	8007ffa <_dtoa_r+0x3ca>
 800810a:	2502      	movs	r5, #2
 800810c:	e779      	b.n	8008002 <_dtoa_r+0x3d2>
 800810e:	9f00      	ldr	r7, [sp, #0]
 8008110:	9e03      	ldr	r6, [sp, #12]
 8008112:	e794      	b.n	800803e <_dtoa_r+0x40e>
 8008114:	9901      	ldr	r1, [sp, #4]
 8008116:	4b4c      	ldr	r3, [pc, #304]	; (8008248 <_dtoa_r+0x618>)
 8008118:	4431      	add	r1, r6
 800811a:	910d      	str	r1, [sp, #52]	; 0x34
 800811c:	9908      	ldr	r1, [sp, #32]
 800811e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008122:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008126:	2900      	cmp	r1, #0
 8008128:	d043      	beq.n	80081b2 <_dtoa_r+0x582>
 800812a:	494d      	ldr	r1, [pc, #308]	; (8008260 <_dtoa_r+0x630>)
 800812c:	2000      	movs	r0, #0
 800812e:	f7f8 fbb5 	bl	800089c <__aeabi_ddiv>
 8008132:	4652      	mov	r2, sl
 8008134:	465b      	mov	r3, fp
 8008136:	f7f8 f8cf 	bl	80002d8 <__aeabi_dsub>
 800813a:	9d01      	ldr	r5, [sp, #4]
 800813c:	4682      	mov	sl, r0
 800813e:	468b      	mov	fp, r1
 8008140:	4649      	mov	r1, r9
 8008142:	4640      	mov	r0, r8
 8008144:	f7f8 fd30 	bl	8000ba8 <__aeabi_d2iz>
 8008148:	4606      	mov	r6, r0
 800814a:	f7f8 fa13 	bl	8000574 <__aeabi_i2d>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4640      	mov	r0, r8
 8008154:	4649      	mov	r1, r9
 8008156:	f7f8 f8bf 	bl	80002d8 <__aeabi_dsub>
 800815a:	3630      	adds	r6, #48	; 0x30
 800815c:	f805 6b01 	strb.w	r6, [r5], #1
 8008160:	4652      	mov	r2, sl
 8008162:	465b      	mov	r3, fp
 8008164:	4680      	mov	r8, r0
 8008166:	4689      	mov	r9, r1
 8008168:	f7f8 fce0 	bl	8000b2c <__aeabi_dcmplt>
 800816c:	2800      	cmp	r0, #0
 800816e:	d163      	bne.n	8008238 <_dtoa_r+0x608>
 8008170:	4642      	mov	r2, r8
 8008172:	464b      	mov	r3, r9
 8008174:	4936      	ldr	r1, [pc, #216]	; (8008250 <_dtoa_r+0x620>)
 8008176:	2000      	movs	r0, #0
 8008178:	f7f8 f8ae 	bl	80002d8 <__aeabi_dsub>
 800817c:	4652      	mov	r2, sl
 800817e:	465b      	mov	r3, fp
 8008180:	f7f8 fcd4 	bl	8000b2c <__aeabi_dcmplt>
 8008184:	2800      	cmp	r0, #0
 8008186:	f040 80b5 	bne.w	80082f4 <_dtoa_r+0x6c4>
 800818a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800818c:	429d      	cmp	r5, r3
 800818e:	d081      	beq.n	8008094 <_dtoa_r+0x464>
 8008190:	4b30      	ldr	r3, [pc, #192]	; (8008254 <_dtoa_r+0x624>)
 8008192:	2200      	movs	r2, #0
 8008194:	4650      	mov	r0, sl
 8008196:	4659      	mov	r1, fp
 8008198:	f7f8 fa56 	bl	8000648 <__aeabi_dmul>
 800819c:	4b2d      	ldr	r3, [pc, #180]	; (8008254 <_dtoa_r+0x624>)
 800819e:	4682      	mov	sl, r0
 80081a0:	468b      	mov	fp, r1
 80081a2:	4640      	mov	r0, r8
 80081a4:	4649      	mov	r1, r9
 80081a6:	2200      	movs	r2, #0
 80081a8:	f7f8 fa4e 	bl	8000648 <__aeabi_dmul>
 80081ac:	4680      	mov	r8, r0
 80081ae:	4689      	mov	r9, r1
 80081b0:	e7c6      	b.n	8008140 <_dtoa_r+0x510>
 80081b2:	4650      	mov	r0, sl
 80081b4:	4659      	mov	r1, fp
 80081b6:	f7f8 fa47 	bl	8000648 <__aeabi_dmul>
 80081ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081bc:	9d01      	ldr	r5, [sp, #4]
 80081be:	930f      	str	r3, [sp, #60]	; 0x3c
 80081c0:	4682      	mov	sl, r0
 80081c2:	468b      	mov	fp, r1
 80081c4:	4649      	mov	r1, r9
 80081c6:	4640      	mov	r0, r8
 80081c8:	f7f8 fcee 	bl	8000ba8 <__aeabi_d2iz>
 80081cc:	4606      	mov	r6, r0
 80081ce:	f7f8 f9d1 	bl	8000574 <__aeabi_i2d>
 80081d2:	3630      	adds	r6, #48	; 0x30
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4640      	mov	r0, r8
 80081da:	4649      	mov	r1, r9
 80081dc:	f7f8 f87c 	bl	80002d8 <__aeabi_dsub>
 80081e0:	f805 6b01 	strb.w	r6, [r5], #1
 80081e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e6:	429d      	cmp	r5, r3
 80081e8:	4680      	mov	r8, r0
 80081ea:	4689      	mov	r9, r1
 80081ec:	f04f 0200 	mov.w	r2, #0
 80081f0:	d124      	bne.n	800823c <_dtoa_r+0x60c>
 80081f2:	4b1b      	ldr	r3, [pc, #108]	; (8008260 <_dtoa_r+0x630>)
 80081f4:	4650      	mov	r0, sl
 80081f6:	4659      	mov	r1, fp
 80081f8:	f7f8 f870 	bl	80002dc <__adddf3>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4640      	mov	r0, r8
 8008202:	4649      	mov	r1, r9
 8008204:	f7f8 fcb0 	bl	8000b68 <__aeabi_dcmpgt>
 8008208:	2800      	cmp	r0, #0
 800820a:	d173      	bne.n	80082f4 <_dtoa_r+0x6c4>
 800820c:	4652      	mov	r2, sl
 800820e:	465b      	mov	r3, fp
 8008210:	4913      	ldr	r1, [pc, #76]	; (8008260 <_dtoa_r+0x630>)
 8008212:	2000      	movs	r0, #0
 8008214:	f7f8 f860 	bl	80002d8 <__aeabi_dsub>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4640      	mov	r0, r8
 800821e:	4649      	mov	r1, r9
 8008220:	f7f8 fc84 	bl	8000b2c <__aeabi_dcmplt>
 8008224:	2800      	cmp	r0, #0
 8008226:	f43f af35 	beq.w	8008094 <_dtoa_r+0x464>
 800822a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800822c:	1e6b      	subs	r3, r5, #1
 800822e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008230:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008234:	2b30      	cmp	r3, #48	; 0x30
 8008236:	d0f8      	beq.n	800822a <_dtoa_r+0x5fa>
 8008238:	9700      	str	r7, [sp, #0]
 800823a:	e049      	b.n	80082d0 <_dtoa_r+0x6a0>
 800823c:	4b05      	ldr	r3, [pc, #20]	; (8008254 <_dtoa_r+0x624>)
 800823e:	f7f8 fa03 	bl	8000648 <__aeabi_dmul>
 8008242:	4680      	mov	r8, r0
 8008244:	4689      	mov	r9, r1
 8008246:	e7bd      	b.n	80081c4 <_dtoa_r+0x594>
 8008248:	08009f18 	.word	0x08009f18
 800824c:	08009ef0 	.word	0x08009ef0
 8008250:	3ff00000 	.word	0x3ff00000
 8008254:	40240000 	.word	0x40240000
 8008258:	401c0000 	.word	0x401c0000
 800825c:	40140000 	.word	0x40140000
 8008260:	3fe00000 	.word	0x3fe00000
 8008264:	9d01      	ldr	r5, [sp, #4]
 8008266:	4656      	mov	r6, sl
 8008268:	465f      	mov	r7, fp
 800826a:	4642      	mov	r2, r8
 800826c:	464b      	mov	r3, r9
 800826e:	4630      	mov	r0, r6
 8008270:	4639      	mov	r1, r7
 8008272:	f7f8 fb13 	bl	800089c <__aeabi_ddiv>
 8008276:	f7f8 fc97 	bl	8000ba8 <__aeabi_d2iz>
 800827a:	4682      	mov	sl, r0
 800827c:	f7f8 f97a 	bl	8000574 <__aeabi_i2d>
 8008280:	4642      	mov	r2, r8
 8008282:	464b      	mov	r3, r9
 8008284:	f7f8 f9e0 	bl	8000648 <__aeabi_dmul>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4630      	mov	r0, r6
 800828e:	4639      	mov	r1, r7
 8008290:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008294:	f7f8 f820 	bl	80002d8 <__aeabi_dsub>
 8008298:	f805 6b01 	strb.w	r6, [r5], #1
 800829c:	9e01      	ldr	r6, [sp, #4]
 800829e:	9f03      	ldr	r7, [sp, #12]
 80082a0:	1bae      	subs	r6, r5, r6
 80082a2:	42b7      	cmp	r7, r6
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	d135      	bne.n	8008316 <_dtoa_r+0x6e6>
 80082aa:	f7f8 f817 	bl	80002dc <__adddf3>
 80082ae:	4642      	mov	r2, r8
 80082b0:	464b      	mov	r3, r9
 80082b2:	4606      	mov	r6, r0
 80082b4:	460f      	mov	r7, r1
 80082b6:	f7f8 fc57 	bl	8000b68 <__aeabi_dcmpgt>
 80082ba:	b9d0      	cbnz	r0, 80082f2 <_dtoa_r+0x6c2>
 80082bc:	4642      	mov	r2, r8
 80082be:	464b      	mov	r3, r9
 80082c0:	4630      	mov	r0, r6
 80082c2:	4639      	mov	r1, r7
 80082c4:	f7f8 fc28 	bl	8000b18 <__aeabi_dcmpeq>
 80082c8:	b110      	cbz	r0, 80082d0 <_dtoa_r+0x6a0>
 80082ca:	f01a 0f01 	tst.w	sl, #1
 80082ce:	d110      	bne.n	80082f2 <_dtoa_r+0x6c2>
 80082d0:	4620      	mov	r0, r4
 80082d2:	ee18 1a10 	vmov	r1, s16
 80082d6:	f000 fd13 	bl	8008d00 <_Bfree>
 80082da:	2300      	movs	r3, #0
 80082dc:	9800      	ldr	r0, [sp, #0]
 80082de:	702b      	strb	r3, [r5, #0]
 80082e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082e2:	3001      	adds	r0, #1
 80082e4:	6018      	str	r0, [r3, #0]
 80082e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f43f acf1 	beq.w	8007cd0 <_dtoa_r+0xa0>
 80082ee:	601d      	str	r5, [r3, #0]
 80082f0:	e4ee      	b.n	8007cd0 <_dtoa_r+0xa0>
 80082f2:	9f00      	ldr	r7, [sp, #0]
 80082f4:	462b      	mov	r3, r5
 80082f6:	461d      	mov	r5, r3
 80082f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082fc:	2a39      	cmp	r2, #57	; 0x39
 80082fe:	d106      	bne.n	800830e <_dtoa_r+0x6de>
 8008300:	9a01      	ldr	r2, [sp, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d1f7      	bne.n	80082f6 <_dtoa_r+0x6c6>
 8008306:	9901      	ldr	r1, [sp, #4]
 8008308:	2230      	movs	r2, #48	; 0x30
 800830a:	3701      	adds	r7, #1
 800830c:	700a      	strb	r2, [r1, #0]
 800830e:	781a      	ldrb	r2, [r3, #0]
 8008310:	3201      	adds	r2, #1
 8008312:	701a      	strb	r2, [r3, #0]
 8008314:	e790      	b.n	8008238 <_dtoa_r+0x608>
 8008316:	4ba6      	ldr	r3, [pc, #664]	; (80085b0 <_dtoa_r+0x980>)
 8008318:	2200      	movs	r2, #0
 800831a:	f7f8 f995 	bl	8000648 <__aeabi_dmul>
 800831e:	2200      	movs	r2, #0
 8008320:	2300      	movs	r3, #0
 8008322:	4606      	mov	r6, r0
 8008324:	460f      	mov	r7, r1
 8008326:	f7f8 fbf7 	bl	8000b18 <__aeabi_dcmpeq>
 800832a:	2800      	cmp	r0, #0
 800832c:	d09d      	beq.n	800826a <_dtoa_r+0x63a>
 800832e:	e7cf      	b.n	80082d0 <_dtoa_r+0x6a0>
 8008330:	9a08      	ldr	r2, [sp, #32]
 8008332:	2a00      	cmp	r2, #0
 8008334:	f000 80d7 	beq.w	80084e6 <_dtoa_r+0x8b6>
 8008338:	9a06      	ldr	r2, [sp, #24]
 800833a:	2a01      	cmp	r2, #1
 800833c:	f300 80ba 	bgt.w	80084b4 <_dtoa_r+0x884>
 8008340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008342:	2a00      	cmp	r2, #0
 8008344:	f000 80b2 	beq.w	80084ac <_dtoa_r+0x87c>
 8008348:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800834c:	9e07      	ldr	r6, [sp, #28]
 800834e:	9d04      	ldr	r5, [sp, #16]
 8008350:	9a04      	ldr	r2, [sp, #16]
 8008352:	441a      	add	r2, r3
 8008354:	9204      	str	r2, [sp, #16]
 8008356:	9a05      	ldr	r2, [sp, #20]
 8008358:	2101      	movs	r1, #1
 800835a:	441a      	add	r2, r3
 800835c:	4620      	mov	r0, r4
 800835e:	9205      	str	r2, [sp, #20]
 8008360:	f000 fd86 	bl	8008e70 <__i2b>
 8008364:	4607      	mov	r7, r0
 8008366:	2d00      	cmp	r5, #0
 8008368:	dd0c      	ble.n	8008384 <_dtoa_r+0x754>
 800836a:	9b05      	ldr	r3, [sp, #20]
 800836c:	2b00      	cmp	r3, #0
 800836e:	dd09      	ble.n	8008384 <_dtoa_r+0x754>
 8008370:	42ab      	cmp	r3, r5
 8008372:	9a04      	ldr	r2, [sp, #16]
 8008374:	bfa8      	it	ge
 8008376:	462b      	movge	r3, r5
 8008378:	1ad2      	subs	r2, r2, r3
 800837a:	9204      	str	r2, [sp, #16]
 800837c:	9a05      	ldr	r2, [sp, #20]
 800837e:	1aed      	subs	r5, r5, r3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	9305      	str	r3, [sp, #20]
 8008384:	9b07      	ldr	r3, [sp, #28]
 8008386:	b31b      	cbz	r3, 80083d0 <_dtoa_r+0x7a0>
 8008388:	9b08      	ldr	r3, [sp, #32]
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 80af 	beq.w	80084ee <_dtoa_r+0x8be>
 8008390:	2e00      	cmp	r6, #0
 8008392:	dd13      	ble.n	80083bc <_dtoa_r+0x78c>
 8008394:	4639      	mov	r1, r7
 8008396:	4632      	mov	r2, r6
 8008398:	4620      	mov	r0, r4
 800839a:	f000 fe29 	bl	8008ff0 <__pow5mult>
 800839e:	ee18 2a10 	vmov	r2, s16
 80083a2:	4601      	mov	r1, r0
 80083a4:	4607      	mov	r7, r0
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 fd78 	bl	8008e9c <__multiply>
 80083ac:	ee18 1a10 	vmov	r1, s16
 80083b0:	4680      	mov	r8, r0
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 fca4 	bl	8008d00 <_Bfree>
 80083b8:	ee08 8a10 	vmov	s16, r8
 80083bc:	9b07      	ldr	r3, [sp, #28]
 80083be:	1b9a      	subs	r2, r3, r6
 80083c0:	d006      	beq.n	80083d0 <_dtoa_r+0x7a0>
 80083c2:	ee18 1a10 	vmov	r1, s16
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 fe12 	bl	8008ff0 <__pow5mult>
 80083cc:	ee08 0a10 	vmov	s16, r0
 80083d0:	2101      	movs	r1, #1
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 fd4c 	bl	8008e70 <__i2b>
 80083d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083da:	2b00      	cmp	r3, #0
 80083dc:	4606      	mov	r6, r0
 80083de:	f340 8088 	ble.w	80084f2 <_dtoa_r+0x8c2>
 80083e2:	461a      	mov	r2, r3
 80083e4:	4601      	mov	r1, r0
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 fe02 	bl	8008ff0 <__pow5mult>
 80083ec:	9b06      	ldr	r3, [sp, #24]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	4606      	mov	r6, r0
 80083f2:	f340 8081 	ble.w	80084f8 <_dtoa_r+0x8c8>
 80083f6:	f04f 0800 	mov.w	r8, #0
 80083fa:	6933      	ldr	r3, [r6, #16]
 80083fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008400:	6918      	ldr	r0, [r3, #16]
 8008402:	f000 fce5 	bl	8008dd0 <__hi0bits>
 8008406:	f1c0 0020 	rsb	r0, r0, #32
 800840a:	9b05      	ldr	r3, [sp, #20]
 800840c:	4418      	add	r0, r3
 800840e:	f010 001f 	ands.w	r0, r0, #31
 8008412:	f000 8092 	beq.w	800853a <_dtoa_r+0x90a>
 8008416:	f1c0 0320 	rsb	r3, r0, #32
 800841a:	2b04      	cmp	r3, #4
 800841c:	f340 808a 	ble.w	8008534 <_dtoa_r+0x904>
 8008420:	f1c0 001c 	rsb	r0, r0, #28
 8008424:	9b04      	ldr	r3, [sp, #16]
 8008426:	4403      	add	r3, r0
 8008428:	9304      	str	r3, [sp, #16]
 800842a:	9b05      	ldr	r3, [sp, #20]
 800842c:	4403      	add	r3, r0
 800842e:	4405      	add	r5, r0
 8008430:	9305      	str	r3, [sp, #20]
 8008432:	9b04      	ldr	r3, [sp, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	dd07      	ble.n	8008448 <_dtoa_r+0x818>
 8008438:	ee18 1a10 	vmov	r1, s16
 800843c:	461a      	mov	r2, r3
 800843e:	4620      	mov	r0, r4
 8008440:	f000 fe30 	bl	80090a4 <__lshift>
 8008444:	ee08 0a10 	vmov	s16, r0
 8008448:	9b05      	ldr	r3, [sp, #20]
 800844a:	2b00      	cmp	r3, #0
 800844c:	dd05      	ble.n	800845a <_dtoa_r+0x82a>
 800844e:	4631      	mov	r1, r6
 8008450:	461a      	mov	r2, r3
 8008452:	4620      	mov	r0, r4
 8008454:	f000 fe26 	bl	80090a4 <__lshift>
 8008458:	4606      	mov	r6, r0
 800845a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d06e      	beq.n	800853e <_dtoa_r+0x90e>
 8008460:	ee18 0a10 	vmov	r0, s16
 8008464:	4631      	mov	r1, r6
 8008466:	f000 fe8d 	bl	8009184 <__mcmp>
 800846a:	2800      	cmp	r0, #0
 800846c:	da67      	bge.n	800853e <_dtoa_r+0x90e>
 800846e:	9b00      	ldr	r3, [sp, #0]
 8008470:	3b01      	subs	r3, #1
 8008472:	ee18 1a10 	vmov	r1, s16
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	220a      	movs	r2, #10
 800847a:	2300      	movs	r3, #0
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fc61 	bl	8008d44 <__multadd>
 8008482:	9b08      	ldr	r3, [sp, #32]
 8008484:	ee08 0a10 	vmov	s16, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 81b1 	beq.w	80087f0 <_dtoa_r+0xbc0>
 800848e:	2300      	movs	r3, #0
 8008490:	4639      	mov	r1, r7
 8008492:	220a      	movs	r2, #10
 8008494:	4620      	mov	r0, r4
 8008496:	f000 fc55 	bl	8008d44 <__multadd>
 800849a:	9b02      	ldr	r3, [sp, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	4607      	mov	r7, r0
 80084a0:	f300 808e 	bgt.w	80085c0 <_dtoa_r+0x990>
 80084a4:	9b06      	ldr	r3, [sp, #24]
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	dc51      	bgt.n	800854e <_dtoa_r+0x91e>
 80084aa:	e089      	b.n	80085c0 <_dtoa_r+0x990>
 80084ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084b2:	e74b      	b.n	800834c <_dtoa_r+0x71c>
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	1e5e      	subs	r6, r3, #1
 80084b8:	9b07      	ldr	r3, [sp, #28]
 80084ba:	42b3      	cmp	r3, r6
 80084bc:	bfbf      	itttt	lt
 80084be:	9b07      	ldrlt	r3, [sp, #28]
 80084c0:	9607      	strlt	r6, [sp, #28]
 80084c2:	1af2      	sublt	r2, r6, r3
 80084c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80084c6:	bfb6      	itet	lt
 80084c8:	189b      	addlt	r3, r3, r2
 80084ca:	1b9e      	subge	r6, r3, r6
 80084cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80084ce:	9b03      	ldr	r3, [sp, #12]
 80084d0:	bfb8      	it	lt
 80084d2:	2600      	movlt	r6, #0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	bfb7      	itett	lt
 80084d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80084dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80084e0:	1a9d      	sublt	r5, r3, r2
 80084e2:	2300      	movlt	r3, #0
 80084e4:	e734      	b.n	8008350 <_dtoa_r+0x720>
 80084e6:	9e07      	ldr	r6, [sp, #28]
 80084e8:	9d04      	ldr	r5, [sp, #16]
 80084ea:	9f08      	ldr	r7, [sp, #32]
 80084ec:	e73b      	b.n	8008366 <_dtoa_r+0x736>
 80084ee:	9a07      	ldr	r2, [sp, #28]
 80084f0:	e767      	b.n	80083c2 <_dtoa_r+0x792>
 80084f2:	9b06      	ldr	r3, [sp, #24]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	dc18      	bgt.n	800852a <_dtoa_r+0x8fa>
 80084f8:	f1ba 0f00 	cmp.w	sl, #0
 80084fc:	d115      	bne.n	800852a <_dtoa_r+0x8fa>
 80084fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008502:	b993      	cbnz	r3, 800852a <_dtoa_r+0x8fa>
 8008504:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008508:	0d1b      	lsrs	r3, r3, #20
 800850a:	051b      	lsls	r3, r3, #20
 800850c:	b183      	cbz	r3, 8008530 <_dtoa_r+0x900>
 800850e:	9b04      	ldr	r3, [sp, #16]
 8008510:	3301      	adds	r3, #1
 8008512:	9304      	str	r3, [sp, #16]
 8008514:	9b05      	ldr	r3, [sp, #20]
 8008516:	3301      	adds	r3, #1
 8008518:	9305      	str	r3, [sp, #20]
 800851a:	f04f 0801 	mov.w	r8, #1
 800851e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008520:	2b00      	cmp	r3, #0
 8008522:	f47f af6a 	bne.w	80083fa <_dtoa_r+0x7ca>
 8008526:	2001      	movs	r0, #1
 8008528:	e76f      	b.n	800840a <_dtoa_r+0x7da>
 800852a:	f04f 0800 	mov.w	r8, #0
 800852e:	e7f6      	b.n	800851e <_dtoa_r+0x8ee>
 8008530:	4698      	mov	r8, r3
 8008532:	e7f4      	b.n	800851e <_dtoa_r+0x8ee>
 8008534:	f43f af7d 	beq.w	8008432 <_dtoa_r+0x802>
 8008538:	4618      	mov	r0, r3
 800853a:	301c      	adds	r0, #28
 800853c:	e772      	b.n	8008424 <_dtoa_r+0x7f4>
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	dc37      	bgt.n	80085b4 <_dtoa_r+0x984>
 8008544:	9b06      	ldr	r3, [sp, #24]
 8008546:	2b02      	cmp	r3, #2
 8008548:	dd34      	ble.n	80085b4 <_dtoa_r+0x984>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	9302      	str	r3, [sp, #8]
 800854e:	9b02      	ldr	r3, [sp, #8]
 8008550:	b96b      	cbnz	r3, 800856e <_dtoa_r+0x93e>
 8008552:	4631      	mov	r1, r6
 8008554:	2205      	movs	r2, #5
 8008556:	4620      	mov	r0, r4
 8008558:	f000 fbf4 	bl	8008d44 <__multadd>
 800855c:	4601      	mov	r1, r0
 800855e:	4606      	mov	r6, r0
 8008560:	ee18 0a10 	vmov	r0, s16
 8008564:	f000 fe0e 	bl	8009184 <__mcmp>
 8008568:	2800      	cmp	r0, #0
 800856a:	f73f adbb 	bgt.w	80080e4 <_dtoa_r+0x4b4>
 800856e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008570:	9d01      	ldr	r5, [sp, #4]
 8008572:	43db      	mvns	r3, r3
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	f04f 0800 	mov.w	r8, #0
 800857a:	4631      	mov	r1, r6
 800857c:	4620      	mov	r0, r4
 800857e:	f000 fbbf 	bl	8008d00 <_Bfree>
 8008582:	2f00      	cmp	r7, #0
 8008584:	f43f aea4 	beq.w	80082d0 <_dtoa_r+0x6a0>
 8008588:	f1b8 0f00 	cmp.w	r8, #0
 800858c:	d005      	beq.n	800859a <_dtoa_r+0x96a>
 800858e:	45b8      	cmp	r8, r7
 8008590:	d003      	beq.n	800859a <_dtoa_r+0x96a>
 8008592:	4641      	mov	r1, r8
 8008594:	4620      	mov	r0, r4
 8008596:	f000 fbb3 	bl	8008d00 <_Bfree>
 800859a:	4639      	mov	r1, r7
 800859c:	4620      	mov	r0, r4
 800859e:	f000 fbaf 	bl	8008d00 <_Bfree>
 80085a2:	e695      	b.n	80082d0 <_dtoa_r+0x6a0>
 80085a4:	2600      	movs	r6, #0
 80085a6:	4637      	mov	r7, r6
 80085a8:	e7e1      	b.n	800856e <_dtoa_r+0x93e>
 80085aa:	9700      	str	r7, [sp, #0]
 80085ac:	4637      	mov	r7, r6
 80085ae:	e599      	b.n	80080e4 <_dtoa_r+0x4b4>
 80085b0:	40240000 	.word	0x40240000
 80085b4:	9b08      	ldr	r3, [sp, #32]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 80ca 	beq.w	8008750 <_dtoa_r+0xb20>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	9302      	str	r3, [sp, #8]
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	dd05      	ble.n	80085d0 <_dtoa_r+0x9a0>
 80085c4:	4639      	mov	r1, r7
 80085c6:	462a      	mov	r2, r5
 80085c8:	4620      	mov	r0, r4
 80085ca:	f000 fd6b 	bl	80090a4 <__lshift>
 80085ce:	4607      	mov	r7, r0
 80085d0:	f1b8 0f00 	cmp.w	r8, #0
 80085d4:	d05b      	beq.n	800868e <_dtoa_r+0xa5e>
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 fb51 	bl	8008c80 <_Balloc>
 80085de:	4605      	mov	r5, r0
 80085e0:	b928      	cbnz	r0, 80085ee <_dtoa_r+0x9be>
 80085e2:	4b87      	ldr	r3, [pc, #540]	; (8008800 <_dtoa_r+0xbd0>)
 80085e4:	4602      	mov	r2, r0
 80085e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085ea:	f7ff bb3b 	b.w	8007c64 <_dtoa_r+0x34>
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	3202      	adds	r2, #2
 80085f2:	0092      	lsls	r2, r2, #2
 80085f4:	f107 010c 	add.w	r1, r7, #12
 80085f8:	300c      	adds	r0, #12
 80085fa:	f000 fb33 	bl	8008c64 <memcpy>
 80085fe:	2201      	movs	r2, #1
 8008600:	4629      	mov	r1, r5
 8008602:	4620      	mov	r0, r4
 8008604:	f000 fd4e 	bl	80090a4 <__lshift>
 8008608:	9b01      	ldr	r3, [sp, #4]
 800860a:	f103 0901 	add.w	r9, r3, #1
 800860e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008612:	4413      	add	r3, r2
 8008614:	9305      	str	r3, [sp, #20]
 8008616:	f00a 0301 	and.w	r3, sl, #1
 800861a:	46b8      	mov	r8, r7
 800861c:	9304      	str	r3, [sp, #16]
 800861e:	4607      	mov	r7, r0
 8008620:	4631      	mov	r1, r6
 8008622:	ee18 0a10 	vmov	r0, s16
 8008626:	f7ff fa75 	bl	8007b14 <quorem>
 800862a:	4641      	mov	r1, r8
 800862c:	9002      	str	r0, [sp, #8]
 800862e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008632:	ee18 0a10 	vmov	r0, s16
 8008636:	f000 fda5 	bl	8009184 <__mcmp>
 800863a:	463a      	mov	r2, r7
 800863c:	9003      	str	r0, [sp, #12]
 800863e:	4631      	mov	r1, r6
 8008640:	4620      	mov	r0, r4
 8008642:	f000 fdbb 	bl	80091bc <__mdiff>
 8008646:	68c2      	ldr	r2, [r0, #12]
 8008648:	f109 3bff 	add.w	fp, r9, #4294967295
 800864c:	4605      	mov	r5, r0
 800864e:	bb02      	cbnz	r2, 8008692 <_dtoa_r+0xa62>
 8008650:	4601      	mov	r1, r0
 8008652:	ee18 0a10 	vmov	r0, s16
 8008656:	f000 fd95 	bl	8009184 <__mcmp>
 800865a:	4602      	mov	r2, r0
 800865c:	4629      	mov	r1, r5
 800865e:	4620      	mov	r0, r4
 8008660:	9207      	str	r2, [sp, #28]
 8008662:	f000 fb4d 	bl	8008d00 <_Bfree>
 8008666:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800866a:	ea43 0102 	orr.w	r1, r3, r2
 800866e:	9b04      	ldr	r3, [sp, #16]
 8008670:	430b      	orrs	r3, r1
 8008672:	464d      	mov	r5, r9
 8008674:	d10f      	bne.n	8008696 <_dtoa_r+0xa66>
 8008676:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800867a:	d02a      	beq.n	80086d2 <_dtoa_r+0xaa2>
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	dd02      	ble.n	8008688 <_dtoa_r+0xa58>
 8008682:	9b02      	ldr	r3, [sp, #8]
 8008684:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008688:	f88b a000 	strb.w	sl, [fp]
 800868c:	e775      	b.n	800857a <_dtoa_r+0x94a>
 800868e:	4638      	mov	r0, r7
 8008690:	e7ba      	b.n	8008608 <_dtoa_r+0x9d8>
 8008692:	2201      	movs	r2, #1
 8008694:	e7e2      	b.n	800865c <_dtoa_r+0xa2c>
 8008696:	9b03      	ldr	r3, [sp, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	db04      	blt.n	80086a6 <_dtoa_r+0xa76>
 800869c:	9906      	ldr	r1, [sp, #24]
 800869e:	430b      	orrs	r3, r1
 80086a0:	9904      	ldr	r1, [sp, #16]
 80086a2:	430b      	orrs	r3, r1
 80086a4:	d122      	bne.n	80086ec <_dtoa_r+0xabc>
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	ddee      	ble.n	8008688 <_dtoa_r+0xa58>
 80086aa:	ee18 1a10 	vmov	r1, s16
 80086ae:	2201      	movs	r2, #1
 80086b0:	4620      	mov	r0, r4
 80086b2:	f000 fcf7 	bl	80090a4 <__lshift>
 80086b6:	4631      	mov	r1, r6
 80086b8:	ee08 0a10 	vmov	s16, r0
 80086bc:	f000 fd62 	bl	8009184 <__mcmp>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	dc03      	bgt.n	80086cc <_dtoa_r+0xa9c>
 80086c4:	d1e0      	bne.n	8008688 <_dtoa_r+0xa58>
 80086c6:	f01a 0f01 	tst.w	sl, #1
 80086ca:	d0dd      	beq.n	8008688 <_dtoa_r+0xa58>
 80086cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086d0:	d1d7      	bne.n	8008682 <_dtoa_r+0xa52>
 80086d2:	2339      	movs	r3, #57	; 0x39
 80086d4:	f88b 3000 	strb.w	r3, [fp]
 80086d8:	462b      	mov	r3, r5
 80086da:	461d      	mov	r5, r3
 80086dc:	3b01      	subs	r3, #1
 80086de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086e2:	2a39      	cmp	r2, #57	; 0x39
 80086e4:	d071      	beq.n	80087ca <_dtoa_r+0xb9a>
 80086e6:	3201      	adds	r2, #1
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	e746      	b.n	800857a <_dtoa_r+0x94a>
 80086ec:	2a00      	cmp	r2, #0
 80086ee:	dd07      	ble.n	8008700 <_dtoa_r+0xad0>
 80086f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086f4:	d0ed      	beq.n	80086d2 <_dtoa_r+0xaa2>
 80086f6:	f10a 0301 	add.w	r3, sl, #1
 80086fa:	f88b 3000 	strb.w	r3, [fp]
 80086fe:	e73c      	b.n	800857a <_dtoa_r+0x94a>
 8008700:	9b05      	ldr	r3, [sp, #20]
 8008702:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008706:	4599      	cmp	r9, r3
 8008708:	d047      	beq.n	800879a <_dtoa_r+0xb6a>
 800870a:	ee18 1a10 	vmov	r1, s16
 800870e:	2300      	movs	r3, #0
 8008710:	220a      	movs	r2, #10
 8008712:	4620      	mov	r0, r4
 8008714:	f000 fb16 	bl	8008d44 <__multadd>
 8008718:	45b8      	cmp	r8, r7
 800871a:	ee08 0a10 	vmov	s16, r0
 800871e:	f04f 0300 	mov.w	r3, #0
 8008722:	f04f 020a 	mov.w	r2, #10
 8008726:	4641      	mov	r1, r8
 8008728:	4620      	mov	r0, r4
 800872a:	d106      	bne.n	800873a <_dtoa_r+0xb0a>
 800872c:	f000 fb0a 	bl	8008d44 <__multadd>
 8008730:	4680      	mov	r8, r0
 8008732:	4607      	mov	r7, r0
 8008734:	f109 0901 	add.w	r9, r9, #1
 8008738:	e772      	b.n	8008620 <_dtoa_r+0x9f0>
 800873a:	f000 fb03 	bl	8008d44 <__multadd>
 800873e:	4639      	mov	r1, r7
 8008740:	4680      	mov	r8, r0
 8008742:	2300      	movs	r3, #0
 8008744:	220a      	movs	r2, #10
 8008746:	4620      	mov	r0, r4
 8008748:	f000 fafc 	bl	8008d44 <__multadd>
 800874c:	4607      	mov	r7, r0
 800874e:	e7f1      	b.n	8008734 <_dtoa_r+0xb04>
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	9302      	str	r3, [sp, #8]
 8008754:	9d01      	ldr	r5, [sp, #4]
 8008756:	ee18 0a10 	vmov	r0, s16
 800875a:	4631      	mov	r1, r6
 800875c:	f7ff f9da 	bl	8007b14 <quorem>
 8008760:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008764:	9b01      	ldr	r3, [sp, #4]
 8008766:	f805 ab01 	strb.w	sl, [r5], #1
 800876a:	1aea      	subs	r2, r5, r3
 800876c:	9b02      	ldr	r3, [sp, #8]
 800876e:	4293      	cmp	r3, r2
 8008770:	dd09      	ble.n	8008786 <_dtoa_r+0xb56>
 8008772:	ee18 1a10 	vmov	r1, s16
 8008776:	2300      	movs	r3, #0
 8008778:	220a      	movs	r2, #10
 800877a:	4620      	mov	r0, r4
 800877c:	f000 fae2 	bl	8008d44 <__multadd>
 8008780:	ee08 0a10 	vmov	s16, r0
 8008784:	e7e7      	b.n	8008756 <_dtoa_r+0xb26>
 8008786:	9b02      	ldr	r3, [sp, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bfc8      	it	gt
 800878c:	461d      	movgt	r5, r3
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	bfd8      	it	le
 8008792:	2501      	movle	r5, #1
 8008794:	441d      	add	r5, r3
 8008796:	f04f 0800 	mov.w	r8, #0
 800879a:	ee18 1a10 	vmov	r1, s16
 800879e:	2201      	movs	r2, #1
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fc7f 	bl	80090a4 <__lshift>
 80087a6:	4631      	mov	r1, r6
 80087a8:	ee08 0a10 	vmov	s16, r0
 80087ac:	f000 fcea 	bl	8009184 <__mcmp>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	dc91      	bgt.n	80086d8 <_dtoa_r+0xaa8>
 80087b4:	d102      	bne.n	80087bc <_dtoa_r+0xb8c>
 80087b6:	f01a 0f01 	tst.w	sl, #1
 80087ba:	d18d      	bne.n	80086d8 <_dtoa_r+0xaa8>
 80087bc:	462b      	mov	r3, r5
 80087be:	461d      	mov	r5, r3
 80087c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087c4:	2a30      	cmp	r2, #48	; 0x30
 80087c6:	d0fa      	beq.n	80087be <_dtoa_r+0xb8e>
 80087c8:	e6d7      	b.n	800857a <_dtoa_r+0x94a>
 80087ca:	9a01      	ldr	r2, [sp, #4]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d184      	bne.n	80086da <_dtoa_r+0xaaa>
 80087d0:	9b00      	ldr	r3, [sp, #0]
 80087d2:	3301      	adds	r3, #1
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	2331      	movs	r3, #49	; 0x31
 80087d8:	7013      	strb	r3, [r2, #0]
 80087da:	e6ce      	b.n	800857a <_dtoa_r+0x94a>
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <_dtoa_r+0xbd4>)
 80087de:	f7ff ba95 	b.w	8007d0c <_dtoa_r+0xdc>
 80087e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f47f aa6e 	bne.w	8007cc6 <_dtoa_r+0x96>
 80087ea:	4b07      	ldr	r3, [pc, #28]	; (8008808 <_dtoa_r+0xbd8>)
 80087ec:	f7ff ba8e 	b.w	8007d0c <_dtoa_r+0xdc>
 80087f0:	9b02      	ldr	r3, [sp, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dcae      	bgt.n	8008754 <_dtoa_r+0xb24>
 80087f6:	9b06      	ldr	r3, [sp, #24]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	f73f aea8 	bgt.w	800854e <_dtoa_r+0x91e>
 80087fe:	e7a9      	b.n	8008754 <_dtoa_r+0xb24>
 8008800:	08009e1f 	.word	0x08009e1f
 8008804:	08009d7c 	.word	0x08009d7c
 8008808:	08009da0 	.word	0x08009da0

0800880c <__sflush_r>:
 800880c:	898a      	ldrh	r2, [r1, #12]
 800880e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008812:	4605      	mov	r5, r0
 8008814:	0710      	lsls	r0, r2, #28
 8008816:	460c      	mov	r4, r1
 8008818:	d458      	bmi.n	80088cc <__sflush_r+0xc0>
 800881a:	684b      	ldr	r3, [r1, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	dc05      	bgt.n	800882c <__sflush_r+0x20>
 8008820:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008822:	2b00      	cmp	r3, #0
 8008824:	dc02      	bgt.n	800882c <__sflush_r+0x20>
 8008826:	2000      	movs	r0, #0
 8008828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800882c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800882e:	2e00      	cmp	r6, #0
 8008830:	d0f9      	beq.n	8008826 <__sflush_r+0x1a>
 8008832:	2300      	movs	r3, #0
 8008834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008838:	682f      	ldr	r7, [r5, #0]
 800883a:	602b      	str	r3, [r5, #0]
 800883c:	d032      	beq.n	80088a4 <__sflush_r+0x98>
 800883e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	075a      	lsls	r2, r3, #29
 8008844:	d505      	bpl.n	8008852 <__sflush_r+0x46>
 8008846:	6863      	ldr	r3, [r4, #4]
 8008848:	1ac0      	subs	r0, r0, r3
 800884a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800884c:	b10b      	cbz	r3, 8008852 <__sflush_r+0x46>
 800884e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008850:	1ac0      	subs	r0, r0, r3
 8008852:	2300      	movs	r3, #0
 8008854:	4602      	mov	r2, r0
 8008856:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008858:	6a21      	ldr	r1, [r4, #32]
 800885a:	4628      	mov	r0, r5
 800885c:	47b0      	blx	r6
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	d106      	bne.n	8008872 <__sflush_r+0x66>
 8008864:	6829      	ldr	r1, [r5, #0]
 8008866:	291d      	cmp	r1, #29
 8008868:	d82c      	bhi.n	80088c4 <__sflush_r+0xb8>
 800886a:	4a2a      	ldr	r2, [pc, #168]	; (8008914 <__sflush_r+0x108>)
 800886c:	40ca      	lsrs	r2, r1
 800886e:	07d6      	lsls	r6, r2, #31
 8008870:	d528      	bpl.n	80088c4 <__sflush_r+0xb8>
 8008872:	2200      	movs	r2, #0
 8008874:	6062      	str	r2, [r4, #4]
 8008876:	04d9      	lsls	r1, r3, #19
 8008878:	6922      	ldr	r2, [r4, #16]
 800887a:	6022      	str	r2, [r4, #0]
 800887c:	d504      	bpl.n	8008888 <__sflush_r+0x7c>
 800887e:	1c42      	adds	r2, r0, #1
 8008880:	d101      	bne.n	8008886 <__sflush_r+0x7a>
 8008882:	682b      	ldr	r3, [r5, #0]
 8008884:	b903      	cbnz	r3, 8008888 <__sflush_r+0x7c>
 8008886:	6560      	str	r0, [r4, #84]	; 0x54
 8008888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800888a:	602f      	str	r7, [r5, #0]
 800888c:	2900      	cmp	r1, #0
 800888e:	d0ca      	beq.n	8008826 <__sflush_r+0x1a>
 8008890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008894:	4299      	cmp	r1, r3
 8008896:	d002      	beq.n	800889e <__sflush_r+0x92>
 8008898:	4628      	mov	r0, r5
 800889a:	f000 fd8b 	bl	80093b4 <_free_r>
 800889e:	2000      	movs	r0, #0
 80088a0:	6360      	str	r0, [r4, #52]	; 0x34
 80088a2:	e7c1      	b.n	8008828 <__sflush_r+0x1c>
 80088a4:	6a21      	ldr	r1, [r4, #32]
 80088a6:	2301      	movs	r3, #1
 80088a8:	4628      	mov	r0, r5
 80088aa:	47b0      	blx	r6
 80088ac:	1c41      	adds	r1, r0, #1
 80088ae:	d1c7      	bne.n	8008840 <__sflush_r+0x34>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0c4      	beq.n	8008840 <__sflush_r+0x34>
 80088b6:	2b1d      	cmp	r3, #29
 80088b8:	d001      	beq.n	80088be <__sflush_r+0xb2>
 80088ba:	2b16      	cmp	r3, #22
 80088bc:	d101      	bne.n	80088c2 <__sflush_r+0xb6>
 80088be:	602f      	str	r7, [r5, #0]
 80088c0:	e7b1      	b.n	8008826 <__sflush_r+0x1a>
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	e7ad      	b.n	8008828 <__sflush_r+0x1c>
 80088cc:	690f      	ldr	r7, [r1, #16]
 80088ce:	2f00      	cmp	r7, #0
 80088d0:	d0a9      	beq.n	8008826 <__sflush_r+0x1a>
 80088d2:	0793      	lsls	r3, r2, #30
 80088d4:	680e      	ldr	r6, [r1, #0]
 80088d6:	bf08      	it	eq
 80088d8:	694b      	ldreq	r3, [r1, #20]
 80088da:	600f      	str	r7, [r1, #0]
 80088dc:	bf18      	it	ne
 80088de:	2300      	movne	r3, #0
 80088e0:	eba6 0807 	sub.w	r8, r6, r7
 80088e4:	608b      	str	r3, [r1, #8]
 80088e6:	f1b8 0f00 	cmp.w	r8, #0
 80088ea:	dd9c      	ble.n	8008826 <__sflush_r+0x1a>
 80088ec:	6a21      	ldr	r1, [r4, #32]
 80088ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088f0:	4643      	mov	r3, r8
 80088f2:	463a      	mov	r2, r7
 80088f4:	4628      	mov	r0, r5
 80088f6:	47b0      	blx	r6
 80088f8:	2800      	cmp	r0, #0
 80088fa:	dc06      	bgt.n	800890a <__sflush_r+0xfe>
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	f04f 30ff 	mov.w	r0, #4294967295
 8008908:	e78e      	b.n	8008828 <__sflush_r+0x1c>
 800890a:	4407      	add	r7, r0
 800890c:	eba8 0800 	sub.w	r8, r8, r0
 8008910:	e7e9      	b.n	80088e6 <__sflush_r+0xda>
 8008912:	bf00      	nop
 8008914:	20400001 	.word	0x20400001

08008918 <_fflush_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	690b      	ldr	r3, [r1, #16]
 800891c:	4605      	mov	r5, r0
 800891e:	460c      	mov	r4, r1
 8008920:	b913      	cbnz	r3, 8008928 <_fflush_r+0x10>
 8008922:	2500      	movs	r5, #0
 8008924:	4628      	mov	r0, r5
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	b118      	cbz	r0, 8008932 <_fflush_r+0x1a>
 800892a:	6983      	ldr	r3, [r0, #24]
 800892c:	b90b      	cbnz	r3, 8008932 <_fflush_r+0x1a>
 800892e:	f000 f887 	bl	8008a40 <__sinit>
 8008932:	4b14      	ldr	r3, [pc, #80]	; (8008984 <_fflush_r+0x6c>)
 8008934:	429c      	cmp	r4, r3
 8008936:	d11b      	bne.n	8008970 <_fflush_r+0x58>
 8008938:	686c      	ldr	r4, [r5, #4]
 800893a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0ef      	beq.n	8008922 <_fflush_r+0xa>
 8008942:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008944:	07d0      	lsls	r0, r2, #31
 8008946:	d404      	bmi.n	8008952 <_fflush_r+0x3a>
 8008948:	0599      	lsls	r1, r3, #22
 800894a:	d402      	bmi.n	8008952 <_fflush_r+0x3a>
 800894c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800894e:	f000 f91a 	bl	8008b86 <__retarget_lock_acquire_recursive>
 8008952:	4628      	mov	r0, r5
 8008954:	4621      	mov	r1, r4
 8008956:	f7ff ff59 	bl	800880c <__sflush_r>
 800895a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800895c:	07da      	lsls	r2, r3, #31
 800895e:	4605      	mov	r5, r0
 8008960:	d4e0      	bmi.n	8008924 <_fflush_r+0xc>
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	059b      	lsls	r3, r3, #22
 8008966:	d4dd      	bmi.n	8008924 <_fflush_r+0xc>
 8008968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800896a:	f000 f90d 	bl	8008b88 <__retarget_lock_release_recursive>
 800896e:	e7d9      	b.n	8008924 <_fflush_r+0xc>
 8008970:	4b05      	ldr	r3, [pc, #20]	; (8008988 <_fflush_r+0x70>)
 8008972:	429c      	cmp	r4, r3
 8008974:	d101      	bne.n	800897a <_fflush_r+0x62>
 8008976:	68ac      	ldr	r4, [r5, #8]
 8008978:	e7df      	b.n	800893a <_fflush_r+0x22>
 800897a:	4b04      	ldr	r3, [pc, #16]	; (800898c <_fflush_r+0x74>)
 800897c:	429c      	cmp	r4, r3
 800897e:	bf08      	it	eq
 8008980:	68ec      	ldreq	r4, [r5, #12]
 8008982:	e7da      	b.n	800893a <_fflush_r+0x22>
 8008984:	08009e50 	.word	0x08009e50
 8008988:	08009e70 	.word	0x08009e70
 800898c:	08009e30 	.word	0x08009e30

08008990 <std>:
 8008990:	2300      	movs	r3, #0
 8008992:	b510      	push	{r4, lr}
 8008994:	4604      	mov	r4, r0
 8008996:	e9c0 3300 	strd	r3, r3, [r0]
 800899a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800899e:	6083      	str	r3, [r0, #8]
 80089a0:	8181      	strh	r1, [r0, #12]
 80089a2:	6643      	str	r3, [r0, #100]	; 0x64
 80089a4:	81c2      	strh	r2, [r0, #14]
 80089a6:	6183      	str	r3, [r0, #24]
 80089a8:	4619      	mov	r1, r3
 80089aa:	2208      	movs	r2, #8
 80089ac:	305c      	adds	r0, #92	; 0x5c
 80089ae:	f7fe fb09 	bl	8006fc4 <memset>
 80089b2:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <std+0x38>)
 80089b4:	6263      	str	r3, [r4, #36]	; 0x24
 80089b6:	4b05      	ldr	r3, [pc, #20]	; (80089cc <std+0x3c>)
 80089b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80089ba:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <std+0x40>)
 80089bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <std+0x44>)
 80089c0:	6224      	str	r4, [r4, #32]
 80089c2:	6323      	str	r3, [r4, #48]	; 0x30
 80089c4:	bd10      	pop	{r4, pc}
 80089c6:	bf00      	nop
 80089c8:	08009849 	.word	0x08009849
 80089cc:	0800986b 	.word	0x0800986b
 80089d0:	080098a3 	.word	0x080098a3
 80089d4:	080098c7 	.word	0x080098c7

080089d8 <_cleanup_r>:
 80089d8:	4901      	ldr	r1, [pc, #4]	; (80089e0 <_cleanup_r+0x8>)
 80089da:	f000 b8af 	b.w	8008b3c <_fwalk_reent>
 80089de:	bf00      	nop
 80089e0:	08008919 	.word	0x08008919

080089e4 <__sfmoreglue>:
 80089e4:	b570      	push	{r4, r5, r6, lr}
 80089e6:	2268      	movs	r2, #104	; 0x68
 80089e8:	1e4d      	subs	r5, r1, #1
 80089ea:	4355      	muls	r5, r2
 80089ec:	460e      	mov	r6, r1
 80089ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089f2:	f000 fd4b 	bl	800948c <_malloc_r>
 80089f6:	4604      	mov	r4, r0
 80089f8:	b140      	cbz	r0, 8008a0c <__sfmoreglue+0x28>
 80089fa:	2100      	movs	r1, #0
 80089fc:	e9c0 1600 	strd	r1, r6, [r0]
 8008a00:	300c      	adds	r0, #12
 8008a02:	60a0      	str	r0, [r4, #8]
 8008a04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a08:	f7fe fadc 	bl	8006fc4 <memset>
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}

08008a10 <__sfp_lock_acquire>:
 8008a10:	4801      	ldr	r0, [pc, #4]	; (8008a18 <__sfp_lock_acquire+0x8>)
 8008a12:	f000 b8b8 	b.w	8008b86 <__retarget_lock_acquire_recursive>
 8008a16:	bf00      	nop
 8008a18:	20000879 	.word	0x20000879

08008a1c <__sfp_lock_release>:
 8008a1c:	4801      	ldr	r0, [pc, #4]	; (8008a24 <__sfp_lock_release+0x8>)
 8008a1e:	f000 b8b3 	b.w	8008b88 <__retarget_lock_release_recursive>
 8008a22:	bf00      	nop
 8008a24:	20000879 	.word	0x20000879

08008a28 <__sinit_lock_acquire>:
 8008a28:	4801      	ldr	r0, [pc, #4]	; (8008a30 <__sinit_lock_acquire+0x8>)
 8008a2a:	f000 b8ac 	b.w	8008b86 <__retarget_lock_acquire_recursive>
 8008a2e:	bf00      	nop
 8008a30:	2000087a 	.word	0x2000087a

08008a34 <__sinit_lock_release>:
 8008a34:	4801      	ldr	r0, [pc, #4]	; (8008a3c <__sinit_lock_release+0x8>)
 8008a36:	f000 b8a7 	b.w	8008b88 <__retarget_lock_release_recursive>
 8008a3a:	bf00      	nop
 8008a3c:	2000087a 	.word	0x2000087a

08008a40 <__sinit>:
 8008a40:	b510      	push	{r4, lr}
 8008a42:	4604      	mov	r4, r0
 8008a44:	f7ff fff0 	bl	8008a28 <__sinit_lock_acquire>
 8008a48:	69a3      	ldr	r3, [r4, #24]
 8008a4a:	b11b      	cbz	r3, 8008a54 <__sinit+0x14>
 8008a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a50:	f7ff bff0 	b.w	8008a34 <__sinit_lock_release>
 8008a54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a58:	6523      	str	r3, [r4, #80]	; 0x50
 8008a5a:	4b13      	ldr	r3, [pc, #76]	; (8008aa8 <__sinit+0x68>)
 8008a5c:	4a13      	ldr	r2, [pc, #76]	; (8008aac <__sinit+0x6c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a62:	42a3      	cmp	r3, r4
 8008a64:	bf04      	itt	eq
 8008a66:	2301      	moveq	r3, #1
 8008a68:	61a3      	streq	r3, [r4, #24]
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 f820 	bl	8008ab0 <__sfp>
 8008a70:	6060      	str	r0, [r4, #4]
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 f81c 	bl	8008ab0 <__sfp>
 8008a78:	60a0      	str	r0, [r4, #8]
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 f818 	bl	8008ab0 <__sfp>
 8008a80:	2200      	movs	r2, #0
 8008a82:	60e0      	str	r0, [r4, #12]
 8008a84:	2104      	movs	r1, #4
 8008a86:	6860      	ldr	r0, [r4, #4]
 8008a88:	f7ff ff82 	bl	8008990 <std>
 8008a8c:	68a0      	ldr	r0, [r4, #8]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	2109      	movs	r1, #9
 8008a92:	f7ff ff7d 	bl	8008990 <std>
 8008a96:	68e0      	ldr	r0, [r4, #12]
 8008a98:	2202      	movs	r2, #2
 8008a9a:	2112      	movs	r1, #18
 8008a9c:	f7ff ff78 	bl	8008990 <std>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	61a3      	str	r3, [r4, #24]
 8008aa4:	e7d2      	b.n	8008a4c <__sinit+0xc>
 8008aa6:	bf00      	nop
 8008aa8:	08009d68 	.word	0x08009d68
 8008aac:	080089d9 	.word	0x080089d9

08008ab0 <__sfp>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	4607      	mov	r7, r0
 8008ab4:	f7ff ffac 	bl	8008a10 <__sfp_lock_acquire>
 8008ab8:	4b1e      	ldr	r3, [pc, #120]	; (8008b34 <__sfp+0x84>)
 8008aba:	681e      	ldr	r6, [r3, #0]
 8008abc:	69b3      	ldr	r3, [r6, #24]
 8008abe:	b913      	cbnz	r3, 8008ac6 <__sfp+0x16>
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f7ff ffbd 	bl	8008a40 <__sinit>
 8008ac6:	3648      	adds	r6, #72	; 0x48
 8008ac8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	d503      	bpl.n	8008ad8 <__sfp+0x28>
 8008ad0:	6833      	ldr	r3, [r6, #0]
 8008ad2:	b30b      	cbz	r3, 8008b18 <__sfp+0x68>
 8008ad4:	6836      	ldr	r6, [r6, #0]
 8008ad6:	e7f7      	b.n	8008ac8 <__sfp+0x18>
 8008ad8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008adc:	b9d5      	cbnz	r5, 8008b14 <__sfp+0x64>
 8008ade:	4b16      	ldr	r3, [pc, #88]	; (8008b38 <__sfp+0x88>)
 8008ae0:	60e3      	str	r3, [r4, #12]
 8008ae2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ae6:	6665      	str	r5, [r4, #100]	; 0x64
 8008ae8:	f000 f84c 	bl	8008b84 <__retarget_lock_init_recursive>
 8008aec:	f7ff ff96 	bl	8008a1c <__sfp_lock_release>
 8008af0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008af4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008af8:	6025      	str	r5, [r4, #0]
 8008afa:	61a5      	str	r5, [r4, #24]
 8008afc:	2208      	movs	r2, #8
 8008afe:	4629      	mov	r1, r5
 8008b00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b04:	f7fe fa5e 	bl	8006fc4 <memset>
 8008b08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b10:	4620      	mov	r0, r4
 8008b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b14:	3468      	adds	r4, #104	; 0x68
 8008b16:	e7d9      	b.n	8008acc <__sfp+0x1c>
 8008b18:	2104      	movs	r1, #4
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	f7ff ff62 	bl	80089e4 <__sfmoreglue>
 8008b20:	4604      	mov	r4, r0
 8008b22:	6030      	str	r0, [r6, #0]
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d1d5      	bne.n	8008ad4 <__sfp+0x24>
 8008b28:	f7ff ff78 	bl	8008a1c <__sfp_lock_release>
 8008b2c:	230c      	movs	r3, #12
 8008b2e:	603b      	str	r3, [r7, #0]
 8008b30:	e7ee      	b.n	8008b10 <__sfp+0x60>
 8008b32:	bf00      	nop
 8008b34:	08009d68 	.word	0x08009d68
 8008b38:	ffff0001 	.word	0xffff0001

08008b3c <_fwalk_reent>:
 8008b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b40:	4606      	mov	r6, r0
 8008b42:	4688      	mov	r8, r1
 8008b44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b48:	2700      	movs	r7, #0
 8008b4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b4e:	f1b9 0901 	subs.w	r9, r9, #1
 8008b52:	d505      	bpl.n	8008b60 <_fwalk_reent+0x24>
 8008b54:	6824      	ldr	r4, [r4, #0]
 8008b56:	2c00      	cmp	r4, #0
 8008b58:	d1f7      	bne.n	8008b4a <_fwalk_reent+0xe>
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b60:	89ab      	ldrh	r3, [r5, #12]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d907      	bls.n	8008b76 <_fwalk_reent+0x3a>
 8008b66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	d003      	beq.n	8008b76 <_fwalk_reent+0x3a>
 8008b6e:	4629      	mov	r1, r5
 8008b70:	4630      	mov	r0, r6
 8008b72:	47c0      	blx	r8
 8008b74:	4307      	orrs	r7, r0
 8008b76:	3568      	adds	r5, #104	; 0x68
 8008b78:	e7e9      	b.n	8008b4e <_fwalk_reent+0x12>
	...

08008b7c <_localeconv_r>:
 8008b7c:	4800      	ldr	r0, [pc, #0]	; (8008b80 <_localeconv_r+0x4>)
 8008b7e:	4770      	bx	lr
 8008b80:	20000168 	.word	0x20000168

08008b84 <__retarget_lock_init_recursive>:
 8008b84:	4770      	bx	lr

08008b86 <__retarget_lock_acquire_recursive>:
 8008b86:	4770      	bx	lr

08008b88 <__retarget_lock_release_recursive>:
 8008b88:	4770      	bx	lr

08008b8a <__swhatbuf_r>:
 8008b8a:	b570      	push	{r4, r5, r6, lr}
 8008b8c:	460e      	mov	r6, r1
 8008b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b92:	2900      	cmp	r1, #0
 8008b94:	b096      	sub	sp, #88	; 0x58
 8008b96:	4614      	mov	r4, r2
 8008b98:	461d      	mov	r5, r3
 8008b9a:	da08      	bge.n	8008bae <__swhatbuf_r+0x24>
 8008b9c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	602a      	str	r2, [r5, #0]
 8008ba4:	061a      	lsls	r2, r3, #24
 8008ba6:	d410      	bmi.n	8008bca <__swhatbuf_r+0x40>
 8008ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bac:	e00e      	b.n	8008bcc <__swhatbuf_r+0x42>
 8008bae:	466a      	mov	r2, sp
 8008bb0:	f000 fee0 	bl	8009974 <_fstat_r>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	dbf1      	blt.n	8008b9c <__swhatbuf_r+0x12>
 8008bb8:	9a01      	ldr	r2, [sp, #4]
 8008bba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bc2:	425a      	negs	r2, r3
 8008bc4:	415a      	adcs	r2, r3
 8008bc6:	602a      	str	r2, [r5, #0]
 8008bc8:	e7ee      	b.n	8008ba8 <__swhatbuf_r+0x1e>
 8008bca:	2340      	movs	r3, #64	; 0x40
 8008bcc:	2000      	movs	r0, #0
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	b016      	add	sp, #88	; 0x58
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}

08008bd4 <__smakebuf_r>:
 8008bd4:	898b      	ldrh	r3, [r1, #12]
 8008bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bd8:	079d      	lsls	r5, r3, #30
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460c      	mov	r4, r1
 8008bde:	d507      	bpl.n	8008bf0 <__smakebuf_r+0x1c>
 8008be0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	6123      	str	r3, [r4, #16]
 8008be8:	2301      	movs	r3, #1
 8008bea:	6163      	str	r3, [r4, #20]
 8008bec:	b002      	add	sp, #8
 8008bee:	bd70      	pop	{r4, r5, r6, pc}
 8008bf0:	ab01      	add	r3, sp, #4
 8008bf2:	466a      	mov	r2, sp
 8008bf4:	f7ff ffc9 	bl	8008b8a <__swhatbuf_r>
 8008bf8:	9900      	ldr	r1, [sp, #0]
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f000 fc45 	bl	800948c <_malloc_r>
 8008c02:	b948      	cbnz	r0, 8008c18 <__smakebuf_r+0x44>
 8008c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c08:	059a      	lsls	r2, r3, #22
 8008c0a:	d4ef      	bmi.n	8008bec <__smakebuf_r+0x18>
 8008c0c:	f023 0303 	bic.w	r3, r3, #3
 8008c10:	f043 0302 	orr.w	r3, r3, #2
 8008c14:	81a3      	strh	r3, [r4, #12]
 8008c16:	e7e3      	b.n	8008be0 <__smakebuf_r+0xc>
 8008c18:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <__smakebuf_r+0x7c>)
 8008c1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	6020      	str	r0, [r4, #0]
 8008c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c24:	81a3      	strh	r3, [r4, #12]
 8008c26:	9b00      	ldr	r3, [sp, #0]
 8008c28:	6163      	str	r3, [r4, #20]
 8008c2a:	9b01      	ldr	r3, [sp, #4]
 8008c2c:	6120      	str	r0, [r4, #16]
 8008c2e:	b15b      	cbz	r3, 8008c48 <__smakebuf_r+0x74>
 8008c30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c34:	4630      	mov	r0, r6
 8008c36:	f000 feaf 	bl	8009998 <_isatty_r>
 8008c3a:	b128      	cbz	r0, 8008c48 <__smakebuf_r+0x74>
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	f023 0303 	bic.w	r3, r3, #3
 8008c42:	f043 0301 	orr.w	r3, r3, #1
 8008c46:	81a3      	strh	r3, [r4, #12]
 8008c48:	89a0      	ldrh	r0, [r4, #12]
 8008c4a:	4305      	orrs	r5, r0
 8008c4c:	81a5      	strh	r5, [r4, #12]
 8008c4e:	e7cd      	b.n	8008bec <__smakebuf_r+0x18>
 8008c50:	080089d9 	.word	0x080089d9

08008c54 <malloc>:
 8008c54:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <malloc+0xc>)
 8008c56:	4601      	mov	r1, r0
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	f000 bc17 	b.w	800948c <_malloc_r>
 8008c5e:	bf00      	nop
 8008c60:	20000014 	.word	0x20000014

08008c64 <memcpy>:
 8008c64:	440a      	add	r2, r1
 8008c66:	4291      	cmp	r1, r2
 8008c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6c:	d100      	bne.n	8008c70 <memcpy+0xc>
 8008c6e:	4770      	bx	lr
 8008c70:	b510      	push	{r4, lr}
 8008c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c7a:	4291      	cmp	r1, r2
 8008c7c:	d1f9      	bne.n	8008c72 <memcpy+0xe>
 8008c7e:	bd10      	pop	{r4, pc}

08008c80 <_Balloc>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c84:	4604      	mov	r4, r0
 8008c86:	460d      	mov	r5, r1
 8008c88:	b976      	cbnz	r6, 8008ca8 <_Balloc+0x28>
 8008c8a:	2010      	movs	r0, #16
 8008c8c:	f7ff ffe2 	bl	8008c54 <malloc>
 8008c90:	4602      	mov	r2, r0
 8008c92:	6260      	str	r0, [r4, #36]	; 0x24
 8008c94:	b920      	cbnz	r0, 8008ca0 <_Balloc+0x20>
 8008c96:	4b18      	ldr	r3, [pc, #96]	; (8008cf8 <_Balloc+0x78>)
 8008c98:	4818      	ldr	r0, [pc, #96]	; (8008cfc <_Balloc+0x7c>)
 8008c9a:	2166      	movs	r1, #102	; 0x66
 8008c9c:	f000 fe2a 	bl	80098f4 <__assert_func>
 8008ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ca4:	6006      	str	r6, [r0, #0]
 8008ca6:	60c6      	str	r6, [r0, #12]
 8008ca8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008caa:	68f3      	ldr	r3, [r6, #12]
 8008cac:	b183      	cbz	r3, 8008cd0 <_Balloc+0x50>
 8008cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cb6:	b9b8      	cbnz	r0, 8008ce8 <_Balloc+0x68>
 8008cb8:	2101      	movs	r1, #1
 8008cba:	fa01 f605 	lsl.w	r6, r1, r5
 8008cbe:	1d72      	adds	r2, r6, #5
 8008cc0:	0092      	lsls	r2, r2, #2
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 fb60 	bl	8009388 <_calloc_r>
 8008cc8:	b160      	cbz	r0, 8008ce4 <_Balloc+0x64>
 8008cca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cce:	e00e      	b.n	8008cee <_Balloc+0x6e>
 8008cd0:	2221      	movs	r2, #33	; 0x21
 8008cd2:	2104      	movs	r1, #4
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 fb57 	bl	8009388 <_calloc_r>
 8008cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cdc:	60f0      	str	r0, [r6, #12]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e4      	bne.n	8008cae <_Balloc+0x2e>
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	6802      	ldr	r2, [r0, #0]
 8008cea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cf4:	e7f7      	b.n	8008ce6 <_Balloc+0x66>
 8008cf6:	bf00      	nop
 8008cf8:	08009dad 	.word	0x08009dad
 8008cfc:	08009e90 	.word	0x08009e90

08008d00 <_Bfree>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d04:	4605      	mov	r5, r0
 8008d06:	460c      	mov	r4, r1
 8008d08:	b976      	cbnz	r6, 8008d28 <_Bfree+0x28>
 8008d0a:	2010      	movs	r0, #16
 8008d0c:	f7ff ffa2 	bl	8008c54 <malloc>
 8008d10:	4602      	mov	r2, r0
 8008d12:	6268      	str	r0, [r5, #36]	; 0x24
 8008d14:	b920      	cbnz	r0, 8008d20 <_Bfree+0x20>
 8008d16:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <_Bfree+0x3c>)
 8008d18:	4809      	ldr	r0, [pc, #36]	; (8008d40 <_Bfree+0x40>)
 8008d1a:	218a      	movs	r1, #138	; 0x8a
 8008d1c:	f000 fdea 	bl	80098f4 <__assert_func>
 8008d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d24:	6006      	str	r6, [r0, #0]
 8008d26:	60c6      	str	r6, [r0, #12]
 8008d28:	b13c      	cbz	r4, 8008d3a <_Bfree+0x3a>
 8008d2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d2c:	6862      	ldr	r2, [r4, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d34:	6021      	str	r1, [r4, #0]
 8008d36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
 8008d3c:	08009dad 	.word	0x08009dad
 8008d40:	08009e90 	.word	0x08009e90

08008d44 <__multadd>:
 8008d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d48:	690d      	ldr	r5, [r1, #16]
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	461e      	mov	r6, r3
 8008d50:	f101 0c14 	add.w	ip, r1, #20
 8008d54:	2000      	movs	r0, #0
 8008d56:	f8dc 3000 	ldr.w	r3, [ip]
 8008d5a:	b299      	uxth	r1, r3
 8008d5c:	fb02 6101 	mla	r1, r2, r1, r6
 8008d60:	0c1e      	lsrs	r6, r3, #16
 8008d62:	0c0b      	lsrs	r3, r1, #16
 8008d64:	fb02 3306 	mla	r3, r2, r6, r3
 8008d68:	b289      	uxth	r1, r1
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d70:	4285      	cmp	r5, r0
 8008d72:	f84c 1b04 	str.w	r1, [ip], #4
 8008d76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d7a:	dcec      	bgt.n	8008d56 <__multadd+0x12>
 8008d7c:	b30e      	cbz	r6, 8008dc2 <__multadd+0x7e>
 8008d7e:	68a3      	ldr	r3, [r4, #8]
 8008d80:	42ab      	cmp	r3, r5
 8008d82:	dc19      	bgt.n	8008db8 <__multadd+0x74>
 8008d84:	6861      	ldr	r1, [r4, #4]
 8008d86:	4638      	mov	r0, r7
 8008d88:	3101      	adds	r1, #1
 8008d8a:	f7ff ff79 	bl	8008c80 <_Balloc>
 8008d8e:	4680      	mov	r8, r0
 8008d90:	b928      	cbnz	r0, 8008d9e <__multadd+0x5a>
 8008d92:	4602      	mov	r2, r0
 8008d94:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <__multadd+0x84>)
 8008d96:	480d      	ldr	r0, [pc, #52]	; (8008dcc <__multadd+0x88>)
 8008d98:	21b5      	movs	r1, #181	; 0xb5
 8008d9a:	f000 fdab 	bl	80098f4 <__assert_func>
 8008d9e:	6922      	ldr	r2, [r4, #16]
 8008da0:	3202      	adds	r2, #2
 8008da2:	f104 010c 	add.w	r1, r4, #12
 8008da6:	0092      	lsls	r2, r2, #2
 8008da8:	300c      	adds	r0, #12
 8008daa:	f7ff ff5b 	bl	8008c64 <memcpy>
 8008dae:	4621      	mov	r1, r4
 8008db0:	4638      	mov	r0, r7
 8008db2:	f7ff ffa5 	bl	8008d00 <_Bfree>
 8008db6:	4644      	mov	r4, r8
 8008db8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	615e      	str	r6, [r3, #20]
 8008dc0:	6125      	str	r5, [r4, #16]
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc8:	08009e1f 	.word	0x08009e1f
 8008dcc:	08009e90 	.word	0x08009e90

08008dd0 <__hi0bits>:
 8008dd0:	0c03      	lsrs	r3, r0, #16
 8008dd2:	041b      	lsls	r3, r3, #16
 8008dd4:	b9d3      	cbnz	r3, 8008e0c <__hi0bits+0x3c>
 8008dd6:	0400      	lsls	r0, r0, #16
 8008dd8:	2310      	movs	r3, #16
 8008dda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008dde:	bf04      	itt	eq
 8008de0:	0200      	lsleq	r0, r0, #8
 8008de2:	3308      	addeq	r3, #8
 8008de4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008de8:	bf04      	itt	eq
 8008dea:	0100      	lsleq	r0, r0, #4
 8008dec:	3304      	addeq	r3, #4
 8008dee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008df2:	bf04      	itt	eq
 8008df4:	0080      	lsleq	r0, r0, #2
 8008df6:	3302      	addeq	r3, #2
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	db05      	blt.n	8008e08 <__hi0bits+0x38>
 8008dfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e00:	f103 0301 	add.w	r3, r3, #1
 8008e04:	bf08      	it	eq
 8008e06:	2320      	moveq	r3, #32
 8008e08:	4618      	mov	r0, r3
 8008e0a:	4770      	bx	lr
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e7e4      	b.n	8008dda <__hi0bits+0xa>

08008e10 <__lo0bits>:
 8008e10:	6803      	ldr	r3, [r0, #0]
 8008e12:	f013 0207 	ands.w	r2, r3, #7
 8008e16:	4601      	mov	r1, r0
 8008e18:	d00b      	beq.n	8008e32 <__lo0bits+0x22>
 8008e1a:	07da      	lsls	r2, r3, #31
 8008e1c:	d423      	bmi.n	8008e66 <__lo0bits+0x56>
 8008e1e:	0798      	lsls	r0, r3, #30
 8008e20:	bf49      	itett	mi
 8008e22:	085b      	lsrmi	r3, r3, #1
 8008e24:	089b      	lsrpl	r3, r3, #2
 8008e26:	2001      	movmi	r0, #1
 8008e28:	600b      	strmi	r3, [r1, #0]
 8008e2a:	bf5c      	itt	pl
 8008e2c:	600b      	strpl	r3, [r1, #0]
 8008e2e:	2002      	movpl	r0, #2
 8008e30:	4770      	bx	lr
 8008e32:	b298      	uxth	r0, r3
 8008e34:	b9a8      	cbnz	r0, 8008e62 <__lo0bits+0x52>
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	2010      	movs	r0, #16
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	b90a      	cbnz	r2, 8008e42 <__lo0bits+0x32>
 8008e3e:	3008      	adds	r0, #8
 8008e40:	0a1b      	lsrs	r3, r3, #8
 8008e42:	071a      	lsls	r2, r3, #28
 8008e44:	bf04      	itt	eq
 8008e46:	091b      	lsreq	r3, r3, #4
 8008e48:	3004      	addeq	r0, #4
 8008e4a:	079a      	lsls	r2, r3, #30
 8008e4c:	bf04      	itt	eq
 8008e4e:	089b      	lsreq	r3, r3, #2
 8008e50:	3002      	addeq	r0, #2
 8008e52:	07da      	lsls	r2, r3, #31
 8008e54:	d403      	bmi.n	8008e5e <__lo0bits+0x4e>
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	f100 0001 	add.w	r0, r0, #1
 8008e5c:	d005      	beq.n	8008e6a <__lo0bits+0x5a>
 8008e5e:	600b      	str	r3, [r1, #0]
 8008e60:	4770      	bx	lr
 8008e62:	4610      	mov	r0, r2
 8008e64:	e7e9      	b.n	8008e3a <__lo0bits+0x2a>
 8008e66:	2000      	movs	r0, #0
 8008e68:	4770      	bx	lr
 8008e6a:	2020      	movs	r0, #32
 8008e6c:	4770      	bx	lr
	...

08008e70 <__i2b>:
 8008e70:	b510      	push	{r4, lr}
 8008e72:	460c      	mov	r4, r1
 8008e74:	2101      	movs	r1, #1
 8008e76:	f7ff ff03 	bl	8008c80 <_Balloc>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	b928      	cbnz	r0, 8008e8a <__i2b+0x1a>
 8008e7e:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <__i2b+0x24>)
 8008e80:	4805      	ldr	r0, [pc, #20]	; (8008e98 <__i2b+0x28>)
 8008e82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e86:	f000 fd35 	bl	80098f4 <__assert_func>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	6144      	str	r4, [r0, #20]
 8008e8e:	6103      	str	r3, [r0, #16]
 8008e90:	bd10      	pop	{r4, pc}
 8008e92:	bf00      	nop
 8008e94:	08009e1f 	.word	0x08009e1f
 8008e98:	08009e90 	.word	0x08009e90

08008e9c <__multiply>:
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	4691      	mov	r9, r2
 8008ea2:	690a      	ldr	r2, [r1, #16]
 8008ea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	bfb8      	it	lt
 8008eac:	460b      	movlt	r3, r1
 8008eae:	460c      	mov	r4, r1
 8008eb0:	bfbc      	itt	lt
 8008eb2:	464c      	movlt	r4, r9
 8008eb4:	4699      	movlt	r9, r3
 8008eb6:	6927      	ldr	r7, [r4, #16]
 8008eb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ebc:	68a3      	ldr	r3, [r4, #8]
 8008ebe:	6861      	ldr	r1, [r4, #4]
 8008ec0:	eb07 060a 	add.w	r6, r7, sl
 8008ec4:	42b3      	cmp	r3, r6
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	bfb8      	it	lt
 8008eca:	3101      	addlt	r1, #1
 8008ecc:	f7ff fed8 	bl	8008c80 <_Balloc>
 8008ed0:	b930      	cbnz	r0, 8008ee0 <__multiply+0x44>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	4b44      	ldr	r3, [pc, #272]	; (8008fe8 <__multiply+0x14c>)
 8008ed6:	4845      	ldr	r0, [pc, #276]	; (8008fec <__multiply+0x150>)
 8008ed8:	f240 115d 	movw	r1, #349	; 0x15d
 8008edc:	f000 fd0a 	bl	80098f4 <__assert_func>
 8008ee0:	f100 0514 	add.w	r5, r0, #20
 8008ee4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ee8:	462b      	mov	r3, r5
 8008eea:	2200      	movs	r2, #0
 8008eec:	4543      	cmp	r3, r8
 8008eee:	d321      	bcc.n	8008f34 <__multiply+0x98>
 8008ef0:	f104 0314 	add.w	r3, r4, #20
 8008ef4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ef8:	f109 0314 	add.w	r3, r9, #20
 8008efc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f00:	9202      	str	r2, [sp, #8]
 8008f02:	1b3a      	subs	r2, r7, r4
 8008f04:	3a15      	subs	r2, #21
 8008f06:	f022 0203 	bic.w	r2, r2, #3
 8008f0a:	3204      	adds	r2, #4
 8008f0c:	f104 0115 	add.w	r1, r4, #21
 8008f10:	428f      	cmp	r7, r1
 8008f12:	bf38      	it	cc
 8008f14:	2204      	movcc	r2, #4
 8008f16:	9201      	str	r2, [sp, #4]
 8008f18:	9a02      	ldr	r2, [sp, #8]
 8008f1a:	9303      	str	r3, [sp, #12]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d80c      	bhi.n	8008f3a <__multiply+0x9e>
 8008f20:	2e00      	cmp	r6, #0
 8008f22:	dd03      	ble.n	8008f2c <__multiply+0x90>
 8008f24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d05a      	beq.n	8008fe2 <__multiply+0x146>
 8008f2c:	6106      	str	r6, [r0, #16]
 8008f2e:	b005      	add	sp, #20
 8008f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f34:	f843 2b04 	str.w	r2, [r3], #4
 8008f38:	e7d8      	b.n	8008eec <__multiply+0x50>
 8008f3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f3e:	f1ba 0f00 	cmp.w	sl, #0
 8008f42:	d024      	beq.n	8008f8e <__multiply+0xf2>
 8008f44:	f104 0e14 	add.w	lr, r4, #20
 8008f48:	46a9      	mov	r9, r5
 8008f4a:	f04f 0c00 	mov.w	ip, #0
 8008f4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f52:	f8d9 1000 	ldr.w	r1, [r9]
 8008f56:	fa1f fb82 	uxth.w	fp, r2
 8008f5a:	b289      	uxth	r1, r1
 8008f5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f64:	f8d9 2000 	ldr.w	r2, [r9]
 8008f68:	4461      	add	r1, ip
 8008f6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f76:	b289      	uxth	r1, r1
 8008f78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f7c:	4577      	cmp	r7, lr
 8008f7e:	f849 1b04 	str.w	r1, [r9], #4
 8008f82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f86:	d8e2      	bhi.n	8008f4e <__multiply+0xb2>
 8008f88:	9a01      	ldr	r2, [sp, #4]
 8008f8a:	f845 c002 	str.w	ip, [r5, r2]
 8008f8e:	9a03      	ldr	r2, [sp, #12]
 8008f90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f94:	3304      	adds	r3, #4
 8008f96:	f1b9 0f00 	cmp.w	r9, #0
 8008f9a:	d020      	beq.n	8008fde <__multiply+0x142>
 8008f9c:	6829      	ldr	r1, [r5, #0]
 8008f9e:	f104 0c14 	add.w	ip, r4, #20
 8008fa2:	46ae      	mov	lr, r5
 8008fa4:	f04f 0a00 	mov.w	sl, #0
 8008fa8:	f8bc b000 	ldrh.w	fp, [ip]
 8008fac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008fb0:	fb09 220b 	mla	r2, r9, fp, r2
 8008fb4:	4492      	add	sl, r2
 8008fb6:	b289      	uxth	r1, r1
 8008fb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008fbc:	f84e 1b04 	str.w	r1, [lr], #4
 8008fc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008fc4:	f8be 1000 	ldrh.w	r1, [lr]
 8008fc8:	0c12      	lsrs	r2, r2, #16
 8008fca:	fb09 1102 	mla	r1, r9, r2, r1
 8008fce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008fd2:	4567      	cmp	r7, ip
 8008fd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fd8:	d8e6      	bhi.n	8008fa8 <__multiply+0x10c>
 8008fda:	9a01      	ldr	r2, [sp, #4]
 8008fdc:	50a9      	str	r1, [r5, r2]
 8008fde:	3504      	adds	r5, #4
 8008fe0:	e79a      	b.n	8008f18 <__multiply+0x7c>
 8008fe2:	3e01      	subs	r6, #1
 8008fe4:	e79c      	b.n	8008f20 <__multiply+0x84>
 8008fe6:	bf00      	nop
 8008fe8:	08009e1f 	.word	0x08009e1f
 8008fec:	08009e90 	.word	0x08009e90

08008ff0 <__pow5mult>:
 8008ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff4:	4615      	mov	r5, r2
 8008ff6:	f012 0203 	ands.w	r2, r2, #3
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460f      	mov	r7, r1
 8008ffe:	d007      	beq.n	8009010 <__pow5mult+0x20>
 8009000:	4c25      	ldr	r4, [pc, #148]	; (8009098 <__pow5mult+0xa8>)
 8009002:	3a01      	subs	r2, #1
 8009004:	2300      	movs	r3, #0
 8009006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800900a:	f7ff fe9b 	bl	8008d44 <__multadd>
 800900e:	4607      	mov	r7, r0
 8009010:	10ad      	asrs	r5, r5, #2
 8009012:	d03d      	beq.n	8009090 <__pow5mult+0xa0>
 8009014:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009016:	b97c      	cbnz	r4, 8009038 <__pow5mult+0x48>
 8009018:	2010      	movs	r0, #16
 800901a:	f7ff fe1b 	bl	8008c54 <malloc>
 800901e:	4602      	mov	r2, r0
 8009020:	6270      	str	r0, [r6, #36]	; 0x24
 8009022:	b928      	cbnz	r0, 8009030 <__pow5mult+0x40>
 8009024:	4b1d      	ldr	r3, [pc, #116]	; (800909c <__pow5mult+0xac>)
 8009026:	481e      	ldr	r0, [pc, #120]	; (80090a0 <__pow5mult+0xb0>)
 8009028:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800902c:	f000 fc62 	bl	80098f4 <__assert_func>
 8009030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009034:	6004      	str	r4, [r0, #0]
 8009036:	60c4      	str	r4, [r0, #12]
 8009038:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800903c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009040:	b94c      	cbnz	r4, 8009056 <__pow5mult+0x66>
 8009042:	f240 2171 	movw	r1, #625	; 0x271
 8009046:	4630      	mov	r0, r6
 8009048:	f7ff ff12 	bl	8008e70 <__i2b>
 800904c:	2300      	movs	r3, #0
 800904e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009052:	4604      	mov	r4, r0
 8009054:	6003      	str	r3, [r0, #0]
 8009056:	f04f 0900 	mov.w	r9, #0
 800905a:	07eb      	lsls	r3, r5, #31
 800905c:	d50a      	bpl.n	8009074 <__pow5mult+0x84>
 800905e:	4639      	mov	r1, r7
 8009060:	4622      	mov	r2, r4
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff ff1a 	bl	8008e9c <__multiply>
 8009068:	4639      	mov	r1, r7
 800906a:	4680      	mov	r8, r0
 800906c:	4630      	mov	r0, r6
 800906e:	f7ff fe47 	bl	8008d00 <_Bfree>
 8009072:	4647      	mov	r7, r8
 8009074:	106d      	asrs	r5, r5, #1
 8009076:	d00b      	beq.n	8009090 <__pow5mult+0xa0>
 8009078:	6820      	ldr	r0, [r4, #0]
 800907a:	b938      	cbnz	r0, 800908c <__pow5mult+0x9c>
 800907c:	4622      	mov	r2, r4
 800907e:	4621      	mov	r1, r4
 8009080:	4630      	mov	r0, r6
 8009082:	f7ff ff0b 	bl	8008e9c <__multiply>
 8009086:	6020      	str	r0, [r4, #0]
 8009088:	f8c0 9000 	str.w	r9, [r0]
 800908c:	4604      	mov	r4, r0
 800908e:	e7e4      	b.n	800905a <__pow5mult+0x6a>
 8009090:	4638      	mov	r0, r7
 8009092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009096:	bf00      	nop
 8009098:	08009fe0 	.word	0x08009fe0
 800909c:	08009dad 	.word	0x08009dad
 80090a0:	08009e90 	.word	0x08009e90

080090a4 <__lshift>:
 80090a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a8:	460c      	mov	r4, r1
 80090aa:	6849      	ldr	r1, [r1, #4]
 80090ac:	6923      	ldr	r3, [r4, #16]
 80090ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090b2:	68a3      	ldr	r3, [r4, #8]
 80090b4:	4607      	mov	r7, r0
 80090b6:	4691      	mov	r9, r2
 80090b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090bc:	f108 0601 	add.w	r6, r8, #1
 80090c0:	42b3      	cmp	r3, r6
 80090c2:	db0b      	blt.n	80090dc <__lshift+0x38>
 80090c4:	4638      	mov	r0, r7
 80090c6:	f7ff fddb 	bl	8008c80 <_Balloc>
 80090ca:	4605      	mov	r5, r0
 80090cc:	b948      	cbnz	r0, 80090e2 <__lshift+0x3e>
 80090ce:	4602      	mov	r2, r0
 80090d0:	4b2a      	ldr	r3, [pc, #168]	; (800917c <__lshift+0xd8>)
 80090d2:	482b      	ldr	r0, [pc, #172]	; (8009180 <__lshift+0xdc>)
 80090d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090d8:	f000 fc0c 	bl	80098f4 <__assert_func>
 80090dc:	3101      	adds	r1, #1
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	e7ee      	b.n	80090c0 <__lshift+0x1c>
 80090e2:	2300      	movs	r3, #0
 80090e4:	f100 0114 	add.w	r1, r0, #20
 80090e8:	f100 0210 	add.w	r2, r0, #16
 80090ec:	4618      	mov	r0, r3
 80090ee:	4553      	cmp	r3, sl
 80090f0:	db37      	blt.n	8009162 <__lshift+0xbe>
 80090f2:	6920      	ldr	r0, [r4, #16]
 80090f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090f8:	f104 0314 	add.w	r3, r4, #20
 80090fc:	f019 091f 	ands.w	r9, r9, #31
 8009100:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009104:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009108:	d02f      	beq.n	800916a <__lshift+0xc6>
 800910a:	f1c9 0e20 	rsb	lr, r9, #32
 800910e:	468a      	mov	sl, r1
 8009110:	f04f 0c00 	mov.w	ip, #0
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	fa02 f209 	lsl.w	r2, r2, r9
 800911a:	ea42 020c 	orr.w	r2, r2, ip
 800911e:	f84a 2b04 	str.w	r2, [sl], #4
 8009122:	f853 2b04 	ldr.w	r2, [r3], #4
 8009126:	4298      	cmp	r0, r3
 8009128:	fa22 fc0e 	lsr.w	ip, r2, lr
 800912c:	d8f2      	bhi.n	8009114 <__lshift+0x70>
 800912e:	1b03      	subs	r3, r0, r4
 8009130:	3b15      	subs	r3, #21
 8009132:	f023 0303 	bic.w	r3, r3, #3
 8009136:	3304      	adds	r3, #4
 8009138:	f104 0215 	add.w	r2, r4, #21
 800913c:	4290      	cmp	r0, r2
 800913e:	bf38      	it	cc
 8009140:	2304      	movcc	r3, #4
 8009142:	f841 c003 	str.w	ip, [r1, r3]
 8009146:	f1bc 0f00 	cmp.w	ip, #0
 800914a:	d001      	beq.n	8009150 <__lshift+0xac>
 800914c:	f108 0602 	add.w	r6, r8, #2
 8009150:	3e01      	subs	r6, #1
 8009152:	4638      	mov	r0, r7
 8009154:	612e      	str	r6, [r5, #16]
 8009156:	4621      	mov	r1, r4
 8009158:	f7ff fdd2 	bl	8008d00 <_Bfree>
 800915c:	4628      	mov	r0, r5
 800915e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009162:	f842 0f04 	str.w	r0, [r2, #4]!
 8009166:	3301      	adds	r3, #1
 8009168:	e7c1      	b.n	80090ee <__lshift+0x4a>
 800916a:	3904      	subs	r1, #4
 800916c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009170:	f841 2f04 	str.w	r2, [r1, #4]!
 8009174:	4298      	cmp	r0, r3
 8009176:	d8f9      	bhi.n	800916c <__lshift+0xc8>
 8009178:	e7ea      	b.n	8009150 <__lshift+0xac>
 800917a:	bf00      	nop
 800917c:	08009e1f 	.word	0x08009e1f
 8009180:	08009e90 	.word	0x08009e90

08009184 <__mcmp>:
 8009184:	b530      	push	{r4, r5, lr}
 8009186:	6902      	ldr	r2, [r0, #16]
 8009188:	690c      	ldr	r4, [r1, #16]
 800918a:	1b12      	subs	r2, r2, r4
 800918c:	d10e      	bne.n	80091ac <__mcmp+0x28>
 800918e:	f100 0314 	add.w	r3, r0, #20
 8009192:	3114      	adds	r1, #20
 8009194:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009198:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800919c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091a4:	42a5      	cmp	r5, r4
 80091a6:	d003      	beq.n	80091b0 <__mcmp+0x2c>
 80091a8:	d305      	bcc.n	80091b6 <__mcmp+0x32>
 80091aa:	2201      	movs	r2, #1
 80091ac:	4610      	mov	r0, r2
 80091ae:	bd30      	pop	{r4, r5, pc}
 80091b0:	4283      	cmp	r3, r0
 80091b2:	d3f3      	bcc.n	800919c <__mcmp+0x18>
 80091b4:	e7fa      	b.n	80091ac <__mcmp+0x28>
 80091b6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ba:	e7f7      	b.n	80091ac <__mcmp+0x28>

080091bc <__mdiff>:
 80091bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	460c      	mov	r4, r1
 80091c2:	4606      	mov	r6, r0
 80091c4:	4611      	mov	r1, r2
 80091c6:	4620      	mov	r0, r4
 80091c8:	4690      	mov	r8, r2
 80091ca:	f7ff ffdb 	bl	8009184 <__mcmp>
 80091ce:	1e05      	subs	r5, r0, #0
 80091d0:	d110      	bne.n	80091f4 <__mdiff+0x38>
 80091d2:	4629      	mov	r1, r5
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7ff fd53 	bl	8008c80 <_Balloc>
 80091da:	b930      	cbnz	r0, 80091ea <__mdiff+0x2e>
 80091dc:	4b3a      	ldr	r3, [pc, #232]	; (80092c8 <__mdiff+0x10c>)
 80091de:	4602      	mov	r2, r0
 80091e0:	f240 2132 	movw	r1, #562	; 0x232
 80091e4:	4839      	ldr	r0, [pc, #228]	; (80092cc <__mdiff+0x110>)
 80091e6:	f000 fb85 	bl	80098f4 <__assert_func>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	bfa4      	itt	ge
 80091f6:	4643      	movge	r3, r8
 80091f8:	46a0      	movge	r8, r4
 80091fa:	4630      	mov	r0, r6
 80091fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009200:	bfa6      	itte	ge
 8009202:	461c      	movge	r4, r3
 8009204:	2500      	movge	r5, #0
 8009206:	2501      	movlt	r5, #1
 8009208:	f7ff fd3a 	bl	8008c80 <_Balloc>
 800920c:	b920      	cbnz	r0, 8009218 <__mdiff+0x5c>
 800920e:	4b2e      	ldr	r3, [pc, #184]	; (80092c8 <__mdiff+0x10c>)
 8009210:	4602      	mov	r2, r0
 8009212:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009216:	e7e5      	b.n	80091e4 <__mdiff+0x28>
 8009218:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800921c:	6926      	ldr	r6, [r4, #16]
 800921e:	60c5      	str	r5, [r0, #12]
 8009220:	f104 0914 	add.w	r9, r4, #20
 8009224:	f108 0514 	add.w	r5, r8, #20
 8009228:	f100 0e14 	add.w	lr, r0, #20
 800922c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009230:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009234:	f108 0210 	add.w	r2, r8, #16
 8009238:	46f2      	mov	sl, lr
 800923a:	2100      	movs	r1, #0
 800923c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009240:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009244:	fa1f f883 	uxth.w	r8, r3
 8009248:	fa11 f18b 	uxtah	r1, r1, fp
 800924c:	0c1b      	lsrs	r3, r3, #16
 800924e:	eba1 0808 	sub.w	r8, r1, r8
 8009252:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009256:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800925a:	fa1f f888 	uxth.w	r8, r8
 800925e:	1419      	asrs	r1, r3, #16
 8009260:	454e      	cmp	r6, r9
 8009262:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009266:	f84a 3b04 	str.w	r3, [sl], #4
 800926a:	d8e7      	bhi.n	800923c <__mdiff+0x80>
 800926c:	1b33      	subs	r3, r6, r4
 800926e:	3b15      	subs	r3, #21
 8009270:	f023 0303 	bic.w	r3, r3, #3
 8009274:	3304      	adds	r3, #4
 8009276:	3415      	adds	r4, #21
 8009278:	42a6      	cmp	r6, r4
 800927a:	bf38      	it	cc
 800927c:	2304      	movcc	r3, #4
 800927e:	441d      	add	r5, r3
 8009280:	4473      	add	r3, lr
 8009282:	469e      	mov	lr, r3
 8009284:	462e      	mov	r6, r5
 8009286:	4566      	cmp	r6, ip
 8009288:	d30e      	bcc.n	80092a8 <__mdiff+0xec>
 800928a:	f10c 0203 	add.w	r2, ip, #3
 800928e:	1b52      	subs	r2, r2, r5
 8009290:	f022 0203 	bic.w	r2, r2, #3
 8009294:	3d03      	subs	r5, #3
 8009296:	45ac      	cmp	ip, r5
 8009298:	bf38      	it	cc
 800929a:	2200      	movcc	r2, #0
 800929c:	441a      	add	r2, r3
 800929e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80092a2:	b17b      	cbz	r3, 80092c4 <__mdiff+0x108>
 80092a4:	6107      	str	r7, [r0, #16]
 80092a6:	e7a3      	b.n	80091f0 <__mdiff+0x34>
 80092a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80092ac:	fa11 f288 	uxtah	r2, r1, r8
 80092b0:	1414      	asrs	r4, r2, #16
 80092b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092b6:	b292      	uxth	r2, r2
 80092b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80092bc:	f84e 2b04 	str.w	r2, [lr], #4
 80092c0:	1421      	asrs	r1, r4, #16
 80092c2:	e7e0      	b.n	8009286 <__mdiff+0xca>
 80092c4:	3f01      	subs	r7, #1
 80092c6:	e7ea      	b.n	800929e <__mdiff+0xe2>
 80092c8:	08009e1f 	.word	0x08009e1f
 80092cc:	08009e90 	.word	0x08009e90

080092d0 <__d2b>:
 80092d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092d4:	4689      	mov	r9, r1
 80092d6:	2101      	movs	r1, #1
 80092d8:	ec57 6b10 	vmov	r6, r7, d0
 80092dc:	4690      	mov	r8, r2
 80092de:	f7ff fccf 	bl	8008c80 <_Balloc>
 80092e2:	4604      	mov	r4, r0
 80092e4:	b930      	cbnz	r0, 80092f4 <__d2b+0x24>
 80092e6:	4602      	mov	r2, r0
 80092e8:	4b25      	ldr	r3, [pc, #148]	; (8009380 <__d2b+0xb0>)
 80092ea:	4826      	ldr	r0, [pc, #152]	; (8009384 <__d2b+0xb4>)
 80092ec:	f240 310a 	movw	r1, #778	; 0x30a
 80092f0:	f000 fb00 	bl	80098f4 <__assert_func>
 80092f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80092f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092fc:	bb35      	cbnz	r5, 800934c <__d2b+0x7c>
 80092fe:	2e00      	cmp	r6, #0
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	d028      	beq.n	8009356 <__d2b+0x86>
 8009304:	4668      	mov	r0, sp
 8009306:	9600      	str	r6, [sp, #0]
 8009308:	f7ff fd82 	bl	8008e10 <__lo0bits>
 800930c:	9900      	ldr	r1, [sp, #0]
 800930e:	b300      	cbz	r0, 8009352 <__d2b+0x82>
 8009310:	9a01      	ldr	r2, [sp, #4]
 8009312:	f1c0 0320 	rsb	r3, r0, #32
 8009316:	fa02 f303 	lsl.w	r3, r2, r3
 800931a:	430b      	orrs	r3, r1
 800931c:	40c2      	lsrs	r2, r0
 800931e:	6163      	str	r3, [r4, #20]
 8009320:	9201      	str	r2, [sp, #4]
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	61a3      	str	r3, [r4, #24]
 8009326:	2b00      	cmp	r3, #0
 8009328:	bf14      	ite	ne
 800932a:	2202      	movne	r2, #2
 800932c:	2201      	moveq	r2, #1
 800932e:	6122      	str	r2, [r4, #16]
 8009330:	b1d5      	cbz	r5, 8009368 <__d2b+0x98>
 8009332:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009336:	4405      	add	r5, r0
 8009338:	f8c9 5000 	str.w	r5, [r9]
 800933c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009340:	f8c8 0000 	str.w	r0, [r8]
 8009344:	4620      	mov	r0, r4
 8009346:	b003      	add	sp, #12
 8009348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800934c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009350:	e7d5      	b.n	80092fe <__d2b+0x2e>
 8009352:	6161      	str	r1, [r4, #20]
 8009354:	e7e5      	b.n	8009322 <__d2b+0x52>
 8009356:	a801      	add	r0, sp, #4
 8009358:	f7ff fd5a 	bl	8008e10 <__lo0bits>
 800935c:	9b01      	ldr	r3, [sp, #4]
 800935e:	6163      	str	r3, [r4, #20]
 8009360:	2201      	movs	r2, #1
 8009362:	6122      	str	r2, [r4, #16]
 8009364:	3020      	adds	r0, #32
 8009366:	e7e3      	b.n	8009330 <__d2b+0x60>
 8009368:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800936c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009370:	f8c9 0000 	str.w	r0, [r9]
 8009374:	6918      	ldr	r0, [r3, #16]
 8009376:	f7ff fd2b 	bl	8008dd0 <__hi0bits>
 800937a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800937e:	e7df      	b.n	8009340 <__d2b+0x70>
 8009380:	08009e1f 	.word	0x08009e1f
 8009384:	08009e90 	.word	0x08009e90

08009388 <_calloc_r>:
 8009388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800938a:	fba1 2402 	umull	r2, r4, r1, r2
 800938e:	b94c      	cbnz	r4, 80093a4 <_calloc_r+0x1c>
 8009390:	4611      	mov	r1, r2
 8009392:	9201      	str	r2, [sp, #4]
 8009394:	f000 f87a 	bl	800948c <_malloc_r>
 8009398:	9a01      	ldr	r2, [sp, #4]
 800939a:	4605      	mov	r5, r0
 800939c:	b930      	cbnz	r0, 80093ac <_calloc_r+0x24>
 800939e:	4628      	mov	r0, r5
 80093a0:	b003      	add	sp, #12
 80093a2:	bd30      	pop	{r4, r5, pc}
 80093a4:	220c      	movs	r2, #12
 80093a6:	6002      	str	r2, [r0, #0]
 80093a8:	2500      	movs	r5, #0
 80093aa:	e7f8      	b.n	800939e <_calloc_r+0x16>
 80093ac:	4621      	mov	r1, r4
 80093ae:	f7fd fe09 	bl	8006fc4 <memset>
 80093b2:	e7f4      	b.n	800939e <_calloc_r+0x16>

080093b4 <_free_r>:
 80093b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093b6:	2900      	cmp	r1, #0
 80093b8:	d044      	beq.n	8009444 <_free_r+0x90>
 80093ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093be:	9001      	str	r0, [sp, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f1a1 0404 	sub.w	r4, r1, #4
 80093c6:	bfb8      	it	lt
 80093c8:	18e4      	addlt	r4, r4, r3
 80093ca:	f000 fb19 	bl	8009a00 <__malloc_lock>
 80093ce:	4a1e      	ldr	r2, [pc, #120]	; (8009448 <_free_r+0x94>)
 80093d0:	9801      	ldr	r0, [sp, #4]
 80093d2:	6813      	ldr	r3, [r2, #0]
 80093d4:	b933      	cbnz	r3, 80093e4 <_free_r+0x30>
 80093d6:	6063      	str	r3, [r4, #4]
 80093d8:	6014      	str	r4, [r2, #0]
 80093da:	b003      	add	sp, #12
 80093dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093e0:	f000 bb14 	b.w	8009a0c <__malloc_unlock>
 80093e4:	42a3      	cmp	r3, r4
 80093e6:	d908      	bls.n	80093fa <_free_r+0x46>
 80093e8:	6825      	ldr	r5, [r4, #0]
 80093ea:	1961      	adds	r1, r4, r5
 80093ec:	428b      	cmp	r3, r1
 80093ee:	bf01      	itttt	eq
 80093f0:	6819      	ldreq	r1, [r3, #0]
 80093f2:	685b      	ldreq	r3, [r3, #4]
 80093f4:	1949      	addeq	r1, r1, r5
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	e7ed      	b.n	80093d6 <_free_r+0x22>
 80093fa:	461a      	mov	r2, r3
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	b10b      	cbz	r3, 8009404 <_free_r+0x50>
 8009400:	42a3      	cmp	r3, r4
 8009402:	d9fa      	bls.n	80093fa <_free_r+0x46>
 8009404:	6811      	ldr	r1, [r2, #0]
 8009406:	1855      	adds	r5, r2, r1
 8009408:	42a5      	cmp	r5, r4
 800940a:	d10b      	bne.n	8009424 <_free_r+0x70>
 800940c:	6824      	ldr	r4, [r4, #0]
 800940e:	4421      	add	r1, r4
 8009410:	1854      	adds	r4, r2, r1
 8009412:	42a3      	cmp	r3, r4
 8009414:	6011      	str	r1, [r2, #0]
 8009416:	d1e0      	bne.n	80093da <_free_r+0x26>
 8009418:	681c      	ldr	r4, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	6053      	str	r3, [r2, #4]
 800941e:	4421      	add	r1, r4
 8009420:	6011      	str	r1, [r2, #0]
 8009422:	e7da      	b.n	80093da <_free_r+0x26>
 8009424:	d902      	bls.n	800942c <_free_r+0x78>
 8009426:	230c      	movs	r3, #12
 8009428:	6003      	str	r3, [r0, #0]
 800942a:	e7d6      	b.n	80093da <_free_r+0x26>
 800942c:	6825      	ldr	r5, [r4, #0]
 800942e:	1961      	adds	r1, r4, r5
 8009430:	428b      	cmp	r3, r1
 8009432:	bf04      	itt	eq
 8009434:	6819      	ldreq	r1, [r3, #0]
 8009436:	685b      	ldreq	r3, [r3, #4]
 8009438:	6063      	str	r3, [r4, #4]
 800943a:	bf04      	itt	eq
 800943c:	1949      	addeq	r1, r1, r5
 800943e:	6021      	streq	r1, [r4, #0]
 8009440:	6054      	str	r4, [r2, #4]
 8009442:	e7ca      	b.n	80093da <_free_r+0x26>
 8009444:	b003      	add	sp, #12
 8009446:	bd30      	pop	{r4, r5, pc}
 8009448:	2000087c 	.word	0x2000087c

0800944c <sbrk_aligned>:
 800944c:	b570      	push	{r4, r5, r6, lr}
 800944e:	4e0e      	ldr	r6, [pc, #56]	; (8009488 <sbrk_aligned+0x3c>)
 8009450:	460c      	mov	r4, r1
 8009452:	6831      	ldr	r1, [r6, #0]
 8009454:	4605      	mov	r5, r0
 8009456:	b911      	cbnz	r1, 800945e <sbrk_aligned+0x12>
 8009458:	f000 f9e6 	bl	8009828 <_sbrk_r>
 800945c:	6030      	str	r0, [r6, #0]
 800945e:	4621      	mov	r1, r4
 8009460:	4628      	mov	r0, r5
 8009462:	f000 f9e1 	bl	8009828 <_sbrk_r>
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	d00a      	beq.n	8009480 <sbrk_aligned+0x34>
 800946a:	1cc4      	adds	r4, r0, #3
 800946c:	f024 0403 	bic.w	r4, r4, #3
 8009470:	42a0      	cmp	r0, r4
 8009472:	d007      	beq.n	8009484 <sbrk_aligned+0x38>
 8009474:	1a21      	subs	r1, r4, r0
 8009476:	4628      	mov	r0, r5
 8009478:	f000 f9d6 	bl	8009828 <_sbrk_r>
 800947c:	3001      	adds	r0, #1
 800947e:	d101      	bne.n	8009484 <sbrk_aligned+0x38>
 8009480:	f04f 34ff 	mov.w	r4, #4294967295
 8009484:	4620      	mov	r0, r4
 8009486:	bd70      	pop	{r4, r5, r6, pc}
 8009488:	20000880 	.word	0x20000880

0800948c <_malloc_r>:
 800948c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009490:	1ccd      	adds	r5, r1, #3
 8009492:	f025 0503 	bic.w	r5, r5, #3
 8009496:	3508      	adds	r5, #8
 8009498:	2d0c      	cmp	r5, #12
 800949a:	bf38      	it	cc
 800949c:	250c      	movcc	r5, #12
 800949e:	2d00      	cmp	r5, #0
 80094a0:	4607      	mov	r7, r0
 80094a2:	db01      	blt.n	80094a8 <_malloc_r+0x1c>
 80094a4:	42a9      	cmp	r1, r5
 80094a6:	d905      	bls.n	80094b4 <_malloc_r+0x28>
 80094a8:	230c      	movs	r3, #12
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	2600      	movs	r6, #0
 80094ae:	4630      	mov	r0, r6
 80094b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b4:	4e2e      	ldr	r6, [pc, #184]	; (8009570 <_malloc_r+0xe4>)
 80094b6:	f000 faa3 	bl	8009a00 <__malloc_lock>
 80094ba:	6833      	ldr	r3, [r6, #0]
 80094bc:	461c      	mov	r4, r3
 80094be:	bb34      	cbnz	r4, 800950e <_malloc_r+0x82>
 80094c0:	4629      	mov	r1, r5
 80094c2:	4638      	mov	r0, r7
 80094c4:	f7ff ffc2 	bl	800944c <sbrk_aligned>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	4604      	mov	r4, r0
 80094cc:	d14d      	bne.n	800956a <_malloc_r+0xde>
 80094ce:	6834      	ldr	r4, [r6, #0]
 80094d0:	4626      	mov	r6, r4
 80094d2:	2e00      	cmp	r6, #0
 80094d4:	d140      	bne.n	8009558 <_malloc_r+0xcc>
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	4631      	mov	r1, r6
 80094da:	4638      	mov	r0, r7
 80094dc:	eb04 0803 	add.w	r8, r4, r3
 80094e0:	f000 f9a2 	bl	8009828 <_sbrk_r>
 80094e4:	4580      	cmp	r8, r0
 80094e6:	d13a      	bne.n	800955e <_malloc_r+0xd2>
 80094e8:	6821      	ldr	r1, [r4, #0]
 80094ea:	3503      	adds	r5, #3
 80094ec:	1a6d      	subs	r5, r5, r1
 80094ee:	f025 0503 	bic.w	r5, r5, #3
 80094f2:	3508      	adds	r5, #8
 80094f4:	2d0c      	cmp	r5, #12
 80094f6:	bf38      	it	cc
 80094f8:	250c      	movcc	r5, #12
 80094fa:	4629      	mov	r1, r5
 80094fc:	4638      	mov	r0, r7
 80094fe:	f7ff ffa5 	bl	800944c <sbrk_aligned>
 8009502:	3001      	adds	r0, #1
 8009504:	d02b      	beq.n	800955e <_malloc_r+0xd2>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	442b      	add	r3, r5
 800950a:	6023      	str	r3, [r4, #0]
 800950c:	e00e      	b.n	800952c <_malloc_r+0xa0>
 800950e:	6822      	ldr	r2, [r4, #0]
 8009510:	1b52      	subs	r2, r2, r5
 8009512:	d41e      	bmi.n	8009552 <_malloc_r+0xc6>
 8009514:	2a0b      	cmp	r2, #11
 8009516:	d916      	bls.n	8009546 <_malloc_r+0xba>
 8009518:	1961      	adds	r1, r4, r5
 800951a:	42a3      	cmp	r3, r4
 800951c:	6025      	str	r5, [r4, #0]
 800951e:	bf18      	it	ne
 8009520:	6059      	strne	r1, [r3, #4]
 8009522:	6863      	ldr	r3, [r4, #4]
 8009524:	bf08      	it	eq
 8009526:	6031      	streq	r1, [r6, #0]
 8009528:	5162      	str	r2, [r4, r5]
 800952a:	604b      	str	r3, [r1, #4]
 800952c:	4638      	mov	r0, r7
 800952e:	f104 060b 	add.w	r6, r4, #11
 8009532:	f000 fa6b 	bl	8009a0c <__malloc_unlock>
 8009536:	f026 0607 	bic.w	r6, r6, #7
 800953a:	1d23      	adds	r3, r4, #4
 800953c:	1af2      	subs	r2, r6, r3
 800953e:	d0b6      	beq.n	80094ae <_malloc_r+0x22>
 8009540:	1b9b      	subs	r3, r3, r6
 8009542:	50a3      	str	r3, [r4, r2]
 8009544:	e7b3      	b.n	80094ae <_malloc_r+0x22>
 8009546:	6862      	ldr	r2, [r4, #4]
 8009548:	42a3      	cmp	r3, r4
 800954a:	bf0c      	ite	eq
 800954c:	6032      	streq	r2, [r6, #0]
 800954e:	605a      	strne	r2, [r3, #4]
 8009550:	e7ec      	b.n	800952c <_malloc_r+0xa0>
 8009552:	4623      	mov	r3, r4
 8009554:	6864      	ldr	r4, [r4, #4]
 8009556:	e7b2      	b.n	80094be <_malloc_r+0x32>
 8009558:	4634      	mov	r4, r6
 800955a:	6876      	ldr	r6, [r6, #4]
 800955c:	e7b9      	b.n	80094d2 <_malloc_r+0x46>
 800955e:	230c      	movs	r3, #12
 8009560:	603b      	str	r3, [r7, #0]
 8009562:	4638      	mov	r0, r7
 8009564:	f000 fa52 	bl	8009a0c <__malloc_unlock>
 8009568:	e7a1      	b.n	80094ae <_malloc_r+0x22>
 800956a:	6025      	str	r5, [r4, #0]
 800956c:	e7de      	b.n	800952c <_malloc_r+0xa0>
 800956e:	bf00      	nop
 8009570:	2000087c 	.word	0x2000087c

08009574 <__sfputc_r>:
 8009574:	6893      	ldr	r3, [r2, #8]
 8009576:	3b01      	subs	r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	b410      	push	{r4}
 800957c:	6093      	str	r3, [r2, #8]
 800957e:	da08      	bge.n	8009592 <__sfputc_r+0x1e>
 8009580:	6994      	ldr	r4, [r2, #24]
 8009582:	42a3      	cmp	r3, r4
 8009584:	db01      	blt.n	800958a <__sfputc_r+0x16>
 8009586:	290a      	cmp	r1, #10
 8009588:	d103      	bne.n	8009592 <__sfputc_r+0x1e>
 800958a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800958e:	f7fe ba01 	b.w	8007994 <__swbuf_r>
 8009592:	6813      	ldr	r3, [r2, #0]
 8009594:	1c58      	adds	r0, r3, #1
 8009596:	6010      	str	r0, [r2, #0]
 8009598:	7019      	strb	r1, [r3, #0]
 800959a:	4608      	mov	r0, r1
 800959c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <__sfputs_r>:
 80095a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a4:	4606      	mov	r6, r0
 80095a6:	460f      	mov	r7, r1
 80095a8:	4614      	mov	r4, r2
 80095aa:	18d5      	adds	r5, r2, r3
 80095ac:	42ac      	cmp	r4, r5
 80095ae:	d101      	bne.n	80095b4 <__sfputs_r+0x12>
 80095b0:	2000      	movs	r0, #0
 80095b2:	e007      	b.n	80095c4 <__sfputs_r+0x22>
 80095b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b8:	463a      	mov	r2, r7
 80095ba:	4630      	mov	r0, r6
 80095bc:	f7ff ffda 	bl	8009574 <__sfputc_r>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d1f3      	bne.n	80095ac <__sfputs_r+0xa>
 80095c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095c8 <_vfiprintf_r>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	460d      	mov	r5, r1
 80095ce:	b09d      	sub	sp, #116	; 0x74
 80095d0:	4614      	mov	r4, r2
 80095d2:	4698      	mov	r8, r3
 80095d4:	4606      	mov	r6, r0
 80095d6:	b118      	cbz	r0, 80095e0 <_vfiprintf_r+0x18>
 80095d8:	6983      	ldr	r3, [r0, #24]
 80095da:	b90b      	cbnz	r3, 80095e0 <_vfiprintf_r+0x18>
 80095dc:	f7ff fa30 	bl	8008a40 <__sinit>
 80095e0:	4b89      	ldr	r3, [pc, #548]	; (8009808 <_vfiprintf_r+0x240>)
 80095e2:	429d      	cmp	r5, r3
 80095e4:	d11b      	bne.n	800961e <_vfiprintf_r+0x56>
 80095e6:	6875      	ldr	r5, [r6, #4]
 80095e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ea:	07d9      	lsls	r1, r3, #31
 80095ec:	d405      	bmi.n	80095fa <_vfiprintf_r+0x32>
 80095ee:	89ab      	ldrh	r3, [r5, #12]
 80095f0:	059a      	lsls	r2, r3, #22
 80095f2:	d402      	bmi.n	80095fa <_vfiprintf_r+0x32>
 80095f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095f6:	f7ff fac6 	bl	8008b86 <__retarget_lock_acquire_recursive>
 80095fa:	89ab      	ldrh	r3, [r5, #12]
 80095fc:	071b      	lsls	r3, r3, #28
 80095fe:	d501      	bpl.n	8009604 <_vfiprintf_r+0x3c>
 8009600:	692b      	ldr	r3, [r5, #16]
 8009602:	b9eb      	cbnz	r3, 8009640 <_vfiprintf_r+0x78>
 8009604:	4629      	mov	r1, r5
 8009606:	4630      	mov	r0, r6
 8009608:	f7fe fa16 	bl	8007a38 <__swsetup_r>
 800960c:	b1c0      	cbz	r0, 8009640 <_vfiprintf_r+0x78>
 800960e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009610:	07dc      	lsls	r4, r3, #31
 8009612:	d50e      	bpl.n	8009632 <_vfiprintf_r+0x6a>
 8009614:	f04f 30ff 	mov.w	r0, #4294967295
 8009618:	b01d      	add	sp, #116	; 0x74
 800961a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961e:	4b7b      	ldr	r3, [pc, #492]	; (800980c <_vfiprintf_r+0x244>)
 8009620:	429d      	cmp	r5, r3
 8009622:	d101      	bne.n	8009628 <_vfiprintf_r+0x60>
 8009624:	68b5      	ldr	r5, [r6, #8]
 8009626:	e7df      	b.n	80095e8 <_vfiprintf_r+0x20>
 8009628:	4b79      	ldr	r3, [pc, #484]	; (8009810 <_vfiprintf_r+0x248>)
 800962a:	429d      	cmp	r5, r3
 800962c:	bf08      	it	eq
 800962e:	68f5      	ldreq	r5, [r6, #12]
 8009630:	e7da      	b.n	80095e8 <_vfiprintf_r+0x20>
 8009632:	89ab      	ldrh	r3, [r5, #12]
 8009634:	0598      	lsls	r0, r3, #22
 8009636:	d4ed      	bmi.n	8009614 <_vfiprintf_r+0x4c>
 8009638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800963a:	f7ff faa5 	bl	8008b88 <__retarget_lock_release_recursive>
 800963e:	e7e9      	b.n	8009614 <_vfiprintf_r+0x4c>
 8009640:	2300      	movs	r3, #0
 8009642:	9309      	str	r3, [sp, #36]	; 0x24
 8009644:	2320      	movs	r3, #32
 8009646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800964a:	f8cd 800c 	str.w	r8, [sp, #12]
 800964e:	2330      	movs	r3, #48	; 0x30
 8009650:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009814 <_vfiprintf_r+0x24c>
 8009654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009658:	f04f 0901 	mov.w	r9, #1
 800965c:	4623      	mov	r3, r4
 800965e:	469a      	mov	sl, r3
 8009660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009664:	b10a      	cbz	r2, 800966a <_vfiprintf_r+0xa2>
 8009666:	2a25      	cmp	r2, #37	; 0x25
 8009668:	d1f9      	bne.n	800965e <_vfiprintf_r+0x96>
 800966a:	ebba 0b04 	subs.w	fp, sl, r4
 800966e:	d00b      	beq.n	8009688 <_vfiprintf_r+0xc0>
 8009670:	465b      	mov	r3, fp
 8009672:	4622      	mov	r2, r4
 8009674:	4629      	mov	r1, r5
 8009676:	4630      	mov	r0, r6
 8009678:	f7ff ff93 	bl	80095a2 <__sfputs_r>
 800967c:	3001      	adds	r0, #1
 800967e:	f000 80aa 	beq.w	80097d6 <_vfiprintf_r+0x20e>
 8009682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009684:	445a      	add	r2, fp
 8009686:	9209      	str	r2, [sp, #36]	; 0x24
 8009688:	f89a 3000 	ldrb.w	r3, [sl]
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 80a2 	beq.w	80097d6 <_vfiprintf_r+0x20e>
 8009692:	2300      	movs	r3, #0
 8009694:	f04f 32ff 	mov.w	r2, #4294967295
 8009698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800969c:	f10a 0a01 	add.w	sl, sl, #1
 80096a0:	9304      	str	r3, [sp, #16]
 80096a2:	9307      	str	r3, [sp, #28]
 80096a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096a8:	931a      	str	r3, [sp, #104]	; 0x68
 80096aa:	4654      	mov	r4, sl
 80096ac:	2205      	movs	r2, #5
 80096ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b2:	4858      	ldr	r0, [pc, #352]	; (8009814 <_vfiprintf_r+0x24c>)
 80096b4:	f7f6 fdbc 	bl	8000230 <memchr>
 80096b8:	9a04      	ldr	r2, [sp, #16]
 80096ba:	b9d8      	cbnz	r0, 80096f4 <_vfiprintf_r+0x12c>
 80096bc:	06d1      	lsls	r1, r2, #27
 80096be:	bf44      	itt	mi
 80096c0:	2320      	movmi	r3, #32
 80096c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c6:	0713      	lsls	r3, r2, #28
 80096c8:	bf44      	itt	mi
 80096ca:	232b      	movmi	r3, #43	; 0x2b
 80096cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096d0:	f89a 3000 	ldrb.w	r3, [sl]
 80096d4:	2b2a      	cmp	r3, #42	; 0x2a
 80096d6:	d015      	beq.n	8009704 <_vfiprintf_r+0x13c>
 80096d8:	9a07      	ldr	r2, [sp, #28]
 80096da:	4654      	mov	r4, sl
 80096dc:	2000      	movs	r0, #0
 80096de:	f04f 0c0a 	mov.w	ip, #10
 80096e2:	4621      	mov	r1, r4
 80096e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e8:	3b30      	subs	r3, #48	; 0x30
 80096ea:	2b09      	cmp	r3, #9
 80096ec:	d94e      	bls.n	800978c <_vfiprintf_r+0x1c4>
 80096ee:	b1b0      	cbz	r0, 800971e <_vfiprintf_r+0x156>
 80096f0:	9207      	str	r2, [sp, #28]
 80096f2:	e014      	b.n	800971e <_vfiprintf_r+0x156>
 80096f4:	eba0 0308 	sub.w	r3, r0, r8
 80096f8:	fa09 f303 	lsl.w	r3, r9, r3
 80096fc:	4313      	orrs	r3, r2
 80096fe:	9304      	str	r3, [sp, #16]
 8009700:	46a2      	mov	sl, r4
 8009702:	e7d2      	b.n	80096aa <_vfiprintf_r+0xe2>
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	1d19      	adds	r1, r3, #4
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	9103      	str	r1, [sp, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	bfbb      	ittet	lt
 8009710:	425b      	neglt	r3, r3
 8009712:	f042 0202 	orrlt.w	r2, r2, #2
 8009716:	9307      	strge	r3, [sp, #28]
 8009718:	9307      	strlt	r3, [sp, #28]
 800971a:	bfb8      	it	lt
 800971c:	9204      	strlt	r2, [sp, #16]
 800971e:	7823      	ldrb	r3, [r4, #0]
 8009720:	2b2e      	cmp	r3, #46	; 0x2e
 8009722:	d10c      	bne.n	800973e <_vfiprintf_r+0x176>
 8009724:	7863      	ldrb	r3, [r4, #1]
 8009726:	2b2a      	cmp	r3, #42	; 0x2a
 8009728:	d135      	bne.n	8009796 <_vfiprintf_r+0x1ce>
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	1d1a      	adds	r2, r3, #4
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	9203      	str	r2, [sp, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	bfb8      	it	lt
 8009736:	f04f 33ff 	movlt.w	r3, #4294967295
 800973a:	3402      	adds	r4, #2
 800973c:	9305      	str	r3, [sp, #20]
 800973e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009824 <_vfiprintf_r+0x25c>
 8009742:	7821      	ldrb	r1, [r4, #0]
 8009744:	2203      	movs	r2, #3
 8009746:	4650      	mov	r0, sl
 8009748:	f7f6 fd72 	bl	8000230 <memchr>
 800974c:	b140      	cbz	r0, 8009760 <_vfiprintf_r+0x198>
 800974e:	2340      	movs	r3, #64	; 0x40
 8009750:	eba0 000a 	sub.w	r0, r0, sl
 8009754:	fa03 f000 	lsl.w	r0, r3, r0
 8009758:	9b04      	ldr	r3, [sp, #16]
 800975a:	4303      	orrs	r3, r0
 800975c:	3401      	adds	r4, #1
 800975e:	9304      	str	r3, [sp, #16]
 8009760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009764:	482c      	ldr	r0, [pc, #176]	; (8009818 <_vfiprintf_r+0x250>)
 8009766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800976a:	2206      	movs	r2, #6
 800976c:	f7f6 fd60 	bl	8000230 <memchr>
 8009770:	2800      	cmp	r0, #0
 8009772:	d03f      	beq.n	80097f4 <_vfiprintf_r+0x22c>
 8009774:	4b29      	ldr	r3, [pc, #164]	; (800981c <_vfiprintf_r+0x254>)
 8009776:	bb1b      	cbnz	r3, 80097c0 <_vfiprintf_r+0x1f8>
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	3307      	adds	r3, #7
 800977c:	f023 0307 	bic.w	r3, r3, #7
 8009780:	3308      	adds	r3, #8
 8009782:	9303      	str	r3, [sp, #12]
 8009784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009786:	443b      	add	r3, r7
 8009788:	9309      	str	r3, [sp, #36]	; 0x24
 800978a:	e767      	b.n	800965c <_vfiprintf_r+0x94>
 800978c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009790:	460c      	mov	r4, r1
 8009792:	2001      	movs	r0, #1
 8009794:	e7a5      	b.n	80096e2 <_vfiprintf_r+0x11a>
 8009796:	2300      	movs	r3, #0
 8009798:	3401      	adds	r4, #1
 800979a:	9305      	str	r3, [sp, #20]
 800979c:	4619      	mov	r1, r3
 800979e:	f04f 0c0a 	mov.w	ip, #10
 80097a2:	4620      	mov	r0, r4
 80097a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a8:	3a30      	subs	r2, #48	; 0x30
 80097aa:	2a09      	cmp	r2, #9
 80097ac:	d903      	bls.n	80097b6 <_vfiprintf_r+0x1ee>
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0c5      	beq.n	800973e <_vfiprintf_r+0x176>
 80097b2:	9105      	str	r1, [sp, #20]
 80097b4:	e7c3      	b.n	800973e <_vfiprintf_r+0x176>
 80097b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ba:	4604      	mov	r4, r0
 80097bc:	2301      	movs	r3, #1
 80097be:	e7f0      	b.n	80097a2 <_vfiprintf_r+0x1da>
 80097c0:	ab03      	add	r3, sp, #12
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	462a      	mov	r2, r5
 80097c6:	4b16      	ldr	r3, [pc, #88]	; (8009820 <_vfiprintf_r+0x258>)
 80097c8:	a904      	add	r1, sp, #16
 80097ca:	4630      	mov	r0, r6
 80097cc:	f7fd fca2 	bl	8007114 <_printf_float>
 80097d0:	4607      	mov	r7, r0
 80097d2:	1c78      	adds	r0, r7, #1
 80097d4:	d1d6      	bne.n	8009784 <_vfiprintf_r+0x1bc>
 80097d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d8:	07d9      	lsls	r1, r3, #31
 80097da:	d405      	bmi.n	80097e8 <_vfiprintf_r+0x220>
 80097dc:	89ab      	ldrh	r3, [r5, #12]
 80097de:	059a      	lsls	r2, r3, #22
 80097e0:	d402      	bmi.n	80097e8 <_vfiprintf_r+0x220>
 80097e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097e4:	f7ff f9d0 	bl	8008b88 <__retarget_lock_release_recursive>
 80097e8:	89ab      	ldrh	r3, [r5, #12]
 80097ea:	065b      	lsls	r3, r3, #25
 80097ec:	f53f af12 	bmi.w	8009614 <_vfiprintf_r+0x4c>
 80097f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097f2:	e711      	b.n	8009618 <_vfiprintf_r+0x50>
 80097f4:	ab03      	add	r3, sp, #12
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	462a      	mov	r2, r5
 80097fa:	4b09      	ldr	r3, [pc, #36]	; (8009820 <_vfiprintf_r+0x258>)
 80097fc:	a904      	add	r1, sp, #16
 80097fe:	4630      	mov	r0, r6
 8009800:	f7fd ff2c 	bl	800765c <_printf_i>
 8009804:	e7e4      	b.n	80097d0 <_vfiprintf_r+0x208>
 8009806:	bf00      	nop
 8009808:	08009e50 	.word	0x08009e50
 800980c:	08009e70 	.word	0x08009e70
 8009810:	08009e30 	.word	0x08009e30
 8009814:	08009fec 	.word	0x08009fec
 8009818:	08009ff6 	.word	0x08009ff6
 800981c:	08007115 	.word	0x08007115
 8009820:	080095a3 	.word	0x080095a3
 8009824:	08009ff2 	.word	0x08009ff2

08009828 <_sbrk_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4d06      	ldr	r5, [pc, #24]	; (8009844 <_sbrk_r+0x1c>)
 800982c:	2300      	movs	r3, #0
 800982e:	4604      	mov	r4, r0
 8009830:	4608      	mov	r0, r1
 8009832:	602b      	str	r3, [r5, #0]
 8009834:	f7f9 f980 	bl	8002b38 <_sbrk>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d102      	bne.n	8009842 <_sbrk_r+0x1a>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	b103      	cbz	r3, 8009842 <_sbrk_r+0x1a>
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	20000884 	.word	0x20000884

08009848 <__sread>:
 8009848:	b510      	push	{r4, lr}
 800984a:	460c      	mov	r4, r1
 800984c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009850:	f000 f8e2 	bl	8009a18 <_read_r>
 8009854:	2800      	cmp	r0, #0
 8009856:	bfab      	itete	ge
 8009858:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800985a:	89a3      	ldrhlt	r3, [r4, #12]
 800985c:	181b      	addge	r3, r3, r0
 800985e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009862:	bfac      	ite	ge
 8009864:	6563      	strge	r3, [r4, #84]	; 0x54
 8009866:	81a3      	strhlt	r3, [r4, #12]
 8009868:	bd10      	pop	{r4, pc}

0800986a <__swrite>:
 800986a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986e:	461f      	mov	r7, r3
 8009870:	898b      	ldrh	r3, [r1, #12]
 8009872:	05db      	lsls	r3, r3, #23
 8009874:	4605      	mov	r5, r0
 8009876:	460c      	mov	r4, r1
 8009878:	4616      	mov	r6, r2
 800987a:	d505      	bpl.n	8009888 <__swrite+0x1e>
 800987c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009880:	2302      	movs	r3, #2
 8009882:	2200      	movs	r2, #0
 8009884:	f000 f898 	bl	80099b8 <_lseek_r>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800988e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	4632      	mov	r2, r6
 8009896:	463b      	mov	r3, r7
 8009898:	4628      	mov	r0, r5
 800989a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800989e:	f000 b817 	b.w	80098d0 <_write_r>

080098a2 <__sseek>:
 80098a2:	b510      	push	{r4, lr}
 80098a4:	460c      	mov	r4, r1
 80098a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098aa:	f000 f885 	bl	80099b8 <_lseek_r>
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	bf15      	itete	ne
 80098b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80098b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098be:	81a3      	strheq	r3, [r4, #12]
 80098c0:	bf18      	it	ne
 80098c2:	81a3      	strhne	r3, [r4, #12]
 80098c4:	bd10      	pop	{r4, pc}

080098c6 <__sclose>:
 80098c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ca:	f000 b831 	b.w	8009930 <_close_r>
	...

080098d0 <_write_r>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	4d07      	ldr	r5, [pc, #28]	; (80098f0 <_write_r+0x20>)
 80098d4:	4604      	mov	r4, r0
 80098d6:	4608      	mov	r0, r1
 80098d8:	4611      	mov	r1, r2
 80098da:	2200      	movs	r2, #0
 80098dc:	602a      	str	r2, [r5, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	f7f9 f8d9 	bl	8002a96 <_write>
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	d102      	bne.n	80098ee <_write_r+0x1e>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	b103      	cbz	r3, 80098ee <_write_r+0x1e>
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
 80098f0:	20000884 	.word	0x20000884

080098f4 <__assert_func>:
 80098f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098f6:	4614      	mov	r4, r2
 80098f8:	461a      	mov	r2, r3
 80098fa:	4b09      	ldr	r3, [pc, #36]	; (8009920 <__assert_func+0x2c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4605      	mov	r5, r0
 8009900:	68d8      	ldr	r0, [r3, #12]
 8009902:	b14c      	cbz	r4, 8009918 <__assert_func+0x24>
 8009904:	4b07      	ldr	r3, [pc, #28]	; (8009924 <__assert_func+0x30>)
 8009906:	9100      	str	r1, [sp, #0]
 8009908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800990c:	4906      	ldr	r1, [pc, #24]	; (8009928 <__assert_func+0x34>)
 800990e:	462b      	mov	r3, r5
 8009910:	f000 f81e 	bl	8009950 <fiprintf>
 8009914:	f000 f89f 	bl	8009a56 <abort>
 8009918:	4b04      	ldr	r3, [pc, #16]	; (800992c <__assert_func+0x38>)
 800991a:	461c      	mov	r4, r3
 800991c:	e7f3      	b.n	8009906 <__assert_func+0x12>
 800991e:	bf00      	nop
 8009920:	20000014 	.word	0x20000014
 8009924:	08009ffd 	.word	0x08009ffd
 8009928:	0800a00a 	.word	0x0800a00a
 800992c:	0800a038 	.word	0x0800a038

08009930 <_close_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	4d06      	ldr	r5, [pc, #24]	; (800994c <_close_r+0x1c>)
 8009934:	2300      	movs	r3, #0
 8009936:	4604      	mov	r4, r0
 8009938:	4608      	mov	r0, r1
 800993a:	602b      	str	r3, [r5, #0]
 800993c:	f7f9 f8c7 	bl	8002ace <_close>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d102      	bne.n	800994a <_close_r+0x1a>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	b103      	cbz	r3, 800994a <_close_r+0x1a>
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	20000884 	.word	0x20000884

08009950 <fiprintf>:
 8009950:	b40e      	push	{r1, r2, r3}
 8009952:	b503      	push	{r0, r1, lr}
 8009954:	4601      	mov	r1, r0
 8009956:	ab03      	add	r3, sp, #12
 8009958:	4805      	ldr	r0, [pc, #20]	; (8009970 <fiprintf+0x20>)
 800995a:	f853 2b04 	ldr.w	r2, [r3], #4
 800995e:	6800      	ldr	r0, [r0, #0]
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	f7ff fe31 	bl	80095c8 <_vfiprintf_r>
 8009966:	b002      	add	sp, #8
 8009968:	f85d eb04 	ldr.w	lr, [sp], #4
 800996c:	b003      	add	sp, #12
 800996e:	4770      	bx	lr
 8009970:	20000014 	.word	0x20000014

08009974 <_fstat_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d07      	ldr	r5, [pc, #28]	; (8009994 <_fstat_r+0x20>)
 8009978:	2300      	movs	r3, #0
 800997a:	4604      	mov	r4, r0
 800997c:	4608      	mov	r0, r1
 800997e:	4611      	mov	r1, r2
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	f7f9 f8b0 	bl	8002ae6 <_fstat>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d102      	bne.n	8009990 <_fstat_r+0x1c>
 800998a:	682b      	ldr	r3, [r5, #0]
 800998c:	b103      	cbz	r3, 8009990 <_fstat_r+0x1c>
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	bd38      	pop	{r3, r4, r5, pc}
 8009992:	bf00      	nop
 8009994:	20000884 	.word	0x20000884

08009998 <_isatty_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d06      	ldr	r5, [pc, #24]	; (80099b4 <_isatty_r+0x1c>)
 800999c:	2300      	movs	r3, #0
 800999e:	4604      	mov	r4, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	602b      	str	r3, [r5, #0]
 80099a4:	f7f9 f8af 	bl	8002b06 <_isatty>
 80099a8:	1c43      	adds	r3, r0, #1
 80099aa:	d102      	bne.n	80099b2 <_isatty_r+0x1a>
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	b103      	cbz	r3, 80099b2 <_isatty_r+0x1a>
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
 80099b4:	20000884 	.word	0x20000884

080099b8 <_lseek_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d07      	ldr	r5, [pc, #28]	; (80099d8 <_lseek_r+0x20>)
 80099bc:	4604      	mov	r4, r0
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	2200      	movs	r2, #0
 80099c4:	602a      	str	r2, [r5, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f7f9 f8a8 	bl	8002b1c <_lseek>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_lseek_r+0x1e>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_lseek_r+0x1e>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	20000884 	.word	0x20000884

080099dc <__ascii_mbtowc>:
 80099dc:	b082      	sub	sp, #8
 80099de:	b901      	cbnz	r1, 80099e2 <__ascii_mbtowc+0x6>
 80099e0:	a901      	add	r1, sp, #4
 80099e2:	b142      	cbz	r2, 80099f6 <__ascii_mbtowc+0x1a>
 80099e4:	b14b      	cbz	r3, 80099fa <__ascii_mbtowc+0x1e>
 80099e6:	7813      	ldrb	r3, [r2, #0]
 80099e8:	600b      	str	r3, [r1, #0]
 80099ea:	7812      	ldrb	r2, [r2, #0]
 80099ec:	1e10      	subs	r0, r2, #0
 80099ee:	bf18      	it	ne
 80099f0:	2001      	movne	r0, #1
 80099f2:	b002      	add	sp, #8
 80099f4:	4770      	bx	lr
 80099f6:	4610      	mov	r0, r2
 80099f8:	e7fb      	b.n	80099f2 <__ascii_mbtowc+0x16>
 80099fa:	f06f 0001 	mvn.w	r0, #1
 80099fe:	e7f8      	b.n	80099f2 <__ascii_mbtowc+0x16>

08009a00 <__malloc_lock>:
 8009a00:	4801      	ldr	r0, [pc, #4]	; (8009a08 <__malloc_lock+0x8>)
 8009a02:	f7ff b8c0 	b.w	8008b86 <__retarget_lock_acquire_recursive>
 8009a06:	bf00      	nop
 8009a08:	20000878 	.word	0x20000878

08009a0c <__malloc_unlock>:
 8009a0c:	4801      	ldr	r0, [pc, #4]	; (8009a14 <__malloc_unlock+0x8>)
 8009a0e:	f7ff b8bb 	b.w	8008b88 <__retarget_lock_release_recursive>
 8009a12:	bf00      	nop
 8009a14:	20000878 	.word	0x20000878

08009a18 <_read_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4d07      	ldr	r5, [pc, #28]	; (8009a38 <_read_r+0x20>)
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	4608      	mov	r0, r1
 8009a20:	4611      	mov	r1, r2
 8009a22:	2200      	movs	r2, #0
 8009a24:	602a      	str	r2, [r5, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	f7f9 f818 	bl	8002a5c <_read>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_read_r+0x1e>
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_read_r+0x1e>
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	20000884 	.word	0x20000884

08009a3c <__ascii_wctomb>:
 8009a3c:	b149      	cbz	r1, 8009a52 <__ascii_wctomb+0x16>
 8009a3e:	2aff      	cmp	r2, #255	; 0xff
 8009a40:	bf85      	ittet	hi
 8009a42:	238a      	movhi	r3, #138	; 0x8a
 8009a44:	6003      	strhi	r3, [r0, #0]
 8009a46:	700a      	strbls	r2, [r1, #0]
 8009a48:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a4c:	bf98      	it	ls
 8009a4e:	2001      	movls	r0, #1
 8009a50:	4770      	bx	lr
 8009a52:	4608      	mov	r0, r1
 8009a54:	4770      	bx	lr

08009a56 <abort>:
 8009a56:	b508      	push	{r3, lr}
 8009a58:	2006      	movs	r0, #6
 8009a5a:	f000 f82b 	bl	8009ab4 <raise>
 8009a5e:	2001      	movs	r0, #1
 8009a60:	f7f8 fff2 	bl	8002a48 <_exit>

08009a64 <_raise_r>:
 8009a64:	291f      	cmp	r1, #31
 8009a66:	b538      	push	{r3, r4, r5, lr}
 8009a68:	4604      	mov	r4, r0
 8009a6a:	460d      	mov	r5, r1
 8009a6c:	d904      	bls.n	8009a78 <_raise_r+0x14>
 8009a6e:	2316      	movs	r3, #22
 8009a70:	6003      	str	r3, [r0, #0]
 8009a72:	f04f 30ff 	mov.w	r0, #4294967295
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a7a:	b112      	cbz	r2, 8009a82 <_raise_r+0x1e>
 8009a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a80:	b94b      	cbnz	r3, 8009a96 <_raise_r+0x32>
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 f830 	bl	8009ae8 <_getpid_r>
 8009a88:	462a      	mov	r2, r5
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a92:	f000 b817 	b.w	8009ac4 <_kill_r>
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d00a      	beq.n	8009ab0 <_raise_r+0x4c>
 8009a9a:	1c59      	adds	r1, r3, #1
 8009a9c:	d103      	bne.n	8009aa6 <_raise_r+0x42>
 8009a9e:	2316      	movs	r3, #22
 8009aa0:	6003      	str	r3, [r0, #0]
 8009aa2:	2001      	movs	r0, #1
 8009aa4:	e7e7      	b.n	8009a76 <_raise_r+0x12>
 8009aa6:	2400      	movs	r4, #0
 8009aa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009aac:	4628      	mov	r0, r5
 8009aae:	4798      	blx	r3
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	e7e0      	b.n	8009a76 <_raise_r+0x12>

08009ab4 <raise>:
 8009ab4:	4b02      	ldr	r3, [pc, #8]	; (8009ac0 <raise+0xc>)
 8009ab6:	4601      	mov	r1, r0
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	f7ff bfd3 	b.w	8009a64 <_raise_r>
 8009abe:	bf00      	nop
 8009ac0:	20000014 	.word	0x20000014

08009ac4 <_kill_r>:
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	4d07      	ldr	r5, [pc, #28]	; (8009ae4 <_kill_r+0x20>)
 8009ac8:	2300      	movs	r3, #0
 8009aca:	4604      	mov	r4, r0
 8009acc:	4608      	mov	r0, r1
 8009ace:	4611      	mov	r1, r2
 8009ad0:	602b      	str	r3, [r5, #0]
 8009ad2:	f7f8 ffa9 	bl	8002a28 <_kill>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	d102      	bne.n	8009ae0 <_kill_r+0x1c>
 8009ada:	682b      	ldr	r3, [r5, #0]
 8009adc:	b103      	cbz	r3, 8009ae0 <_kill_r+0x1c>
 8009ade:	6023      	str	r3, [r4, #0]
 8009ae0:	bd38      	pop	{r3, r4, r5, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000884 	.word	0x20000884

08009ae8 <_getpid_r>:
 8009ae8:	f7f8 bf96 	b.w	8002a18 <_getpid>

08009aec <_init>:
 8009aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aee:	bf00      	nop
 8009af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af2:	bc08      	pop	{r3}
 8009af4:	469e      	mov	lr, r3
 8009af6:	4770      	bx	lr

08009af8 <_fini>:
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afa:	bf00      	nop
 8009afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afe:	bc08      	pop	{r3}
 8009b00:	469e      	mov	lr, r3
 8009b02:	4770      	bx	lr
