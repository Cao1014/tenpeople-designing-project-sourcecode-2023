
mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5d4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  0800b7b8  0800b7b8  0001b7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be14  0800be14  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800be14  0800be14  0001be14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be1c  0800be1c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be1c  0800be1c  0001be1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be20  0800be20  0001be20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800be24  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  200001e8  0800c00c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  0800c00c  000208bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a45  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269b  00000000  00000000  00034c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000372f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  000384e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027421  00000000  00000000  00039608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015002  00000000  00000000  00060a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd92a  00000000  00000000  00075a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173355  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d84  00000000  00000000  001733a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b79c 	.word	0x0800b79c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800b79c 	.word	0x0800b79c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b974 	b.w	8000f38 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468e      	mov	lr, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4694      	mov	ip, r2
 8000c7a:	d969      	bls.n	8000d50 <__udivmoddi4+0xe8>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b152      	cbz	r2, 8000c98 <__udivmoddi4+0x30>
 8000c82:	fa01 f302 	lsl.w	r3, r1, r2
 8000c86:	f1c2 0120 	rsb	r1, r2, #32
 8000c8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c92:	ea41 0e03 	orr.w	lr, r1, r3
 8000c96:	4094      	lsls	r4, r2
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	0c21      	lsrs	r1, r4, #16
 8000c9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca2:	fa1f f78c 	uxth.w	r7, ip
 8000ca6:	fb08 e316 	mls	r3, r8, r6, lr
 8000caa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cae:	fb06 f107 	mul.w	r1, r6, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cbe:	f080 811f 	bcs.w	8000f00 <__udivmoddi4+0x298>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 811c 	bls.w	8000f00 <__udivmoddi4+0x298>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 f707 	mul.w	r7, r0, r7
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x92>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	f080 810a 	bcs.w	8000f04 <__udivmoddi4+0x29c>
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	f240 8107 	bls.w	8000f04 <__udivmoddi4+0x29c>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	1be4      	subs	r4, r4, r7
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa4>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xc2>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80ef 	beq.w	8000efa <__udivmoddi4+0x292>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x160>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd4>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80f9 	bhi.w	8000f2e <__udivmoddi4+0x2c6>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	469e      	mov	lr, r3
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa4>
 8000d4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xec>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 8092 	bne.w	8000e82 <__udivmoddi4+0x21a>
 8000d5e:	eba1 010c 	sub.w	r1, r1, ip
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0c20      	lsrs	r0, r4, #16
 8000d6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d72:	fb07 1113 	mls	r1, r7, r3, r1
 8000d76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7a:	fb0e f003 	mul.w	r0, lr, r3
 8000d7e:	4288      	cmp	r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x12c>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x12a>
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	f200 80cb 	bhi.w	8000f28 <__udivmoddi4+0x2c0>
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000da0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da4:	fb0e fe00 	mul.w	lr, lr, r0
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x156>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x154>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f200 80bb 	bhi.w	8000f32 <__udivmoddi4+0x2ca>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dc6:	e79c      	b.n	8000d02 <__udivmoddi4+0x9a>
 8000dc8:	f1c6 0720 	rsb	r7, r6, #32
 8000dcc:	40b3      	lsls	r3, r6
 8000dce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	431c      	orrs	r4, r3
 8000de0:	40f9      	lsrs	r1, r7
 8000de2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fb09 1118 	mls	r1, r9, r8, r1
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	fb08 f00e 	mul.w	r0, r8, lr
 8000e00:	4288      	cmp	r0, r1
 8000e02:	fa02 f206 	lsl.w	r2, r2, r6
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b8>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2bc>
 8000e14:	4288      	cmp	r0, r1
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2bc>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e28:	fb09 1110 	mls	r1, r9, r0, r1
 8000e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	458e      	cmp	lr, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1e2>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e40:	d26c      	bcs.n	8000f1c <__udivmoddi4+0x2b4>
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d96a      	bls.n	8000f1c <__udivmoddi4+0x2b4>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e52:	eba1 010e 	sub.w	r1, r1, lr
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	46c8      	mov	r8, r9
 8000e5a:	46a6      	mov	lr, r4
 8000e5c:	d356      	bcc.n	8000f0c <__udivmoddi4+0x2a4>
 8000e5e:	d053      	beq.n	8000f08 <__udivmoddi4+0x2a0>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x212>
 8000e62:	ebb3 0208 	subs.w	r2, r3, r8
 8000e66:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e72:	40f1      	lsrs	r1, r6
 8000e74:	431f      	orrs	r7, r3
 8000e76:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e90:	4091      	lsls	r1, r2
 8000e92:	4301      	orrs	r1, r0
 8000e94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e98:	fa1f fe8c 	uxth.w	lr, ip
 8000e9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea4:	0c0b      	lsrs	r3, r1, #16
 8000ea6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x260>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebe:	d22f      	bcs.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d92d      	bls.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	b289      	uxth	r1, r1
 8000ecc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb06 f30e 	mul.w	r3, r6, lr
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x28a>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee8:	d216      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d914      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000eee:	3e02      	subs	r6, #2
 8000ef0:	4461      	add	r1, ip
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef8:	e738      	b.n	8000d6c <__udivmoddi4+0x104>
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e705      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e3      	b.n	8000ccc <__udivmoddi4+0x64>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6f8      	b.n	8000cfa <__udivmoddi4+0x92>
 8000f08:	454b      	cmp	r3, r9
 8000f0a:	d2a9      	bcs.n	8000e60 <__udivmoddi4+0x1f8>
 8000f0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7a3      	b.n	8000e60 <__udivmoddi4+0x1f8>
 8000f18:	4646      	mov	r6, r8
 8000f1a:	e7ea      	b.n	8000ef2 <__udivmoddi4+0x28a>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	e794      	b.n	8000e4a <__udivmoddi4+0x1e2>
 8000f20:	4640      	mov	r0, r8
 8000f22:	e7d1      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f24:	46d0      	mov	r8, sl
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b8>
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e732      	b.n	8000d94 <__udivmoddi4+0x12c>
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e709      	b.n	8000d46 <__udivmoddi4+0xde>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e742      	b.n	8000dbe <__udivmoddi4+0x156>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <toggleLD2>:
// Redirect printf to UART
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

// define a function to toggle the LD2 LED in a certain pattern
void toggleLD2(uint32_t delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2120      	movs	r1, #32
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f003 fedc 	bl	8004d08 <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f003 fc25 	bl	80047a0 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2120      	movs	r1, #32
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f003 fed3 	bl	8004d08 <HAL_GPIO_WritePin>
  HAL_Delay(delay);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f003 fc1c 	bl	80047a0 <HAL_Delay>
  // printf("Working\r\n");
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_TIM_IC_CaptureCallback>:

// interrupt handler for the timer
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f74:	b090      	sub	sp, #64	; 0x40
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (htim->Instance == TIM5)
 8000f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4bb6      	ldr	r3, [pc, #728]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 80fa 	bne.w	800117a <HAL_TIM_IC_CaptureCallback+0x20a>
  {
    switch (htim->Channel)
 8000f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f88:	7f1b      	ldrb	r3, [r3, #28]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d07b      	beq.n	8001086 <HAL_TIM_IC_CaptureCallback+0x116>
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	f040 80ef 	bne.w	8001172 <HAL_TIM_IC_CaptureCallback+0x202>
    {
    case HAL_TIM_ACTIVE_CHANNEL_2: // right sensor
      if (timer_flag == 0)
 8000f94:	4bb1      	ldr	r3, [pc, #708]	; (800125c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d113      	bne.n	8000fc4 <HAL_TIM_IC_CaptureCallback+0x54>
      {
        timer_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000fa0:	f005 ff00 	bl	8006da4 <HAL_TIM_ReadCapturedValue>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8000faa:	637a      	str	r2, [r7, #52]	; 0x34
 8000fac:	4bac      	ldr	r3, [pc, #688]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8000fae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000fb2:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo right counter tr1= %d\r\n",timer_1);
        timer_flag = 1;
 8000fb6:	4ba9      	ldr	r3, [pc, #676]	; (800125c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
        timer_fin = 0;
 8000fbc:	4ba9      	ldr	r3, [pc, #676]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e05b      	b.n	800107c <HAL_TIM_IC_CaptureCallback+0x10c>
      }
      else
      {
        timer_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000fc8:	f005 feec 	bl	8006da4 <HAL_TIM_ReadCapturedValue>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2200      	movs	r2, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000fd4:	4ba4      	ldr	r3, [pc, #656]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8000fd6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000fda:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo right counter tr2= %d\r\n",timer_2);
        timer_flag = 0;
 8000fde:	4b9f      	ldr	r3, [pc, #636]	; (800125c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
        timer_fin = 1;
 8000fe4:	4b9f      	ldr	r3, [pc, #636]	; (8001264 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
        if (timer_1 < timer_2) // if the timer is not overflowed
 8000fea:	4b9d      	ldr	r3, [pc, #628]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8000fec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff0:	4b9d      	ldr	r3, [pc, #628]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	4290      	cmp	r0, r2
 8000ff8:	eb71 0303 	sbcs.w	r3, r1, r3
 8000ffc:	d219      	bcs.n	8001032 <HAL_TIM_IC_CaptureCallback+0xc2>
        {
          cmr = (double)(timer_2 - timer_1) * 0.017; // 340*100/1e6/2
 8000ffe:	4b9a      	ldr	r3, [pc, #616]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001004:	4b96      	ldr	r3, [pc, #600]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	1a84      	subs	r4, r0, r2
 800100c:	623c      	str	r4, [r7, #32]
 800100e:	eb61 0303 	sbc.w	r3, r1, r3
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
 8001014:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001018:	f7ff fae0 	bl	80005dc <__aeabi_ul2d>
 800101c:	a38a      	add	r3, pc, #552	; (adr r3, 8001248 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fb11 	bl	8000648 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4990      	ldr	r1, [pc, #576]	; (800126c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 800102c:	e9c1 2300 	strd	r2, r3, [r1]
 8001030:	e01d      	b.n	800106e <HAL_TIM_IC_CaptureCallback+0xfe>
        }
        else
        {
          cmr = (double)(timer_2 + 0xffffffff - timer_1) * 0.017; // 340*100/1e6/2
 8001032:	4b8d      	ldr	r3, [pc, #564]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001038:	4b89      	ldr	r3, [pc, #548]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	ebb0 0802 	subs.w	r8, r0, r2
 8001042:	eb61 0903 	sbc.w	r9, r1, r3
 8001046:	f118 33ff 	adds.w	r3, r8, #4294967295
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	f149 0300 	adc.w	r3, r9, #0
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001056:	f7ff fac1 	bl	80005dc <__aeabi_ul2d>
 800105a:	a37b      	add	r3, pc, #492	; (adr r3, 8001248 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff faf2 	bl	8000648 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4980      	ldr	r1, [pc, #512]	; (800126c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 800106a:	e9c1 2300 	strd	r2, r3, [r1]
        }
        timer_1 = 0;
 800106e:	497c      	ldr	r1, [pc, #496]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	e9c1 2300 	strd	r2, r3, [r1]
        // printf("Distance right = %.3f cm. \r\n",  cmr);
      }
      // printf("Echo right: t1= %.3f us,  t2= %.3f us\r",timer_1*10, timer_2*10);
      HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 800107c:	2104      	movs	r1, #4
 800107e:	487c      	ldr	r0, [pc, #496]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001080:	f005 f8fa 	bl	8006278 <HAL_TIM_IC_Start_IT>
      break;
 8001084:	e07a      	b.n	800117c <HAL_TIM_IC_CaptureCallback+0x20c>

    case HAL_TIM_ACTIVE_CHANNEL_1: // left sensor
      if (timel_flag == 0)
 8001086:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x304>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d113      	bne.n	80010b6 <HAL_TIM_IC_CaptureCallback+0x146>
      {
        timel_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800108e:	2100      	movs	r1, #0
 8001090:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001092:	f005 fe87 	bl	8006da4 <HAL_TIM_ReadCapturedValue>
 8001096:	4603      	mov	r3, r0
 8001098:	2200      	movs	r2, #0
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	617a      	str	r2, [r7, #20]
 800109e:	4b76      	ldr	r3, [pc, #472]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x308>)
 80010a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80010a4:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo left counter tl1= %d\r\n",timel_1);
        timel_flag = 1;
 80010a8:	4b72      	ldr	r3, [pc, #456]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x304>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
        timel_fin = 0;
 80010ae:	4b73      	ldr	r3, [pc, #460]	; (800127c <HAL_TIM_IC_CaptureCallback+0x30c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e058      	b.n	8001168 <HAL_TIM_IC_CaptureCallback+0x1f8>
      }
      else
      {
        timel_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010b6:	2100      	movs	r1, #0
 80010b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010ba:	f005 fe73 	bl	8006da4 <HAL_TIM_ReadCapturedValue>
 80010be:	4603      	mov	r3, r0
 80010c0:	2200      	movs	r2, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	60fa      	str	r2, [r7, #12]
 80010c6:	4b6e      	ldr	r3, [pc, #440]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x310>)
 80010c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010cc:	e9c3 1200 	strd	r1, r2, [r3]
        // printf("Echo left counter tl2= %d\r\n",timel_2);
        timel_flag = 0;
 80010d0:	4b68      	ldr	r3, [pc, #416]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x304>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
        timel_fin = 1;
 80010d6:	4b69      	ldr	r3, [pc, #420]	; (800127c <HAL_TIM_IC_CaptureCallback+0x30c>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
        if (timel_1 < timel_2) // if the timer is not overflowed
 80010dc:	4b66      	ldr	r3, [pc, #408]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x308>)
 80010de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e2:	4b67      	ldr	r3, [pc, #412]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x310>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	4290      	cmp	r0, r2
 80010ea:	eb71 0303 	sbcs.w	r3, r1, r3
 80010ee:	d219      	bcs.n	8001124 <HAL_TIM_IC_CaptureCallback+0x1b4>
        {
          cml = (double)(timel_2 - timel_1) * 0.017; // 340*100/1e6/2
 80010f0:	4b63      	ldr	r3, [pc, #396]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x310>)
 80010f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010f6:	4b60      	ldr	r3, [pc, #384]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x308>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	1a84      	subs	r4, r0, r2
 80010fe:	603c      	str	r4, [r7, #0]
 8001100:	eb61 0303 	sbc.w	r3, r1, r3
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800110a:	f7ff fa67 	bl	80005dc <__aeabi_ul2d>
 800110e:	a34e      	add	r3, pc, #312	; (adr r3, 8001248 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff fa98 	bl	8000648 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4959      	ldr	r1, [pc, #356]	; (8001284 <HAL_TIM_IC_CaptureCallback+0x314>)
 800111e:	e9c1 2300 	strd	r2, r3, [r1]
 8001122:	e01a      	b.n	800115a <HAL_TIM_IC_CaptureCallback+0x1ea>
        }
        else
        {
          cml = (double)(timel_2 + 0xffffffff - timel_1) * 0.017; // 340*100/1e6/2
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800112a:	4b53      	ldr	r3, [pc, #332]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x308>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	1a84      	subs	r4, r0, r2
 8001132:	eb61 0503 	sbc.w	r5, r1, r3
 8001136:	f114 3aff 	adds.w	sl, r4, #4294967295
 800113a:	f145 0b00 	adc.w	fp, r5, #0
 800113e:	4650      	mov	r0, sl
 8001140:	4659      	mov	r1, fp
 8001142:	f7ff fa4b 	bl	80005dc <__aeabi_ul2d>
 8001146:	a340      	add	r3, pc, #256	; (adr r3, 8001248 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fa7c 	bl	8000648 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	494b      	ldr	r1, [pc, #300]	; (8001284 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001156:	e9c1 2300 	strd	r2, r3, [r1]
        }
        timel_1 = 0;
 800115a:	4947      	ldr	r1, [pc, #284]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x308>)
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9c1 2300 	strd	r2, r3, [r1]
      }
      // printf("Echo left: t1= %.3f us,  t2= %.3f us\r",timel_1*10, timel_2*10);
      // printf("Distance left = %.3f cm. \r\n",  cml);
      HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001168:	2100      	movs	r1, #0
 800116a:	4841      	ldr	r0, [pc, #260]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x300>)
 800116c:	f005 f884 	bl	8006278 <HAL_TIM_IC_Start_IT>
      break;
 8001170:	e004      	b.n	800117c <HAL_TIM_IC_CaptureCallback+0x20c>
    default:
      printf("Error timer channel.\r\n");
 8001172:	4845      	ldr	r0, [pc, #276]	; (8001288 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001174:	f008 fa5e 	bl	8009634 <puts>
      break;
 8001178:	e000      	b.n	800117c <HAL_TIM_IC_CaptureCallback+0x20c>
    }
  }
 800117a:	bf00      	nop
  if (htim->Instance == TIM4)
 800117c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a42      	ldr	r2, [pc, #264]	; (800128c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	f040 8090 	bne.w	80012a8 <HAL_TIM_IC_CaptureCallback+0x338>
  {
    switch (htim->Channel)
 8001188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118a:	7f1b      	ldrb	r3, [r3, #28]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d154      	bne.n	800123a <HAL_TIM_IC_CaptureCallback+0x2ca>
    {
    case HAL_TIM_ACTIVE_CHANNEL_1: // right sensor
      if (timef_flag == 0)
 8001190:	4b3f      	ldr	r3, [pc, #252]	; (8001290 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10d      	bne.n	80011b4 <HAL_TIM_IC_CaptureCallback+0x244>
      {
        timef_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001198:	2100      	movs	r1, #0
 800119a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800119c:	f005 fe02 	bl	8006da4 <HAL_TIM_ReadCapturedValue>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <HAL_TIM_IC_CaptureCallback+0x324>)
 80011a4:	6013      	str	r3, [r2, #0]
        // printf("Echo front: tf1= %d us\r",timef_1*10);
        timef_flag = 1;
 80011a6:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <HAL_TIM_IC_CaptureCallback+0x320>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
        timef_fin = 0;
 80011ac:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <HAL_TIM_IC_CaptureCallback+0x328>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e03d      	b.n	8001230 <HAL_TIM_IC_CaptureCallback+0x2c0>
      }
      else
      {
        timef_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80011b4:	2100      	movs	r1, #0
 80011b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011b8:	f005 fdf4 	bl	8006da4 <HAL_TIM_ReadCapturedValue>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a37      	ldr	r2, [pc, #220]	; (800129c <HAL_TIM_IC_CaptureCallback+0x32c>)
 80011c0:	6013      	str	r3, [r2, #0]
        timef_flag = 0;
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <HAL_TIM_IC_CaptureCallback+0x320>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
        timef_fin = 1;
 80011c8:	4b33      	ldr	r3, [pc, #204]	; (8001298 <HAL_TIM_IC_CaptureCallback+0x328>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
        if (timef_1 < timef_2) // if the timer is not overflowed
 80011ce:	4b31      	ldr	r3, [pc, #196]	; (8001294 <HAL_TIM_IC_CaptureCallback+0x324>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b32      	ldr	r3, [pc, #200]	; (800129c <HAL_TIM_IC_CaptureCallback+0x32c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d212      	bcs.n	8001200 <HAL_TIM_IC_CaptureCallback+0x290>
        {
          cmf = (double)(timef_2 - timef_1) * 3.4; // 340*100/5e3/2
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_TIM_IC_CaptureCallback+0x32c>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_TIM_IC_CaptureCallback+0x324>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9b5 	bl	8000554 <__aeabi_ui2d>
 80011ea:	a319      	add	r3, pc, #100	; (adr r3, 8001250 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fa2a 	bl	8000648 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4929      	ldr	r1, [pc, #164]	; (80012a0 <HAL_TIM_IC_CaptureCallback+0x330>)
 80011fa:	e9c1 2300 	strd	r2, r3, [r1]
 80011fe:	e014      	b.n	800122a <HAL_TIM_IC_CaptureCallback+0x2ba>
        }
        else
        {
          cmf = (double)(timef_2 + 0xffff - timef_1) * 3.4; // 340*100/5e3/2
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800120e:	33ff      	adds	r3, #255	; 0xff
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f99f 	bl	8000554 <__aeabi_ui2d>
 8001216:	a30e      	add	r3, pc, #56	; (adr r3, 8001250 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fa14 	bl	8000648 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	491e      	ldr	r1, [pc, #120]	; (80012a0 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001226:	e9c1 2300 	strd	r2, r3, [r1]
        }
        timef_1 = 0;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_TIM_IC_CaptureCallback+0x324>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
      }
      // printf("Echo front: t= %.3f us\r\n",timel_1*10, timer_2*10);
      // printf("Distance front = %.3f cm. \r\n",  cmf);
      HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001230:	2100      	movs	r1, #0
 8001232:	481c      	ldr	r0, [pc, #112]	; (80012a4 <HAL_TIM_IC_CaptureCallback+0x334>)
 8001234:	f005 f820 	bl	8006278 <HAL_TIM_IC_Start_IT>
      break;
 8001238:	e037      	b.n	80012aa <HAL_TIM_IC_CaptureCallback+0x33a>
    default:
      printf("Error timer channel.\r\n");
 800123a:	4813      	ldr	r0, [pc, #76]	; (8001288 <HAL_TIM_IC_CaptureCallback+0x318>)
 800123c:	f008 f9fa 	bl	8009634 <puts>
      break;
 8001240:	e033      	b.n	80012aa <HAL_TIM_IC_CaptureCallback+0x33a>
 8001242:	bf00      	nop
 8001244:	f3af 8000 	nop.w
 8001248:	b020c49c 	.word	0xb020c49c
 800124c:	3f916872 	.word	0x3f916872
 8001250:	33333333 	.word	0x33333333
 8001254:	400b3333 	.word	0x400b3333
 8001258:	40000c00 	.word	0x40000c00
 800125c:	20000620 	.word	0x20000620
 8001260:	20000628 	.word	0x20000628
 8001264:	20000621 	.word	0x20000621
 8001268:	20000630 	.word	0x20000630
 800126c:	20000638 	.word	0x20000638
 8001270:	200005b8 	.word	0x200005b8
 8001274:	20000604 	.word	0x20000604
 8001278:	20000608 	.word	0x20000608
 800127c:	20000605 	.word	0x20000605
 8001280:	20000610 	.word	0x20000610
 8001284:	20000618 	.word	0x20000618
 8001288:	0800b7b8 	.word	0x0800b7b8
 800128c:	40000800 	.word	0x40000800
 8001290:	20000640 	.word	0x20000640
 8001294:	20000644 	.word	0x20000644
 8001298:	20000641 	.word	0x20000641
 800129c:	20000648 	.word	0x20000648
 80012a0:	20000650 	.word	0x20000650
 80012a4:	2000056c 	.word	0x2000056c
    }
  }
 80012a8:	bf00      	nop
}
 80012aa:	bf00      	nop
 80012ac:	3740      	adds	r7, #64	; 0x40
 80012ae:	46bd      	mov	sp, r7
 80012b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080012b4 <drive>:
  HAL_GPIO_WritePin(ldg_GPIO_Port, ldg_Pin, GPIO_PIN_RESET);
  HAL_Delay(delay);
}

void drive()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
  // Transfer int to char for output
  char outputstr[11];
  outputstr[0] = 0x90;
 80012ba:	2390      	movs	r3, #144	; 0x90
 80012bc:	713b      	strb	r3, [r7, #4]
  outputstr[1] = xflag;
 80012be:	4b29      	ldr	r3, [pc, #164]	; (8001364 <drive+0xb0>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	717b      	strb	r3, [r7, #5]
  outputstr[2] = xspeed / 10;
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <drive+0xb4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a28      	ldr	r2, [pc, #160]	; (800136c <drive+0xb8>)
 80012ca:	fb82 1203 	smull	r1, r2, r2, r3
 80012ce:	1092      	asrs	r2, r2, #2
 80012d0:	17db      	asrs	r3, r3, #31
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	71bb      	strb	r3, [r7, #6]
  outputstr[3] = xspeed % 10;
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <drive+0xb4>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <drive+0xb8>)
 80012de:	fb83 1302 	smull	r1, r3, r3, r2
 80012e2:	1099      	asrs	r1, r3, #2
 80012e4:	17d3      	asrs	r3, r2, #31
 80012e6:	1ac9      	subs	r1, r1, r3
 80012e8:	460b      	mov	r3, r1
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	1ad1      	subs	r1, r2, r3
 80012f2:	b2cb      	uxtb	r3, r1
 80012f4:	71fb      	strb	r3, [r7, #7]
  outputstr[4] = yflag;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <drive+0xbc>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	723b      	strb	r3, [r7, #8]
  outputstr[5] = yspeed / 10;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <drive+0xc0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1a      	ldr	r2, [pc, #104]	; (800136c <drive+0xb8>)
 8001302:	fb82 1203 	smull	r1, r2, r2, r3
 8001306:	1092      	asrs	r2, r2, #2
 8001308:	17db      	asrs	r3, r3, #31
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	727b      	strb	r3, [r7, #9]
  outputstr[6] = yspeed % 10;
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <drive+0xc0>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <drive+0xb8>)
 8001316:	fb83 1302 	smull	r1, r3, r3, r2
 800131a:	1099      	asrs	r1, r3, #2
 800131c:	17d3      	asrs	r3, r2, #31
 800131e:	1ac9      	subs	r1, r1, r3
 8001320:	460b      	mov	r3, r1
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	1ad1      	subs	r1, r2, r3
 800132a:	b2cb      	uxtb	r3, r1
 800132c:	72bb      	strb	r3, [r7, #10]
  outputstr[7] = wflag;
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <drive+0xc4>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	72fb      	strb	r3, [r7, #11]
  outputstr[8] = '0';
 8001334:	2330      	movs	r3, #48	; 0x30
 8001336:	733b      	strb	r3, [r7, #12]
  outputstr[9] = '1';
 8001338:	2331      	movs	r3, #49	; 0x31
 800133a:	737b      	strb	r3, [r7, #13]
  outputstr[10] = '2';
 800133c:	2332      	movs	r3, #50	; 0x32
 800133e:	73bb      	strb	r3, [r7, #14]
  // Transmit the instruction to the motor driver
  printf("Speed Left=%d, Speed Right=%d\r\n", xspeed, yspeed);
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <drive+0xb4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <drive+0xc0>)
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <drive+0xc8>)
 800134c:	f008 f8ec 	bl	8009528 <iprintf>
  HAL_UART_Transmit(&huart4, (uint8_t *)outputstr, 11, 100);
 8001350:	1d39      	adds	r1, r7, #4
 8001352:	2364      	movs	r3, #100	; 0x64
 8001354:	220b      	movs	r2, #11
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <drive+0xcc>)
 8001358:	f006 fd2c 	bl	8007db4 <HAL_UART_Transmit>
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2000087c 	.word	0x2000087c
 8001368:	20000878 	.word	0x20000878
 800136c:	66666667 	.word	0x66666667
 8001370:	20000884 	.word	0x20000884
 8001374:	20000880 	.word	0x20000880
 8001378:	20000885 	.word	0x20000885
 800137c:	0800b7d0 	.word	0x0800b7d0
 8001380:	20000294 	.word	0x20000294

08001384 <Forward>:
  yspeed = speed;
  yflag = 1;
}

void Forward(uint8_t speed)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  xspeed = speed;
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <Forward+0x30>)
 8001392:	6013      	str	r3, [r2, #0]
  yspeed = speed;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <Forward+0x34>)
 8001398:	6013      	str	r3, [r2, #0]
  xflag = 2;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <Forward+0x38>)
 800139c:	2202      	movs	r2, #2
 800139e:	701a      	strb	r2, [r3, #0]
  yflag = 2;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <Forward+0x3c>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	701a      	strb	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000878 	.word	0x20000878
 80013b8:	20000880 	.word	0x20000880
 80013bc:	2000087c 	.word	0x2000087c
 80013c0:	20000884 	.word	0x20000884

080013c4 <Backward>:

void Backward(uint8_t speed)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  xspeed = speed;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <Backward+0x30>)
 80013d2:	6013      	str	r3, [r2, #0]
  yspeed = speed;
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <Backward+0x34>)
 80013d8:	6013      	str	r3, [r2, #0]
  xflag = 1;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <Backward+0x38>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
  yflag = 1;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <Backward+0x3c>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000878 	.word	0x20000878
 80013f8:	20000880 	.word	0x20000880
 80013fc:	2000087c 	.word	0x2000087c
 8001400:	20000884 	.word	0x20000884

08001404 <Turn_Left>:

void Turn_Left(uint8_t speed)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  xspeed = xspeed - speed;
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <Turn_Left+0x60>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	4a13      	ldr	r2, [pc, #76]	; (8001464 <Turn_Left+0x60>)
 8001418:	6013      	str	r3, [r2, #0]
  yspeed = yspeed + speed;
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <Turn_Left+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4413      	add	r3, r2
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <Turn_Left+0x64>)
 8001424:	6013      	str	r3, [r2, #0]
  wflag = 0;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <Turn_Left+0x68>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
  if (xspeed < 0)
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <Turn_Left+0x60>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	da03      	bge.n	800143c <Turn_Left+0x38>
  {
    xflag = 1;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <Turn_Left+0x6c>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e002      	b.n	8001442 <Turn_Left+0x3e>
  }
  else
  {
    xflag = 2;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <Turn_Left+0x6c>)
 800143e:	2202      	movs	r2, #2
 8001440:	701a      	strb	r2, [r3, #0]
  }
  if (yspeed < 0)
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <Turn_Left+0x64>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	da03      	bge.n	8001452 <Turn_Left+0x4e>
  {
    yflag = 1;
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <Turn_Left+0x70>)
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    yflag = 2;
  }
}
 8001450:	e002      	b.n	8001458 <Turn_Left+0x54>
    yflag = 2;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <Turn_Left+0x70>)
 8001454:	2202      	movs	r2, #2
 8001456:	701a      	strb	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	20000878 	.word	0x20000878
 8001468:	20000880 	.word	0x20000880
 800146c:	20000885 	.word	0x20000885
 8001470:	2000087c 	.word	0x2000087c
 8001474:	20000884 	.word	0x20000884

08001478 <Turn_Right>:

void Turn_Right(uint8_t speed)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  xspeed = xspeed + speed;
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <Turn_Right+0x60>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4413      	add	r3, r2
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <Turn_Right+0x60>)
 800148c:	6013      	str	r3, [r2, #0]
  yspeed = yspeed - speed;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <Turn_Right+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <Turn_Right+0x64>)
 8001498:	6013      	str	r3, [r2, #0]
  wflag = 1;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <Turn_Right+0x68>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
  if (xspeed < 0)
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <Turn_Right+0x60>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da03      	bge.n	80014b0 <Turn_Right+0x38>
  {
    xflag = 1;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <Turn_Right+0x6c>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
 80014ae:	e002      	b.n	80014b6 <Turn_Right+0x3e>
  }
  else
  {
    xflag = 2;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <Turn_Right+0x6c>)
 80014b2:	2202      	movs	r2, #2
 80014b4:	701a      	strb	r2, [r3, #0]
  }
  if (yspeed < 0)
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <Turn_Right+0x64>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da03      	bge.n	80014c6 <Turn_Right+0x4e>
  {
    yflag = 1;
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <Turn_Right+0x70>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    yflag = 2;
  }
}
 80014c4:	e002      	b.n	80014cc <Turn_Right+0x54>
    yflag = 2;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <Turn_Right+0x70>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	701a      	strb	r2, [r3, #0]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	20000878 	.word	0x20000878
 80014dc:	20000880 	.word	0x20000880
 80014e0:	20000885 	.word	0x20000885
 80014e4:	2000087c 	.word	0x2000087c
 80014e8:	20000884 	.word	0x20000884

080014ec <gyroAlignment>:

void gyroAlignment(double input)
{
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	ed87 0b00 	vstr	d0, [r7]
  Inputgyro = input;
 80014f6:	4932      	ldr	r1, [pc, #200]	; (80015c0 <gyroAlignment+0xd4>)
 80014f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]
  if (PID_Compute(&myPIDgyro)==_FALSE)
 8001500:	4830      	ldr	r0, [pc, #192]	; (80015c4 <gyroAlignment+0xd8>)
 8001502:	f002 fa2d 	bl	8003960 <PID_Compute>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <gyroAlignment+0x26>
      printf("PID_Compute for gyro error\r\n");
 800150c:	482e      	ldr	r0, [pc, #184]	; (80015c8 <gyroAlignment+0xdc>)
 800150e:	f008 f891 	bl	8009634 <puts>
    printf("Outputgyro = %.3f\r\n", Outputgyro);
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <gyroAlignment+0xe0>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	482d      	ldr	r0, [pc, #180]	; (80015d0 <gyroAlignment+0xe4>)
 800151a:	f008 f805 	bl	8009528 <iprintf>

  if (Outputgyro > 1)
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <gyroAlignment+0xe0>)
 8001520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <gyroAlignment+0xe8>)
 800152a:	f7ff fb1d 	bl	8000b68 <__aeabi_dcmpgt>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00b      	beq.n	800154c <gyroAlignment+0x60>
  {

    Turn_Left((uint8_t)Outputgyro);
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <gyroAlignment+0xe0>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb5b 	bl	8000bf8 <__aeabi_d2uiz>
 8001542:	4603      	mov	r3, r0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff5c 	bl	8001404 <Turn_Left>
  }
  if (Outputgyro < -1)
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <gyroAlignment+0xe0>)
 800154e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <gyroAlignment+0xec>)
 8001558:	f7ff fae8 	bl	8000b2c <__aeabi_dcmplt>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00e      	beq.n	8001580 <gyroAlignment+0x94>
  {
    Turn_Right((uint8_t)(-Outputgyro));
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <gyroAlignment+0xe0>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	4614      	mov	r4, r2
 800156a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800156e:	4620      	mov	r0, r4
 8001570:	4629      	mov	r1, r5
 8001572:	f7ff fb41 	bl	8000bf8 <__aeabi_d2uiz>
 8001576:	4603      	mov	r3, r0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff7c 	bl	8001478 <Turn_Right>
  }
  if ((Inputgyro <= 1) && (Inputgyro >= -1))
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <gyroAlignment+0xd4>)
 8001582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <gyroAlignment+0xe8>)
 800158c:	f7ff fad8 	bl	8000b40 <__aeabi_dcmple>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d100      	bne.n	8001598 <gyroAlignment+0xac>
  {
    Turn_Left(0);
  }
}
 8001596:	e00e      	b.n	80015b6 <gyroAlignment+0xca>
  if ((Inputgyro <= 1) && (Inputgyro >= -1))
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <gyroAlignment+0xd4>)
 800159a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <gyroAlignment+0xec>)
 80015a4:	f7ff fad6 	bl	8000b54 <__aeabi_dcmpge>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d100      	bne.n	80015b0 <gyroAlignment+0xc4>
}
 80015ae:	e002      	b.n	80015b6 <gyroAlignment+0xca>
    Turn_Left(0);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff ff27 	bl	8001404 <Turn_Left>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bdb0      	pop	{r4, r5, r7, pc}
 80015be:	bf00      	nop
 80015c0:	200006a0 	.word	0x200006a0
 80015c4:	20000808 	.word	0x20000808
 80015c8:	0800b800 	.word	0x0800b800
 80015cc:	200006a8 	.word	0x200006a8
 80015d0:	0800b81c 	.word	0x0800b81c
 80015d4:	3ff00000 	.word	0x3ff00000
 80015d8:	bff00000 	.word	0xbff00000

080015dc <Alignment>:
//drive();
//toggleld2(50);
/***example***/

void Alignment(double cmleft, double cmright)
{
 80015dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af02      	add	r7, sp, #8
 80015e4:	ed87 0b02 	vstr	d0, [r7, #8]
 80015e8:	ed87 1b00 	vstr	d1, [r7]
  printf("Distance left = %.3f cm, Distance right = %.3f cm.\r\n", cmleft, cmright);
 80015ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015f0:	e9cd 2300 	strd	r2, r3, [sp]
 80015f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015f8:	4853      	ldr	r0, [pc, #332]	; (8001748 <Alignment+0x16c>)
 80015fa:	f007 ff95 	bl	8009528 <iprintf>
  Inputultra = cmleft-cmright;
 80015fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001606:	f7fe fe67 	bl	80002d8 <__aeabi_dsub>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	494f      	ldr	r1, [pc, #316]	; (800174c <Alignment+0x170>)
 8001610:	e9c1 2300 	strd	r2, r3, [r1]

  //When previous process have not been finished, do nothing, just align
  if ((cmleft-cmright>2)||(cmleft-cmright<-2))
 8001614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001618:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800161c:	f7fe fe5c 	bl	80002d8 <__aeabi_dsub>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001630:	f7ff fa9a 	bl	8000b68 <__aeabi_dcmpgt>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d112      	bne.n	8001660 <Alignment+0x84>
 800163a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800163e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001642:	f7fe fe49 	bl	80002d8 <__aeabi_dsub>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001656:	f7ff fa69 	bl	8000b2c <__aeabi_dcmplt>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d037      	beq.n	80016d0 <Alignment+0xf4>
  {
    if (PID_Compute(&myPIDultra)==_FALSE)
 8001660:	483b      	ldr	r0, [pc, #236]	; (8001750 <Alignment+0x174>)
 8001662:	f002 f97d 	bl	8003960 <PID_Compute>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <Alignment+0x96>
      printf("PID_Compute for ultra error\r\n");
 800166c:	4839      	ldr	r0, [pc, #228]	; (8001754 <Alignment+0x178>)
 800166e:	f007 ffe1 	bl	8009634 <puts>
    printf("Outputultra = %.3f\r\n", Outputultra);
 8001672:	4b39      	ldr	r3, [pc, #228]	; (8001758 <Alignment+0x17c>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	4838      	ldr	r0, [pc, #224]	; (800175c <Alignment+0x180>)
 800167a:	f007 ff55 	bl	8009528 <iprintf>

    if (Outputultra >= 0)
 800167e:	4b36      	ldr	r3, [pc, #216]	; (8001758 <Alignment+0x17c>)
 8001680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	f7ff fa62 	bl	8000b54 <__aeabi_dcmpge>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00c      	beq.n	80016b0 <Alignment+0xd4>
      Turn_Left((uint8_t)Outputultra);
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <Alignment+0x17c>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff faaa 	bl	8000bf8 <__aeabi_d2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff feab 	bl	8001404 <Turn_Left>
    else
      Turn_Right((uint8_t)(-Outputultra));
    return;
 80016ae:	e046      	b.n	800173e <Alignment+0x162>
      Turn_Right((uint8_t)(-Outputultra));
 80016b0:	4b29      	ldr	r3, [pc, #164]	; (8001758 <Alignment+0x17c>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	4690      	mov	r8, r2
 80016b8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80016bc:	4640      	mov	r0, r8
 80016be:	4649      	mov	r1, r9
 80016c0:	f7ff fa9a 	bl	8000bf8 <__aeabi_d2uiz>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fed5 	bl	8001478 <Turn_Right>
    return;
 80016ce:	e036      	b.n	800173e <Alignment+0x162>
  //   }   
  // } 
    
  

  if (PID_Compute(&myPIDultra)==_FALSE)
 80016d0:	481f      	ldr	r0, [pc, #124]	; (8001750 <Alignment+0x174>)
 80016d2:	f002 f945 	bl	8003960 <PID_Compute>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <Alignment+0x106>
    printf("PID_Compute for ultra error\r\n");
 80016dc:	481d      	ldr	r0, [pc, #116]	; (8001754 <Alignment+0x178>)
 80016de:	f007 ffa9 	bl	8009634 <puts>
  printf("Outputultra = %.3f\r\n", Outputultra);
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <Alignment+0x17c>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	481c      	ldr	r0, [pc, #112]	; (800175c <Alignment+0x180>)
 80016ea:	f007 ff1d 	bl	8009528 <iprintf>

  if (Outputultra >= 0)
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <Alignment+0x17c>)
 80016f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	f7ff fa2a 	bl	8000b54 <__aeabi_dcmpge>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00c      	beq.n	8001720 <Alignment+0x144>
  {
    Turn_Left((uint8_t)Outputultra);
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <Alignment+0x17c>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fa72 	bl	8000bf8 <__aeabi_d2uiz>
 8001714:	4603      	mov	r3, r0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fe73 	bl	8001404 <Turn_Left>
 800171e:	e00e      	b.n	800173e <Alignment+0x162>
  }
  else
  {
    Turn_Right((uint8_t)(-Outputultra));
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <Alignment+0x17c>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	4614      	mov	r4, r2
 8001728:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800172c:	4620      	mov	r0, r4
 800172e:	4629      	mov	r1, r5
 8001730:	f7ff fa62 	bl	8000bf8 <__aeabi_d2uiz>
 8001734:	4603      	mov	r3, r0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fe9d 	bl	8001478 <Turn_Right>
  }
}
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001746:	bf00      	nop
 8001748:	0800b830 	.word	0x0800b830
 800174c:	20000660 	.word	0x20000660
 8001750:	200006b8 	.word	0x200006b8
 8001754:	0800b868 	.word	0x0800b868
 8001758:	20000668 	.word	0x20000668
 800175c:	0800b888 	.word	0x0800b888

08001760 <superAlignment>:

void superAlignment(double precision)
{
 8001760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	ed87 0b02 	vstr	d0, [r7, #8]
  printf("Super Alignment Started.\r\n");
 800176c:	4872      	ldr	r0, [pc, #456]	; (8001938 <superAlignment+0x1d8>)
 800176e:	f007 ff61 	bl	8009634 <puts>
  
  while (1)
  {
    while((timel_fin==1 && timer_fin ==1)!=1)
 8001772:	e002      	b.n	800177a <superAlignment+0x1a>
      {
        HAL_Delay(1);
 8001774:	2001      	movs	r0, #1
 8001776:	f003 f813 	bl	80047a0 <HAL_Delay>
    while((timel_fin==1 && timer_fin ==1)!=1)
 800177a:	4b70      	ldr	r3, [pc, #448]	; (800193c <superAlignment+0x1dc>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d105      	bne.n	800178e <superAlignment+0x2e>
 8001782:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <superAlignment+0x1e0>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <superAlignment+0x2e>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <superAlignment+0x30>
 800178e:	2300      	movs	r3, #0
 8001790:	2b01      	cmp	r3, #1
 8001792:	d1ef      	bne.n	8001774 <superAlignment+0x14>
      }
      //printf("cm left = %.3f, cm right = %.3f\r\n", cml, cmr);
      //cml+=1;
      

    if((cml-cmr<precision) && (cml-cmr)>(-1*precision))
 8001794:	4b6b      	ldr	r3, [pc, #428]	; (8001944 <superAlignment+0x1e4>)
 8001796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179a:	4b6b      	ldr	r3, [pc, #428]	; (8001948 <superAlignment+0x1e8>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe fd9a 	bl	80002d8 <__aeabi_dsub>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017ac:	f7ff f9dc 	bl	8000b68 <__aeabi_dcmpgt>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d062      	beq.n	800187c <superAlignment+0x11c>
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <superAlignment+0x1e4>)
 80017b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017bc:	4b62      	ldr	r3, [pc, #392]	; (8001948 <superAlignment+0x1e8>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f7fe fd89 	bl	80002d8 <__aeabi_dsub>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	68bc      	ldr	r4, [r7, #8]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017d6:	4622      	mov	r2, r4
 80017d8:	462b      	mov	r3, r5
 80017da:	f7ff f9c5 	bl	8000b68 <__aeabi_dcmpgt>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d04b      	beq.n	800187c <superAlignment+0x11c>
    {
      //double check
      Forward(0);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff fdcd 	bl	8001384 <Forward>
      drive();
 80017ea:	f7ff fd63 	bl	80012b4 <drive>
      HAL_Delay(500);
 80017ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017f2:	f002 ffd5 	bl	80047a0 <HAL_Delay>

      printf("Super Alignment Finished.\r\n");
 80017f6:	4855      	ldr	r0, [pc, #340]	; (800194c <superAlignment+0x1ec>)
 80017f8:	f007 ff1c 	bl	8009634 <puts>
      Forward(0);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff fdc1 	bl	8001384 <Forward>
      drive();
 8001802:	f7ff fd57 	bl	80012b4 <drive>
      if((cml-cmr<precision) && (cml-cmr)>(-1*precision))
 8001806:	4b4f      	ldr	r3, [pc, #316]	; (8001944 <superAlignment+0x1e4>)
 8001808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800180c:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <superAlignment+0x1e8>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe fd61 	bl	80002d8 <__aeabi_dsub>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800181e:	f7ff f9a3 	bl	8000b68 <__aeabi_dcmpgt>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d100      	bne.n	800182a <superAlignment+0xca>
        toggleLD2(500);
        return;
      }
      else
      {
        continue;
 8001828:	e080      	b.n	800192c <superAlignment+0x1cc>
      if((cml-cmr<precision) && (cml-cmr)>(-1*precision))
 800182a:	4b46      	ldr	r3, [pc, #280]	; (8001944 <superAlignment+0x1e4>)
 800182c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001830:	4b45      	ldr	r3, [pc, #276]	; (8001948 <superAlignment+0x1e8>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe fd4f 	bl	80002d8 <__aeabi_dsub>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001852:	f7ff f989 	bl	8000b68 <__aeabi_dcmpgt>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d100      	bne.n	800185e <superAlignment+0xfe>
        continue;
 800185c:	e066      	b.n	800192c <superAlignment+0x1cc>
        HAL_GPIO_WritePin(ldr_GPIO_Port,ldr_Pin,GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2102      	movs	r1, #2
 8001862:	483b      	ldr	r0, [pc, #236]	; (8001950 <superAlignment+0x1f0>)
 8001864:	f003 fa50 	bl	8004d08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ldg_GPIO_Port,ldg_Pin,GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	2104      	movs	r1, #4
 800186c:	4838      	ldr	r0, [pc, #224]	; (8001950 <superAlignment+0x1f0>)
 800186e:	f003 fa4b 	bl	8004d08 <HAL_GPIO_WritePin>
        toggleLD2(500);
 8001872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001876:	f7ff fb61 	bl	8000f3c <toggleLD2>
        return;
 800187a:	e058      	b.n	800192e <superAlignment+0x1ce>
      }
    }
    else
    {
      Inputultra = cml-cmr;
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <superAlignment+0x1e4>)
 800187e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <superAlignment+0x1e8>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe fd26 	bl	80002d8 <__aeabi_dsub>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4930      	ldr	r1, [pc, #192]	; (8001954 <superAlignment+0x1f4>)
 8001892:	e9c1 2300 	strd	r2, r3, [r1]
      if (PID_Compute(&myPIDultra)==_FALSE)
 8001896:	4830      	ldr	r0, [pc, #192]	; (8001958 <superAlignment+0x1f8>)
 8001898:	f002 f862 	bl	8003960 <PID_Compute>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <superAlignment+0x148>
        printf("PID_Compute for ultra error\r\n");
 80018a2:	482e      	ldr	r0, [pc, #184]	; (800195c <superAlignment+0x1fc>)
 80018a4:	f007 fec6 	bl	8009634 <puts>
      printf("Outputultra = %.3f\r\n", Outputultra);
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <superAlignment+0x200>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	482d      	ldr	r0, [pc, #180]	; (8001964 <superAlignment+0x204>)
 80018b0:	f007 fe3a 	bl	8009528 <iprintf>
  
      if (Outputultra > 0)
 80018b4:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <superAlignment+0x200>)
 80018b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	f7ff f951 	bl	8000b68 <__aeabi_dcmpgt>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00f      	beq.n	80018ec <superAlignment+0x18c>
      {
        Forward((uint8_t)(Outputultra));
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <superAlignment+0x200>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	f7ff f98f 	bl	8000bf8 <__aeabi_d2uiz>
 80018da:	4603      	mov	r3, r0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fd50 	bl	8001384 <Forward>
        xflag=1;
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <superAlignment+0x208>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e011      	b.n	8001910 <superAlignment+0x1b0>
      }
      else
      {
        Forward((int)(-1*Outputultra));
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <superAlignment+0x200>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	4690      	mov	r8, r2
 80018f4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80018f8:	4640      	mov	r0, r8
 80018fa:	4649      	mov	r1, r9
 80018fc:	f7ff f954 	bl	8000ba8 <__aeabi_d2iz>
 8001900:	4603      	mov	r3, r0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fd3d 	bl	8001384 <Forward>
        yflag=1;
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <superAlignment+0x20c>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
      }
      drive();
 8001910:	f7ff fcd0 	bl	80012b4 <drive>

      HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8001914:	2102      	movs	r1, #2
 8001916:	480e      	ldr	r0, [pc, #56]	; (8001950 <superAlignment+0x1f0>)
 8001918:	f003 fa0e 	bl	8004d38 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 800191c:	2104      	movs	r1, #4
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <superAlignment+0x1f0>)
 8001920:	f003 fa0a 	bl	8004d38 <HAL_GPIO_TogglePin>
      HAL_Delay(300);
 8001924:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001928:	f002 ff3a 	bl	80047a0 <HAL_Delay>
    while((timel_fin==1 && timer_fin ==1)!=1)
 800192c:	e725      	b.n	800177a <superAlignment+0x1a>
    }
  }
}
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001936:	bf00      	nop
 8001938:	0800b8a0 	.word	0x0800b8a0
 800193c:	20000605 	.word	0x20000605
 8001940:	20000621 	.word	0x20000621
 8001944:	20000618 	.word	0x20000618
 8001948:	20000638 	.word	0x20000638
 800194c:	0800b8bc 	.word	0x0800b8bc
 8001950:	48000400 	.word	0x48000400
 8001954:	20000660 	.word	0x20000660
 8001958:	200006b8 	.word	0x200006b8
 800195c:	0800b868 	.word	0x0800b868
 8001960:	20000668 	.word	0x20000668
 8001964:	0800b888 	.word	0x0800b888
 8001968:	2000087c 	.word	0x2000087c
 800196c:	20000884 	.word	0x20000884

08001970 <hc12send>:

uint8_t hc12send(uint8_t data)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  return HAL_UART_Transmit(&huart5, &data, 1, 100);
 800197a:	1df9      	adds	r1, r7, #7
 800197c:	2364      	movs	r3, #100	; 0x64
 800197e:	2201      	movs	r2, #1
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <hc12send+0x20>)
 8001982:	f006 fa17 	bl	8007db4 <HAL_UART_Transmit>
 8001986:	4603      	mov	r3, r0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000324 	.word	0x20000324

08001994 <atkAngleRound>:
{
  return HAL_UART_Receive(&huart3, &openmv_instrction, 7, 100);
}

int atkAngleRound(int a)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return ((a + 360) % 360);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <atkAngleRound+0x34>)
 80019a4:	fb82 1203 	smull	r1, r2, r2, r3
 80019a8:	441a      	add	r2, r3
 80019aa:	1211      	asrs	r1, r2, #8
 80019ac:	17da      	asrs	r2, r3, #31
 80019ae:	1a8a      	subs	r2, r1, r2
 80019b0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80019b4:	fb01 f202 	mul.w	r2, r1, r2
 80019b8:	1a9a      	subs	r2, r3, r2
 80019ba:	4613      	mov	r3, r2
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	b60b60b7 	.word	0xb60b60b7

080019cc <ATKPrcess>:

void ATKPrcess() // update ATK value
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0a0      	sub	sp, #128	; 0x80
 80019d0:	af00      	add	r7, sp, #0
  int r = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  char ATKbuf[100];

  UART_ENABLE_RE(huart1);
 80019d6:	4b5d      	ldr	r3, [pc, #372]	; (8001b4c <ATKPrcess+0x180>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b5b      	ldr	r3, [pc, #364]	; (8001b4c <ATKPrcess+0x180>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0204 	orr.w	r2, r2, #4
 80019e4:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Receive(&huart1, (uint8_t *)ATKbuf, 60, HAL_MAX_DELAY) == HAL_ERROR) // Read frames from ATK
 80019e6:	f107 010c 	add.w	r1, r7, #12
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	223c      	movs	r2, #60	; 0x3c
 80019f0:	4856      	ldr	r0, [pc, #344]	; (8001b4c <ATKPrcess+0x180>)
 80019f2:	f006 fa75 	bl	8007ee0 <HAL_UART_Receive>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d10a      	bne.n	8001a12 <ATKPrcess+0x46>
  {
    UART_DISABLE_RE(huart1); // error
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <ATKPrcess+0x180>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b52      	ldr	r3, [pc, #328]	; (8001b4c <ATKPrcess+0x180>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0204 	bic.w	r2, r2, #4
 8001a0a:	601a      	str	r2, [r3, #0]
    ATKPrcess();
 8001a0c:	f7ff ffde 	bl	80019cc <ATKPrcess>
    return;
 8001a10:	e098      	b.n	8001b44 <ATKPrcess+0x178>
  }
  UART_DISABLE_RE(huart1);
 8001a12:	4b4e      	ldr	r3, [pc, #312]	; (8001b4c <ATKPrcess+0x180>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <ATKPrcess+0x180>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0204 	bic.w	r2, r2, #4
 8001a20:	601a      	str	r2, [r3, #0]
  // SendPC(pp, 4);
  // SendPC(ATKbuf, 30);

  char ATKframes[10];

  for (r = 2; r < 60; r++)
 8001a22:	2302      	movs	r3, #2
 8001a24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a26:	e02f      	b.n	8001a88 <ATKPrcess+0xbc>
  { // Find the Report message
    if ((ATKbuf[r - 2] == 0x55 && ATKbuf[r - 1] == 0x53))
 8001a28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a2a:	3b02      	subs	r3, #2
 8001a2c:	3380      	adds	r3, #128	; 0x80
 8001a2e:	443b      	add	r3, r7
 8001a30:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8001a34:	2b55      	cmp	r3, #85	; 0x55
 8001a36:	d124      	bne.n	8001a82 <ATKPrcess+0xb6>
 8001a38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	3380      	adds	r3, #128	; 0x80
 8001a3e:	443b      	add	r3, r7
 8001a40:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8001a44:	2b53      	cmp	r3, #83	; 0x53
 8001a46:	d11c      	bne.n	8001a82 <ATKPrcess+0xb6>
    {
      int i = 0, N = 8;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	677b      	str	r3, [r7, #116]	; 0x74
      char *tmp = &ATKbuf[r];
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a56:	4413      	add	r3, r2
 8001a58:	673b      	str	r3, [r7, #112]	; 0x70

      for (i = 0; i < N; i++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a5e:	e00b      	b.n	8001a78 <ATKPrcess+0xac>
      {
        ATKframes[i] = tmp[i];
 8001a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a64:	4413      	add	r3, r2
 8001a66:	7819      	ldrb	r1, [r3, #0]
 8001a68:	463a      	mov	r2, r7
 8001a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a6c:	4413      	add	r3, r2
 8001a6e:	460a      	mov	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < N; i++)
 8001a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a74:	3301      	adds	r3, #1
 8001a76:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbef      	blt.n	8001a60 <ATKPrcess+0x94>
      }
      break;
 8001a80:	e005      	b.n	8001a8e <ATKPrcess+0xc2>
  for (r = 2; r < 60; r++)
 8001a82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a84:	3301      	adds	r3, #1
 8001a86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a8a:	2b3b      	cmp	r3, #59	; 0x3b
 8001a8c:	ddcc      	ble.n	8001a28 <ATKPrcess+0x5c>
    }
  }

  if (r == 60) // Do not find the correct reply
 8001a8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a90:	2b3c      	cmp	r3, #60	; 0x3c
 8001a92:	d102      	bne.n	8001a9a <ATKPrcess+0xce>
  {
    ATKPrcess();
 8001a94:	f7ff ff9a 	bl	80019cc <ATKPrcess>
    return;
 8001a98:	e054      	b.n	8001b44 <ATKPrcess+0x178>
  }

  roll = (float)((int16_t)(ATKframes[1] << 8) | ATKframes[0]) / 32768 * 180;
 8001a9a:	787b      	ldrb	r3, [r7, #1]
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	783b      	ldrb	r3, [r7, #0]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aae:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001b50 <ATKPrcess+0x184>
 8001ab2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001b54 <ATKPrcess+0x188>
 8001aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <ATKPrcess+0x18c>)
 8001ac0:	edc3 7a00 	vstr	s15, [r3]
  pitch = (float)((int16_t)(ATKframes[3] << 8) | ATKframes[2]) / 32768 * 180;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	78bb      	ldrb	r3, [r7, #2]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001b50 <ATKPrcess+0x184>
 8001adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001b54 <ATKPrcess+0x188>
 8001ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <ATKPrcess+0x190>)
 8001aea:	edc3 7a00 	vstr	s15, [r3]
  yaw = (float)((int16_t)(ATKframes[5] << 8) | ATKframes[4]) / 32768 * 180;
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	793b      	ldrb	r3, [r7, #4]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b02:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001b50 <ATKPrcess+0x184>
 8001b06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001b54 <ATKPrcess+0x188>
 8001b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <ATKPrcess+0x194>)
 8001b14:	edc3 7a00 	vstr	s15, [r3]
  selfAngelint = ((int)yaw + 180) % 360;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <ATKPrcess+0x194>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b22:	ee17 3a90 	vmov	r3, s15
 8001b26:	33b4      	adds	r3, #180	; 0xb4
 8001b28:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <ATKPrcess+0x198>)
 8001b2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2e:	441a      	add	r2, r3
 8001b30:	1211      	asrs	r1, r2, #8
 8001b32:	17da      	asrs	r2, r3, #31
 8001b34:	1a8a      	subs	r2, r1, r2
 8001b36:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b3a:	fb01 f202 	mul.w	r2, r1, r2
 8001b3e:	1a9a      	subs	r2, r3, r2
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <ATKPrcess+0x19c>)
 8001b42:	601a      	str	r2, [r3, #0]
  // qwq[0] = (int)(selfAngelint/100) + '0';
  // qwq[1] = (int)(selfAngelint/10)%10 + '0';
  // qwq[2] = selfAngelint%10 + '0';
  // qwq[3] = '\n';
  // HAL_UART_Transmit(&huart5, qwq, 4, HAL_MAX_DELAY);
}
 8001b44:	3780      	adds	r7, #128	; 0x80
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200003b4 	.word	0x200003b4
 8001b50:	47000000 	.word	0x47000000
 8001b54:	43340000 	.word	0x43340000
 8001b58:	20000888 	.word	0x20000888
 8001b5c:	2000088c 	.word	0x2000088c
 8001b60:	20000890 	.word	0x20000890
 8001b64:	b60b60b7 	.word	0xb60b60b7
 8001b68:	20000894 	.word	0x20000894

08001b6c <Set_angle>:

void Set_angle(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t angle, uint32_t countPeriod, uint32_t CycleTime)
{
 8001b6c:	b5b0      	push	{r4, r5, r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71fb      	strb	r3, [r7, #7]
  uint16_t compare_value = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	82fb      	strh	r3, [r7, #22]
  if (angle <= 180)
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	2bb4      	cmp	r3, #180	; 0xb4
 8001b84:	d861      	bhi.n	8001c4a <Set_angle+0xde>
  {
    compare_value = 0.5 * countPeriod / CycleTime + angle * countPeriod / CycleTime / 90; // compute the compare_value
 8001b86:	6838      	ldr	r0, [r7, #0]
 8001b88:	f7fe fce4 	bl	8000554 <__aeabi_ui2d>
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <Set_angle+0xe8>)
 8001b92:	f7fe fd59 	bl	8000648 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4614      	mov	r4, r2
 8001b9c:	461d      	mov	r5, r3
 8001b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ba0:	f7fe fcd8 	bl	8000554 <__aeabi_ui2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4620      	mov	r0, r4
 8001baa:	4629      	mov	r1, r5
 8001bac:	f7fe fe76 	bl	800089c <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	fb03 f202 	mul.w	r2, r3, r2
 8001bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <Set_angle+0xec>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcbf 	bl	8000554 <__aeabi_ui2d>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fb7d 	bl	80002dc <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7ff f805 	bl	8000bf8 <__aeabi_d2uiz>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	82fb      	strh	r3, [r7, #22]
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d104      	bne.n	8001c02 <Set_angle+0x96>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	8afa      	ldrh	r2, [r7, #22]
 8001bfe:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001c00:	e023      	b.n	8001c4a <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d104      	bne.n	8001c12 <Set_angle+0xa6>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	8afb      	ldrh	r3, [r7, #22]
 8001c0e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c10:	e01b      	b.n	8001c4a <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d104      	bne.n	8001c22 <Set_angle+0xb6>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	8afb      	ldrh	r3, [r7, #22]
 8001c1e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001c20:	e013      	b.n	8001c4a <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b0c      	cmp	r3, #12
 8001c26:	d104      	bne.n	8001c32 <Set_angle+0xc6>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	8afb      	ldrh	r3, [r7, #22]
 8001c2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c30:	e00b      	b.n	8001c4a <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b10      	cmp	r3, #16
 8001c36:	d104      	bne.n	8001c42 <Set_angle+0xd6>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	8afb      	ldrh	r3, [r7, #22]
 8001c3e:	6493      	str	r3, [r2, #72]	; 0x48
}
 8001c40:	e003      	b.n	8001c4a <Set_angle+0xde>
    __HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	8afb      	ldrh	r3, [r7, #22]
 8001c48:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bdb0      	pop	{r4, r5, r7, pc}
 8001c52:	bf00      	nop
 8001c54:	3fe00000 	.word	0x3fe00000
 8001c58:	b60b60b7 	.word	0xb60b60b7

08001c5c <GetOpemMv>:

int GetOpemMv() // Return Turn Angle
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
  printf("IN GetOpenmv\r\n");
 8001c62:	4844      	ldr	r0, [pc, #272]	; (8001d74 <GetOpemMv+0x118>)
 8001c64:	f007 fce6 	bl	8009634 <puts>
  uint8_t r = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	75fb      	strb	r3, [r7, #23]
  char Mvbuf[10];
  char *frame;
  int TurnAngle = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]

  UART_ENABLE_RE(huart3);
 8001c70:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <GetOpemMv+0x11c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <GetOpemMv+0x11c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0204 	orr.w	r2, r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Receive(&huart3, (uint8_t *)Mvbuf, 10, HAL_MAX_DELAY) == HAL_ERROR) // Read frames from ATK
 8001c80:	4639      	mov	r1, r7
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	220a      	movs	r2, #10
 8001c88:	483b      	ldr	r0, [pc, #236]	; (8001d78 <GetOpemMv+0x11c>)
 8001c8a:	f006 f929 	bl	8007ee0 <HAL_UART_Receive>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d109      	bne.n	8001ca8 <GetOpemMv+0x4c>
  {
    UART_DISABLE_RE(huart3); // error
 8001c94:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <GetOpemMv+0x11c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <GetOpemMv+0x11c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0204 	bic.w	r2, r2, #4
 8001ca2:	601a      	str	r2, [r3, #0]
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e060      	b.n	8001d6a <GetOpemMv+0x10e>
  }
  UART_DISABLE_RE(huart3);
 8001ca8:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <GetOpemMv+0x11c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <GetOpemMv+0x11c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0204 	bic.w	r2, r2, #4
 8001cb6:	601a      	str	r2, [r3, #0]

  for (r = 0; r < 5; r++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	75fb      	strb	r3, [r7, #23]
 8001cbc:	e048      	b.n	8001d50 <GetOpemMv+0xf4>
  {
    if (Mvbuf[r] == 'a')
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	3318      	adds	r3, #24
 8001cc2:	443b      	add	r3, r7
 8001cc4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001cc8:	2b61      	cmp	r3, #97	; 0x61
 8001cca:	d13e      	bne.n	8001d4a <GetOpemMv+0xee>
    {
      frame = Mvbuf + r;
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	463a      	mov	r2, r7
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
      // printf("%s\r\n", frame);
      if (frame[1] == '1')
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b31      	cmp	r3, #49	; 0x31
 8001cdc:	d117      	bne.n	8001d0e <GetOpemMv+0xb2>
      {
        TurnAngle = (frame[2] - '0') * 100 + (frame[3] - '0') * 10 + (frame[4] - '0');
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3b30      	subs	r3, #48	; 0x30
 8001ce6:	2264      	movs	r2, #100	; 0x64
 8001ce8:	fb02 f103 	mul.w	r1, r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3303      	adds	r3, #3
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	18ca      	adds	r2, r1, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3304      	adds	r3, #4
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	3b30      	subs	r3, #48	; 0x30
 8001d08:	4413      	add	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        break;
 8001d0c:	e023      	b.n	8001d56 <GetOpemMv+0xfa>
      }
      else if (frame[1] == '2')
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3301      	adds	r3, #1
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b32      	cmp	r3, #50	; 0x32
 8001d16:	d118      	bne.n	8001d4a <GetOpemMv+0xee>
      {
        TurnAngle = -((frame[2] - '0') * 100 + (frame[3] - '0') * 10 + (frame[4] - '0'));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	3b30      	subs	r3, #48	; 0x30
 8001d20:	2264      	movs	r2, #100	; 0x64
 8001d22:	fb02 f103 	mul.w	r1, r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3303      	adds	r3, #3
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	18ca      	adds	r2, r1, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	3b30      	subs	r3, #48	; 0x30
 8001d42:	4413      	add	r3, r2
 8001d44:	425b      	negs	r3, r3
 8001d46:	613b      	str	r3, [r7, #16]
        break;
 8001d48:	e005      	b.n	8001d56 <GetOpemMv+0xfa>
  for (r = 0; r < 5; r++)
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	75fb      	strb	r3, [r7, #23]
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d9b3      	bls.n	8001cbe <GetOpemMv+0x62>
      }
    }
  }
  if (Mvbuf[r] == 'a')
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
 8001d58:	3318      	adds	r3, #24
 8001d5a:	443b      	add	r3, r7
 8001d5c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d60:	2b61      	cmp	r3, #97	; 0x61
 8001d62:	d101      	bne.n	8001d68 <GetOpemMv+0x10c>
    return TurnAngle;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	e000      	b.n	8001d6a <GetOpemMv+0x10e>
  return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	0800b8d8 	.word	0x0800b8d8
 8001d78:	20000444 	.word	0x20000444

08001d7c <walkStraight>:
  if (Mvbuf[0] == 'b' && Mvbuf[1] == '3')
    return '3';
}

void walkStraight() // Return Turn Angle
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
  ATKPrcess();
 8001d82:	f7ff fe23 	bl	80019cc <ATKPrcess>
  int relativeAngle = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]

  if(atkAngleRound(selfAngelint - initial_selfAngelint) > 180)
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <walkStraight+0x68>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <walkStraight+0x6c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fdfd 	bl	8001994 <atkAngleRound>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2bb4      	cmp	r3, #180	; 0xb4
 8001d9e:	dd0b      	ble.n	8001db8 <walkStraight+0x3c>
    relativeAngle = -1 * atkAngleRound(initial_selfAngelint - selfAngelint);
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <walkStraight+0x6c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <walkStraight+0x68>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fdf2 	bl	8001994 <atkAngleRound>
 8001db0:	4603      	mov	r3, r0
 8001db2:	425b      	negs	r3, r3
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	e008      	b.n	8001dca <walkStraight+0x4e>
  else
    relativeAngle =  atkAngleRound((selfAngelint - initial_selfAngelint));
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <walkStraight+0x68>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <walkStraight+0x6c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fde6 	bl	8001994 <atkAngleRound>
 8001dc8:	6078      	str	r0, [r7, #4]

  gyroAlignment(relativeAngle);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7fe fbd2 	bl	8000574 <__aeabi_i2d>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	ec43 2b10 	vmov	d0, r2, r3
 8001dd8:	f7ff fb88 	bl	80014ec <gyroAlignment>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000894 	.word	0x20000894
 8001de8:	20000898 	.word	0x20000898

08001dec <turn_Angle>:

void turn_Angle(int angle, int direction)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	; 0x30
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  int aimAngle = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
  int iniAngle = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
  int comAngle[3];
  int tolAngle = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  int avgAngle = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  int n = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t flag = 1;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ATKPrcess();
 8001e10:	f7ff fddc 	bl	80019cc <ATKPrcess>
  iniAngle = selfAngelint;
 8001e14:	4b7d      	ldr	r3, [pc, #500]	; (800200c <turn_Angle+0x220>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61fb      	str	r3, [r7, #28]

  if (direction == 1)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	f040 80fd 	bne.w	800201c <turn_Angle+0x230>
  {
    Forward(0);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff faae 	bl	8001384 <Forward>
    // Left(0);
    // Turn_Left(300); //增大目前角度
    // drive();

    Forward(5);
 8001e28:	2005      	movs	r0, #5
 8001e2a:	f7ff faab 	bl	8001384 <Forward>
    xflag=1;
 8001e2e:	4b78      	ldr	r3, [pc, #480]	; (8002010 <turn_Angle+0x224>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
    drive();
 8001e34:	f7ff fa3e 	bl	80012b4 <drive>

    ATKPrcess();
 8001e38:	f7ff fdc8 	bl	80019cc <ATKPrcess>
    iniAngle = selfAngelint;
 8001e3c:	4b73      	ldr	r3, [pc, #460]	; (800200c <turn_Angle+0x220>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61fb      	str	r3, [r7, #28]
    comAngle[n] = atkAngleRound(selfAngelint - iniAngle);
 8001e42:	4b72      	ldr	r3, [pc, #456]	; (800200c <turn_Angle+0x220>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fda2 	bl	8001994 <atkAngleRound>
 8001e50:	4602      	mov	r2, r0
 8001e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	3330      	adds	r3, #48	; 0x30
 8001e58:	443b      	add	r3, r7
 8001e5a:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 8001e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	3330      	adds	r3, #48	; 0x30
 8001e64:	443b      	add	r3, r7
 8001e66:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6c:	4413      	add	r3, r2
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 8001e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	4b67      	ldr	r3, [pc, #412]	; (8002014 <turn_Angle+0x228>)
 8001e76:	fb83 3102 	smull	r3, r1, r3, r2
 8001e7a:	17d3      	asrs	r3, r2, #31
 8001e7c:	1ac9      	subs	r1, r1, r3
 8001e7e:	460b      	mov	r3, r1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	440b      	add	r3, r1
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28

    ATKPrcess();
 8001e88:	f7ff fda0 	bl	80019cc <ATKPrcess>
    comAngle[n] = atkAngleRound(selfAngelint - iniAngle);
 8001e8c:	4b5f      	ldr	r3, [pc, #380]	; (800200c <turn_Angle+0x220>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fd7d 	bl	8001994 <atkAngleRound>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	3330      	adds	r3, #48	; 0x30
 8001ea2:	443b      	add	r3, r7
 8001ea4:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	3330      	adds	r3, #48	; 0x30
 8001eae:	443b      	add	r3, r7
 8001eb0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eb6:	4413      	add	r3, r2
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 8001eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	4b55      	ldr	r3, [pc, #340]	; (8002014 <turn_Angle+0x228>)
 8001ec0:	fb83 3102 	smull	r3, r1, r3, r2
 8001ec4:	17d3      	asrs	r3, r2, #31
 8001ec6:	1ac9      	subs	r1, r1, r3
 8001ec8:	460b      	mov	r3, r1
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	440b      	add	r3, r1
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28

    ATKPrcess();
 8001ed2:	f7ff fd7b 	bl	80019cc <ATKPrcess>
    comAngle[n] = atkAngleRound(selfAngelint - iniAngle);
 8001ed6:	4b4d      	ldr	r3, [pc, #308]	; (800200c <turn_Angle+0x220>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fd58 	bl	8001994 <atkAngleRound>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	3330      	adds	r3, #48	; 0x30
 8001eec:	443b      	add	r3, r7
 8001eee:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 8001ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	3330      	adds	r3, #48	; 0x30
 8001ef8:	443b      	add	r3, r7
 8001efa:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f00:	4413      	add	r3, r2
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	4b42      	ldr	r3, [pc, #264]	; (8002014 <turn_Angle+0x228>)
 8001f0a:	fb83 3102 	smull	r3, r1, r3, r2
 8001f0e:	17d3      	asrs	r3, r2, #31
 8001f10:	1ac9      	subs	r1, r1, r3
 8001f12:	460b      	mov	r3, r1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	440b      	add	r3, r1
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28

    while (1)
    {
      // toggleLD2(10);
      ATKPrcess();
 8001f1c:	f7ff fd56 	bl	80019cc <ATKPrcess>
      tolAngle -= comAngle[n];
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	3330      	adds	r3, #48	; 0x30
 8001f26:	443b      	add	r3, r7
 8001f28:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
      comAngle[n] = atkAngleRound(selfAngelint - iniAngle);
 8001f32:	4b36      	ldr	r3, [pc, #216]	; (800200c <turn_Angle+0x220>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fd2a 	bl	8001994 <atkAngleRound>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	3330      	adds	r3, #48	; 0x30
 8001f48:	443b      	add	r3, r7
 8001f4a:	f843 2c24 	str.w	r2, [r3, #-36]
      tolAngle += comAngle[n];
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	3330      	adds	r3, #48	; 0x30
 8001f54:	443b      	add	r3, r7
 8001f56:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5c:	4413      	add	r3, r2
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      avgAngle = (int)(tolAngle / 3);
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	4a2c      	ldr	r2, [pc, #176]	; (8002014 <turn_Angle+0x228>)
 8001f64:	fb82 1203 	smull	r1, r2, r2, r3
 8001f68:	17db      	asrs	r3, r3, #31
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	61bb      	str	r3, [r7, #24]
      n = (n + 1) % 3;
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <turn_Angle+0x228>)
 8001f74:	fb83 3102 	smull	r3, r1, r3, r2
 8001f78:	17d3      	asrs	r3, r2, #31
 8001f7a:	1ac9      	subs	r1, r1, r3
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	440b      	add	r3, r1
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
      if (avgAngle >= (angle - 2) && avgAngle <= (angle + 2))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3b02      	subs	r3, #2
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	db05      	blt.n	8001f9c <turn_Angle+0x1b0>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3302      	adds	r3, #2
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	f340 8140 	ble.w	800221c <turn_Angle+0x430>
        break;

      if (avgAngle >= (angle / 2) && avgAngle <= (angle + 3) && flag == 1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	0fda      	lsrs	r2, r3, #31
 8001fa0:	4413      	add	r3, r2
 8001fa2:	105b      	asrs	r3, r3, #1
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	db13      	blt.n	8001fd4 <turn_Angle+0x1e8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3303      	adds	r3, #3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	dc0e      	bgt.n	8001fd4 <turn_Angle+0x1e8>
 8001fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10a      	bne.n	8001fd4 <turn_Angle+0x1e8>
      {
        flag = 2;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        Forward(5);
 8001fc4:	2005      	movs	r0, #5
 8001fc6:	f7ff f9dd 	bl	8001384 <Forward>
        xflag=1;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <turn_Angle+0x224>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
        drive();
 8001fd0:	f7ff f970 	bl	80012b4 <drive>
        // Left(0);
        // Turn_Left(300); //增大目前角度
        // drive();
      }

      if (avgAngle >= (angle + 5) && flag == 2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dd07      	ble.n	8001fee <turn_Angle+0x202>
 8001fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d103      	bne.n	8001fee <turn_Angle+0x202>
      {
        // flag = 0;
        Forward(0);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff f9cc 	bl	8001384 <Forward>
        // Left(0);
        // Turn_Right(200); //增大目前角度
        // drive();
        break;
 8001fec:	e117      	b.n	800221e <turn_Angle+0x432>
      }
      printf("diff=%d, selfangle=%d, avgAngle=%d \r\n", atkAngleRound(selfAngelint - iniAngle), selfAngelint, avgAngle);
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <turn_Angle+0x220>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fccc 	bl	8001994 <atkAngleRound>
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	4b03      	ldr	r3, [pc, #12]	; (800200c <turn_Angle+0x220>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <turn_Angle+0x22c>)
 8002006:	f007 fa8f 	bl	8009528 <iprintf>
      ATKPrcess();
 800200a:	e787      	b.n	8001f1c <turn_Angle+0x130>
 800200c:	20000894 	.word	0x20000894
 8002010:	2000087c 	.word	0x2000087c
 8002014:	55555556 	.word	0x55555556
 8002018:	0800b8e8 	.word	0x0800b8e8
    //   ATKPrcess();

    //   // SendPCint(aimAngle);
    // }
  }
  else if (direction == 2)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b02      	cmp	r3, #2
 8002020:	f040 80fd 	bne.w	800221e <turn_Angle+0x432>
  {
    Forward(0);
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff f9ad 	bl	8001384 <Forward>
    // Left(0);
    // Turn_Right(300);//减小目前角度
    // drive();
    Forward(5);
 800202a:	2005      	movs	r0, #5
 800202c:	f7ff f9aa 	bl	8001384 <Forward>
    yflag=1;
 8002030:	4b81      	ldr	r3, [pc, #516]	; (8002238 <turn_Angle+0x44c>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
    drive();
 8002036:	f7ff f93d 	bl	80012b4 <drive>

    ATKPrcess();
 800203a:	f7ff fcc7 	bl	80019cc <ATKPrcess>
    iniAngle = selfAngelint;
 800203e:	4b7f      	ldr	r3, [pc, #508]	; (800223c <turn_Angle+0x450>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	61fb      	str	r3, [r7, #28]
    comAngle[n] = atkAngleRound(iniAngle - selfAngelint);
 8002044:	4b7d      	ldr	r3, [pc, #500]	; (800223c <turn_Angle+0x450>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fca1 	bl	8001994 <atkAngleRound>
 8002052:	4602      	mov	r2, r0
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	3330      	adds	r3, #48	; 0x30
 800205a:	443b      	add	r3, r7
 800205c:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	3330      	adds	r3, #48	; 0x30
 8002066:	443b      	add	r3, r7
 8002068:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800206c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800206e:	4413      	add	r3, r2
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	4b72      	ldr	r3, [pc, #456]	; (8002240 <turn_Angle+0x454>)
 8002078:	fb83 3102 	smull	r3, r1, r3, r2
 800207c:	17d3      	asrs	r3, r2, #31
 800207e:	1ac9      	subs	r1, r1, r3
 8002080:	460b      	mov	r3, r1
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	440b      	add	r3, r1
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28

    ATKPrcess();
 800208a:	f7ff fc9f 	bl	80019cc <ATKPrcess>
    comAngle[n] = atkAngleRound(iniAngle - selfAngelint);
 800208e:	4b6b      	ldr	r3, [pc, #428]	; (800223c <turn_Angle+0x450>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fc7c 	bl	8001994 <atkAngleRound>
 800209c:	4602      	mov	r2, r0
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	3330      	adds	r3, #48	; 0x30
 80020a4:	443b      	add	r3, r7
 80020a6:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	3330      	adds	r3, #48	; 0x30
 80020b0:	443b      	add	r3, r7
 80020b2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80020b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b8:	4413      	add	r3, r2
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <turn_Angle+0x454>)
 80020c2:	fb83 3102 	smull	r3, r1, r3, r2
 80020c6:	17d3      	asrs	r3, r2, #31
 80020c8:	1ac9      	subs	r1, r1, r3
 80020ca:	460b      	mov	r3, r1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	440b      	add	r3, r1
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28

    ATKPrcess();
 80020d4:	f7ff fc7a 	bl	80019cc <ATKPrcess>
    comAngle[n] = atkAngleRound(iniAngle - selfAngelint);
 80020d8:	4b58      	ldr	r3, [pc, #352]	; (800223c <turn_Angle+0x450>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fc57 	bl	8001994 <atkAngleRound>
 80020e6:	4602      	mov	r2, r0
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	3330      	adds	r3, #48	; 0x30
 80020ee:	443b      	add	r3, r7
 80020f0:	f843 2c24 	str.w	r2, [r3, #-36]
    tolAngle += comAngle[n];
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	3330      	adds	r3, #48	; 0x30
 80020fa:	443b      	add	r3, r7
 80020fc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002102:	4413      	add	r3, r2
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
    n = (n + 1) % 3;
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <turn_Angle+0x454>)
 800210c:	fb83 3102 	smull	r3, r1, r3, r2
 8002110:	17d3      	asrs	r3, r2, #31
 8002112:	1ac9      	subs	r1, r1, r3
 8002114:	460b      	mov	r3, r1
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	440b      	add	r3, r1
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28

    while (1)
    {
      // toggleLD2(10);
      ATKPrcess();
 800211e:	f7ff fc55 	bl	80019cc <ATKPrcess>
      tolAngle -= comAngle[n];
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	3330      	adds	r3, #48	; 0x30
 8002128:	443b      	add	r3, r7
 800212a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800212e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
      comAngle[n] = atkAngleRound(iniAngle - selfAngelint);
 8002134:	4b41      	ldr	r3, [pc, #260]	; (800223c <turn_Angle+0x450>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fc29 	bl	8001994 <atkAngleRound>
 8002142:	4602      	mov	r2, r0
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	3330      	adds	r3, #48	; 0x30
 800214a:	443b      	add	r3, r7
 800214c:	f843 2c24 	str.w	r2, [r3, #-36]
      tolAngle += comAngle[n];
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	3330      	adds	r3, #48	; 0x30
 8002156:	443b      	add	r3, r7
 8002158:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800215c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800215e:	4413      	add	r3, r2
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
      avgAngle = (int)(tolAngle / 3);
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	4a36      	ldr	r2, [pc, #216]	; (8002240 <turn_Angle+0x454>)
 8002166:	fb82 1203 	smull	r1, r2, r2, r3
 800216a:	17db      	asrs	r3, r3, #31
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	61bb      	str	r3, [r7, #24]
      n = (n + 1) % 3;
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	4b32      	ldr	r3, [pc, #200]	; (8002240 <turn_Angle+0x454>)
 8002176:	fb83 3102 	smull	r3, r1, r3, r2
 800217a:	17d3      	asrs	r3, r2, #31
 800217c:	1ac9      	subs	r1, r1, r3
 800217e:	460b      	mov	r3, r1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	440b      	add	r3, r1
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
      if (avgAngle >= (angle - 3) && avgAngle <= (angle + 7))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b03      	subs	r3, #3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	429a      	cmp	r2, r3
 8002190:	db04      	blt.n	800219c <turn_Angle+0x3b0>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3307      	adds	r3, #7
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	429a      	cmp	r2, r3
 800219a:	dd37      	ble.n	800220c <turn_Angle+0x420>
        break;
      if (avgAngle >= (angle / 2) && avgAngle <= (angle + 7) && flag == 1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	0fda      	lsrs	r2, r3, #31
 80021a0:	4413      	add	r3, r2
 80021a2:	105b      	asrs	r3, r3, #1
 80021a4:	461a      	mov	r2, r3
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4293      	cmp	r3, r2
 80021aa:	db13      	blt.n	80021d4 <turn_Angle+0x3e8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3307      	adds	r3, #7
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dc0e      	bgt.n	80021d4 <turn_Angle+0x3e8>
 80021b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d10a      	bne.n	80021d4 <turn_Angle+0x3e8>
      {
        flag = 2;
 80021be:	2302      	movs	r3, #2
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        Forward(5);
 80021c4:	2005      	movs	r0, #5
 80021c6:	f7ff f8dd 	bl	8001384 <Forward>
        yflag=1;
 80021ca:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <turn_Angle+0x44c>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
        drive();
 80021d0:	f7ff f870 	bl	80012b4 <drive>
        // Left(0);
        // Turn_Right(400); //增大目前角度
        // drive();
      }

      if (avgAngle >= (angle + 5) && flag == 2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3304      	adds	r3, #4
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	429a      	cmp	r2, r3
 80021dc:	dd07      	ble.n	80021ee <turn_Angle+0x402>
 80021de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d103      	bne.n	80021ee <turn_Angle+0x402>
      {

        //        flag = 0;
        Forward(0);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff f8cc 	bl	8001384 <Forward>
        //        Left(0);
        //        Turn_Left(200); //增大目前角度
        //        drive();
        break;
 80021ec:	e00f      	b.n	800220e <turn_Angle+0x422>
      }
      printf("diff=%d, selfangle=%d, avgAngle=%d \r\n", atkAngleRound(iniAngle - selfAngelint), selfAngelint, avgAngle);
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <turn_Angle+0x450>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fbcc 	bl	8001994 <atkAngleRound>
 80021fc:	4601      	mov	r1, r0
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <turn_Angle+0x450>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	480f      	ldr	r0, [pc, #60]	; (8002244 <turn_Angle+0x458>)
 8002206:	f007 f98f 	bl	8009528 <iprintf>
      ATKPrcess();
 800220a:	e788      	b.n	800211e <turn_Angle+0x332>
        break;
 800220c:	bf00      	nop
      // printf("diff=%d, selfangle=%d \r\n", atkAngleRound(selfAngelint - iniAngle), selfAngelint);
    }

    Forward(0);
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff f8b8 	bl	8001384 <Forward>
    // ATKPrcess();

    // if (atkAngleRound(iniAngle - selfAngelint) >= (angle-1) && atkAngleRound(iniAngle - selfAngelint) <= (angle+1))
    //   return;

    Forward(0);
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff f8b5 	bl	8001384 <Forward>
 800221a:	e000      	b.n	800221e <turn_Angle+0x432>
        break;
 800221c:	bf00      	nop
    //   ATKPrcess();
    //   // SendPCint(aimAngle);
    // }
  }

  Forward(0);
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff f8b0 	bl	8001384 <Forward>
  // Left(0);
  // Turn_Left(0);
  drive();
 8002224:	f7ff f846 	bl	80012b4 <drive>
  toggleLD2(100);
 8002228:	2064      	movs	r0, #100	; 0x64
 800222a:	f7fe fe87 	bl	8000f3c <toggleLD2>
  return;
 800222e:	bf00      	nop
}
 8002230:	3730      	adds	r7, #48	; 0x30
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000884 	.word	0x20000884
 800223c:	20000894 	.word	0x20000894
 8002240:	55555556 	.word	0x55555556
 8002244:	0800b8e8 	.word	0x0800b8e8

08002248 <celebrate>:
void celebrate()
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  while (1)
  {
    HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 800224c:	2102      	movs	r1, #2
 800224e:	480e      	ldr	r0, [pc, #56]	; (8002288 <celebrate+0x40>)
 8002250:	f002 fd72 	bl	8004d38 <HAL_GPIO_TogglePin>
    toggleLD2(100);
 8002254:	2064      	movs	r0, #100	; 0x64
 8002256:	f7fe fe71 	bl	8000f3c <toggleLD2>
    HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 800225a:	2102      	movs	r1, #2
 800225c:	480a      	ldr	r0, [pc, #40]	; (8002288 <celebrate+0x40>)
 800225e:	f002 fd6b 	bl	8004d38 <HAL_GPIO_TogglePin>
    toggleLD2(100);
 8002262:	2064      	movs	r0, #100	; 0x64
 8002264:	f7fe fe6a 	bl	8000f3c <toggleLD2>
    HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002268:	2104      	movs	r1, #4
 800226a:	4807      	ldr	r0, [pc, #28]	; (8002288 <celebrate+0x40>)
 800226c:	f002 fd64 	bl	8004d38 <HAL_GPIO_TogglePin>
    toggleLD2(100);
 8002270:	2064      	movs	r0, #100	; 0x64
 8002272:	f7fe fe63 	bl	8000f3c <toggleLD2>
    HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002276:	2104      	movs	r1, #4
 8002278:	4803      	ldr	r0, [pc, #12]	; (8002288 <celebrate+0x40>)
 800227a:	f002 fd5d 	bl	8004d38 <HAL_GPIO_TogglePin>
    toggleLD2(100);
 800227e:	2064      	movs	r0, #100	; 0x64
 8002280:	f7fe fe5c 	bl	8000f3c <toggleLD2>
    HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002284:	e7e2      	b.n	800224c <celebrate+0x4>
 8002286:	bf00      	nop
 8002288:	48000400 	.word	0x48000400
 800228c:	00000000 	.word	0x00000000

08002290 <task>:
  }
}
void task (uint8_t numberoftask)
{
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af02      	add	r7, sp, #8
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  switch (numberoftask)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d004      	beq.n	80022aa <task+0x1a>
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	f000 81f0 	beq.w	8002686 <task+0x3f6>
 80022a6:	f000 bcce 	b.w	8002c46 <task+0x9b6>
  {
  case 1:
    /****************TASK 1******************/
    printf("task 1 begin\r\n");
 80022aa:	48b5      	ldr	r0, [pc, #724]	; (8002580 <task+0x2f0>)
 80022ac:	f007 f9c2 	bl	8009634 <puts>
    
    while(((timel_fin==1 && timer_fin ==1)&& timef_fin==1)!=1)
 80022b0:	e002      	b.n	80022b8 <task+0x28>
    {
      //waiting for the counting to finish
      toggleLD2(10);
 80022b2:	200a      	movs	r0, #10
 80022b4:	f7fe fe42 	bl	8000f3c <toggleLD2>
    while(((timel_fin==1 && timer_fin ==1)&& timef_fin==1)!=1)
 80022b8:	4bb2      	ldr	r3, [pc, #712]	; (8002584 <task+0x2f4>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d109      	bne.n	80022d4 <task+0x44>
 80022c0:	4bb1      	ldr	r3, [pc, #708]	; (8002588 <task+0x2f8>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d105      	bne.n	80022d4 <task+0x44>
 80022c8:	4bb0      	ldr	r3, [pc, #704]	; (800258c <task+0x2fc>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <task+0x44>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <task+0x46>
 80022d4:	2300      	movs	r3, #0
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d1eb      	bne.n	80022b2 <task+0x22>
    }

    if (cml<20 && cmr<20)
 80022da:	4bad      	ldr	r3, [pc, #692]	; (8002590 <task+0x300>)
 80022dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	4bab      	ldr	r3, [pc, #684]	; (8002594 <task+0x304>)
 80022e6:	f7fe fc21 	bl	8000b2c <__aeabi_dcmplt>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 816b 	beq.w	80025c8 <task+0x338>
 80022f2:	4ba9      	ldr	r3, [pc, #676]	; (8002598 <task+0x308>)
 80022f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	4ba5      	ldr	r3, [pc, #660]	; (8002594 <task+0x304>)
 80022fe:	f7fe fc15 	bl	8000b2c <__aeabi_dcmplt>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 815f 	beq.w	80025c8 <task+0x338>
    {//alignment 
      printf("Found the bridge\r\n");
 800230a:	48a4      	ldr	r0, [pc, #656]	; (800259c <task+0x30c>)
 800230c:	f007 f992 	bl	8009634 <puts>
      Forward(0);
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff f837 	bl	8001384 <Forward>
      drive();
 8002316:	f7fe ffcd 	bl	80012b4 <drive>
      HAL_Delay(1000);
 800231a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800231e:	f002 fa3f 	bl	80047a0 <HAL_Delay>
      superAlignment(1);
 8002322:	ed9f 0b95 	vldr	d0, [pc, #596]	; 8002578 <task+0x2e8>
 8002326:	f7ff fa1b 	bl	8001760 <superAlignment>
      
      Forward(0);
 800232a:	2000      	movs	r0, #0
 800232c:	f7ff f82a 	bl	8001384 <Forward>
      drive();
 8002330:	f7fe ffc0 	bl	80012b4 <drive>
      HAL_Delay(1000);
 8002334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002338:	f002 fa32 	bl	80047a0 <HAL_Delay>

      //turn right
      Forward(10);
 800233c:	200a      	movs	r0, #10
 800233e:	f7ff f821 	bl	8001384 <Forward>
      printf("Turning right\r\n");
 8002342:	4897      	ldr	r0, [pc, #604]	; (80025a0 <task+0x310>)
 8002344:	f007 f976 	bl	8009634 <puts>
      HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_SET);
 8002348:	2201      	movs	r2, #1
 800234a:	2102      	movs	r1, #2
 800234c:	4895      	ldr	r0, [pc, #596]	; (80025a4 <task+0x314>)
 800234e:	f002 fcdb 	bl	8004d08 <HAL_GPIO_WritePin>

      for(uint8_t i = 0 ;i<4;i++)
 8002352:	2300      	movs	r3, #0
 8002354:	77fb      	strb	r3, [r7, #31]
 8002356:	e00b      	b.n	8002370 <task+0xe0>
      {
        Forward(15);
 8002358:	200f      	movs	r0, #15
 800235a:	f7ff f813 	bl	8001384 <Forward>
        drive();
 800235e:	f7fe ffa9 	bl	80012b4 <drive>
        toggleLD2(400);
 8002362:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002366:	f7fe fde9 	bl	8000f3c <toggleLD2>
      for(uint8_t i = 0 ;i<4;i++)
 800236a:	7ffb      	ldrb	r3, [r7, #31]
 800236c:	3301      	adds	r3, #1
 800236e:	77fb      	strb	r3, [r7, #31]
 8002370:	7ffb      	ldrb	r3, [r7, #31]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d9f0      	bls.n	8002358 <task+0xc8>
      }

      Forward(0);
 8002376:	2000      	movs	r0, #0
 8002378:	f7ff f804 	bl	8001384 <Forward>
      drive();
 800237c:	f7fe ff9a 	bl	80012b4 <drive>
      toggleLD2(500);
 8002380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002384:	f7fe fdda 	bl	8000f3c <toggleLD2>

      turn_Angle(80,2);
 8002388:	2102      	movs	r1, #2
 800238a:	2050      	movs	r0, #80	; 0x50
 800238c:	f7ff fd2e 	bl	8001dec <turn_Angle>

      //finish the turning
      for(uint8_t i = 0 ;i<5;i++)
 8002390:	2300      	movs	r3, #0
 8002392:	77bb      	strb	r3, [r7, #30]
 8002394:	e00b      	b.n	80023ae <task+0x11e>
      {
        Forward(15);
 8002396:	200f      	movs	r0, #15
 8002398:	f7fe fff4 	bl	8001384 <Forward>
        drive();
 800239c:	f7fe ff8a 	bl	80012b4 <drive>
        toggleLD2(400);
 80023a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80023a4:	f7fe fdca 	bl	8000f3c <toggleLD2>
      for(uint8_t i = 0 ;i<5;i++)
 80023a8:	7fbb      	ldrb	r3, [r7, #30]
 80023aa:	3301      	adds	r3, #1
 80023ac:	77bb      	strb	r3, [r7, #30]
 80023ae:	7fbb      	ldrb	r3, [r7, #30]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d9f0      	bls.n	8002396 <task+0x106>
      }
      HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_RESET);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2102      	movs	r1, #2
 80023b8:	487a      	ldr	r0, [pc, #488]	; (80025a4 <task+0x314>)
 80023ba:	f002 fca5 	bl	8004d08 <HAL_GPIO_WritePin>

      //alignment
      Forward(0);
 80023be:	2000      	movs	r0, #0
 80023c0:	f7fe ffe0 	bl	8001384 <Forward>
      drive();
 80023c4:	f7fe ff76 	bl	80012b4 <drive>
      HAL_Delay(1000);
 80023c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023cc:	f002 f9e8 	bl	80047a0 <HAL_Delay>
      superAlignment(1);
 80023d0:	ed9f 0b69 	vldr	d0, [pc, #420]	; 8002578 <task+0x2e8>
 80023d4:	f7ff f9c4 	bl	8001760 <superAlignment>

      Forward(0);
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fe ffd3 	bl	8001384 <Forward>
      drive();
 80023de:	f7fe ff69 	bl	80012b4 <drive>
      HAL_Delay(1000);
 80023e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023e6:	f002 f9db 	bl	80047a0 <HAL_Delay>

      //get initial value
      
      ATKPrcess();
 80023ea:	f7ff faef 	bl	80019cc <ATKPrcess>
      initial_selfAngelint= selfAngelint;
 80023ee:	4b6e      	ldr	r3, [pc, #440]	; (80025a8 <task+0x318>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6e      	ldr	r2, [pc, #440]	; (80025ac <task+0x31c>)
 80023f4:	6013      	str	r3, [r2, #0]

      while (1)
      {
        if(cmf<19)
 80023f6:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <task+0x320>)
 80023f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <task+0x324>)
 8002402:	f7fe fb93 	bl	8000b2c <__aeabi_dcmplt>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d136      	bne.n	800247a <task+0x1ea>
          break;

        Forward(15);
 800240c:	200f      	movs	r0, #15
 800240e:	f7fe ffb9 	bl	8001384 <Forward>
        walkStraight();
 8002412:	f7ff fcb3 	bl	8001d7c <walkStraight>
        drive();
 8002416:	f7fe ff4d 	bl	80012b4 <drive>
        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 800241a:	2102      	movs	r1, #2
 800241c:	4861      	ldr	r0, [pc, #388]	; (80025a4 <task+0x314>)
 800241e:	f002 fc8b 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002422:	2104      	movs	r1, #4
 8002424:	485f      	ldr	r0, [pc, #380]	; (80025a4 <task+0x314>)
 8002426:	f002 fc87 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 800242a:	2032      	movs	r0, #50	; 0x32
 800242c:	f002 f9b8 	bl	80047a0 <HAL_Delay>

        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002430:	2102      	movs	r1, #2
 8002432:	485c      	ldr	r0, [pc, #368]	; (80025a4 <task+0x314>)
 8002434:	f002 fc80 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002438:	2104      	movs	r1, #4
 800243a:	485a      	ldr	r0, [pc, #360]	; (80025a4 <task+0x314>)
 800243c:	f002 fc7c 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 8002440:	2032      	movs	r0, #50	; 0x32
 8002442:	f002 f9ad 	bl	80047a0 <HAL_Delay>

        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002446:	2102      	movs	r1, #2
 8002448:	4856      	ldr	r0, [pc, #344]	; (80025a4 <task+0x314>)
 800244a:	f002 fc75 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 800244e:	2104      	movs	r1, #4
 8002450:	4854      	ldr	r0, [pc, #336]	; (80025a4 <task+0x314>)
 8002452:	f002 fc71 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 8002456:	2032      	movs	r0, #50	; 0x32
 8002458:	f002 f9a2 	bl	80047a0 <HAL_Delay>

        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 800245c:	2102      	movs	r1, #2
 800245e:	4851      	ldr	r0, [pc, #324]	; (80025a4 <task+0x314>)
 8002460:	f002 fc6a 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002464:	2104      	movs	r1, #4
 8002466:	484f      	ldr	r0, [pc, #316]	; (80025a4 <task+0x314>)
 8002468:	f002 fc66 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 800246c:	2032      	movs	r0, #50	; 0x32
 800246e:	f002 f997 	bl	80047a0 <HAL_Delay>

        HAL_Delay(100);
 8002472:	2064      	movs	r0, #100	; 0x64
 8002474:	f002 f994 	bl	80047a0 <HAL_Delay>
        if(cmf<19)
 8002478:	e7bd      	b.n	80023f6 <task+0x166>
          break;
 800247a:	bf00      	nop
      }

      Forward(0);
 800247c:	2000      	movs	r0, #0
 800247e:	f7fe ff81 	bl	8001384 <Forward>
      drive();
 8002482:	f7fe ff17 	bl	80012b4 <drive>
      HAL_Delay(1000);
 8002486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800248a:	f002 f989 	bl	80047a0 <HAL_Delay>

      turn_Angle(80,1);
 800248e:	2101      	movs	r1, #1
 8002490:	2050      	movs	r0, #80	; 0x50
 8002492:	f7ff fcab 	bl	8001dec <turn_Angle>

      Forward(0);
 8002496:	2000      	movs	r0, #0
 8002498:	f7fe ff74 	bl	8001384 <Forward>
      drive();
 800249c:	f7fe ff0a 	bl	80012b4 <drive>
      HAL_Delay(1000);
 80024a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a4:	f002 f97c 	bl	80047a0 <HAL_Delay>
      
      //trace the white line
      superAlignment(1);
 80024a8:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8002578 <task+0x2e8>
 80024ac:	f7ff f958 	bl	8001760 <superAlignment>
      
      Forward(0);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe ff67 	bl	8001384 <Forward>
      drive();
 80024b6:	f7fe fefd 	bl	80012b4 <drive>
      HAL_Delay(1000);
 80024ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024be:	f002 f96f 	bl	80047a0 <HAL_Delay>

      // UART_ENABLE_RE(huart3);
      // HAL_UART_Transmit(&huart3, "task3", 5, HAL_MAX_DELAY);
      // UART_DISABLE_RE(huart3);
      uint32_t time=0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
      ATKPrcess();
 80024c6:	f7ff fa81 	bl	80019cc <ATKPrcess>
      initial_selfAngelint= selfAngelint;
 80024ca:	4b37      	ldr	r3, [pc, #220]	; (80025a8 <task+0x318>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a37      	ldr	r2, [pc, #220]	; (80025ac <task+0x31c>)
 80024d0:	6013      	str	r3, [r2, #0]
        //   }
        //   toggleLD2(250);
        // }
        
        
        if((cml<20||cmr<20)&& time >30)
 80024d2:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <task+0x300>)
 80024d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <task+0x304>)
 80024de:	f7fe fb25 	bl	8000b2c <__aeabi_dcmplt>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <task+0x26e>
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <task+0x308>)
 80024ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4b28      	ldr	r3, [pc, #160]	; (8002594 <task+0x304>)
 80024f4:	f7fe fb1a 	bl	8000b2c <__aeabi_dcmplt>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <task+0x274>
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b1e      	cmp	r3, #30
 8002502:	d859      	bhi.n	80025b8 <task+0x328>
          break;

        
        Forward(15);
 8002504:	200f      	movs	r0, #15
 8002506:	f7fe ff3d 	bl	8001384 <Forward>
        walkStraight();
 800250a:	f7ff fc37 	bl	8001d7c <walkStraight>
        drive();
 800250e:	f7fe fed1 	bl	80012b4 <drive>
        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002512:	2102      	movs	r1, #2
 8002514:	4823      	ldr	r0, [pc, #140]	; (80025a4 <task+0x314>)
 8002516:	f002 fc0f 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 800251a:	2104      	movs	r1, #4
 800251c:	4821      	ldr	r0, [pc, #132]	; (80025a4 <task+0x314>)
 800251e:	f002 fc0b 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 8002522:	2032      	movs	r0, #50	; 0x32
 8002524:	f002 f93c 	bl	80047a0 <HAL_Delay>

        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002528:	2102      	movs	r1, #2
 800252a:	481e      	ldr	r0, [pc, #120]	; (80025a4 <task+0x314>)
 800252c:	f002 fc04 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002530:	2104      	movs	r1, #4
 8002532:	481c      	ldr	r0, [pc, #112]	; (80025a4 <task+0x314>)
 8002534:	f002 fc00 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 8002538:	2032      	movs	r0, #50	; 0x32
 800253a:	f002 f931 	bl	80047a0 <HAL_Delay>

        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 800253e:	2102      	movs	r1, #2
 8002540:	4818      	ldr	r0, [pc, #96]	; (80025a4 <task+0x314>)
 8002542:	f002 fbf9 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002546:	2104      	movs	r1, #4
 8002548:	4816      	ldr	r0, [pc, #88]	; (80025a4 <task+0x314>)
 800254a:	f002 fbf5 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 800254e:	2032      	movs	r0, #50	; 0x32
 8002550:	f002 f926 	bl	80047a0 <HAL_Delay>

        HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002554:	2102      	movs	r1, #2
 8002556:	4813      	ldr	r0, [pc, #76]	; (80025a4 <task+0x314>)
 8002558:	f002 fbee 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 800255c:	2104      	movs	r1, #4
 800255e:	4811      	ldr	r0, [pc, #68]	; (80025a4 <task+0x314>)
 8002560:	f002 fbea 	bl	8004d38 <HAL_GPIO_TogglePin>
        HAL_Delay(50);
 8002564:	2032      	movs	r0, #50	; 0x32
 8002566:	f002 f91b 	bl	80047a0 <HAL_Delay>

        time++;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	3301      	adds	r3, #1
 800256e:	61bb      	str	r3, [r7, #24]
        if((cml<20||cmr<20)&& time >30)
 8002570:	e7af      	b.n	80024d2 <task+0x242>
 8002572:	bf00      	nop
 8002574:	f3af 8000 	nop.w
 8002578:	00000000 	.word	0x00000000
 800257c:	3ff00000 	.word	0x3ff00000
 8002580:	0800b910 	.word	0x0800b910
 8002584:	20000605 	.word	0x20000605
 8002588:	20000621 	.word	0x20000621
 800258c:	20000641 	.word	0x20000641
 8002590:	20000618 	.word	0x20000618
 8002594:	40340000 	.word	0x40340000
 8002598:	20000638 	.word	0x20000638
 800259c:	0800b920 	.word	0x0800b920
 80025a0:	0800b934 	.word	0x0800b934
 80025a4:	48000400 	.word	0x48000400
 80025a8:	20000894 	.word	0x20000894
 80025ac:	20000898 	.word	0x20000898
 80025b0:	20000650 	.word	0x20000650
 80025b4:	40330000 	.word	0x40330000
          break;
 80025b8:	bf00      	nop
      }
      Forward(0);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe fee2 	bl	8001384 <Forward>
      drive();
 80025c0:	f7fe fe78 	bl	80012b4 <drive>
      celebrate();
 80025c4:	f7ff fe40 	bl	8002248 <celebrate>
    }
    openmvAngle = GetOpemMv();
 80025c8:	f7ff fb48 	bl	8001c5c <GetOpemMv>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4ab2      	ldr	r2, [pc, #712]	; (8002898 <task+0x608>)
 80025d0:	6013      	str	r3, [r2, #0]
    // openmvAngle=100;

    Inputopenmv = openmvAngle;
 80025d2:	4bb1      	ldr	r3, [pc, #708]	; (8002898 <task+0x608>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffcc 	bl	8000574 <__aeabi_i2d>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	49ae      	ldr	r1, [pc, #696]	; (800289c <task+0x60c>)
 80025e2:	e9c1 2300 	strd	r2, r3, [r1]
    if (openmvAngle != HAL_ERROR)
 80025e6:	4bac      	ldr	r3, [pc, #688]	; (8002898 <task+0x608>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	f000 8334 	beq.w	8002c58 <task+0x9c8>
    {
      printf("openmvangle=%d\r\n", openmvAngle);
 80025f0:	4ba9      	ldr	r3, [pc, #676]	; (8002898 <task+0x608>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	48aa      	ldr	r0, [pc, #680]	; (80028a0 <task+0x610>)
 80025f8:	f006 ff96 	bl	8009528 <iprintf>

      if (PID_Compute(&myPIDopenmv)==_FALSE)
 80025fc:	48a9      	ldr	r0, [pc, #676]	; (80028a4 <task+0x614>)
 80025fe:	f001 f9af 	bl	8003960 <PID_Compute>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <task+0x37e>
        printf("PID_Compute for OpenMV error\r\n");
 8002608:	48a7      	ldr	r0, [pc, #668]	; (80028a8 <task+0x618>)
 800260a:	f007 f813 	bl	8009634 <puts>

      printf("Outputopenmv = %.3f\r\n", Outputopenmv);
 800260e:	4ba7      	ldr	r3, [pc, #668]	; (80028ac <task+0x61c>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	48a6      	ldr	r0, [pc, #664]	; (80028b0 <task+0x620>)
 8002616:	f006 ff87 	bl	8009528 <iprintf>

      if(Outputopenmv > 0)
 800261a:	4ba4      	ldr	r3, [pc, #656]	; (80028ac <task+0x61c>)
 800261c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	f7fe fa9e 	bl	8000b68 <__aeabi_dcmpgt>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d011      	beq.n	8002656 <task+0x3c6>
      {
        Forward(15);
 8002632:	200f      	movs	r0, #15
 8002634:	f7fe fea6 	bl	8001384 <Forward>
        Turn_Left((int)Outputopenmv);
 8002638:	4b9c      	ldr	r3, [pc, #624]	; (80028ac <task+0x61c>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fab1 	bl	8000ba8 <__aeabi_d2iz>
 8002646:	4603      	mov	r3, r0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe feda 	bl	8001404 <Turn_Left>
        drive();
 8002650:	f7fe fe30 	bl	80012b4 <drive>
 8002654:	e013      	b.n	800267e <task+0x3ee>
      }
      else
      {
        Forward(15);
 8002656:	200f      	movs	r0, #15
 8002658:	f7fe fe94 	bl	8001384 <Forward>
        Turn_Right((int)((-1) * Outputopenmv));
 800265c:	4b93      	ldr	r3, [pc, #588]	; (80028ac <task+0x61c>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	4614      	mov	r4, r2
 8002664:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002668:	4620      	mov	r0, r4
 800266a:	4629      	mov	r1, r5
 800266c:	f7fe fa9c 	bl	8000ba8 <__aeabi_d2iz>
 8002670:	4603      	mov	r3, r0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe feff 	bl	8001478 <Turn_Right>
        drive();
 800267a:	f7fe fe1b 	bl	80012b4 <drive>
      }
      toggleLD2(50);
 800267e:	2032      	movs	r0, #50	; 0x32
 8002680:	f7fe fc5c 	bl	8000f3c <toggleLD2>
      return;
 8002684:	e2e9      	b.n	8002c5a <task+0x9ca>
    }
    /****************TASK 1******************/
    break;
  case 2:
    /****************TASK 2******************/
    printf("task 2 begin\r\n");
 8002686:	488b      	ldr	r0, [pc, #556]	; (80028b4 <task+0x624>)
 8002688:	f006 ffd4 	bl	8009634 <puts>

    if (turnLeftCounter==2 && turnRightCounter==2)
 800268c:	4b8a      	ldr	r3, [pc, #552]	; (80028b8 <task+0x628>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b02      	cmp	r3, #2
 8002692:	f040 80c9 	bne.w	8002828 <task+0x598>
 8002696:	4b89      	ldr	r3, [pc, #548]	; (80028bc <task+0x62c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b02      	cmp	r3, #2
 800269c:	f040 80c4 	bne.w	8002828 <task+0x598>
    {
      printf("Going to the busket.\r\n");
 80026a0:	4887      	ldr	r0, [pc, #540]	; (80028c0 <task+0x630>)
 80026a2:	f006 ffc7 	bl	8009634 <puts>

      superAlignment(1);
 80026a6:	ed9f 0b7a 	vldr	d0, [pc, #488]	; 8002890 <task+0x600>
 80026aa:	f7ff f859 	bl	8001760 <superAlignment>

      for (int i = 0; i < 6; i++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e00b      	b.n	80026cc <task+0x43c>
      {
        Forward(15);
 80026b4:	200f      	movs	r0, #15
 80026b6:	f7fe fe65 	bl	8001384 <Forward>
        drive();
 80026ba:	f7fe fdfb 	bl	80012b4 <drive>
        toggleLD2(500);
 80026be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026c2:	f7fe fc3b 	bl	8000f3c <toggleLD2>
      for (int i = 0; i < 6; i++)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3301      	adds	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	ddf0      	ble.n	80026b4 <task+0x424>
      }
      //stop 
      Forward(0);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe fe56 	bl	8001384 <Forward>
      drive();
 80026d8:	f7fe fdec 	bl	80012b4 <drive>
      toggleLD2(500);
 80026dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026e0:	f7fe fc2c 	bl	8000f3c <toggleLD2>
      //throw the ball
      Set_angle(&htim2,TIM_CHANNEL_1, 150,20000,20);
 80026e4:	2314      	movs	r3, #20
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80026ec:	2296      	movs	r2, #150	; 0x96
 80026ee:	2100      	movs	r1, #0
 80026f0:	4874      	ldr	r0, [pc, #464]	; (80028c4 <task+0x634>)
 80026f2:	f7ff fa3b 	bl	8001b6c <Set_angle>
      toggleLD2(1000);
 80026f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026fa:	f7fe fc1f 	bl	8000f3c <toggleLD2>
      Set_angle(&htim2,TIM_CHANNEL_1, 0,20000,20);
 80026fe:	2314      	movs	r3, #20
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	486e      	ldr	r0, [pc, #440]	; (80028c4 <task+0x634>)
 800270c:	f7ff fa2e 	bl	8001b6c <Set_angle>

      //go back
      for (int i = 0; i < 4; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	e00b      	b.n	800272e <task+0x49e>
      {
        Backward(15);
 8002716:	200f      	movs	r0, #15
 8002718:	f7fe fe54 	bl	80013c4 <Backward>
        drive();
 800271c:	f7fe fdca 	bl	80012b4 <drive>
        toggleLD2(500);
 8002720:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002724:	f7fe fc0a 	bl	8000f3c <toggleLD2>
      for (int i = 0; i < 4; i++)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	3301      	adds	r3, #1
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b03      	cmp	r3, #3
 8002732:	ddf0      	ble.n	8002716 <task+0x486>
      }
      superAlignment(1);
 8002734:	ed9f 0b56 	vldr	d0, [pc, #344]	; 8002890 <task+0x600>
 8002738:	f7ff f812 	bl	8001760 <superAlignment>
      

      //turn right
        //turn on the red led
        HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_SET);
 800273c:	2201      	movs	r2, #1
 800273e:	2102      	movs	r1, #2
 8002740:	4861      	ldr	r0, [pc, #388]	; (80028c8 <task+0x638>)
 8002742:	f002 fae1 	bl	8004d08 <HAL_GPIO_WritePin>

        turn_Angle(90,2);
 8002746:	2102      	movs	r1, #2
 8002748:	205a      	movs	r0, #90	; 0x5a
 800274a:	f7ff fb4f 	bl	8001dec <turn_Angle>

        //finish the turning
        HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	2102      	movs	r1, #2
 8002752:	485d      	ldr	r0, [pc, #372]	; (80028c8 <task+0x638>)
 8002754:	f002 fad8 	bl	8004d08 <HAL_GPIO_WritePin>

      Backward(15);
 8002758:	200f      	movs	r0, #15
 800275a:	f7fe fe33 	bl	80013c4 <Backward>
      drive();
 800275e:	f7fe fda9 	bl	80012b4 <drive>

      while (1)//detect the planter
      {
        while(((timel_fin==1 && timer_fin ==1)&& timef_fin==1)!=1)
 8002762:	e002      	b.n	800276a <task+0x4da>
        {
          //waiting for the counting to finish
          toggleLD2(20);
 8002764:	2014      	movs	r0, #20
 8002766:	f7fe fbe9 	bl	8000f3c <toggleLD2>
        while(((timel_fin==1 && timer_fin ==1)&& timef_fin==1)!=1)
 800276a:	4b58      	ldr	r3, [pc, #352]	; (80028cc <task+0x63c>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d109      	bne.n	8002786 <task+0x4f6>
 8002772:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <task+0x640>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <task+0x4f6>
 800277a:	4b56      	ldr	r3, [pc, #344]	; (80028d4 <task+0x644>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <task+0x4f6>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <task+0x4f8>
 8002786:	2300      	movs	r3, #0
 8002788:	2b01      	cmp	r3, #1
 800278a:	d1eb      	bne.n	8002764 <task+0x4d4>
        }
        if(cml<80||cmr<80)
 800278c:	4b52      	ldr	r3, [pc, #328]	; (80028d8 <task+0x648>)
 800278e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	4b51      	ldr	r3, [pc, #324]	; (80028dc <task+0x64c>)
 8002798:	f7fe f9c8 	bl	8000b2c <__aeabi_dcmplt>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <task+0x528>
 80027a2:	4b4f      	ldr	r3, [pc, #316]	; (80028e0 <task+0x650>)
 80027a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	4b4b      	ldr	r3, [pc, #300]	; (80028dc <task+0x64c>)
 80027ae:	f7fe f9bd 	bl	8000b2c <__aeabi_dcmplt>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <task+0x550>
        {
          Forward(0);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe fde3 	bl	8001384 <Forward>
          drive();
 80027be:	f7fe fd79 	bl	80012b4 <drive>
          toggleLD2(500);
 80027c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027c6:	f7fe fbb9 	bl	8000f3c <toggleLD2>
          break;
 80027ca:	bf00      	nop
        }
        Backward(15);
        drive();
        toggleLD2(500);
      }
      hc12send('a');
 80027cc:	2061      	movs	r0, #97	; 0x61
 80027ce:	f7ff f8cf 	bl	8001970 <hc12send>
      toggleLD2(500);
 80027d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027d6:	f7fe fbb1 	bl	8000f3c <toggleLD2>

      //FINISH THE TASK

      for (uint8_t i = 0; i < 6; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e015      	b.n	800280c <task+0x57c>
        Backward(15);
 80027e0:	200f      	movs	r0, #15
 80027e2:	f7fe fdef 	bl	80013c4 <Backward>
        drive();
 80027e6:	f7fe fd65 	bl	80012b4 <drive>
        toggleLD2(500);
 80027ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027ee:	f7fe fba5 	bl	8000f3c <toggleLD2>
        while(((timel_fin==1 && timer_fin ==1)&& timef_fin==1)!=1)
 80027f2:	e7ba      	b.n	800276a <task+0x4da>
      {
        Backward(15);
 80027f4:	200f      	movs	r0, #15
 80027f6:	f7fe fde5 	bl	80013c4 <Backward>
        drive();
 80027fa:	f7fe fd5b 	bl	80012b4 <drive>
        toggleLD2(500);
 80027fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002802:	f7fe fb9b 	bl	8000f3c <toggleLD2>
      for (uint8_t i = 0; i < 6; i++)
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	3301      	adds	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d9f0      	bls.n	80027f4 <task+0x564>
      }
      
      Backward(0);
 8002812:	2000      	movs	r0, #0
 8002814:	f7fe fdd6 	bl	80013c4 <Backward>
      drive();
 8002818:	f7fe fd4c 	bl	80012b4 <drive>
      celebrate();
 800281c:	f7ff fd14 	bl	8002248 <celebrate>
      
    }

      while((timel_fin==1 && timer_fin ==1)!=1)
 8002820:	e002      	b.n	8002828 <task+0x598>
      {
        //waiting for the counting to finish
        toggleLD2(20);
 8002822:	2014      	movs	r0, #20
 8002824:	f7fe fb8a 	bl	8000f3c <toggleLD2>
      while((timel_fin==1 && timer_fin ==1)!=1)
 8002828:	4b28      	ldr	r3, [pc, #160]	; (80028cc <task+0x63c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <task+0x5ac>
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <task+0x640>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <task+0x5ac>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <task+0x5ae>
 800283c:	2300      	movs	r3, #0
 800283e:	2b01      	cmp	r3, #1
 8002840:	d1ef      	bne.n	8002822 <task+0x592>
        //printf("waiting for the counting to finish\r\n");
      }
      timecount++;
 8002842:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <task+0x654>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <task+0x654>)
 800284a:	6013      	str	r3, [r2, #0]

      //remove strange datas
      if (cml>100)
 800284c:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <task+0x648>)
 800284e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <task+0x658>)
 8002858:	f7fe f986 	bl	8000b68 <__aeabi_dcmpgt>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d048      	beq.n	80028f4 <task+0x664>
      {       
        if(ultraerrorcount_l<2  && lflag != 1)
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <task+0x65c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d80a      	bhi.n	8002880 <task+0x5f0>
 800286a:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <task+0x660>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d006      	beq.n	8002880 <task+0x5f0>
        {
          ultraerrorcount_l++;
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <task+0x65c>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <task+0x65c>)
 800287c:	701a      	strb	r2, [r3, #0]
          return;//skip if there is error data
 800287e:	e1ec      	b.n	8002c5a <task+0x9ca>
        }
        else
        {
          ultraerrorcount_l=0;
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <task+0x65c>)
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
          lflag = 1;
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <task+0x660>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e035      	b.n	80028fa <task+0x66a>
 800288e:	bf00      	nop
 8002890:	00000000 	.word	0x00000000
 8002894:	3ff00000 	.word	0x3ff00000
 8002898:	2000089c 	.word	0x2000089c
 800289c:	20000688 	.word	0x20000688
 80028a0:	0800b944 	.word	0x0800b944
 80028a4:	20000798 	.word	0x20000798
 80028a8:	0800b958 	.word	0x0800b958
 80028ac:	20000690 	.word	0x20000690
 80028b0:	0800b978 	.word	0x0800b978
 80028b4:	0800b990 	.word	0x0800b990
 80028b8:	200008a0 	.word	0x200008a0
 80028bc:	200008a1 	.word	0x200008a1
 80028c0:	0800b9a0 	.word	0x0800b9a0
 80028c4:	20000520 	.word	0x20000520
 80028c8:	48000400 	.word	0x48000400
 80028cc:	20000605 	.word	0x20000605
 80028d0:	20000621 	.word	0x20000621
 80028d4:	20000641 	.word	0x20000641
 80028d8:	20000618 	.word	0x20000618
 80028dc:	40540000 	.word	0x40540000
 80028e0:	20000638 	.word	0x20000638
 80028e4:	20000008 	.word	0x20000008
 80028e8:	40590000 	.word	0x40590000
 80028ec:	20000658 	.word	0x20000658
 80028f0:	2000065a 	.word	0x2000065a
        }
      }
      else{
        lflag = 0;
 80028f4:	4bb6      	ldr	r3, [pc, #728]	; (8002bd0 <task+0x940>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
      }

      if (cmr>100)
 80028fa:	4bb6      	ldr	r3, [pc, #728]	; (8002bd4 <task+0x944>)
 80028fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	4bb4      	ldr	r3, [pc, #720]	; (8002bd8 <task+0x948>)
 8002906:	f7fe f92f 	bl	8000b68 <__aeabi_dcmpgt>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <task+0x6ac>
      {       
        if(ultraerrorcount_r<2  && rflag != 1)
 8002910:	4bb2      	ldr	r3, [pc, #712]	; (8002bdc <task+0x94c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d80a      	bhi.n	800292e <task+0x69e>
 8002918:	4bb1      	ldr	r3, [pc, #708]	; (8002be0 <task+0x950>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d006      	beq.n	800292e <task+0x69e>
        {
          ultraerrorcount_r++;
 8002920:	4bae      	ldr	r3, [pc, #696]	; (8002bdc <task+0x94c>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	4bac      	ldr	r3, [pc, #688]	; (8002bdc <task+0x94c>)
 800292a:	701a      	strb	r2, [r3, #0]
          return;//skip if there is error data
 800292c:	e195      	b.n	8002c5a <task+0x9ca>
        }
        else
        {
          ultraerrorcount_r=0;
 800292e:	4bab      	ldr	r3, [pc, #684]	; (8002bdc <task+0x94c>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
          rflag = 1;
 8002934:	4baa      	ldr	r3, [pc, #680]	; (8002be0 <task+0x950>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e002      	b.n	8002942 <task+0x6b2>
        }
      }
      else{
        rflag = 0;
 800293c:	4ba8      	ldr	r3, [pc, #672]	; (8002be0 <task+0x950>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
      }

      //cml+=1;//remove fixed error

      if ((cmr-cml>50)&& timecount>200)//if the difference is too large, then turn right
 8002942:	4ba4      	ldr	r3, [pc, #656]	; (8002bd4 <task+0x944>)
 8002944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002948:	4ba6      	ldr	r3, [pc, #664]	; (8002be4 <task+0x954>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f7fd fcc3 	bl	80002d8 <__aeabi_dsub>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	4ba2      	ldr	r3, [pc, #648]	; (8002be8 <task+0x958>)
 8002960:	f7fe f902 	bl	8000b68 <__aeabi_dcmpgt>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80f9 	beq.w	8002b5e <task+0x8ce>
 800296c:	4b9f      	ldr	r3, [pc, #636]	; (8002bec <task+0x95c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2bc8      	cmp	r3, #200	; 0xc8
 8002972:	f240 80f4 	bls.w	8002b5e <task+0x8ce>
      {
        if (turnRightCounter == 0)//first edge
 8002976:	4b9e      	ldr	r3, [pc, #632]	; (8002bf0 <task+0x960>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 80a7 	bne.w	8002ace <task+0x83e>
        {
          timecount =0;
 8002980:	4b9a      	ldr	r3, [pc, #616]	; (8002bec <task+0x95c>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
          turnRightCounter++;
 8002986:	4b9a      	ldr	r3, [pc, #616]	; (8002bf0 <task+0x960>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	3301      	adds	r3, #1
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4b98      	ldr	r3, [pc, #608]	; (8002bf0 <task+0x960>)
 8002990:	701a      	strb	r2, [r3, #0]
          //turn on the red led
          printf("Turning right\r\n");
 8002992:	4898      	ldr	r0, [pc, #608]	; (8002bf4 <task+0x964>)
 8002994:	f006 fe4e 	bl	8009634 <puts>
          HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_SET);
 8002998:	2201      	movs	r2, #1
 800299a:	2102      	movs	r1, #2
 800299c:	4896      	ldr	r0, [pc, #600]	; (8002bf8 <task+0x968>)
 800299e:	f002 f9b3 	bl	8004d08 <HAL_GPIO_WritePin>

          for(uint8_t i = 0 ;i<2;i++)
 80029a2:	2300      	movs	r3, #0
 80029a4:	73bb      	strb	r3, [r7, #14]
 80029a6:	e00b      	b.n	80029c0 <task+0x730>
          {
            Forward(15);
 80029a8:	200f      	movs	r0, #15
 80029aa:	f7fe fceb 	bl	8001384 <Forward>
            drive();
 80029ae:	f7fe fc81 	bl	80012b4 <drive>
            toggleLD2(500);
 80029b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029b6:	f7fe fac1 	bl	8000f3c <toggleLD2>
          for(uint8_t i = 0 ;i<2;i++)
 80029ba:	7bbb      	ldrb	r3, [r7, #14]
 80029bc:	3301      	adds	r3, #1
 80029be:	73bb      	strb	r3, [r7, #14]
 80029c0:	7bbb      	ldrb	r3, [r7, #14]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d9f0      	bls.n	80029a8 <task+0x718>
          }

          Forward(0);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fe fcdc 	bl	8001384 <Forward>
          drive();
 80029cc:	f7fe fc72 	bl	80012b4 <drive>
          toggleLD2(500);
 80029d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029d4:	f7fe fab2 	bl	8000f3c <toggleLD2>

          turn_Angle(70,2);
 80029d8:	2102      	movs	r1, #2
 80029da:	2046      	movs	r0, #70	; 0x46
 80029dc:	f7ff fa06 	bl	8001dec <turn_Angle>

          HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_RESET);
 80029e0:	2200      	movs	r2, #0
 80029e2:	2102      	movs	r1, #2
 80029e4:	4884      	ldr	r0, [pc, #528]	; (8002bf8 <task+0x968>)
 80029e6:	f002 f98f 	bl	8004d08 <HAL_GPIO_WritePin>

          ATKPrcess();
 80029ea:	f7fe ffef 	bl	80019cc <ATKPrcess>
          initial_selfAngelint= selfAngelint;
 80029ee:	4b83      	ldr	r3, [pc, #524]	; (8002bfc <task+0x96c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a83      	ldr	r2, [pc, #524]	; (8002c00 <task+0x970>)
 80029f4:	6013      	str	r3, [r2, #0]

          while (1)
          {
            if(cmf<25)
 80029f6:	4b83      	ldr	r3, [pc, #524]	; (8002c04 <task+0x974>)
 80029f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	4b81      	ldr	r3, [pc, #516]	; (8002c08 <task+0x978>)
 8002a02:	f7fe f893 	bl	8000b2c <__aeabi_dcmplt>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d136      	bne.n	8002a7a <task+0x7ea>
              break;

            Forward(15);
 8002a0c:	200f      	movs	r0, #15
 8002a0e:	f7fe fcb9 	bl	8001384 <Forward>
            walkStraight();
 8002a12:	f7ff f9b3 	bl	8001d7c <walkStraight>
            drive();
 8002a16:	f7fe fc4d 	bl	80012b4 <drive>
            HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	4876      	ldr	r0, [pc, #472]	; (8002bf8 <task+0x968>)
 8002a1e:	f002 f98b 	bl	8004d38 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002a22:	2104      	movs	r1, #4
 8002a24:	4874      	ldr	r0, [pc, #464]	; (8002bf8 <task+0x968>)
 8002a26:	f002 f987 	bl	8004d38 <HAL_GPIO_TogglePin>
            HAL_Delay(50);
 8002a2a:	2032      	movs	r0, #50	; 0x32
 8002a2c:	f001 feb8 	bl	80047a0 <HAL_Delay>

            HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002a30:	2102      	movs	r1, #2
 8002a32:	4871      	ldr	r0, [pc, #452]	; (8002bf8 <task+0x968>)
 8002a34:	f002 f980 	bl	8004d38 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002a38:	2104      	movs	r1, #4
 8002a3a:	486f      	ldr	r0, [pc, #444]	; (8002bf8 <task+0x968>)
 8002a3c:	f002 f97c 	bl	8004d38 <HAL_GPIO_TogglePin>
            HAL_Delay(50);
 8002a40:	2032      	movs	r0, #50	; 0x32
 8002a42:	f001 fead 	bl	80047a0 <HAL_Delay>

            HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002a46:	2102      	movs	r1, #2
 8002a48:	486b      	ldr	r0, [pc, #428]	; (8002bf8 <task+0x968>)
 8002a4a:	f002 f975 	bl	8004d38 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002a4e:	2104      	movs	r1, #4
 8002a50:	4869      	ldr	r0, [pc, #420]	; (8002bf8 <task+0x968>)
 8002a52:	f002 f971 	bl	8004d38 <HAL_GPIO_TogglePin>
            HAL_Delay(50);
 8002a56:	2032      	movs	r0, #50	; 0x32
 8002a58:	f001 fea2 	bl	80047a0 <HAL_Delay>

            HAL_GPIO_TogglePin(ldr_GPIO_Port,ldr_Pin);
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4866      	ldr	r0, [pc, #408]	; (8002bf8 <task+0x968>)
 8002a60:	f002 f96a 	bl	8004d38 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(ldg_GPIO_Port,ldg_Pin);
 8002a64:	2104      	movs	r1, #4
 8002a66:	4864      	ldr	r0, [pc, #400]	; (8002bf8 <task+0x968>)
 8002a68:	f002 f966 	bl	8004d38 <HAL_GPIO_TogglePin>
            HAL_Delay(50);
 8002a6c:	2032      	movs	r0, #50	; 0x32
 8002a6e:	f001 fe97 	bl	80047a0 <HAL_Delay>

            HAL_Delay(100);
 8002a72:	2064      	movs	r0, #100	; 0x64
 8002a74:	f001 fe94 	bl	80047a0 <HAL_Delay>
            if(cmf<25)
 8002a78:	e7bd      	b.n	80029f6 <task+0x766>
              break;
 8002a7a:	bf00      	nop
          }
          //turn left
          timecount=0;
 8002a7c:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <task+0x95c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
          turnLeftCounter++;
 8002a82:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <task+0x97c>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b60      	ldr	r3, [pc, #384]	; (8002c0c <task+0x97c>)
 8002a8c:	701a      	strb	r2, [r3, #0]
          printf("Turning left\r\n");
 8002a8e:	4860      	ldr	r0, [pc, #384]	; (8002c10 <task+0x980>)
 8002a90:	f006 fdd0 	bl	8009634 <puts>
          //turn on the green led
          HAL_GPIO_WritePin(ldg_GPIO_Port, ldg_Pin,GPIO_PIN_SET);
 8002a94:	2201      	movs	r2, #1
 8002a96:	2104      	movs	r1, #4
 8002a98:	4857      	ldr	r0, [pc, #348]	; (8002bf8 <task+0x968>)
 8002a9a:	f002 f935 	bl	8004d08 <HAL_GPIO_WritePin>

          Forward(0);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe fc70 	bl	8001384 <Forward>
          drive();
 8002aa4:	f7fe fc06 	bl	80012b4 <drive>
          toggleLD2(500);
 8002aa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002aac:	f7fe fa46 	bl	8000f3c <toggleLD2>

          //turn left
          turn_Angle(90,1);
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	205a      	movs	r0, #90	; 0x5a
 8002ab4:	f7ff f99a 	bl	8001dec <turn_Angle>

          //finish the turning
          HAL_GPIO_WritePin(ldg_GPIO_Port, ldg_Pin,GPIO_PIN_RESET);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2104      	movs	r1, #4
 8002abc:	484e      	ldr	r0, [pc, #312]	; (8002bf8 <task+0x968>)
 8002abe:	f002 f923 	bl	8004d08 <HAL_GPIO_WritePin>
          Forward(15);
 8002ac2:	200f      	movs	r0, #15
 8002ac4:	f7fe fc5e 	bl	8001384 <Forward>
          drive();
 8002ac8:	f7fe fbf4 	bl	80012b4 <drive>
          return;
 8002acc:	e0c5      	b.n	8002c5a <task+0x9ca>
 
        }
        else
        {
          timecount =0;
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <task+0x95c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
          turnRightCounter++;
 8002ad4:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <task+0x960>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	4b44      	ldr	r3, [pc, #272]	; (8002bf0 <task+0x960>)
 8002ade:	701a      	strb	r2, [r3, #0]
          //turn on the red led
          printf("Turning right\r\n");
 8002ae0:	4844      	ldr	r0, [pc, #272]	; (8002bf4 <task+0x964>)
 8002ae2:	f006 fda7 	bl	8009634 <puts>
          HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_SET);
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2102      	movs	r1, #2
 8002aea:	4843      	ldr	r0, [pc, #268]	; (8002bf8 <task+0x968>)
 8002aec:	f002 f90c 	bl	8004d08 <HAL_GPIO_WritePin>

          for(uint8_t i = 0 ;i<2;i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	737b      	strb	r3, [r7, #13]
 8002af4:	e00b      	b.n	8002b0e <task+0x87e>
          {
            Forward(15);
 8002af6:	200f      	movs	r0, #15
 8002af8:	f7fe fc44 	bl	8001384 <Forward>
            drive();
 8002afc:	f7fe fbda 	bl	80012b4 <drive>
            toggleLD2(500);
 8002b00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b04:	f7fe fa1a 	bl	8000f3c <toggleLD2>
          for(uint8_t i = 0 ;i<2;i++)
 8002b08:	7b7b      	ldrb	r3, [r7, #13]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	737b      	strb	r3, [r7, #13]
 8002b0e:	7b7b      	ldrb	r3, [r7, #13]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d9f0      	bls.n	8002af6 <task+0x866>
          }

          Forward(0);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7fe fc35 	bl	8001384 <Forward>
          drive();
 8002b1a:	f7fe fbcb 	bl	80012b4 <drive>
          toggleLD2(500);
 8002b1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b22:	f7fe fa0b 	bl	8000f3c <toggleLD2>

          turn_Angle(60,2);
 8002b26:	2102      	movs	r1, #2
 8002b28:	203c      	movs	r0, #60	; 0x3c
 8002b2a:	f7ff f95f 	bl	8001dec <turn_Angle>

          //finish the turning
          for(uint8_t i = 0 ;i<12;i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	733b      	strb	r3, [r7, #12]
 8002b32:	e00b      	b.n	8002b4c <task+0x8bc>
          {
            Forward(15);
 8002b34:	200f      	movs	r0, #15
 8002b36:	f7fe fc25 	bl	8001384 <Forward>
            drive();
 8002b3a:	f7fe fbbb 	bl	80012b4 <drive>
            toggleLD2(500);
 8002b3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b42:	f7fe f9fb 	bl	8000f3c <toggleLD2>
          for(uint8_t i = 0 ;i<12;i++)
 8002b46:	7b3b      	ldrb	r3, [r7, #12]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	733b      	strb	r3, [r7, #12]
 8002b4c:	7b3b      	ldrb	r3, [r7, #12]
 8002b4e:	2b0b      	cmp	r3, #11
 8002b50:	d9f0      	bls.n	8002b34 <task+0x8a4>
          }
          HAL_GPIO_WritePin(ldr_GPIO_Port, ldr_Pin,GPIO_PIN_RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2102      	movs	r1, #2
 8002b56:	4828      	ldr	r0, [pc, #160]	; (8002bf8 <task+0x968>)
 8002b58:	f002 f8d6 	bl	8004d08 <HAL_GPIO_WritePin>
          return;
 8002b5c:	e07d      	b.n	8002c5a <task+0x9ca>
        }
      }

      if((cmf<25)&& timecount>200)//turn left
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <task+0x974>)
 8002b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <task+0x978>)
 8002b6a:	f7fd ffdf 	bl	8000b2c <__aeabi_dcmplt>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d04f      	beq.n	8002c14 <task+0x984>
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <task+0x95c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2bc8      	cmp	r3, #200	; 0xc8
 8002b7a:	d94b      	bls.n	8002c14 <task+0x984>
      {
        timecount=0;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <task+0x95c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
        turnLeftCounter++;
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <task+0x97c>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <task+0x97c>)
 8002b8c:	701a      	strb	r2, [r3, #0]
        printf("Turning left\r\n");
 8002b8e:	4820      	ldr	r0, [pc, #128]	; (8002c10 <task+0x980>)
 8002b90:	f006 fd50 	bl	8009634 <puts>
        //turn on the green led
        HAL_GPIO_WritePin(ldg_GPIO_Port, ldg_Pin,GPIO_PIN_SET);
 8002b94:	2201      	movs	r2, #1
 8002b96:	2104      	movs	r1, #4
 8002b98:	4817      	ldr	r0, [pc, #92]	; (8002bf8 <task+0x968>)
 8002b9a:	f002 f8b5 	bl	8004d08 <HAL_GPIO_WritePin>

        Forward(0);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7fe fbf0 	bl	8001384 <Forward>
        drive();
 8002ba4:	f7fe fb86 	bl	80012b4 <drive>
        toggleLD2(500);
 8002ba8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bac:	f7fe f9c6 	bl	8000f3c <toggleLD2>

        //turn left
        turn_Angle(90,1);
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	205a      	movs	r0, #90	; 0x5a
 8002bb4:	f7ff f91a 	bl	8001dec <turn_Angle>

        //finish the turning
        HAL_GPIO_WritePin(ldg_GPIO_Port, ldg_Pin,GPIO_PIN_RESET);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2104      	movs	r1, #4
 8002bbc:	480e      	ldr	r0, [pc, #56]	; (8002bf8 <task+0x968>)
 8002bbe:	f002 f8a3 	bl	8004d08 <HAL_GPIO_WritePin>
        Forward(15);
 8002bc2:	200f      	movs	r0, #15
 8002bc4:	f7fe fbde 	bl	8001384 <Forward>
        drive();
 8002bc8:	f7fe fb74 	bl	80012b4 <drive>
        return;
 8002bcc:	e045      	b.n	8002c5a <task+0x9ca>
 8002bce:	bf00      	nop
 8002bd0:	2000065a 	.word	0x2000065a
 8002bd4:	20000638 	.word	0x20000638
 8002bd8:	40590000 	.word	0x40590000
 8002bdc:	20000659 	.word	0x20000659
 8002be0:	2000065b 	.word	0x2000065b
 8002be4:	20000618 	.word	0x20000618
 8002be8:	40490000 	.word	0x40490000
 8002bec:	20000008 	.word	0x20000008
 8002bf0:	200008a1 	.word	0x200008a1
 8002bf4:	0800b934 	.word	0x0800b934
 8002bf8:	48000400 	.word	0x48000400
 8002bfc:	20000894 	.word	0x20000894
 8002c00:	20000898 	.word	0x20000898
 8002c04:	20000650 	.word	0x20000650
 8002c08:	40390000 	.word	0x40390000
 8002c0c:	200008a0 	.word	0x200008a0
 8002c10:	0800b9b8 	.word	0x0800b9b8
      }
      else//nothing in front
      {
        Forward(15);
 8002c14:	200f      	movs	r0, #15
 8002c16:	f7fe fbb5 	bl	8001384 <Forward>
        Alignment(cml, cmr);
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <task+0x9d0>)
 8002c1c:	ed93 7b00 	vldr	d7, [r3]
 8002c20:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <task+0x9d4>)
 8002c22:	ed93 6b00 	vldr	d6, [r3]
 8002c26:	eeb0 1a46 	vmov.f32	s2, s12
 8002c2a:	eef0 1a66 	vmov.f32	s3, s13
 8002c2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c32:	eef0 0a67 	vmov.f32	s1, s15
 8002c36:	f7fe fcd1 	bl	80015dc <Alignment>
        drive();
 8002c3a:	f7fe fb3b 	bl	80012b4 <drive>
        toggleLD2(50);
 8002c3e:	2032      	movs	r0, #50	; 0x32
 8002c40:	f7fe f97c 	bl	8000f3c <toggleLD2>
        return;      
 8002c44:	e009      	b.n	8002c5a <task+0x9ca>
    /****************TASK 2******************/
    break;
  
  default:

    HAL_GPIO_WritePin(ldr_GPIO_Port,ldr_Pin,GPIO_PIN_SET);
 8002c46:	2201      	movs	r2, #1
 8002c48:	2102      	movs	r1, #2
 8002c4a:	4807      	ldr	r0, [pc, #28]	; (8002c68 <task+0x9d8>)
 8002c4c:	f002 f85c 	bl	8004d08 <HAL_GPIO_WritePin>
    while(1)
    {
      printf("Error Task number!\r\n");
 8002c50:	4806      	ldr	r0, [pc, #24]	; (8002c6c <task+0x9dc>)
 8002c52:	f006 fcef 	bl	8009634 <puts>
 8002c56:	e7fb      	b.n	8002c50 <task+0x9c0>
    break;
 8002c58:	bf00      	nop
    }
    break;
  }
}
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c60:	20000618 	.word	0x20000618
 8002c64:	20000638 	.word	0x20000638
 8002c68:	48000400 	.word	0x48000400
 8002c6c:	0800b9c8 	.word	0x0800b9c8

08002c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c76:	f001 fd22 	bl	80046be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c7a:	f000 f94f 	bl	8002f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c7e:	f000 fd41 	bl	8003704 <MX_GPIO_Init>
  MX_TIM5_Init();
 8002c82:	f000 fcc3 	bl	800360c <MX_TIM5_Init>
  MX_TIM1_Init();
 8002c86:	f000 fb0f 	bl	80032a8 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8002c8a:	f000 f993 	bl	8002fb4 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8002c8e:	f000 f9db 	bl	8003048 <MX_UART4_Init>
  MX_TIM4_Init();
 8002c92:	f000 fc49 	bl	8003528 <MX_TIM4_Init>
  MX_UART5_Init();
 8002c96:	f000 fa23 	bl	80030e0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8002c9a:	f000 fa6d 	bl	8003178 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002c9e:	f000 fab7 	bl	8003210 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002ca2:	f000 fbb3 	bl	800340c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting\r\n");
 8002ca6:	4886      	ldr	r0, [pc, #536]	; (8002ec0 <main+0x250>)
 8002ca8:	f006 fcc4 	bl	8009634 <puts>
  // Load parameters to PID
  PID(&myPIDultra, &Inputultra, &Outputultra, &Setpointultra, 1.2, 1, 0.8, _PID_P_ON_E, _PID_CD_DIRECT);
 8002cac:	2300      	movs	r3, #0
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	ed9f 2b62 	vldr	d2, [pc, #392]	; 8002e40 <main+0x1d0>
 8002cb8:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8002e48 <main+0x1d8>
 8002cbc:	ed9f 0b64 	vldr	d0, [pc, #400]	; 8002e50 <main+0x1e0>
 8002cc0:	4b80      	ldr	r3, [pc, #512]	; (8002ec4 <main+0x254>)
 8002cc2:	4a81      	ldr	r2, [pc, #516]	; (8002ec8 <main+0x258>)
 8002cc4:	4981      	ldr	r1, [pc, #516]	; (8002ecc <main+0x25c>)
 8002cc6:	4882      	ldr	r0, [pc, #520]	; (8002ed0 <main+0x260>)
 8002cc8:	f000 fdfe 	bl	80038c8 <PID>
  PID_SetMode(&myPIDultra, _PID_MODE_AUTOMATIC);
 8002ccc:	2101      	movs	r1, #1
 8002cce:	4880      	ldr	r0, [pc, #512]	; (8002ed0 <main+0x260>)
 8002cd0:	f000 ff30 	bl	8003b34 <PID_SetMode>
  PID_SetSampleTime(&myPIDultra, 50);
 8002cd4:	2132      	movs	r1, #50	; 0x32
 8002cd6:	487e      	ldr	r0, [pc, #504]	; (8002ed0 <main+0x260>)
 8002cd8:	f001 f8a0 	bl	8003e1c <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDultra, -10, 10);
 8002cdc:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8002e58 <main+0x1e8>
 8002ce0:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8002e60 <main+0x1f0>
 8002ce4:	487a      	ldr	r0, [pc, #488]	; (8002ed0 <main+0x260>)
 8002ce6:	f000 ff43 	bl	8003b70 <PID_SetOutputLimits>

  PID(&myPIDdistance, &Inputdistance, &Outputdistance, &Setpointdistance, 0.8, 200, 15, _PID_P_ON_E, _PID_CD_DIRECT);
 8002cea:	2300      	movs	r3, #0
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	2301      	movs	r3, #1
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	ed9f 2b5d 	vldr	d2, [pc, #372]	; 8002e68 <main+0x1f8>
 8002cf6:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8002e70 <main+0x200>
 8002cfa:	ed9f 0b51 	vldr	d0, [pc, #324]	; 8002e40 <main+0x1d0>
 8002cfe:	4b75      	ldr	r3, [pc, #468]	; (8002ed4 <main+0x264>)
 8002d00:	4a75      	ldr	r2, [pc, #468]	; (8002ed8 <main+0x268>)
 8002d02:	4976      	ldr	r1, [pc, #472]	; (8002edc <main+0x26c>)
 8002d04:	4876      	ldr	r0, [pc, #472]	; (8002ee0 <main+0x270>)
 8002d06:	f000 fddf 	bl	80038c8 <PID>
  PID_SetMode(&myPIDdistance, _PID_MODE_AUTOMATIC);
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4874      	ldr	r0, [pc, #464]	; (8002ee0 <main+0x270>)
 8002d0e:	f000 ff11 	bl	8003b34 <PID_SetMode>
  PID_SetSampleTime(&myPIDdistance, 50);
 8002d12:	2132      	movs	r1, #50	; 0x32
 8002d14:	4872      	ldr	r0, [pc, #456]	; (8002ee0 <main+0x270>)
 8002d16:	f001 f881 	bl	8003e1c <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDdistance, -5, 5);
 8002d1a:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8002e78 <main+0x208>
 8002d1e:	ed9f 0b58 	vldr	d0, [pc, #352]	; 8002e80 <main+0x210>
 8002d22:	486f      	ldr	r0, [pc, #444]	; (8002ee0 <main+0x270>)
 8002d24:	f000 ff24 	bl	8003b70 <PID_SetOutputLimits>

  PID(&myPIDopenmv, &Inputopenmv, &Outputopenmv, &Setpointopenmv, 0.2, 0, 0.12, _PID_P_ON_E, _PID_CD_DIRECT);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	ed9f 2b55 	vldr	d2, [pc, #340]	; 8002e88 <main+0x218>
 8002d34:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002e90 <main+0x220>
 8002d38:	ed9f 0b57 	vldr	d0, [pc, #348]	; 8002e98 <main+0x228>
 8002d3c:	4b69      	ldr	r3, [pc, #420]	; (8002ee4 <main+0x274>)
 8002d3e:	4a6a      	ldr	r2, [pc, #424]	; (8002ee8 <main+0x278>)
 8002d40:	496a      	ldr	r1, [pc, #424]	; (8002eec <main+0x27c>)
 8002d42:	486b      	ldr	r0, [pc, #428]	; (8002ef0 <main+0x280>)
 8002d44:	f000 fdc0 	bl	80038c8 <PID>
  PID_SetMode(&myPIDopenmv, _PID_MODE_AUTOMATIC);
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4869      	ldr	r0, [pc, #420]	; (8002ef0 <main+0x280>)
 8002d4c:	f000 fef2 	bl	8003b34 <PID_SetMode>
  PID_SetSampleTime(&myPIDopenmv, 170);
 8002d50:	21aa      	movs	r1, #170	; 0xaa
 8002d52:	4867      	ldr	r0, [pc, #412]	; (8002ef0 <main+0x280>)
 8002d54:	f001 f862 	bl	8003e1c <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDopenmv, -10, 10);
 8002d58:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8002e58 <main+0x1e8>
 8002d5c:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8002e60 <main+0x1f0>
 8002d60:	4863      	ldr	r0, [pc, #396]	; (8002ef0 <main+0x280>)
 8002d62:	f000 ff05 	bl	8003b70 <PID_SetOutputLimits>

  PID(&myPIDgyro, &Inputgyro, &Outputgyro, &Setpointgyro, 0.5, 0.1, 1.2, _PID_P_ON_E, _PID_CD_DIRECT);
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	ed9f 2b38 	vldr	d2, [pc, #224]	; 8002e50 <main+0x1e0>
 8002d72:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8002ea0 <main+0x230>
 8002d76:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 8002ea8 <main+0x238>
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <main+0x284>)
 8002d7c:	4a5e      	ldr	r2, [pc, #376]	; (8002ef8 <main+0x288>)
 8002d7e:	495f      	ldr	r1, [pc, #380]	; (8002efc <main+0x28c>)
 8002d80:	485f      	ldr	r0, [pc, #380]	; (8002f00 <main+0x290>)
 8002d82:	f000 fda1 	bl	80038c8 <PID>
  PID_SetMode(&myPIDgyro, _PID_MODE_AUTOMATIC);
 8002d86:	2101      	movs	r1, #1
 8002d88:	485d      	ldr	r0, [pc, #372]	; (8002f00 <main+0x290>)
 8002d8a:	f000 fed3 	bl	8003b34 <PID_SetMode>
  PID_SetSampleTime(&myPIDgyro, 50);
 8002d8e:	2132      	movs	r1, #50	; 0x32
 8002d90:	485b      	ldr	r0, [pc, #364]	; (8002f00 <main+0x290>)
 8002d92:	f001 f843 	bl	8003e1c <PID_SetSampleTime>
  PID_SetOutputLimits(&myPIDgyro, -4, 4);
 8002d96:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8002eb0 <main+0x240>
 8002d9a:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8002eb8 <main+0x248>
 8002d9e:	4858      	ldr	r0, [pc, #352]	; (8002f00 <main+0x290>)
 8002da0:	f000 fee6 	bl	8003b70 <PID_SetOutputLimits>

  // start TIM1 PWM generator
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002da4:	2100      	movs	r1, #0
 8002da6:	4857      	ldr	r0, [pc, #348]	; (8002f04 <main+0x294>)
 8002da8:	f003 f8f2 	bl	8005f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Machine Arm: 0(normal) and 180(putting)
 8002dac:	2100      	movs	r1, #0
 8002dae:	4856      	ldr	r0, [pc, #344]	; (8002f08 <main+0x298>)
 8002db0:	f003 f8ee 	bl	8005f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Bule servo(top): 90
 8002db4:	2108      	movs	r1, #8
 8002db6:	4854      	ldr	r0, [pc, #336]	; (8002f08 <main+0x298>)
 8002db8:	f003 f8ea 	bl	8005f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Bule servo(openmv): 110(rectangle) and 65(45 degree)
 8002dbc:	210c      	movs	r1, #12
 8002dbe:	4852      	ldr	r0, [pc, #328]	; (8002f08 <main+0x298>)
 8002dc0:	f003 f8e6 	bl	8005f90 <HAL_TIM_PWM_Start>
  // start TIM5 IT left and right sensor
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4851      	ldr	r0, [pc, #324]	; (8002f0c <main+0x29c>)
 8002dc8:	f003 fa56 	bl	8006278 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8002dcc:	2104      	movs	r1, #4
 8002dce:	484f      	ldr	r0, [pc, #316]	; (8002f0c <main+0x29c>)
 8002dd0:	f003 fa52 	bl	8006278 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	484e      	ldr	r0, [pc, #312]	; (8002f10 <main+0x2a0>)
 8002dd8:	f003 fa4e 	bl	8006278 <HAL_TIM_IC_Start_IT>

  // Servo initial position
  Set_angle(&htim2, TIM_CHANNEL_1, 0, 20000, 20);
 8002ddc:	2314      	movs	r3, #20
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	4847      	ldr	r0, [pc, #284]	; (8002f08 <main+0x298>)
 8002dea:	f7fe febf 	bl	8001b6c <Set_angle>
  Set_angle(&htim2, TIM_CHANNEL_3, 90, 20000, 20);
 8002dee:	2314      	movs	r3, #20
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002df6:	225a      	movs	r2, #90	; 0x5a
 8002df8:	2108      	movs	r1, #8
 8002dfa:	4843      	ldr	r0, [pc, #268]	; (8002f08 <main+0x298>)
 8002dfc:	f7fe feb6 	bl	8001b6c <Set_angle>
  // Set_angle(&htim2,TIM_CHANNEL_4, 110,20000,20);
  Set_angle(&htim2, TIM_CHANNEL_4, 60, 20000, 20);
 8002e00:	2314      	movs	r3, #20
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002e08:	223c      	movs	r2, #60	; 0x3c
 8002e0a:	210c      	movs	r1, #12
 8002e0c:	483e      	ldr	r0, [pc, #248]	; (8002f08 <main+0x298>)
 8002e0e:	f7fe fead 	bl	8001b6c <Set_angle>

  //Recode initial Pitch
  UART_DISABLE_RE(huart1);
 8002e12:	4b40      	ldr	r3, [pc, #256]	; (8002f14 <main+0x2a4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <main+0x2a4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0204 	bic.w	r2, r2, #4
 8002e20:	601a      	str	r2, [r3, #0]
  // HAL_Delay(5000);
  // UART_ENABLE_RE(huart3);
  // HAL_UART_Transmit(&huart3, "task1", 5, HAL_MAX_DELAY);
  // UART_DISABLE_RE(huart3);
  
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8002e22:	2201      	movs	r2, #1
 8002e24:	2120      	movs	r1, #32
 8002e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e2a:	f001 ff6d 	bl	8004d08 <HAL_GPIO_WritePin>
  printf("Initialized. \r\n");
 8002e2e:	483a      	ldr	r0, [pc, #232]	; (8002f18 <main+0x2a8>)
 8002e30:	f006 fc00 	bl	8009634 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    //just type the task number below
    task(1);
 8002e34:	2001      	movs	r0, #1
 8002e36:	f7ff fa2b 	bl	8002290 <task>
 8002e3a:	e7fb      	b.n	8002e34 <main+0x1c4>
 8002e3c:	f3af 8000 	nop.w
 8002e40:	9999999a 	.word	0x9999999a
 8002e44:	3fe99999 	.word	0x3fe99999
 8002e48:	00000000 	.word	0x00000000
 8002e4c:	3ff00000 	.word	0x3ff00000
 8002e50:	33333333 	.word	0x33333333
 8002e54:	3ff33333 	.word	0x3ff33333
 8002e58:	00000000 	.word	0x00000000
 8002e5c:	40240000 	.word	0x40240000
 8002e60:	00000000 	.word	0x00000000
 8002e64:	c0240000 	.word	0xc0240000
 8002e68:	00000000 	.word	0x00000000
 8002e6c:	402e0000 	.word	0x402e0000
 8002e70:	00000000 	.word	0x00000000
 8002e74:	40690000 	.word	0x40690000
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	40140000 	.word	0x40140000
 8002e80:	00000000 	.word	0x00000000
 8002e84:	c0140000 	.word	0xc0140000
 8002e88:	eb851eb8 	.word	0xeb851eb8
 8002e8c:	3fbeb851 	.word	0x3fbeb851
	...
 8002e98:	9999999a 	.word	0x9999999a
 8002e9c:	3fc99999 	.word	0x3fc99999
 8002ea0:	9999999a 	.word	0x9999999a
 8002ea4:	3fb99999 	.word	0x3fb99999
 8002ea8:	00000000 	.word	0x00000000
 8002eac:	3fe00000 	.word	0x3fe00000
 8002eb0:	00000000 	.word	0x00000000
 8002eb4:	40100000 	.word	0x40100000
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	c0100000 	.word	0xc0100000
 8002ec0:	0800b9dc 	.word	0x0800b9dc
 8002ec4:	20000670 	.word	0x20000670
 8002ec8:	20000668 	.word	0x20000668
 8002ecc:	20000660 	.word	0x20000660
 8002ed0:	200006b8 	.word	0x200006b8
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	20000680 	.word	0x20000680
 8002edc:	20000678 	.word	0x20000678
 8002ee0:	20000728 	.word	0x20000728
 8002ee4:	20000698 	.word	0x20000698
 8002ee8:	20000690 	.word	0x20000690
 8002eec:	20000688 	.word	0x20000688
 8002ef0:	20000798 	.word	0x20000798
 8002ef4:	200006b0 	.word	0x200006b0
 8002ef8:	200006a8 	.word	0x200006a8
 8002efc:	200006a0 	.word	0x200006a0
 8002f00:	20000808 	.word	0x20000808
 8002f04:	200004d4 	.word	0x200004d4
 8002f08:	20000520 	.word	0x20000520
 8002f0c:	200005b8 	.word	0x200005b8
 8002f10:	2000056c 	.word	0x2000056c
 8002f14:	200003b4 	.word	0x200003b4
 8002f18:	0800b9e8 	.word	0x0800b9e8

08002f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b094      	sub	sp, #80	; 0x50
 8002f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f22:	f107 0318 	add.w	r3, r7, #24
 8002f26:	2238      	movs	r2, #56	; 0x38
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f005 fe8a 	bl	8008c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	60da      	str	r2, [r3, #12]
 8002f3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f001 ff38 	bl	8004db4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f44:	2302      	movs	r3, #2
 8002f46:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f52:	2302      	movs	r3, #2
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f56:	2302      	movs	r3, #2
 8002f58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002f5e:	2355      	movs	r3, #85	; 0x55
 8002f60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f62:	2302      	movs	r3, #2
 8002f64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f66:	2302      	movs	r3, #2
 8002f68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f6e:	f107 0318 	add.w	r3, r7, #24
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 ffd2 	bl	8004f1c <HAL_RCC_OscConfig>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002f7e:	f000 fc63 	bl	8003848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f82:	230f      	movs	r3, #15
 8002f84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f86:	2303      	movs	r3, #3
 8002f88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f96:	1d3b      	adds	r3, r7, #4
 8002f98:	2104      	movs	r1, #4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fad6 	bl	800554c <HAL_RCC_ClockConfig>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002fa6:	f000 fc4f 	bl	8003848 <Error_Handler>
  }
}
 8002faa:	bf00      	nop
 8002fac:	3750      	adds	r7, #80	; 0x50
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002fb8:	4b21      	ldr	r3, [pc, #132]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 8002fba:	4a22      	ldr	r2, [pc, #136]	; (8003044 <MX_LPUART1_UART_Init+0x90>)
 8002fbc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 8002fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fc4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 8002fda:	220c      	movs	r2, #12
 8002fdc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fe4:	4b16      	ldr	r3, [pc, #88]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002ff6:	4812      	ldr	r0, [pc, #72]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 8002ff8:	f004 fe8c 	bl	8007d14 <HAL_UART_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003002:	f000 fc21 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003006:	2100      	movs	r1, #0
 8003008:	480d      	ldr	r0, [pc, #52]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 800300a:	f005 fd27 	bl	8008a5c <HAL_UARTEx_SetTxFifoThreshold>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003014:	f000 fc18 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003018:	2100      	movs	r1, #0
 800301a:	4809      	ldr	r0, [pc, #36]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 800301c:	f005 fd5c 	bl	8008ad8 <HAL_UARTEx_SetRxFifoThreshold>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003026:	f000 fc0f 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800302a:	4805      	ldr	r0, [pc, #20]	; (8003040 <MX_LPUART1_UART_Init+0x8c>)
 800302c:	f005 fcdd 	bl	80089ea <HAL_UARTEx_DisableFifoMode>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003036:	f000 fc07 	bl	8003848 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000204 	.word	0x20000204
 8003044:	40008000 	.word	0x40008000

08003048 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800304c:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <MX_UART4_Init+0x90>)
 800304e:	4a23      	ldr	r2, [pc, #140]	; (80030dc <MX_UART4_Init+0x94>)
 8003050:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003052:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <MX_UART4_Init+0x90>)
 8003054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003058:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800305a:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <MX_UART4_Init+0x90>)
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <MX_UART4_Init+0x90>)
 8003062:	2200      	movs	r2, #0
 8003064:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003066:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <MX_UART4_Init+0x90>)
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800306c:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <MX_UART4_Init+0x90>)
 800306e:	220c      	movs	r2, #12
 8003070:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003072:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <MX_UART4_Init+0x90>)
 8003074:	2200      	movs	r2, #0
 8003076:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <MX_UART4_Init+0x90>)
 800307a:	2200      	movs	r2, #0
 800307c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800307e:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <MX_UART4_Init+0x90>)
 8003080:	2200      	movs	r2, #0
 8003082:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003084:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <MX_UART4_Init+0x90>)
 8003086:	2200      	movs	r2, #0
 8003088:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <MX_UART4_Init+0x90>)
 800308c:	2200      	movs	r2, #0
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003090:	4811      	ldr	r0, [pc, #68]	; (80030d8 <MX_UART4_Init+0x90>)
 8003092:	f004 fe3f 	bl	8007d14 <HAL_UART_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800309c:	f000 fbd4 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030a0:	2100      	movs	r1, #0
 80030a2:	480d      	ldr	r0, [pc, #52]	; (80030d8 <MX_UART4_Init+0x90>)
 80030a4:	f005 fcda 	bl	8008a5c <HAL_UARTEx_SetTxFifoThreshold>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80030ae:	f000 fbcb 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030b2:	2100      	movs	r1, #0
 80030b4:	4808      	ldr	r0, [pc, #32]	; (80030d8 <MX_UART4_Init+0x90>)
 80030b6:	f005 fd0f 	bl	8008ad8 <HAL_UARTEx_SetRxFifoThreshold>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80030c0:	f000 fbc2 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80030c4:	4804      	ldr	r0, [pc, #16]	; (80030d8 <MX_UART4_Init+0x90>)
 80030c6:	f005 fc90 	bl	80089ea <HAL_UARTEx_DisableFifoMode>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80030d0:	f000 fbba 	bl	8003848 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000294 	.word	0x20000294
 80030dc:	40004c00 	.word	0x40004c00

080030e0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <MX_UART5_Init+0x90>)
 80030e6:	4a23      	ldr	r2, [pc, #140]	; (8003174 <MX_UART5_Init+0x94>)
 80030e8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80030ea:	4b21      	ldr	r3, [pc, #132]	; (8003170 <MX_UART5_Init+0x90>)
 80030ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80030f0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <MX_UART5_Init+0x90>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80030f8:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <MX_UART5_Init+0x90>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <MX_UART5_Init+0x90>)
 8003100:	2200      	movs	r2, #0
 8003102:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003104:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <MX_UART5_Init+0x90>)
 8003106:	220c      	movs	r2, #12
 8003108:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <MX_UART5_Init+0x90>)
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003110:	4b17      	ldr	r3, [pc, #92]	; (8003170 <MX_UART5_Init+0x90>)
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <MX_UART5_Init+0x90>)
 8003118:	2200      	movs	r2, #0
 800311a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800311c:	4b14      	ldr	r3, [pc, #80]	; (8003170 <MX_UART5_Init+0x90>)
 800311e:	2200      	movs	r2, #0
 8003120:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <MX_UART5_Init+0x90>)
 8003124:	2200      	movs	r2, #0
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003128:	4811      	ldr	r0, [pc, #68]	; (8003170 <MX_UART5_Init+0x90>)
 800312a:	f004 fdf3 	bl	8007d14 <HAL_UART_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003134:	f000 fb88 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003138:	2100      	movs	r1, #0
 800313a:	480d      	ldr	r0, [pc, #52]	; (8003170 <MX_UART5_Init+0x90>)
 800313c:	f005 fc8e 	bl	8008a5c <HAL_UARTEx_SetTxFifoThreshold>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003146:	f000 fb7f 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800314a:	2100      	movs	r1, #0
 800314c:	4808      	ldr	r0, [pc, #32]	; (8003170 <MX_UART5_Init+0x90>)
 800314e:	f005 fcc3 	bl	8008ad8 <HAL_UARTEx_SetRxFifoThreshold>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003158:	f000 fb76 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800315c:	4804      	ldr	r0, [pc, #16]	; (8003170 <MX_UART5_Init+0x90>)
 800315e:	f005 fc44 	bl	80089ea <HAL_UARTEx_DisableFifoMode>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003168:	f000 fb6e 	bl	8003848 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000324 	.word	0x20000324
 8003174:	40005000 	.word	0x40005000

08003178 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <MX_USART1_UART_Init+0x90>)
 800317e:	4a23      	ldr	r2, [pc, #140]	; (800320c <MX_USART1_UART_Init+0x94>)
 8003180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003182:	4b21      	ldr	r3, [pc, #132]	; (8003208 <MX_USART1_UART_Init+0x90>)
 8003184:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003188:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800318a:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <MX_USART1_UART_Init+0x90>)
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <MX_USART1_UART_Init+0x90>)
 8003192:	2200      	movs	r2, #0
 8003194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003196:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <MX_USART1_UART_Init+0x90>)
 8003198:	2200      	movs	r2, #0
 800319a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800319c:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <MX_USART1_UART_Init+0x90>)
 800319e:	220c      	movs	r2, #12
 80031a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <MX_USART1_UART_Init+0x90>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a8:	4b17      	ldr	r3, [pc, #92]	; (8003208 <MX_USART1_UART_Init+0x90>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <MX_USART1_UART_Init+0x90>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <MX_USART1_UART_Init+0x90>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <MX_USART1_UART_Init+0x90>)
 80031bc:	2200      	movs	r2, #0
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031c0:	4811      	ldr	r0, [pc, #68]	; (8003208 <MX_USART1_UART_Init+0x90>)
 80031c2:	f004 fda7 	bl	8007d14 <HAL_UART_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80031cc:	f000 fb3c 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031d0:	2100      	movs	r1, #0
 80031d2:	480d      	ldr	r0, [pc, #52]	; (8003208 <MX_USART1_UART_Init+0x90>)
 80031d4:	f005 fc42 	bl	8008a5c <HAL_UARTEx_SetTxFifoThreshold>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80031de:	f000 fb33 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031e2:	2100      	movs	r1, #0
 80031e4:	4808      	ldr	r0, [pc, #32]	; (8003208 <MX_USART1_UART_Init+0x90>)
 80031e6:	f005 fc77 	bl	8008ad8 <HAL_UARTEx_SetRxFifoThreshold>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80031f0:	f000 fb2a 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80031f4:	4804      	ldr	r0, [pc, #16]	; (8003208 <MX_USART1_UART_Init+0x90>)
 80031f6:	f005 fbf8 	bl	80089ea <HAL_UARTEx_DisableFifoMode>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003200:	f000 fb22 	bl	8003848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200003b4 	.word	0x200003b4
 800320c:	40013800 	.word	0x40013800

08003210 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003214:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 8003216:	4a23      	ldr	r2, [pc, #140]	; (80032a4 <MX_USART3_UART_Init+0x94>)
 8003218:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800321a:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 800321c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003220:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003222:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 800322a:	2200      	movs	r2, #0
 800322c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 8003230:	2200      	movs	r2, #0
 8003232:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 8003236:	220c      	movs	r2, #12
 8003238:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003240:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 8003242:	2200      	movs	r2, #0
 8003244:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 8003248:	2200      	movs	r2, #0
 800324a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 800324e:	2200      	movs	r2, #0
 8003250:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 8003254:	2200      	movs	r2, #0
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003258:	4811      	ldr	r0, [pc, #68]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 800325a:	f004 fd5b 	bl	8007d14 <HAL_UART_Init>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003264:	f000 faf0 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003268:	2100      	movs	r1, #0
 800326a:	480d      	ldr	r0, [pc, #52]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 800326c:	f005 fbf6 	bl	8008a5c <HAL_UARTEx_SetTxFifoThreshold>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003276:	f000 fae7 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800327a:	2100      	movs	r1, #0
 800327c:	4808      	ldr	r0, [pc, #32]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 800327e:	f005 fc2b 	bl	8008ad8 <HAL_UARTEx_SetRxFifoThreshold>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003288:	f000 fade 	bl	8003848 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800328c:	4804      	ldr	r0, [pc, #16]	; (80032a0 <MX_USART3_UART_Init+0x90>)
 800328e:	f005 fbac 	bl	80089ea <HAL_UARTEx_DisableFifoMode>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003298:	f000 fad6 	bl	8003848 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000444 	.word	0x20000444
 80032a4:	40004800 	.word	0x40004800

080032a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b09c      	sub	sp, #112	; 0x70
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	609a      	str	r2, [r3, #8]
 80032ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
 80032d8:	615a      	str	r2, [r3, #20]
 80032da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	2234      	movs	r2, #52	; 0x34
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f005 fcae 	bl	8008c44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032e8:	4b46      	ldr	r3, [pc, #280]	; (8003404 <MX_TIM1_Init+0x15c>)
 80032ea:	4a47      	ldr	r2, [pc, #284]	; (8003408 <MX_TIM1_Init+0x160>)
 80032ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1699;
 80032ee:	4b45      	ldr	r3, [pc, #276]	; (8003404 <MX_TIM1_Init+0x15c>)
 80032f0:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80032f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f6:	4b43      	ldr	r3, [pc, #268]	; (8003404 <MX_TIM1_Init+0x15c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3499;
 80032fc:	4b41      	ldr	r3, [pc, #260]	; (8003404 <MX_TIM1_Init+0x15c>)
 80032fe:	f640 52ab 	movw	r2, #3499	; 0xdab
 8003302:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003304:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <MX_TIM1_Init+0x15c>)
 8003306:	2200      	movs	r2, #0
 8003308:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800330a:	4b3e      	ldr	r3, [pc, #248]	; (8003404 <MX_TIM1_Init+0x15c>)
 800330c:	2200      	movs	r2, #0
 800330e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003310:	4b3c      	ldr	r3, [pc, #240]	; (8003404 <MX_TIM1_Init+0x15c>)
 8003312:	2200      	movs	r2, #0
 8003314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003316:	483b      	ldr	r0, [pc, #236]	; (8003404 <MX_TIM1_Init+0x15c>)
 8003318:	f002 fd82 	bl	8005e20 <HAL_TIM_Base_Init>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003322:	f000 fa91 	bl	8003848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800332c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003330:	4619      	mov	r1, r3
 8003332:	4834      	ldr	r0, [pc, #208]	; (8003404 <MX_TIM1_Init+0x15c>)
 8003334:	f003 fc20 	bl	8006b78 <HAL_TIM_ConfigClockSource>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800333e:	f000 fa83 	bl	8003848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003342:	4830      	ldr	r0, [pc, #192]	; (8003404 <MX_TIM1_Init+0x15c>)
 8003344:	f002 fdc3 	bl	8005ece <HAL_TIM_PWM_Init>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800334e:	f000 fa7b 	bl	8003848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800335e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003362:	4619      	mov	r1, r3
 8003364:	4827      	ldr	r0, [pc, #156]	; (8003404 <MX_TIM1_Init+0x15c>)
 8003366:	f004 fb47 	bl	80079f8 <HAL_TIMEx_MasterConfigSynchronization>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8003370:	f000 fa6a 	bl	8003848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003374:	2360      	movs	r3, #96	; 0x60
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1;
 8003378:	2301      	movs	r3, #1
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800337c:	2300      	movs	r3, #0
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003384:	2300      	movs	r3, #0
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003390:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003394:	2200      	movs	r2, #0
 8003396:	4619      	mov	r1, r3
 8003398:	481a      	ldr	r0, [pc, #104]	; (8003404 <MX_TIM1_Init+0x15c>)
 800339a:	f003 fad9 	bl	8006950 <HAL_TIM_PWM_ConfigChannel>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80033a4:	f000 fa50 	bl	8003848 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80033c6:	2300      	movs	r3, #0
 80033c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80033ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80033d8:	2300      	movs	r3, #0
 80033da:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033dc:	2300      	movs	r3, #0
 80033de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033e0:	1d3b      	adds	r3, r7, #4
 80033e2:	4619      	mov	r1, r3
 80033e4:	4807      	ldr	r0, [pc, #28]	; (8003404 <MX_TIM1_Init+0x15c>)
 80033e6:	f004 fb9d 	bl	8007b24 <HAL_TIMEx_ConfigBreakDeadTime>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80033f0:	f000 fa2a 	bl	8003848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80033f4:	4803      	ldr	r0, [pc, #12]	; (8003404 <MX_TIM1_Init+0x15c>)
 80033f6:	f000 ffad 	bl	8004354 <HAL_TIM_MspPostInit>

}
 80033fa:	bf00      	nop
 80033fc:	3770      	adds	r7, #112	; 0x70
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	200004d4 	.word	0x200004d4
 8003408:	40012c00 	.word	0x40012c00

0800340c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08e      	sub	sp, #56	; 0x38
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003420:	f107 031c 	add.w	r3, r7, #28
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800342c:	463b      	mov	r3, r7
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	609a      	str	r2, [r3, #8]
 8003436:	60da      	str	r2, [r3, #12]
 8003438:	611a      	str	r2, [r3, #16]
 800343a:	615a      	str	r2, [r3, #20]
 800343c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800343e:	4b39      	ldr	r3, [pc, #228]	; (8003524 <MX_TIM2_Init+0x118>)
 8003440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003444:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003446:	4b37      	ldr	r3, [pc, #220]	; (8003524 <MX_TIM2_Init+0x118>)
 8003448:	22a9      	movs	r2, #169	; 0xa9
 800344a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800344c:	4b35      	ldr	r3, [pc, #212]	; (8003524 <MX_TIM2_Init+0x118>)
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <MX_TIM2_Init+0x118>)
 8003454:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003458:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800345a:	4b32      	ldr	r3, [pc, #200]	; (8003524 <MX_TIM2_Init+0x118>)
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003460:	4b30      	ldr	r3, [pc, #192]	; (8003524 <MX_TIM2_Init+0x118>)
 8003462:	2200      	movs	r2, #0
 8003464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003466:	482f      	ldr	r0, [pc, #188]	; (8003524 <MX_TIM2_Init+0x118>)
 8003468:	f002 fcda 	bl	8005e20 <HAL_TIM_Base_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003472:	f000 f9e9 	bl	8003848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800347c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003480:	4619      	mov	r1, r3
 8003482:	4828      	ldr	r0, [pc, #160]	; (8003524 <MX_TIM2_Init+0x118>)
 8003484:	f003 fb78 	bl	8006b78 <HAL_TIM_ConfigClockSource>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800348e:	f000 f9db 	bl	8003848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003492:	4824      	ldr	r0, [pc, #144]	; (8003524 <MX_TIM2_Init+0x118>)
 8003494:	f002 fd1b 	bl	8005ece <HAL_TIM_PWM_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800349e:	f000 f9d3 	bl	8003848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034aa:	f107 031c 	add.w	r3, r7, #28
 80034ae:	4619      	mov	r1, r3
 80034b0:	481c      	ldr	r0, [pc, #112]	; (8003524 <MX_TIM2_Init+0x118>)
 80034b2:	f004 faa1 	bl	80079f8 <HAL_TIMEx_MasterConfigSynchronization>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80034bc:	f000 f9c4 	bl	8003848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034c0:	2360      	movs	r3, #96	; 0x60
 80034c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80034c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034d2:	463b      	mov	r3, r7
 80034d4:	2200      	movs	r2, #0
 80034d6:	4619      	mov	r1, r3
 80034d8:	4812      	ldr	r0, [pc, #72]	; (8003524 <MX_TIM2_Init+0x118>)
 80034da:	f003 fa39 	bl	8006950 <HAL_TIM_PWM_ConfigChannel>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80034e4:	f000 f9b0 	bl	8003848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034e8:	463b      	mov	r3, r7
 80034ea:	2208      	movs	r2, #8
 80034ec:	4619      	mov	r1, r3
 80034ee:	480d      	ldr	r0, [pc, #52]	; (8003524 <MX_TIM2_Init+0x118>)
 80034f0:	f003 fa2e 	bl	8006950 <HAL_TIM_PWM_ConfigChannel>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80034fa:	f000 f9a5 	bl	8003848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034fe:	463b      	mov	r3, r7
 8003500:	220c      	movs	r2, #12
 8003502:	4619      	mov	r1, r3
 8003504:	4807      	ldr	r0, [pc, #28]	; (8003524 <MX_TIM2_Init+0x118>)
 8003506:	f003 fa23 	bl	8006950 <HAL_TIM_PWM_ConfigChannel>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8003510:	f000 f99a 	bl	8003848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003514:	4803      	ldr	r0, [pc, #12]	; (8003524 <MX_TIM2_Init+0x118>)
 8003516:	f000 ff1d 	bl	8004354 <HAL_TIM_MspPostInit>

}
 800351a:	bf00      	nop
 800351c:	3738      	adds	r7, #56	; 0x38
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000520 	.word	0x20000520

08003528 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08c      	sub	sp, #48	; 0x30
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800352e:	f107 0320 	add.w	r3, r7, #32
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003548:	1d3b      	adds	r3, r7, #4
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003554:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <MX_TIM4_Init+0xdc>)
 8003556:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <MX_TIM4_Init+0xe0>)
 8003558:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 33999;
 800355a:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <MX_TIM4_Init+0xdc>)
 800355c:	f248 42cf 	movw	r2, #33999	; 0x84cf
 8003560:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003562:	4b28      	ldr	r3, [pc, #160]	; (8003604 <MX_TIM4_Init+0xdc>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003568:	4b26      	ldr	r3, [pc, #152]	; (8003604 <MX_TIM4_Init+0xdc>)
 800356a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800356e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <MX_TIM4_Init+0xdc>)
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <MX_TIM4_Init+0xdc>)
 8003578:	2200      	movs	r2, #0
 800357a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800357c:	4821      	ldr	r0, [pc, #132]	; (8003604 <MX_TIM4_Init+0xdc>)
 800357e:	f002 fc4f 	bl	8005e20 <HAL_TIM_Base_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8003588:	f000 f95e 	bl	8003848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800358c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003590:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003592:	f107 0320 	add.w	r3, r7, #32
 8003596:	4619      	mov	r1, r3
 8003598:	481a      	ldr	r0, [pc, #104]	; (8003604 <MX_TIM4_Init+0xdc>)
 800359a:	f003 faed 	bl	8006b78 <HAL_TIM_ConfigClockSource>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80035a4:	f000 f950 	bl	8003848 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80035a8:	4816      	ldr	r0, [pc, #88]	; (8003604 <MX_TIM4_Init+0xdc>)
 80035aa:	f002 fe03 	bl	80061b4 <HAL_TIM_IC_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80035b4:	f000 f948 	bl	8003848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035bc:	2300      	movs	r3, #0
 80035be:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	4619      	mov	r1, r3
 80035c6:	480f      	ldr	r0, [pc, #60]	; (8003604 <MX_TIM4_Init+0xdc>)
 80035c8:	f004 fa16 	bl	80079f8 <HAL_TIMEx_MasterConfigSynchronization>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80035d2:	f000 f939 	bl	8003848 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80035d6:	230a      	movs	r3, #10
 80035d8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80035da:	2301      	movs	r3, #1
 80035dc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	2200      	movs	r2, #0
 80035ea:	4619      	mov	r1, r3
 80035ec:	4805      	ldr	r0, [pc, #20]	; (8003604 <MX_TIM4_Init+0xdc>)
 80035ee:	f003 f912 	bl	8006816 <HAL_TIM_IC_ConfigChannel>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80035f8:	f000 f926 	bl	8003848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80035fc:	bf00      	nop
 80035fe:	3730      	adds	r7, #48	; 0x30
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	2000056c 	.word	0x2000056c
 8003608:	40000800 	.word	0x40000800

0800360c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	; 0x30
 8003610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003612:	f107 0320 	add.w	r3, r7, #32
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	605a      	str	r2, [r3, #4]
 800361c:	609a      	str	r2, [r3, #8]
 800361e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	605a      	str	r2, [r3, #4]
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <MX_TIM5_Init+0xf0>)
 800363a:	4a31      	ldr	r2, [pc, #196]	; (8003700 <MX_TIM5_Init+0xf4>)
 800363c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800363e:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <MX_TIM5_Init+0xf0>)
 8003640:	22a9      	movs	r2, #169	; 0xa9
 8003642:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <MX_TIM5_Init+0xf0>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 800364a:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <MX_TIM5_Init+0xf0>)
 800364c:	f04f 32ff 	mov.w	r2, #4294967295
 8003650:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003652:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <MX_TIM5_Init+0xf0>)
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003658:	4b28      	ldr	r3, [pc, #160]	; (80036fc <MX_TIM5_Init+0xf0>)
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800365e:	4827      	ldr	r0, [pc, #156]	; (80036fc <MX_TIM5_Init+0xf0>)
 8003660:	f002 fbde 	bl	8005e20 <HAL_TIM_Base_Init>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800366a:	f000 f8ed 	bl	8003848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800366e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003672:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003674:	f107 0320 	add.w	r3, r7, #32
 8003678:	4619      	mov	r1, r3
 800367a:	4820      	ldr	r0, [pc, #128]	; (80036fc <MX_TIM5_Init+0xf0>)
 800367c:	f003 fa7c 	bl	8006b78 <HAL_TIM_ConfigClockSource>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003686:	f000 f8df 	bl	8003848 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800368a:	481c      	ldr	r0, [pc, #112]	; (80036fc <MX_TIM5_Init+0xf0>)
 800368c:	f002 fd92 	bl	80061b4 <HAL_TIM_IC_Init>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8003696:	f000 f8d7 	bl	8003848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80036a2:	f107 0314 	add.w	r3, r7, #20
 80036a6:	4619      	mov	r1, r3
 80036a8:	4814      	ldr	r0, [pc, #80]	; (80036fc <MX_TIM5_Init+0xf0>)
 80036aa:	f004 f9a5 	bl	80079f8 <HAL_TIMEx_MasterConfigSynchronization>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80036b4:	f000 f8c8 	bl	8003848 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80036b8:	230a      	movs	r3, #10
 80036ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036bc:	2301      	movs	r3, #1
 80036be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036c8:	1d3b      	adds	r3, r7, #4
 80036ca:	2200      	movs	r2, #0
 80036cc:	4619      	mov	r1, r3
 80036ce:	480b      	ldr	r0, [pc, #44]	; (80036fc <MX_TIM5_Init+0xf0>)
 80036d0:	f003 f8a1 	bl	8006816 <HAL_TIM_IC_ConfigChannel>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 80036da:	f000 f8b5 	bl	8003848 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	2204      	movs	r2, #4
 80036e2:	4619      	mov	r1, r3
 80036e4:	4805      	ldr	r0, [pc, #20]	; (80036fc <MX_TIM5_Init+0xf0>)
 80036e6:	f003 f896 	bl	8006816 <HAL_TIM_IC_ConfigChannel>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 80036f0:	f000 f8aa 	bl	8003848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80036f4:	bf00      	nop
 80036f6:	3730      	adds	r7, #48	; 0x30
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	200005b8 	.word	0x200005b8
 8003700:	40000c00 	.word	0x40000c00

08003704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370a:	f107 0314 	add.w	r3, r7, #20
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800371a:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <MX_GPIO_Init+0x114>)
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	4a3e      	ldr	r2, [pc, #248]	; (8003818 <MX_GPIO_Init+0x114>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003726:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <MX_GPIO_Init+0x114>)
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <MX_GPIO_Init+0x114>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	4a38      	ldr	r2, [pc, #224]	; (8003818 <MX_GPIO_Init+0x114>)
 8003738:	f043 0320 	orr.w	r3, r3, #32
 800373c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800373e:	4b36      	ldr	r3, [pc, #216]	; (8003818 <MX_GPIO_Init+0x114>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800374a:	4b33      	ldr	r3, [pc, #204]	; (8003818 <MX_GPIO_Init+0x114>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	4a32      	ldr	r2, [pc, #200]	; (8003818 <MX_GPIO_Init+0x114>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003756:	4b30      	ldr	r3, [pc, #192]	; (8003818 <MX_GPIO_Init+0x114>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003762:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <MX_GPIO_Init+0x114>)
 8003764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <MX_GPIO_Init+0x114>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800376e:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <MX_GPIO_Init+0x114>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <MX_GPIO_Init+0x114>)
 800377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377e:	4a26      	ldr	r2, [pc, #152]	; (8003818 <MX_GPIO_Init+0x114>)
 8003780:	f043 0308 	orr.w	r3, r3, #8
 8003784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003786:	4b24      	ldr	r3, [pc, #144]	; (8003818 <MX_GPIO_Init+0x114>)
 8003788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003792:	2200      	movs	r2, #0
 8003794:	2120      	movs	r1, #32
 8003796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800379a:	f001 fab5 	bl	8004d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ldr_Pin|ldg_Pin, GPIO_PIN_RESET);
 800379e:	2200      	movs	r2, #0
 80037a0:	2106      	movs	r1, #6
 80037a2:	481e      	ldr	r0, [pc, #120]	; (800381c <MX_GPIO_Init+0x118>)
 80037a4:	f001 fab0 	bl	8004d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80037a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80037b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	4619      	mov	r1, r3
 80037be:	4818      	ldr	r0, [pc, #96]	; (8003820 <MX_GPIO_Init+0x11c>)
 80037c0:	f001 f920 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80037c4:	2320      	movs	r3, #32
 80037c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c8:	2301      	movs	r3, #1
 80037ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d0:	2300      	movs	r3, #0
 80037d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80037d4:	f107 0314 	add.w	r3, r7, #20
 80037d8:	4619      	mov	r1, r3
 80037da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037de:	f001 f911 	bl	8004a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ldr_Pin ldg_Pin */
  GPIO_InitStruct.Pin = ldr_Pin|ldg_Pin;
 80037e2:	2306      	movs	r3, #6
 80037e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e6:	2301      	movs	r3, #1
 80037e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	2300      	movs	r3, #0
 80037f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f2:	f107 0314 	add.w	r3, r7, #20
 80037f6:	4619      	mov	r1, r3
 80037f8:	4808      	ldr	r0, [pc, #32]	; (800381c <MX_GPIO_Init+0x118>)
 80037fa:	f001 f903 	bl	8004a04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80037fe:	2200      	movs	r2, #0
 8003800:	2100      	movs	r1, #0
 8003802:	2028      	movs	r0, #40	; 0x28
 8003804:	f001 f8c9 	bl	800499a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003808:	2028      	movs	r0, #40	; 0x28
 800380a:	f001 f8e0 	bl	80049ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800380e:	bf00      	nop
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	48000400 	.word	0x48000400
 8003820:	48000800 	.word	0x48000800

08003824 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800382c:	1d39      	adds	r1, r7, #4
 800382e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003832:	2201      	movs	r2, #1
 8003834:	4803      	ldr	r0, [pc, #12]	; (8003844 <__io_putchar+0x20>)
 8003836:	f004 fabd 	bl	8007db4 <HAL_UART_Transmit>

  return ch;
 800383a:	687b      	ldr	r3, [r7, #4]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000204 	.word	0x20000204

08003848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800384c:	b672      	cpsid	i
}
 800384e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003850:	e7fe      	b.n	8003850 <Error_Handler+0x8>

08003852 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003882:	f7fd f971 	bl	8000b68 <__aeabi_dcmpgt>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d006      	beq.n	800389a <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8003898:	e011      	b.n	80038be <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80038a6:	f7fd f941 	bl	8000b2c <__aeabi_dcmplt>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d100      	bne.n	80038b2 <PID_Init+0x60>
}
 80038b0:	e005      	b.n	80038be <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6278      	str	r0, [r7, #36]	; 0x24
 80038d0:	6239      	str	r1, [r7, #32]
 80038d2:	61fa      	str	r2, [r7, #28]
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	ed87 0b04 	vstr	d0, [r7, #16]
 80038da:	ed87 1b02 	vstr	d1, [r7, #8]
 80038de:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	6a3a      	ldr	r2, [r7, #32]
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	2200      	movs	r2, #0
 80038f8:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80038fa:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003950 <PID+0x88>
 80038fe:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8003958 <PID+0x90>
 8003902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003904:	f000 f934 	bl	8003b70 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	2264      	movs	r2, #100	; 0x64
 800390c:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800390e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003912:	4619      	mov	r1, r3
 8003914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003916:	f000 fa41 	bl	8003d9c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800391a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800391e:	4619      	mov	r1, r3
 8003920:	ed97 2b00 	vldr	d2, [r7]
 8003924:	ed97 1b02 	vldr	d1, [r7, #8]
 8003928:	ed97 0b04 	vldr	d0, [r7, #16]
 800392c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800392e:	f000 f98d 	bl	8003c4c <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003932:	f000 ff29 	bl	8004788 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	1ad2      	subs	r2, r2, r3
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	605a      	str	r2, [r3, #4]
	
}
 8003942:	bf00      	nop
 8003944:	3728      	adds	r7, #40	; 0x28
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	f3af 8000 	nop.w
 8003950:	00000000 	.word	0x00000000
 8003954:	406fe000 	.word	0x406fe000
	...

08003960 <PID_Compute>:
// 	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
// }

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8003960:	b5b0      	push	{r4, r5, r7, lr}
 8003962:	b08c      	sub	sp, #48	; 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <PID_Compute+0x14>
	{
		return _FALSE;
 8003970:	2300      	movs	r3, #0
 8003972:	e0db      	b.n	8003b2c <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003974:	f000 ff08 	bl	8004788 <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	429a      	cmp	r2, r3
 800398c:	f0c0 80cd 	bcc.w	8003b2a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039a8:	f7fc fc96 	bl	80002d8 <__aeabi_dsub>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80039ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039be:	f7fc fc8b 	bl	80002d8 <__aeabi_dsub>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80039d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039da:	f7fc fe35 	bl	8000648 <__aeabi_dmul>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4620      	mov	r0, r4
 80039e4:	4629      	mov	r1, r5
 80039e6:	f7fc fc79 	bl	80002dc <__adddf3>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d114      	bne.n	8003a26 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a0c:	f7fc fe1c 	bl	8000648 <__aeabi_dmul>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4620      	mov	r0, r4
 8003a16:	4629      	mov	r1, r5
 8003a18:	f7fc fc5e 	bl	80002d8 <__aeabi_dsub>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003a32:	f7fd f899 	bl	8000b68 <__aeabi_dcmpgt>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d006      	beq.n	8003a4a <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003a48:	e010      	b.n	8003a6c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003a56:	f7fd f869 	bl	8000b2c <__aeabi_dcmplt>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003a7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a7e:	f7fc fde3 	bl	8000648 <__aeabi_dmul>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003a8a:	e005      	b.n	8003a98 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aa8:	f7fc fdce 	bl	8000648 <__aeabi_dmul>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	f7fc fc10 	bl	80002d8 <__aeabi_dsub>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ac0:	f7fc fc0c 	bl	80002dc <__adddf3>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003ad2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ad6:	f7fd f847 	bl	8000b68 <__aeabi_dcmpgt>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003ae6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003aea:	e00e      	b.n	8003b0a <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003af2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003af6:	f7fd f819 	bl	8000b2c <__aeabi_dcmplt>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d004      	beq.n	8003b0a <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003b06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b12:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8003b2a:	2300      	movs	r3, #0
	}
	
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3730      	adds	r7, #48	; 0x30
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bdb0      	pop	{r4, r5, r7, pc}

08003b34 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	bf0c      	ite	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	2300      	movne	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d006      	beq.n	8003b62 <PID_SetMode+0x2e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fe78 	bl	8003852 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	705a      	strb	r2, [r3, #1]
	
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6178      	str	r0, [r7, #20]
 8003b78:	ed87 0b02 	vstr	d0, [r7, #8]
 8003b7c:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b88:	f7fc ffe4 	bl	8000b54 <__aeabi_dcmpge>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d158      	bne.n	8003c44 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8003b92:	6979      	ldr	r1, [r7, #20]
 8003b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b98:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8003b9c:	6979      	ldr	r1, [r7, #20]
 8003b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ba2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	785b      	ldrb	r3, [r3, #1]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d04b      	beq.n	8003c46 <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003bbc:	f7fc ffd4 	bl	8000b68 <__aeabi_dcmpgt>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003bd0:	e9c1 2300 	strd	r2, r3, [r1]
 8003bd4:	e012      	b.n	8003bfc <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003be4:	f7fc ffa2 	bl	8000b2c <__aeabi_dcmplt>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003bf8:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003c08:	f7fc ffae 	bl	8000b68 <__aeabi_dcmpgt>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d006      	beq.n	8003c20 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003c18:	6979      	ldr	r1, [r7, #20]
 8003c1a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003c1e:	e012      	b.n	8003c46 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003c2c:	f7fc ff7e 	bl	8000b2c <__aeabi_dcmplt>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003c3c:	6979      	ldr	r1, [r7, #20]
 8003c3e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003c42:	e000      	b.n	8003c46 <PID_SetOutputLimits+0xd6>
		return;
 8003c44:	bf00      	nop
		}
		else { }
		
	}
	
}
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	61f8      	str	r0, [r7, #28]
 8003c54:	ed87 0b04 	vstr	d0, [r7, #16]
 8003c58:	ed87 1b02 	vstr	d1, [r7, #8]
 8003c5c:	ed87 2b00 	vstr	d2, [r7]
 8003c60:	460b      	mov	r3, r1
 8003c62:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c70:	f7fc ff5c 	bl	8000b2c <__aeabi_dcmplt>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 8089 	bne.w	8003d8e <PID_SetTunings2+0x142>
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c88:	f7fc ff50 	bl	8000b2c <__aeabi_dcmplt>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d17d      	bne.n	8003d8e <PID_SetTunings2+0x142>
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c9e:	f7fc ff45 	bl	8000b2c <__aeabi_dcmplt>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d172      	bne.n	8003d8e <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	7efa      	ldrb	r2, [r7, #27]
 8003cac:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003cae:	7efb      	ldrb	r3, [r7, #27]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8003cc0:	69f9      	ldr	r1, [r7, #28]
 8003cc2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cc6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8003cca:	69f9      	ldr	r1, [r7, #28]
 8003ccc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cd0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003cd4:	69f9      	ldr	r1, [r7, #28]
 8003cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cda:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fc36 	bl	8000554 <__aeabi_ui2d>
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	4b2a      	ldr	r3, [pc, #168]	; (8003d98 <PID_SetTunings2+0x14c>)
 8003cee:	f7fc fdd5 	bl	800089c <__aeabi_ddiv>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8003cfa:	69f9      	ldr	r1, [r7, #28]
 8003cfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d00:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d0c:	f7fc fc9c 	bl	8000648 <__aeabi_dmul>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	69f9      	ldr	r1, [r7, #28]
 8003d16:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8003d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d22:	f7fc fdbb 	bl	800089c <__aeabi_ddiv>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	69f9      	ldr	r1, [r7, #28]
 8003d2c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	78db      	ldrb	r3, [r3, #3]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d12b      	bne.n	8003d90 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003d3e:	f04f 0000 	mov.w	r0, #0
 8003d42:	f04f 0100 	mov.w	r1, #0
 8003d46:	f7fc fac7 	bl	80002d8 <__aeabi_dsub>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	69f9      	ldr	r1, [r7, #28]
 8003d50:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003d5a:	f04f 0000 	mov.w	r0, #0
 8003d5e:	f04f 0100 	mov.w	r1, #0
 8003d62:	f7fc fab9 	bl	80002d8 <__aeabi_dsub>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	69f9      	ldr	r1, [r7, #28]
 8003d6c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003d76:	f04f 0000 	mov.w	r0, #0
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	f7fc faab 	bl	80002d8 <__aeabi_dsub>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	69f9      	ldr	r1, [r7, #28]
 8003d88:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003d8c:	e000      	b.n	8003d90 <PID_SetTunings2+0x144>
		return;
 8003d8e:	bf00      	nop
		
	}
	
}
 8003d90:	3728      	adds	r7, #40	; 0x28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	408f4000 	.word	0x408f4000

08003d9c <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02e      	beq.n	8003e0e <PID_SetControllerDirection+0x72>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	78db      	ldrb	r3, [r3, #3]
 8003db4:	78fa      	ldrb	r2, [r7, #3]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d029      	beq.n	8003e0e <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003dc0:	f04f 0000 	mov.w	r0, #0
 8003dc4:	f04f 0100 	mov.w	r1, #0
 8003dc8:	f7fc fa86 	bl	80002d8 <__aeabi_dsub>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003ddc:	f04f 0000 	mov.w	r0, #0
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	f7fc fa78 	bl	80002d8 <__aeabi_dsub>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003df8:	f04f 0000 	mov.w	r0, #0
 8003dfc:	f04f 0100 	mov.w	r1, #0
 8003e00:	f7fc fa6a 	bl	80002d8 <__aeabi_dsub>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	70da      	strb	r2, [r3, #3]
	
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003e1c:	b5b0      	push	{r4, r5, r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	dd2e      	ble.n	8003e8a <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003e2c:	6838      	ldr	r0, [r7, #0]
 8003e2e:	f7fc fba1 	bl	8000574 <__aeabi_i2d>
 8003e32:	4604      	mov	r4, r0
 8003e34:	460d      	mov	r5, r1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc fb8a 	bl	8000554 <__aeabi_ui2d>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4620      	mov	r0, r4
 8003e46:	4629      	mov	r1, r5
 8003e48:	f7fc fd28 	bl	800089c <__aeabi_ddiv>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003e5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e5e:	f7fc fbf3 	bl	8000648 <__aeabi_dmul>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003e72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e76:	f7fc fd11 	bl	800089c <__aeabi_ddiv>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <HAL_MspInit+0x44>)
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <HAL_MspInit+0x44>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <HAL_MspInit+0x44>)
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	607b      	str	r3, [r7, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_MspInit+0x44>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <HAL_MspInit+0x44>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_MspInit+0x44>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003eca:	f001 f817 	bl	8004efc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000

08003edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b0a8      	sub	sp, #160	; 0xa0
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ef4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ef8:	2254      	movs	r2, #84	; 0x54
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 fea1 	bl	8008c44 <memset>
  if(huart->Instance==LPUART1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4ab5      	ldr	r2, [pc, #724]	; (80041dc <HAL_UART_MspInit+0x300>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d13c      	bne.n	8003f86 <HAL_UART_MspInit+0xaa>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003f10:	2300      	movs	r3, #0
 8003f12:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 fd33 	bl	8005984 <HAL_RCCEx_PeriphCLKConfig>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f24:	f7ff fc90 	bl	8003848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003f28:	4bad      	ldr	r3, [pc, #692]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	4aac      	ldr	r2, [pc, #688]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003f34:	4baa      	ldr	r3, [pc, #680]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f40:	4ba7      	ldr	r3, [pc, #668]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f44:	4aa6      	ldr	r2, [pc, #664]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f4c:	4ba4      	ldr	r3, [pc, #656]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	633b      	str	r3, [r7, #48]	; 0x30
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003f58:	230c      	movs	r3, #12
 8003f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003f70:	230c      	movs	r3, #12
 8003f72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f76:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f80:	f000 fd40 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f84:	e126      	b.n	80041d4 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==UART4)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a96      	ldr	r2, [pc, #600]	; (80041e4 <HAL_UART_MspInit+0x308>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d13c      	bne.n	800400a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003f90:	2308      	movs	r3, #8
 8003f92:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003f94:	2300      	movs	r3, #0
 8003f96:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 fcf1 	bl	8005984 <HAL_RCCEx_PeriphCLKConfig>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003fa8:	f7ff fc4e 	bl	8003848 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8003fac:	4b8c      	ldr	r3, [pc, #560]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	4a8b      	ldr	r2, [pc, #556]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003fb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb8:	4b89      	ldr	r3, [pc, #548]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc4:	4b86      	ldr	r3, [pc, #536]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	4a85      	ldr	r2, [pc, #532]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003fca:	f043 0304 	orr.w	r3, r3, #4
 8003fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd0:	4b83      	ldr	r3, [pc, #524]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8003fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003fe0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003ff6:	2305      	movs	r3, #5
 8003ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ffc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004000:	4619      	mov	r1, r3
 8004002:	4879      	ldr	r0, [pc, #484]	; (80041e8 <HAL_UART_MspInit+0x30c>)
 8004004:	f000 fcfe 	bl	8004a04 <HAL_GPIO_Init>
}
 8004008:	e0e4      	b.n	80041d4 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==UART5)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a77      	ldr	r2, [pc, #476]	; (80041ec <HAL_UART_MspInit+0x310>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d15d      	bne.n	80040d0 <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004014:	2310      	movs	r3, #16
 8004016:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8004018:	2300      	movs	r3, #0
 800401a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800401c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004020:	4618      	mov	r0, r3
 8004022:	f001 fcaf 	bl	8005984 <HAL_RCCEx_PeriphCLKConfig>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_UART_MspInit+0x154>
      Error_Handler();
 800402c:	f7ff fc0c 	bl	8003848 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004030:	4b6b      	ldr	r3, [pc, #428]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	4a6a      	ldr	r2, [pc, #424]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8004036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800403a:	6593      	str	r3, [r2, #88]	; 0x58
 800403c:	4b68      	ldr	r3, [pc, #416]	; (80041e0 <HAL_UART_MspInit+0x304>)
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004048:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_UART_MspInit+0x304>)
 800404a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404c:	4a64      	ldr	r2, [pc, #400]	; (80041e0 <HAL_UART_MspInit+0x304>)
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004054:	4b62      	ldr	r3, [pc, #392]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8004056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004060:	4b5f      	ldr	r3, [pc, #380]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8004062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004064:	4a5e      	ldr	r2, [pc, #376]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8004066:	f043 0308 	orr.w	r3, r3, #8
 800406a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800406c:	4b5c      	ldr	r3, [pc, #368]	; (80041e0 <HAL_UART_MspInit+0x304>)
 800406e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800407c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004080:	2302      	movs	r3, #2
 8004082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004086:	2300      	movs	r3, #0
 8004088:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004092:	2305      	movs	r3, #5
 8004094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004098:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800409c:	4619      	mov	r1, r3
 800409e:	4852      	ldr	r0, [pc, #328]	; (80041e8 <HAL_UART_MspInit+0x30c>)
 80040a0:	f000 fcb0 	bl	8004a04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040a4:	2304      	movs	r3, #4
 80040a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040aa:	2302      	movs	r3, #2
 80040ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80040bc:	2305      	movs	r3, #5
 80040be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80040c6:	4619      	mov	r1, r3
 80040c8:	4849      	ldr	r0, [pc, #292]	; (80041f0 <HAL_UART_MspInit+0x314>)
 80040ca:	f000 fc9b 	bl	8004a04 <HAL_GPIO_Init>
}
 80040ce:	e081      	b.n	80041d4 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==USART1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a47      	ldr	r2, [pc, #284]	; (80041f4 <HAL_UART_MspInit+0x318>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d13b      	bne.n	8004152 <HAL_UART_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040da:	2301      	movs	r3, #1
 80040dc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040de:	2300      	movs	r3, #0
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 fc4c 	bl	8005984 <HAL_RCCEx_PeriphCLKConfig>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 80040f2:	f7ff fba9 	bl	8003848 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80040f6:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <HAL_UART_MspInit+0x304>)
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	4a39      	ldr	r2, [pc, #228]	; (80041e0 <HAL_UART_MspInit+0x304>)
 80040fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004100:	6613      	str	r3, [r2, #96]	; 0x60
 8004102:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8004104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800410e:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	4a33      	ldr	r2, [pc, #204]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8004114:	f043 0304 	orr.w	r3, r3, #4
 8004118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800411a:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <HAL_UART_MspInit+0x304>)
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004126:	2330      	movs	r3, #48	; 0x30
 8004128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412c:	2302      	movs	r3, #2
 800412e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800413e:	2307      	movs	r3, #7
 8004140:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004144:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004148:	4619      	mov	r1, r3
 800414a:	4827      	ldr	r0, [pc, #156]	; (80041e8 <HAL_UART_MspInit+0x30c>)
 800414c:	f000 fc5a 	bl	8004a04 <HAL_GPIO_Init>
}
 8004150:	e040      	b.n	80041d4 <HAL_UART_MspInit+0x2f8>
  else if(huart->Instance==USART3)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a28      	ldr	r2, [pc, #160]	; (80041f8 <HAL_UART_MspInit+0x31c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d13b      	bne.n	80041d4 <HAL_UART_MspInit+0x2f8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800415c:	2304      	movs	r3, #4
 800415e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004160:	2300      	movs	r3, #0
 8004162:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004164:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004168:	4618      	mov	r0, r3
 800416a:	f001 fc0b 	bl	8005984 <HAL_RCCEx_PeriphCLKConfig>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <HAL_UART_MspInit+0x29c>
      Error_Handler();
 8004174:	f7ff fb68 	bl	8003848 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004178:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <HAL_UART_MspInit+0x304>)
 800417a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_UART_MspInit+0x304>)
 800417e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004182:	6593      	str	r3, [r2, #88]	; 0x58
 8004184:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004190:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8004192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004194:	4a12      	ldr	r2, [pc, #72]	; (80041e0 <HAL_UART_MspInit+0x304>)
 8004196:	f043 0302 	orr.w	r3, r3, #2
 800419a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800419c:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <HAL_UART_MspInit+0x304>)
 800419e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80041a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b0:	2302      	movs	r3, #2
 80041b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041c2:	2307      	movs	r3, #7
 80041c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80041cc:	4619      	mov	r1, r3
 80041ce:	480b      	ldr	r0, [pc, #44]	; (80041fc <HAL_UART_MspInit+0x320>)
 80041d0:	f000 fc18 	bl	8004a04 <HAL_GPIO_Init>
}
 80041d4:	bf00      	nop
 80041d6:	37a0      	adds	r7, #160	; 0xa0
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40008000 	.word	0x40008000
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40004c00 	.word	0x40004c00
 80041e8:	48000800 	.word	0x48000800
 80041ec:	40005000 	.word	0x40005000
 80041f0:	48000c00 	.word	0x48000c00
 80041f4:	40013800 	.word	0x40013800
 80041f8:	40004800 	.word	0x40004800
 80041fc:	48000400 	.word	0x48000400

08004200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08e      	sub	sp, #56	; 0x38
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	60da      	str	r2, [r3, #12]
 8004216:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a49      	ldr	r2, [pc, #292]	; (8004344 <HAL_TIM_Base_MspInit+0x144>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10c      	bne.n	800423c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004222:	4b49      	ldr	r3, [pc, #292]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 8004224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004226:	4a48      	ldr	r2, [pc, #288]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 8004228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800422c:	6613      	str	r3, [r2, #96]	; 0x60
 800422e:	4b46      	ldr	r3, [pc, #280]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800423a:	e07f      	b.n	800433c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004244:	d10c      	bne.n	8004260 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004246:	4b40      	ldr	r3, [pc, #256]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 8004248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424a:	4a3f      	ldr	r2, [pc, #252]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6593      	str	r3, [r2, #88]	; 0x58
 8004252:	4b3d      	ldr	r3, [pc, #244]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	69fb      	ldr	r3, [r7, #28]
}
 800425e:	e06d      	b.n	800433c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM4)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a39      	ldr	r2, [pc, #228]	; (800434c <HAL_TIM_Base_MspInit+0x14c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d132      	bne.n	80042d0 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800426a:	4b37      	ldr	r3, [pc, #220]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	4a36      	ldr	r2, [pc, #216]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 8004270:	f043 0304 	orr.w	r3, r3, #4
 8004274:	6593      	str	r3, [r2, #88]	; 0x58
 8004276:	4b34      	ldr	r3, [pc, #208]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004282:	4b31      	ldr	r3, [pc, #196]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 8004284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004286:	4a30      	ldr	r2, [pc, #192]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800428e:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800429a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a0:	2302      	movs	r3, #2
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a8:	2300      	movs	r3, #0
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80042ac:	230a      	movs	r3, #10
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b4:	4619      	mov	r1, r3
 80042b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042ba:	f000 fba3 	bl	8004a04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	201e      	movs	r0, #30
 80042c4:	f000 fb69 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042c8:	201e      	movs	r0, #30
 80042ca:	f000 fb80 	bl	80049ce <HAL_NVIC_EnableIRQ>
}
 80042ce:	e035      	b.n	800433c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM5)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <HAL_TIM_Base_MspInit+0x150>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d130      	bne.n	800433c <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	4a1a      	ldr	r2, [pc, #104]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 80042e0:	f043 0308 	orr.w	r3, r3, #8
 80042e4:	6593      	str	r3, [r2, #88]	; 0x58
 80042e6:	4b18      	ldr	r3, [pc, #96]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 80042f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f6:	4a14      	ldr	r2, [pc, #80]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042fe:	4b12      	ldr	r3, [pc, #72]	; (8004348 <HAL_TIM_Base_MspInit+0x148>)
 8004300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ul_Pin|ur_Pin;
 800430a:	2303      	movs	r3, #3
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430e:	2302      	movs	r3, #2
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004316:	2300      	movs	r3, #0
 8004318:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800431a:	2302      	movs	r3, #2
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800431e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004322:	4619      	mov	r1, r3
 8004324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004328:	f000 fb6c 	bl	8004a04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800432c:	2200      	movs	r2, #0
 800432e:	2100      	movs	r1, #0
 8004330:	2032      	movs	r0, #50	; 0x32
 8004332:	f000 fb32 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004336:	2032      	movs	r0, #50	; 0x32
 8004338:	f000 fb49 	bl	80049ce <HAL_NVIC_EnableIRQ>
}
 800433c:	bf00      	nop
 800433e:	3738      	adds	r7, #56	; 0x38
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40021000 	.word	0x40021000
 800434c:	40000800 	.word	0x40000800
 8004350:	40000c00 	.word	0x40000c00

08004354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08a      	sub	sp, #40	; 0x28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800435c:	f107 0314 	add.w	r3, r7, #20
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a2c      	ldr	r2, [pc, #176]	; (8004424 <HAL_TIM_MspPostInit+0xd0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d11c      	bne.n	80043b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004376:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <HAL_TIM_MspPostInit+0xd4>)
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	4a2b      	ldr	r2, [pc, #172]	; (8004428 <HAL_TIM_MspPostInit+0xd4>)
 800437c:	f043 0304 	orr.w	r3, r3, #4
 8004380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004382:	4b29      	ldr	r3, [pc, #164]	; (8004428 <HAL_TIM_MspPostInit+0xd4>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = uen_Pin;
 800438e:	2301      	movs	r3, #1
 8004390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004392:	2302      	movs	r3, #2
 8004394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439a:	2300      	movs	r3, #0
 800439c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800439e:	2302      	movs	r3, #2
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uen_GPIO_Port, &GPIO_InitStruct);
 80043a2:	f107 0314 	add.w	r3, r7, #20
 80043a6:	4619      	mov	r1, r3
 80043a8:	4820      	ldr	r0, [pc, #128]	; (800442c <HAL_TIM_MspPostInit+0xd8>)
 80043aa:	f000 fb2b 	bl	8004a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80043ae:	e034      	b.n	800441a <HAL_TIM_MspPostInit+0xc6>
  else if(htim->Instance==TIM2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d12f      	bne.n	800441a <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ba:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <HAL_TIM_MspPostInit+0xd4>)
 80043bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043be:	4a1a      	ldr	r2, [pc, #104]	; (8004428 <HAL_TIM_MspPostInit+0xd4>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043c6:	4b18      	ldr	r3, [pc, #96]	; (8004428 <HAL_TIM_MspPostInit+0xd4>)
 80043c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d8:	2302      	movs	r3, #2
 80043da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e0:	2300      	movs	r3, #0
 80043e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80043e4:	230a      	movs	r3, #10
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e8:	f107 0314 	add.w	r3, r7, #20
 80043ec:	4619      	mov	r1, r3
 80043ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043f2:	f000 fb07 	bl	8004a04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80043f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fc:	2302      	movs	r3, #2
 80043fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004404:	2300      	movs	r3, #0
 8004406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004408:	2301      	movs	r3, #1
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440c:	f107 0314 	add.w	r3, r7, #20
 8004410:	4619      	mov	r1, r3
 8004412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004416:	f000 faf5 	bl	8004a04 <HAL_GPIO_Init>
}
 800441a:	bf00      	nop
 800441c:	3728      	adds	r7, #40	; 0x28
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40021000 	.word	0x40021000
 800442c:	48000800 	.word	0x48000800

08004430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004434:	e7fe      	b.n	8004434 <NMI_Handler+0x4>

08004436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800443a:	e7fe      	b.n	800443a <HardFault_Handler+0x4>

0800443c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004440:	e7fe      	b.n	8004440 <MemManage_Handler+0x4>

08004442 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004442:	b480      	push	{r7}
 8004444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004446:	e7fe      	b.n	8004446 <BusFault_Handler+0x4>

08004448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800444c:	e7fe      	b.n	800444c <UsageFault_Handler+0x4>

0800444e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004452:	bf00      	nop
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004460:	bf00      	nop
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800446a:	b480      	push	{r7}
 800446c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800447c:	f000 f972 	bl	8004764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004480:	bf00      	nop
 8004482:	bd80      	pop	{r7, pc}

08004484 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004488:	4802      	ldr	r0, [pc, #8]	; (8004494 <TIM4_IRQHandler+0x10>)
 800448a:	f002 f845 	bl	8006518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	2000056c 	.word	0x2000056c

08004498 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800449c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044a0:	f000 fc64 	bl	8004d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80044ac:	4802      	ldr	r0, [pc, #8]	; (80044b8 <TIM5_IRQHandler+0x10>)
 80044ae:	f002 f833 	bl	8006518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80044b2:	bf00      	nop
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	200005b8 	.word	0x200005b8

080044bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return 1;
 80044c0:	2301      	movs	r3, #1
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_kill>:

int _kill(int pid, int sig)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044d6:	f004 fb8b 	bl	8008bf0 <__errno>
 80044da:	4603      	mov	r3, r0
 80044dc:	2216      	movs	r2, #22
 80044de:	601a      	str	r2, [r3, #0]
  return -1;
 80044e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <_exit>:

void _exit (int status)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80044f4:	f04f 31ff 	mov.w	r1, #4294967295
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff ffe7 	bl	80044cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80044fe:	e7fe      	b.n	80044fe <_exit+0x12>

08004500 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	e00a      	b.n	8004528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004512:	f3af 8000 	nop.w
 8004516:	4601      	mov	r1, r0
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	60ba      	str	r2, [r7, #8]
 800451e:	b2ca      	uxtb	r2, r1
 8004520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	3301      	adds	r3, #1
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	dbf0      	blt.n	8004512 <_read+0x12>
  }

  return len;
 8004530:	687b      	ldr	r3, [r7, #4]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b086      	sub	sp, #24
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e009      	b.n	8004560 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	60ba      	str	r2, [r7, #8]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff f965 	bl	8003824 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	3301      	adds	r3, #1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	dbf1      	blt.n	800454c <_write+0x12>
  }
  return len;
 8004568:	687b      	ldr	r3, [r7, #4]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <_close>:

int _close(int file)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800459a:	605a      	str	r2, [r3, #4]
  return 0;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <_isatty>:

int _isatty(int file)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045b2:	2301      	movs	r3, #1
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045e4:	4a14      	ldr	r2, [pc, #80]	; (8004638 <_sbrk+0x5c>)
 80045e6:	4b15      	ldr	r3, [pc, #84]	; (800463c <_sbrk+0x60>)
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045f0:	4b13      	ldr	r3, [pc, #76]	; (8004640 <_sbrk+0x64>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045f8:	4b11      	ldr	r3, [pc, #68]	; (8004640 <_sbrk+0x64>)
 80045fa:	4a12      	ldr	r2, [pc, #72]	; (8004644 <_sbrk+0x68>)
 80045fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045fe:	4b10      	ldr	r3, [pc, #64]	; (8004640 <_sbrk+0x64>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	429a      	cmp	r2, r3
 800460a:	d207      	bcs.n	800461c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800460c:	f004 faf0 	bl	8008bf0 <__errno>
 8004610:	4603      	mov	r3, r0
 8004612:	220c      	movs	r2, #12
 8004614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004616:	f04f 33ff 	mov.w	r3, #4294967295
 800461a:	e009      	b.n	8004630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800461c:	4b08      	ldr	r3, [pc, #32]	; (8004640 <_sbrk+0x64>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004622:	4b07      	ldr	r3, [pc, #28]	; (8004640 <_sbrk+0x64>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	4a05      	ldr	r2, [pc, #20]	; (8004640 <_sbrk+0x64>)
 800462c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800462e:	68fb      	ldr	r3, [r7, #12]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20020000 	.word	0x20020000
 800463c:	00000400 	.word	0x00000400
 8004640:	200008a4 	.word	0x200008a4
 8004644:	200008c0 	.word	0x200008c0

08004648 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <SystemInit+0x20>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	4a05      	ldr	r2, [pc, #20]	; (8004668 <SystemInit+0x20>)
 8004654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800466c:	480d      	ldr	r0, [pc, #52]	; (80046a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800466e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004670:	480d      	ldr	r0, [pc, #52]	; (80046a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004672:	490e      	ldr	r1, [pc, #56]	; (80046ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8004674:	4a0e      	ldr	r2, [pc, #56]	; (80046b0 <LoopForever+0xe>)
  movs r3, #0
 8004676:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004678:	e002      	b.n	8004680 <LoopCopyDataInit>

0800467a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800467a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800467c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800467e:	3304      	adds	r3, #4

08004680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004684:	d3f9      	bcc.n	800467a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004686:	4a0b      	ldr	r2, [pc, #44]	; (80046b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004688:	4c0b      	ldr	r4, [pc, #44]	; (80046b8 <LoopForever+0x16>)
  movs r3, #0
 800468a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800468c:	e001      	b.n	8004692 <LoopFillZerobss>

0800468e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800468e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004690:	3204      	adds	r2, #4

08004692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004694:	d3fb      	bcc.n	800468e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004696:	f7ff ffd7 	bl	8004648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800469a:	f004 faaf 	bl	8008bfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800469e:	f7fe fae7 	bl	8002c70 <main>

080046a2 <LoopForever>:

LoopForever:
    b LoopForever
 80046a2:	e7fe      	b.n	80046a2 <LoopForever>
  ldr   r0, =_estack
 80046a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046ac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80046b0:	0800be24 	.word	0x0800be24
  ldr r2, =_sbss
 80046b4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80046b8:	200008bc 	.word	0x200008bc

080046bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046bc:	e7fe      	b.n	80046bc <ADC1_2_IRQHandler>

080046be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046c8:	2003      	movs	r0, #3
 80046ca:	f000 f95b 	bl	8004984 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046ce:	2000      	movs	r0, #0
 80046d0:	f000 f80e 	bl	80046f0 <HAL_InitTick>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	71fb      	strb	r3, [r7, #7]
 80046de:	e001      	b.n	80046e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046e0:	f7ff fbd8 	bl	8003e94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046e4:	79fb      	ldrb	r3, [r7, #7]

}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80046fc:	4b16      	ldr	r3, [pc, #88]	; (8004758 <HAL_InitTick+0x68>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d022      	beq.n	800474a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004704:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_InitTick+0x6c>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b13      	ldr	r3, [pc, #76]	; (8004758 <HAL_InitTick+0x68>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004710:	fbb1 f3f3 	udiv	r3, r1, r3
 8004714:	fbb2 f3f3 	udiv	r3, r2, r3
 8004718:	4618      	mov	r0, r3
 800471a:	f000 f966 	bl	80049ea <HAL_SYSTICK_Config>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10f      	bne.n	8004744 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b0f      	cmp	r3, #15
 8004728:	d809      	bhi.n	800473e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800472a:	2200      	movs	r2, #0
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	f04f 30ff 	mov.w	r0, #4294967295
 8004732:	f000 f932 	bl	800499a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004736:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <HAL_InitTick+0x70>)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	e007      	b.n	800474e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	e004      	b.n	800474e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	e001      	b.n	800474e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000014 	.word	0x20000014
 800475c:	2000000c 	.word	0x2000000c
 8004760:	20000010 	.word	0x20000010

08004764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_IncTick+0x1c>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_IncTick+0x20>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4413      	add	r3, r2
 8004772:	4a03      	ldr	r2, [pc, #12]	; (8004780 <HAL_IncTick+0x1c>)
 8004774:	6013      	str	r3, [r2, #0]
}
 8004776:	bf00      	nop
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	200008a8 	.word	0x200008a8
 8004784:	20000014 	.word	0x20000014

08004788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return uwTick;
 800478c:	4b03      	ldr	r3, [pc, #12]	; (800479c <HAL_GetTick+0x14>)
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	4618      	mov	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	200008a8 	.word	0x200008a8

080047a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a8:	f7ff ffee 	bl	8004788 <HAL_GetTick>
 80047ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d004      	beq.n	80047c4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <HAL_Delay+0x40>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047c4:	bf00      	nop
 80047c6:	f7ff ffdf 	bl	8004788 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d8f7      	bhi.n	80047c6 <HAL_Delay+0x26>
  {
  }
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000014 	.word	0x20000014

080047e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <__NVIC_SetPriorityGrouping+0x44>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004800:	4013      	ands	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800480c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004816:	4a04      	ldr	r2, [pc, #16]	; (8004828 <__NVIC_SetPriorityGrouping+0x44>)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	60d3      	str	r3, [r2, #12]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000ed00 	.word	0xe000ed00

0800482c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <__NVIC_GetPriorityGrouping+0x18>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	f003 0307 	and.w	r3, r3, #7
}
 800483a:	4618      	mov	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004856:	2b00      	cmp	r3, #0
 8004858:	db0b      	blt.n	8004872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	f003 021f 	and.w	r2, r3, #31
 8004860:	4907      	ldr	r1, [pc, #28]	; (8004880 <__NVIC_EnableIRQ+0x38>)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	2001      	movs	r0, #1
 800486a:	fa00 f202 	lsl.w	r2, r0, r2
 800486e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	e000e100 	.word	0xe000e100

08004884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	6039      	str	r1, [r7, #0]
 800488e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004894:	2b00      	cmp	r3, #0
 8004896:	db0a      	blt.n	80048ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	b2da      	uxtb	r2, r3
 800489c:	490c      	ldr	r1, [pc, #48]	; (80048d0 <__NVIC_SetPriority+0x4c>)
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	0112      	lsls	r2, r2, #4
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	440b      	add	r3, r1
 80048a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048ac:	e00a      	b.n	80048c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	4908      	ldr	r1, [pc, #32]	; (80048d4 <__NVIC_SetPriority+0x50>)
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	3b04      	subs	r3, #4
 80048bc:	0112      	lsls	r2, r2, #4
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	440b      	add	r3, r1
 80048c2:	761a      	strb	r2, [r3, #24]
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	e000e100 	.word	0xe000e100
 80048d4:	e000ed00 	.word	0xe000ed00

080048d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d8:	b480      	push	{r7}
 80048da:	b089      	sub	sp, #36	; 0x24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f1c3 0307 	rsb	r3, r3, #7
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	bf28      	it	cs
 80048f6:	2304      	movcs	r3, #4
 80048f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	3304      	adds	r3, #4
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d902      	bls.n	8004908 <NVIC_EncodePriority+0x30>
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3b03      	subs	r3, #3
 8004906:	e000      	b.n	800490a <NVIC_EncodePriority+0x32>
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800490c:	f04f 32ff 	mov.w	r2, #4294967295
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43da      	mvns	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	401a      	ands	r2, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004920:	f04f 31ff 	mov.w	r1, #4294967295
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	fa01 f303 	lsl.w	r3, r1, r3
 800492a:	43d9      	mvns	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004930:	4313      	orrs	r3, r2
         );
}
 8004932:	4618      	mov	r0, r3
 8004934:	3724      	adds	r7, #36	; 0x24
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3b01      	subs	r3, #1
 800494c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004950:	d301      	bcc.n	8004956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004952:	2301      	movs	r3, #1
 8004954:	e00f      	b.n	8004976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004956:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <SysTick_Config+0x40>)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3b01      	subs	r3, #1
 800495c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800495e:	210f      	movs	r1, #15
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	f7ff ff8e 	bl	8004884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <SysTick_Config+0x40>)
 800496a:	2200      	movs	r2, #0
 800496c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <SysTick_Config+0x40>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010

08004984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ff29 	bl	80047e4 <__NVIC_SetPriorityGrouping>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b086      	sub	sp, #24
 800499e:	af00      	add	r7, sp, #0
 80049a0:	4603      	mov	r3, r0
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049a8:	f7ff ff40 	bl	800482c <__NVIC_GetPriorityGrouping>
 80049ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	6978      	ldr	r0, [r7, #20]
 80049b4:	f7ff ff90 	bl	80048d8 <NVIC_EncodePriority>
 80049b8:	4602      	mov	r2, r0
 80049ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff5f 	bl	8004884 <__NVIC_SetPriority>
}
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	4603      	mov	r3, r0
 80049d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff ff33 	bl	8004848 <__NVIC_EnableIRQ>
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7ff ffa4 	bl	8004940 <SysTick_Config>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a12:	e15a      	b.n	8004cca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	2101      	movs	r1, #1
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a20:	4013      	ands	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 814c 	beq.w	8004cc4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d005      	beq.n	8004a44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d130      	bne.n	8004aa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	43db      	mvns	r3, r3
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4013      	ands	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	f003 0201 	and.w	r2, r3, #1
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d017      	beq.n	8004ae2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	2203      	movs	r2, #3
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d123      	bne.n	8004b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	08da      	lsrs	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3208      	adds	r2, #8
 8004af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	220f      	movs	r2, #15
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	08da      	lsrs	r2, r3, #3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3208      	adds	r2, #8
 8004b30:	6939      	ldr	r1, [r7, #16]
 8004b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	2203      	movs	r2, #3
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43db      	mvns	r3, r3
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 0203 	and.w	r2, r3, #3
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80a6 	beq.w	8004cc4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b78:	4b5b      	ldr	r3, [pc, #364]	; (8004ce8 <HAL_GPIO_Init+0x2e4>)
 8004b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7c:	4a5a      	ldr	r2, [pc, #360]	; (8004ce8 <HAL_GPIO_Init+0x2e4>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	6613      	str	r3, [r2, #96]	; 0x60
 8004b84:	4b58      	ldr	r3, [pc, #352]	; (8004ce8 <HAL_GPIO_Init+0x2e4>)
 8004b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b90:	4a56      	ldr	r2, [pc, #344]	; (8004cec <HAL_GPIO_Init+0x2e8>)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	089b      	lsrs	r3, r3, #2
 8004b96:	3302      	adds	r3, #2
 8004b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bba:	d01f      	beq.n	8004bfc <HAL_GPIO_Init+0x1f8>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a4c      	ldr	r2, [pc, #304]	; (8004cf0 <HAL_GPIO_Init+0x2ec>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d019      	beq.n	8004bf8 <HAL_GPIO_Init+0x1f4>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a4b      	ldr	r2, [pc, #300]	; (8004cf4 <HAL_GPIO_Init+0x2f0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d013      	beq.n	8004bf4 <HAL_GPIO_Init+0x1f0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a4a      	ldr	r2, [pc, #296]	; (8004cf8 <HAL_GPIO_Init+0x2f4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00d      	beq.n	8004bf0 <HAL_GPIO_Init+0x1ec>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a49      	ldr	r2, [pc, #292]	; (8004cfc <HAL_GPIO_Init+0x2f8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <HAL_GPIO_Init+0x1e8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a48      	ldr	r2, [pc, #288]	; (8004d00 <HAL_GPIO_Init+0x2fc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d101      	bne.n	8004be8 <HAL_GPIO_Init+0x1e4>
 8004be4:	2305      	movs	r3, #5
 8004be6:	e00a      	b.n	8004bfe <HAL_GPIO_Init+0x1fa>
 8004be8:	2306      	movs	r3, #6
 8004bea:	e008      	b.n	8004bfe <HAL_GPIO_Init+0x1fa>
 8004bec:	2304      	movs	r3, #4
 8004bee:	e006      	b.n	8004bfe <HAL_GPIO_Init+0x1fa>
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e004      	b.n	8004bfe <HAL_GPIO_Init+0x1fa>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e002      	b.n	8004bfe <HAL_GPIO_Init+0x1fa>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_GPIO_Init+0x1fa>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	f002 0203 	and.w	r2, r2, #3
 8004c04:	0092      	lsls	r2, r2, #2
 8004c06:	4093      	lsls	r3, r2
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c0e:	4937      	ldr	r1, [pc, #220]	; (8004cec <HAL_GPIO_Init+0x2e8>)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	089b      	lsrs	r3, r3, #2
 8004c14:	3302      	adds	r3, #2
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c1c:	4b39      	ldr	r3, [pc, #228]	; (8004d04 <HAL_GPIO_Init+0x300>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	43db      	mvns	r3, r3
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c40:	4a30      	ldr	r2, [pc, #192]	; (8004d04 <HAL_GPIO_Init+0x300>)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c46:	4b2f      	ldr	r3, [pc, #188]	; (8004d04 <HAL_GPIO_Init+0x300>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c6a:	4a26      	ldr	r2, [pc, #152]	; (8004d04 <HAL_GPIO_Init+0x300>)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004c70:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <HAL_GPIO_Init+0x300>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c94:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <HAL_GPIO_Init+0x300>)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <HAL_GPIO_Init+0x300>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cbe:	4a11      	ldr	r2, [pc, #68]	; (8004d04 <HAL_GPIO_Init+0x300>)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f47f ae9d 	bne.w	8004a14 <HAL_GPIO_Init+0x10>
  }
}
 8004cda:	bf00      	nop
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40010000 	.word	0x40010000
 8004cf0:	48000400 	.word	0x48000400
 8004cf4:	48000800 	.word	0x48000800
 8004cf8:	48000c00 	.word	0x48000c00
 8004cfc:	48001000 	.word	0x48001000
 8004d00:	48001400 	.word	0x48001400
 8004d04:	40010400 	.word	0x40010400

08004d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	807b      	strh	r3, [r7, #2]
 8004d14:	4613      	mov	r3, r2
 8004d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d18:	787b      	ldrb	r3, [r7, #1]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d24:	e002      	b.n	8004d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d26:	887a      	ldrh	r2, [r7, #2]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d4a:	887a      	ldrh	r2, [r7, #2]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	041a      	lsls	r2, r3, #16
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	43d9      	mvns	r1, r3
 8004d56:	887b      	ldrh	r3, [r7, #2]
 8004d58:	400b      	ands	r3, r1
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	619a      	str	r2, [r3, #24]
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d006      	beq.n	8004d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d82:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f806 	bl	8004d9c <HAL_GPIO_EXTI_Callback>
  }
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40010400 	.word	0x40010400

08004d9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d141      	bne.n	8004e46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dc2:	4b4b      	ldr	r3, [pc, #300]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dce:	d131      	bne.n	8004e34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dd0:	4b47      	ldr	r3, [pc, #284]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd6:	4a46      	ldr	r2, [pc, #280]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004de0:	4b43      	ldr	r3, [pc, #268]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004de8:	4a41      	ldr	r2, [pc, #260]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004df0:	4b40      	ldr	r3, [pc, #256]	; (8004ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2232      	movs	r2, #50	; 0x32
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	4a3f      	ldr	r2, [pc, #252]	; (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	0c9b      	lsrs	r3, r3, #18
 8004e02:	3301      	adds	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e06:	e002      	b.n	8004e0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e0e:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1a:	d102      	bne.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f2      	bne.n	8004e08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e22:	4b33      	ldr	r3, [pc, #204]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2e:	d158      	bne.n	8004ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e057      	b.n	8004ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e34:	4b2e      	ldr	r3, [pc, #184]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e3a:	4a2d      	ldr	r2, [pc, #180]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e44:	e04d      	b.n	8004ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4c:	d141      	bne.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e4e:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5a:	d131      	bne.n	8004ec0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e5c:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e62:	4a23      	ldr	r2, [pc, #140]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e6c:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e74:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e7c:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2232      	movs	r2, #50	; 0x32
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	4a1c      	ldr	r2, [pc, #112]	; (8004ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	0c9b      	lsrs	r3, r3, #18
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e92:	e002      	b.n	8004e9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e9a:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea6:	d102      	bne.n	8004eae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f2      	bne.n	8004e94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eae:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eba:	d112      	bne.n	8004ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e011      	b.n	8004ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec6:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ed0:	e007      	b.n	8004ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004eda:	4a05      	ldr	r2, [pc, #20]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ee0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	40007000 	.word	0x40007000
 8004ef4:	2000000c 	.word	0x2000000c
 8004ef8:	431bde83 	.word	0x431bde83

08004efc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	4a04      	ldr	r2, [pc, #16]	; (8004f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f0a:	6093      	str	r3, [r2, #8]
}
 8004f0c:	bf00      	nop
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40007000 	.word	0x40007000

08004f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e306      	b.n	800553c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d075      	beq.n	8005026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3a:	4b97      	ldr	r3, [pc, #604]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f44:	4b94      	ldr	r3, [pc, #592]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b0c      	cmp	r3, #12
 8004f52:	d102      	bne.n	8004f5a <HAL_RCC_OscConfig+0x3e>
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d002      	beq.n	8004f60 <HAL_RCC_OscConfig+0x44>
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d10b      	bne.n	8004f78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	4b8d      	ldr	r3, [pc, #564]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05b      	beq.n	8005024 <HAL_RCC_OscConfig+0x108>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d157      	bne.n	8005024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e2e1      	b.n	800553c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f80:	d106      	bne.n	8004f90 <HAL_RCC_OscConfig+0x74>
 8004f82:	4b85      	ldr	r3, [pc, #532]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a84      	ldr	r2, [pc, #528]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e01d      	b.n	8004fcc <HAL_RCC_OscConfig+0xb0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x98>
 8004f9a:	4b7f      	ldr	r3, [pc, #508]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a7e      	ldr	r2, [pc, #504]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	4b7c      	ldr	r3, [pc, #496]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a7b      	ldr	r2, [pc, #492]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e00b      	b.n	8004fcc <HAL_RCC_OscConfig+0xb0>
 8004fb4:	4b78      	ldr	r3, [pc, #480]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a77      	ldr	r2, [pc, #476]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	4b75      	ldr	r3, [pc, #468]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a74      	ldr	r2, [pc, #464]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d013      	beq.n	8004ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7ff fbd8 	bl	8004788 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7ff fbd4 	bl	8004788 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	; 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e2a6      	b.n	800553c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fee:	4b6a      	ldr	r3, [pc, #424]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0xc0>
 8004ffa:	e014      	b.n	8005026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7ff fbc4 	bl	8004788 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005004:	f7ff fbc0 	bl	8004788 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b64      	cmp	r3, #100	; 0x64
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e292      	b.n	800553c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005016:	4b60      	ldr	r3, [pc, #384]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0xe8>
 8005022:	e000      	b.n	8005026 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d075      	beq.n	800511e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005032:	4b59      	ldr	r3, [pc, #356]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800503c:	4b56      	ldr	r3, [pc, #344]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b0c      	cmp	r3, #12
 800504a:	d102      	bne.n	8005052 <HAL_RCC_OscConfig+0x136>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d002      	beq.n	8005058 <HAL_RCC_OscConfig+0x13c>
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d11f      	bne.n	8005098 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005058:	4b4f      	ldr	r3, [pc, #316]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCC_OscConfig+0x154>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e265      	b.n	800553c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005070:	4b49      	ldr	r3, [pc, #292]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	061b      	lsls	r3, r3, #24
 800507e:	4946      	ldr	r1, [pc, #280]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8005080:	4313      	orrs	r3, r2
 8005082:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005084:	4b45      	ldr	r3, [pc, #276]	; (800519c <HAL_RCC_OscConfig+0x280>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff fb31 	bl	80046f0 <HAL_InitTick>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d043      	beq.n	800511c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e251      	b.n	800553c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d023      	beq.n	80050e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a0:	4b3d      	ldr	r3, [pc, #244]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a3c      	ldr	r2, [pc, #240]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 80050a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7ff fb6c 	bl	8004788 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050b4:	f7ff fb68 	bl	8004788 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e23a      	b.n	800553c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c6:	4b34      	ldr	r3, [pc, #208]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d2:	4b31      	ldr	r3, [pc, #196]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	061b      	lsls	r3, r3, #24
 80050e0:	492d      	ldr	r1, [pc, #180]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	604b      	str	r3, [r1, #4]
 80050e6:	e01a      	b.n	800511e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e8:	4b2b      	ldr	r3, [pc, #172]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 80050ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7ff fb48 	bl	8004788 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050fc:	f7ff fb44 	bl	8004788 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e216      	b.n	800553c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800510e:	4b22      	ldr	r3, [pc, #136]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x1e0>
 800511a:	e000      	b.n	800511e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800511c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d041      	beq.n	80051ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01c      	beq.n	800516c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005132:	4b19      	ldr	r3, [pc, #100]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8005134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005138:	4a17      	ldr	r2, [pc, #92]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005142:	f7ff fb21 	bl	8004788 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800514a:	f7ff fb1d 	bl	8004788 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e1ef      	b.n	800553c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800515c:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 800515e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0ef      	beq.n	800514a <HAL_RCC_OscConfig+0x22e>
 800516a:	e020      	b.n	80051ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800516c:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 800516e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005172:	4a09      	ldr	r2, [pc, #36]	; (8005198 <HAL_RCC_OscConfig+0x27c>)
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517c:	f7ff fb04 	bl	8004788 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005182:	e00d      	b.n	80051a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005184:	f7ff fb00 	bl	8004788 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d906      	bls.n	80051a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e1d2      	b.n	800553c <HAL_RCC_OscConfig+0x620>
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000
 800519c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051a0:	4b8c      	ldr	r3, [pc, #560]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 80051a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ea      	bne.n	8005184 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80a6 	beq.w	8005308 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051bc:	2300      	movs	r3, #0
 80051be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051c0:	4b84      	ldr	r3, [pc, #528]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_OscConfig+0x2b4>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <HAL_RCC_OscConfig+0x2b6>
 80051d0:	2300      	movs	r3, #0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00d      	beq.n	80051f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d6:	4b7f      	ldr	r3, [pc, #508]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	4a7e      	ldr	r2, [pc, #504]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 80051dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6593      	str	r3, [r2, #88]	; 0x58
 80051e2:	4b7c      	ldr	r3, [pc, #496]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051ee:	2301      	movs	r3, #1
 80051f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f2:	4b79      	ldr	r3, [pc, #484]	; (80053d8 <HAL_RCC_OscConfig+0x4bc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d118      	bne.n	8005230 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051fe:	4b76      	ldr	r3, [pc, #472]	; (80053d8 <HAL_RCC_OscConfig+0x4bc>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a75      	ldr	r2, [pc, #468]	; (80053d8 <HAL_RCC_OscConfig+0x4bc>)
 8005204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800520a:	f7ff fabd 	bl	8004788 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005212:	f7ff fab9 	bl	8004788 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e18b      	b.n	800553c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005224:	4b6c      	ldr	r3, [pc, #432]	; (80053d8 <HAL_RCC_OscConfig+0x4bc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d108      	bne.n	800524a <HAL_RCC_OscConfig+0x32e>
 8005238:	4b66      	ldr	r3, [pc, #408]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523e:	4a65      	ldr	r2, [pc, #404]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005248:	e024      	b.n	8005294 <HAL_RCC_OscConfig+0x378>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b05      	cmp	r3, #5
 8005250:	d110      	bne.n	8005274 <HAL_RCC_OscConfig+0x358>
 8005252:	4b60      	ldr	r3, [pc, #384]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005258:	4a5e      	ldr	r2, [pc, #376]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 800525a:	f043 0304 	orr.w	r3, r3, #4
 800525e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005262:	4b5c      	ldr	r3, [pc, #368]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 8005264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005268:	4a5a      	ldr	r2, [pc, #360]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 800526a:	f043 0301 	orr.w	r3, r3, #1
 800526e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005272:	e00f      	b.n	8005294 <HAL_RCC_OscConfig+0x378>
 8005274:	4b57      	ldr	r3, [pc, #348]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527a:	4a56      	ldr	r2, [pc, #344]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005284:	4b53      	ldr	r3, [pc, #332]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	4a52      	ldr	r2, [pc, #328]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 800528c:	f023 0304 	bic.w	r3, r3, #4
 8005290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d016      	beq.n	80052ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529c:	f7ff fa74 	bl	8004788 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a2:	e00a      	b.n	80052ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a4:	f7ff fa70 	bl	8004788 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e140      	b.n	800553c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ba:	4b46      	ldr	r3, [pc, #280]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ed      	beq.n	80052a4 <HAL_RCC_OscConfig+0x388>
 80052c8:	e015      	b.n	80052f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7ff fa5d 	bl	8004788 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d2:	f7ff fa59 	bl	8004788 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e129      	b.n	800553c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052e8:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1ed      	bne.n	80052d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052f6:	7ffb      	ldrb	r3, [r7, #31]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d105      	bne.n	8005308 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052fc:	4b35      	ldr	r3, [pc, #212]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	4a34      	ldr	r2, [pc, #208]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 8005302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005306:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d03c      	beq.n	800538e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01c      	beq.n	8005356 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800531c:	4b2d      	ldr	r3, [pc, #180]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 800531e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005322:	4a2c      	ldr	r2, [pc, #176]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7ff fa2c 	bl	8004788 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005334:	f7ff fa28 	bl	8004788 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e0fa      	b.n	800553c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005346:	4b23      	ldr	r3, [pc, #140]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 8005348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0ef      	beq.n	8005334 <HAL_RCC_OscConfig+0x418>
 8005354:	e01b      	b.n	800538e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005356:	4b1f      	ldr	r3, [pc, #124]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 8005358:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800535c:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005366:	f7ff fa0f 	bl	8004788 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800536e:	f7ff fa0b 	bl	8004788 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e0dd      	b.n	800553c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005380:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 8005382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1ef      	bne.n	800536e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 80d1 	beq.w	800553a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b0c      	cmp	r3, #12
 80053a2:	f000 808b 	beq.w	80054bc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d15e      	bne.n	800546c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ae:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <HAL_RCC_OscConfig+0x4b8>)
 80053b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ba:	f7ff f9e5 	bl	8004788 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c0:	e00c      	b.n	80053dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c2:	f7ff f9e1 	bl	8004788 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d905      	bls.n	80053dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e0b3      	b.n	800553c <HAL_RCC_OscConfig+0x620>
 80053d4:	40021000 	.word	0x40021000
 80053d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1ec      	bne.n	80053c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053e8:	4b56      	ldr	r3, [pc, #344]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	4b56      	ldr	r3, [pc, #344]	; (8005548 <HAL_RCC_OscConfig+0x62c>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6a11      	ldr	r1, [r2, #32]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053f8:	3a01      	subs	r2, #1
 80053fa:	0112      	lsls	r2, r2, #4
 80053fc:	4311      	orrs	r1, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005402:	0212      	lsls	r2, r2, #8
 8005404:	4311      	orrs	r1, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800540a:	0852      	lsrs	r2, r2, #1
 800540c:	3a01      	subs	r2, #1
 800540e:	0552      	lsls	r2, r2, #21
 8005410:	4311      	orrs	r1, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005416:	0852      	lsrs	r2, r2, #1
 8005418:	3a01      	subs	r2, #1
 800541a:	0652      	lsls	r2, r2, #25
 800541c:	4311      	orrs	r1, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005422:	06d2      	lsls	r2, r2, #27
 8005424:	430a      	orrs	r2, r1
 8005426:	4947      	ldr	r1, [pc, #284]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 8005428:	4313      	orrs	r3, r2
 800542a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800542c:	4b45      	ldr	r3, [pc, #276]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a44      	ldr	r2, [pc, #272]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 8005432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005436:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005438:	4b42      	ldr	r3, [pc, #264]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4a41      	ldr	r2, [pc, #260]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 800543e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005442:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7ff f9a0 	bl	8004788 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544c:	f7ff f99c 	bl	8004788 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e06e      	b.n	800553c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545e:	4b39      	ldr	r3, [pc, #228]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0x530>
 800546a:	e066      	b.n	800553a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546c:	4b35      	ldr	r3, [pc, #212]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a34      	ldr	r2, [pc, #208]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 8005472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005476:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005478:	4b32      	ldr	r3, [pc, #200]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	4a31      	ldr	r2, [pc, #196]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 800547e:	f023 0303 	bic.w	r3, r3, #3
 8005482:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005484:	4b2f      	ldr	r3, [pc, #188]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	4a2e      	ldr	r2, [pc, #184]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 800548a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800548e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005492:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7ff f978 	bl	8004788 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549c:	f7ff f974 	bl	8004788 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e046      	b.n	800553c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ae:	4b25      	ldr	r3, [pc, #148]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x580>
 80054ba:	e03e      	b.n	800553a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e039      	b.n	800553c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <HAL_RCC_OscConfig+0x628>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f003 0203 	and.w	r2, r3, #3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d12c      	bne.n	8005536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	3b01      	subs	r3, #1
 80054e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d123      	bne.n	8005536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d11b      	bne.n	8005536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800550a:	429a      	cmp	r2, r3
 800550c:	d113      	bne.n	8005536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	3b01      	subs	r3, #1
 800551c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800551e:	429a      	cmp	r2, r3
 8005520:	d109      	bne.n	8005536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	3b01      	subs	r3, #1
 8005530:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005532:	429a      	cmp	r2, r3
 8005534:	d001      	beq.n	800553a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000
 8005548:	019f800c 	.word	0x019f800c

0800554c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e11e      	b.n	80057a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005564:	4b91      	ldr	r3, [pc, #580]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d910      	bls.n	8005594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005572:	4b8e      	ldr	r3, [pc, #568]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 020f 	bic.w	r2, r3, #15
 800557a:	498c      	ldr	r1, [pc, #560]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005582:	4b8a      	ldr	r3, [pc, #552]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e106      	b.n	80057a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d073      	beq.n	8005688 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d129      	bne.n	80055fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a8:	4b81      	ldr	r3, [pc, #516]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0f4      	b.n	80057a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80055b8:	f000 f99e 	bl	80058f8 <RCC_GetSysClockFreqFromPLLSource>
 80055bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4a7c      	ldr	r2, [pc, #496]	; (80057b4 <HAL_RCC_ClockConfig+0x268>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d93f      	bls.n	8005646 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055c6:	4b7a      	ldr	r3, [pc, #488]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d033      	beq.n	8005646 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d12f      	bne.n	8005646 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055e6:	4b72      	ldr	r3, [pc, #456]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ee:	4a70      	ldr	r2, [pc, #448]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80055f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055f6:	2380      	movs	r3, #128	; 0x80
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e024      	b.n	8005646 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b02      	cmp	r3, #2
 8005602:	d107      	bne.n	8005614 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005604:	4b6a      	ldr	r3, [pc, #424]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d109      	bne.n	8005624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0c6      	b.n	80057a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005614:	4b66      	ldr	r3, [pc, #408]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0be      	b.n	80057a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005624:	f000 f8ce 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8005628:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4a61      	ldr	r2, [pc, #388]	; (80057b4 <HAL_RCC_ClockConfig+0x268>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d909      	bls.n	8005646 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005632:	4b5f      	ldr	r3, [pc, #380]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800563a:	4a5d      	ldr	r2, [pc, #372]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 800563c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005640:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005642:	2380      	movs	r3, #128	; 0x80
 8005644:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005646:	4b5a      	ldr	r3, [pc, #360]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f023 0203 	bic.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4957      	ldr	r1, [pc, #348]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 8005654:	4313      	orrs	r3, r2
 8005656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005658:	f7ff f896 	bl	8004788 <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	e00a      	b.n	8005676 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005660:	f7ff f892 	bl	8004788 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	; 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e095      	b.n	80057a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	4b4e      	ldr	r3, [pc, #312]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 020c 	and.w	r2, r3, #12
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	429a      	cmp	r2, r3
 8005686:	d1eb      	bne.n	8005660 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d023      	beq.n	80056dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056a0:	4b43      	ldr	r3, [pc, #268]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	4a42      	ldr	r2, [pc, #264]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80056a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d007      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80056b8:	4b3d      	ldr	r3, [pc, #244]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80056c0:	4a3b      	ldr	r2, [pc, #236]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80056c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c8:	4b39      	ldr	r3, [pc, #228]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	4936      	ldr	r1, [pc, #216]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
 80056da:	e008      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d105      	bne.n	80056ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056e2:	4b33      	ldr	r3, [pc, #204]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	4a32      	ldr	r2, [pc, #200]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80056e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056ee:	4b2f      	ldr	r3, [pc, #188]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d21d      	bcs.n	8005738 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fc:	4b2b      	ldr	r3, [pc, #172]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f023 020f 	bic.w	r2, r3, #15
 8005704:	4929      	ldr	r1, [pc, #164]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	4313      	orrs	r3, r2
 800570a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800570c:	f7ff f83c 	bl	8004788 <HAL_GetTick>
 8005710:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	e00a      	b.n	800572a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005714:	f7ff f838 	bl	8004788 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e03b      	b.n	80057a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800572a:	4b20      	ldr	r3, [pc, #128]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d1ed      	bne.n	8005714 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d008      	beq.n	8005756 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005744:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	4917      	ldr	r1, [pc, #92]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005762:	4b13      	ldr	r3, [pc, #76]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	490f      	ldr	r1, [pc, #60]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 8005772:	4313      	orrs	r3, r2
 8005774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005776:	f000 f825 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 800577a:	4602      	mov	r2, r0
 800577c:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	091b      	lsrs	r3, r3, #4
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	490c      	ldr	r1, [pc, #48]	; (80057b8 <HAL_RCC_ClockConfig+0x26c>)
 8005788:	5ccb      	ldrb	r3, [r1, r3]
 800578a:	f003 031f 	and.w	r3, r3, #31
 800578e:	fa22 f303 	lsr.w	r3, r2, r3
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <HAL_RCC_ClockConfig+0x270>)
 8005794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005796:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <HAL_RCC_ClockConfig+0x274>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe ffa8 	bl	80046f0 <HAL_InitTick>
 80057a0:	4603      	mov	r3, r0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40022000 	.word	0x40022000
 80057b0:	40021000 	.word	0x40021000
 80057b4:	04c4b400 	.word	0x04c4b400
 80057b8:	0800b9f8 	.word	0x0800b9f8
 80057bc:	2000000c 	.word	0x2000000c
 80057c0:	20000010 	.word	0x20000010

080057c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057ca:	4b2c      	ldr	r3, [pc, #176]	; (800587c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d102      	bne.n	80057dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057d6:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	e047      	b.n	800586c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057dc:	4b27      	ldr	r3, [pc, #156]	; (800587c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 030c 	and.w	r3, r3, #12
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d102      	bne.n	80057ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057e8:	4b26      	ldr	r3, [pc, #152]	; (8005884 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	e03e      	b.n	800586c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057ee:	4b23      	ldr	r3, [pc, #140]	; (800587c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
 80057f6:	2b0c      	cmp	r3, #12
 80057f8:	d136      	bne.n	8005868 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057fa:	4b20      	ldr	r3, [pc, #128]	; (800587c <HAL_RCC_GetSysClockFreq+0xb8>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005804:	4b1d      	ldr	r3, [pc, #116]	; (800587c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	091b      	lsrs	r3, r3, #4
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	3301      	adds	r3, #1
 8005810:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b03      	cmp	r3, #3
 8005816:	d10c      	bne.n	8005832 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005818:	4a1a      	ldr	r2, [pc, #104]	; (8005884 <HAL_RCC_GetSysClockFreq+0xc0>)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005820:	4a16      	ldr	r2, [pc, #88]	; (800587c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005822:	68d2      	ldr	r2, [r2, #12]
 8005824:	0a12      	lsrs	r2, r2, #8
 8005826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	617b      	str	r3, [r7, #20]
      break;
 8005830:	e00c      	b.n	800584c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005832:	4a13      	ldr	r2, [pc, #76]	; (8005880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	fbb2 f3f3 	udiv	r3, r2, r3
 800583a:	4a10      	ldr	r2, [pc, #64]	; (800587c <HAL_RCC_GetSysClockFreq+0xb8>)
 800583c:	68d2      	ldr	r2, [r2, #12]
 800583e:	0a12      	lsrs	r2, r2, #8
 8005840:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	617b      	str	r3, [r7, #20]
      break;
 800584a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800584c:	4b0b      	ldr	r3, [pc, #44]	; (800587c <HAL_RCC_GetSysClockFreq+0xb8>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	0e5b      	lsrs	r3, r3, #25
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	3301      	adds	r3, #1
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e001      	b.n	800586c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800586c:	693b      	ldr	r3, [r7, #16]
}
 800586e:	4618      	mov	r0, r3
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000
 8005880:	00f42400 	.word	0x00f42400
 8005884:	016e3600 	.word	0x016e3600

08005888 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800588c:	4b03      	ldr	r3, [pc, #12]	; (800589c <HAL_RCC_GetHCLKFreq+0x14>)
 800588e:	681b      	ldr	r3, [r3, #0]
}
 8005890:	4618      	mov	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	2000000c 	.word	0x2000000c

080058a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058a4:	f7ff fff0 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 80058a8:	4602      	mov	r2, r0
 80058aa:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	4904      	ldr	r1, [pc, #16]	; (80058c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058b6:	5ccb      	ldrb	r3, [r1, r3]
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40021000 	.word	0x40021000
 80058c8:	0800ba08 	.word	0x0800ba08

080058cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058d0:	f7ff ffda 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 80058d4:	4602      	mov	r2, r0
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	0adb      	lsrs	r3, r3, #11
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	4904      	ldr	r1, [pc, #16]	; (80058f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058e2:	5ccb      	ldrb	r3, [r1, r3]
 80058e4:	f003 031f 	and.w	r3, r3, #31
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40021000 	.word	0x40021000
 80058f4:	0800ba08 	.word	0x0800ba08

080058f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058fe:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005908:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	3301      	adds	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b03      	cmp	r3, #3
 800591a:	d10c      	bne.n	8005936 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800591c:	4a17      	ldr	r2, [pc, #92]	; (800597c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	4a14      	ldr	r2, [pc, #80]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005926:	68d2      	ldr	r2, [r2, #12]
 8005928:	0a12      	lsrs	r2, r2, #8
 800592a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	617b      	str	r3, [r7, #20]
    break;
 8005934:	e00c      	b.n	8005950 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005936:	4a12      	ldr	r2, [pc, #72]	; (8005980 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	4a0e      	ldr	r2, [pc, #56]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005940:	68d2      	ldr	r2, [r2, #12]
 8005942:	0a12      	lsrs	r2, r2, #8
 8005944:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005948:	fb02 f303 	mul.w	r3, r2, r3
 800594c:	617b      	str	r3, [r7, #20]
    break;
 800594e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	0e5b      	lsrs	r3, r3, #25
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	3301      	adds	r3, #1
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800596a:	687b      	ldr	r3, [r7, #4]
}
 800596c:	4618      	mov	r0, r3
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40021000 	.word	0x40021000
 800597c:	016e3600 	.word	0x016e3600
 8005980:	00f42400 	.word	0x00f42400

08005984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800598c:	2300      	movs	r3, #0
 800598e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005990:	2300      	movs	r3, #0
 8005992:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8098 	beq.w	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059a2:	2300      	movs	r3, #0
 80059a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059a6:	4b43      	ldr	r3, [pc, #268]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10d      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059b2:	4b40      	ldr	r3, [pc, #256]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b6:	4a3f      	ldr	r2, [pc, #252]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059bc:	6593      	str	r3, [r2, #88]	; 0x58
 80059be:	4b3d      	ldr	r3, [pc, #244]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c6:	60bb      	str	r3, [r7, #8]
 80059c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ca:	2301      	movs	r3, #1
 80059cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059ce:	4b3a      	ldr	r3, [pc, #232]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a39      	ldr	r2, [pc, #228]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059da:	f7fe fed5 	bl	8004788 <HAL_GetTick>
 80059de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059e0:	e009      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059e2:	f7fe fed1 	bl	8004788 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d902      	bls.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	74fb      	strb	r3, [r7, #19]
        break;
 80059f4:	e005      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059f6:	4b30      	ldr	r3, [pc, #192]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0ef      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005a02:	7cfb      	ldrb	r3, [r7, #19]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d159      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a08:	4b2a      	ldr	r3, [pc, #168]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01e      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d019      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a24:	4b23      	ldr	r3, [pc, #140]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a30:	4b20      	ldr	r3, [pc, #128]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a36:	4a1f      	ldr	r2, [pc, #124]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a40:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a46:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a50:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d016      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a62:	f7fe fe91 	bl	8004788 <HAL_GetTick>
 8005a66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a68:	e00b      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a6a:	f7fe fe8d 	bl	8004788 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d902      	bls.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	74fb      	strb	r3, [r7, #19]
            break;
 8005a80:	e006      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a82:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0ec      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a90:	7cfb      	ldrb	r3, [r7, #19]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10b      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a96:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa4:	4903      	ldr	r1, [pc, #12]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005aac:	e008      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005aae:	7cfb      	ldrb	r3, [r7, #19]
 8005ab0:	74bb      	strb	r3, [r7, #18]
 8005ab2:	e005      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	7cfb      	ldrb	r3, [r7, #19]
 8005abe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ac0:	7c7b      	ldrb	r3, [r7, #17]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d105      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac6:	4ba7      	ldr	r3, [pc, #668]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aca:	4aa6      	ldr	r2, [pc, #664]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ade:	4ba1      	ldr	r3, [pc, #644]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae4:	f023 0203 	bic.w	r2, r3, #3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	499d      	ldr	r1, [pc, #628]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b00:	4b98      	ldr	r3, [pc, #608]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b06:	f023 020c 	bic.w	r2, r3, #12
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	4995      	ldr	r1, [pc, #596]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b22:	4b90      	ldr	r3, [pc, #576]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	498c      	ldr	r1, [pc, #560]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b44:	4b87      	ldr	r3, [pc, #540]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	4984      	ldr	r1, [pc, #528]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b66:	4b7f      	ldr	r3, [pc, #508]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	497b      	ldr	r1, [pc, #492]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b88:	4b76      	ldr	r3, [pc, #472]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	4973      	ldr	r1, [pc, #460]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005baa:	4b6e      	ldr	r3, [pc, #440]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	496a      	ldr	r1, [pc, #424]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bcc:	4b65      	ldr	r3, [pc, #404]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	4962      	ldr	r1, [pc, #392]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bee:	4b5d      	ldr	r3, [pc, #372]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	4959      	ldr	r1, [pc, #356]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c10:	4b54      	ldr	r3, [pc, #336]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c16:	f023 0203 	bic.w	r2, r3, #3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1e:	4951      	ldr	r1, [pc, #324]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c32:	4b4c      	ldr	r3, [pc, #304]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	4948      	ldr	r1, [pc, #288]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d015      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c54:	4b43      	ldr	r3, [pc, #268]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	4940      	ldr	r1, [pc, #256]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c72:	d105      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c74:	4b3b      	ldr	r3, [pc, #236]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4a3a      	ldr	r2, [pc, #232]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d015      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c8c:	4b35      	ldr	r3, [pc, #212]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9a:	4932      	ldr	r1, [pc, #200]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005caa:	d105      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cac:	4b2d      	ldr	r3, [pc, #180]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	4a2c      	ldr	r2, [pc, #176]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cb6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d015      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cc4:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	4924      	ldr	r1, [pc, #144]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ce2:	d105      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ce4:	4b1f      	ldr	r3, [pc, #124]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4a1e      	ldr	r2, [pc, #120]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d015      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cfc:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	4916      	ldr	r1, [pc, #88]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d1a:	d105      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d1c:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4a10      	ldr	r2, [pc, #64]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d019      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d34:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	4908      	ldr	r1, [pc, #32]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d52:	d109      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d54:	4b03      	ldr	r3, [pc, #12]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a02      	ldr	r2, [pc, #8]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d5e:	60d3      	str	r3, [r2, #12]
 8005d60:	e002      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005d62:	bf00      	nop
 8005d64:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d015      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d74:	4b29      	ldr	r3, [pc, #164]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	4926      	ldr	r1, [pc, #152]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d92:	d105      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d94:	4b21      	ldr	r3, [pc, #132]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a20      	ldr	r2, [pc, #128]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d015      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005dac:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dba:	4918      	ldr	r1, [pc, #96]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dca:	d105      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005dcc:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4a12      	ldr	r2, [pc, #72]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d015      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005de4:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df2:	490a      	ldr	r1, [pc, #40]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e02:	d105      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	4a04      	ldr	r2, [pc, #16]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005e10:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40021000 	.word	0x40021000

08005e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e049      	b.n	8005ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fe f9da 	bl	8004200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f001 f80c 	bl	8006e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e049      	b.n	8005f74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f841 	bl	8005f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f000 ffb5 	bl	8006e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d109      	bne.n	8005fb4 <HAL_TIM_PWM_Start+0x24>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	bf14      	ite	ne
 8005fac:	2301      	movne	r3, #1
 8005fae:	2300      	moveq	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	e03c      	b.n	800602e <HAL_TIM_PWM_Start+0x9e>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d109      	bne.n	8005fce <HAL_TIM_PWM_Start+0x3e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	bf14      	ite	ne
 8005fc6:	2301      	movne	r3, #1
 8005fc8:	2300      	moveq	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	e02f      	b.n	800602e <HAL_TIM_PWM_Start+0x9e>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d109      	bne.n	8005fe8 <HAL_TIM_PWM_Start+0x58>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	bf14      	ite	ne
 8005fe0:	2301      	movne	r3, #1
 8005fe2:	2300      	moveq	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	e022      	b.n	800602e <HAL_TIM_PWM_Start+0x9e>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b0c      	cmp	r3, #12
 8005fec:	d109      	bne.n	8006002 <HAL_TIM_PWM_Start+0x72>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	bf14      	ite	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	2300      	moveq	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	e015      	b.n	800602e <HAL_TIM_PWM_Start+0x9e>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b10      	cmp	r3, #16
 8006006:	d109      	bne.n	800601c <HAL_TIM_PWM_Start+0x8c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	bf14      	ite	ne
 8006014:	2301      	movne	r3, #1
 8006016:	2300      	moveq	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	e008      	b.n	800602e <HAL_TIM_PWM_Start+0x9e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	bf14      	ite	ne
 8006028:	2301      	movne	r3, #1
 800602a:	2300      	moveq	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e0a6      	b.n	8006184 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <HAL_TIM_PWM_Start+0xb6>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006044:	e023      	b.n	800608e <HAL_TIM_PWM_Start+0xfe>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b04      	cmp	r3, #4
 800604a:	d104      	bne.n	8006056 <HAL_TIM_PWM_Start+0xc6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006054:	e01b      	b.n	800608e <HAL_TIM_PWM_Start+0xfe>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b08      	cmp	r3, #8
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start+0xd6>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006064:	e013      	b.n	800608e <HAL_TIM_PWM_Start+0xfe>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b0c      	cmp	r3, #12
 800606a:	d104      	bne.n	8006076 <HAL_TIM_PWM_Start+0xe6>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006074:	e00b      	b.n	800608e <HAL_TIM_PWM_Start+0xfe>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b10      	cmp	r3, #16
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0xf6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006084:	e003      	b.n	800608e <HAL_TIM_PWM_Start+0xfe>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2201      	movs	r2, #1
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f001 fc88 	bl	80079ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a3a      	ldr	r2, [pc, #232]	; (800618c <HAL_TIM_PWM_Start+0x1fc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d018      	beq.n	80060d8 <HAL_TIM_PWM_Start+0x148>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a39      	ldr	r2, [pc, #228]	; (8006190 <HAL_TIM_PWM_Start+0x200>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d013      	beq.n	80060d8 <HAL_TIM_PWM_Start+0x148>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a37      	ldr	r2, [pc, #220]	; (8006194 <HAL_TIM_PWM_Start+0x204>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00e      	beq.n	80060d8 <HAL_TIM_PWM_Start+0x148>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a36      	ldr	r2, [pc, #216]	; (8006198 <HAL_TIM_PWM_Start+0x208>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d009      	beq.n	80060d8 <HAL_TIM_PWM_Start+0x148>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a34      	ldr	r2, [pc, #208]	; (800619c <HAL_TIM_PWM_Start+0x20c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_TIM_PWM_Start+0x148>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a33      	ldr	r2, [pc, #204]	; (80061a0 <HAL_TIM_PWM_Start+0x210>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d101      	bne.n	80060dc <HAL_TIM_PWM_Start+0x14c>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <HAL_TIM_PWM_Start+0x14e>
 80060dc:	2300      	movs	r3, #0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a25      	ldr	r2, [pc, #148]	; (800618c <HAL_TIM_PWM_Start+0x1fc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d022      	beq.n	8006142 <HAL_TIM_PWM_Start+0x1b2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006104:	d01d      	beq.n	8006142 <HAL_TIM_PWM_Start+0x1b2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a26      	ldr	r2, [pc, #152]	; (80061a4 <HAL_TIM_PWM_Start+0x214>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d018      	beq.n	8006142 <HAL_TIM_PWM_Start+0x1b2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a24      	ldr	r2, [pc, #144]	; (80061a8 <HAL_TIM_PWM_Start+0x218>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d013      	beq.n	8006142 <HAL_TIM_PWM_Start+0x1b2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a23      	ldr	r2, [pc, #140]	; (80061ac <HAL_TIM_PWM_Start+0x21c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00e      	beq.n	8006142 <HAL_TIM_PWM_Start+0x1b2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a19      	ldr	r2, [pc, #100]	; (8006190 <HAL_TIM_PWM_Start+0x200>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_TIM_PWM_Start+0x1b2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a18      	ldr	r2, [pc, #96]	; (8006194 <HAL_TIM_PWM_Start+0x204>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_TIM_PWM_Start+0x1b2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <HAL_TIM_PWM_Start+0x210>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d115      	bne.n	800616e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	4b19      	ldr	r3, [pc, #100]	; (80061b0 <HAL_TIM_PWM_Start+0x220>)
 800614a:	4013      	ands	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b06      	cmp	r3, #6
 8006152:	d015      	beq.n	8006180 <HAL_TIM_PWM_Start+0x1f0>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615a:	d011      	beq.n	8006180 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616c:	e008      	b.n	8006180 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0201 	orr.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	e000      	b.n	8006182 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006180:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40013400 	.word	0x40013400
 8006194:	40014000 	.word	0x40014000
 8006198:	40014400 	.word	0x40014400
 800619c:	40014800 	.word	0x40014800
 80061a0:	40015000 	.word	0x40015000
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40000800 	.word	0x40000800
 80061ac:	40000c00 	.word	0x40000c00
 80061b0:	00010007 	.word	0x00010007

080061b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e049      	b.n	800625a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f841 	bl	8006262 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f000 fe42 	bl	8006e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
	...

08006278 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <HAL_TIM_IC_Start_IT+0x1e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006292:	b2db      	uxtb	r3, r3
 8006294:	e023      	b.n	80062de <HAL_TIM_IC_Start_IT+0x66>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b04      	cmp	r3, #4
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_IC_Start_IT+0x2e>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e01b      	b.n	80062de <HAL_TIM_IC_Start_IT+0x66>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d104      	bne.n	80062b6 <HAL_TIM_IC_Start_IT+0x3e>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	e013      	b.n	80062de <HAL_TIM_IC_Start_IT+0x66>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b0c      	cmp	r3, #12
 80062ba:	d104      	bne.n	80062c6 <HAL_TIM_IC_Start_IT+0x4e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	e00b      	b.n	80062de <HAL_TIM_IC_Start_IT+0x66>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d104      	bne.n	80062d6 <HAL_TIM_IC_Start_IT+0x5e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	e003      	b.n	80062de <HAL_TIM_IC_Start_IT+0x66>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <HAL_TIM_IC_Start_IT+0x78>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	e013      	b.n	8006318 <HAL_TIM_IC_Start_IT+0xa0>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d104      	bne.n	8006300 <HAL_TIM_IC_Start_IT+0x88>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	e00b      	b.n	8006318 <HAL_TIM_IC_Start_IT+0xa0>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b08      	cmp	r3, #8
 8006304:	d104      	bne.n	8006310 <HAL_TIM_IC_Start_IT+0x98>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800630c:	b2db      	uxtb	r3, r3
 800630e:	e003      	b.n	8006318 <HAL_TIM_IC_Start_IT+0xa0>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006316:	b2db      	uxtb	r3, r3
 8006318:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d102      	bne.n	8006326 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006320:	7b7b      	ldrb	r3, [r7, #13]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d001      	beq.n	800632a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e0e2      	b.n	80064f0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <HAL_TIM_IC_Start_IT+0xc2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006338:	e023      	b.n	8006382 <HAL_TIM_IC_Start_IT+0x10a>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b04      	cmp	r3, #4
 800633e:	d104      	bne.n	800634a <HAL_TIM_IC_Start_IT+0xd2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006348:	e01b      	b.n	8006382 <HAL_TIM_IC_Start_IT+0x10a>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b08      	cmp	r3, #8
 800634e:	d104      	bne.n	800635a <HAL_TIM_IC_Start_IT+0xe2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006358:	e013      	b.n	8006382 <HAL_TIM_IC_Start_IT+0x10a>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	d104      	bne.n	800636a <HAL_TIM_IC_Start_IT+0xf2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006368:	e00b      	b.n	8006382 <HAL_TIM_IC_Start_IT+0x10a>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b10      	cmp	r3, #16
 800636e:	d104      	bne.n	800637a <HAL_TIM_IC_Start_IT+0x102>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006378:	e003      	b.n	8006382 <HAL_TIM_IC_Start_IT+0x10a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2202      	movs	r2, #2
 800637e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d104      	bne.n	8006392 <HAL_TIM_IC_Start_IT+0x11a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006390:	e013      	b.n	80063ba <HAL_TIM_IC_Start_IT+0x142>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b04      	cmp	r3, #4
 8006396:	d104      	bne.n	80063a2 <HAL_TIM_IC_Start_IT+0x12a>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063a0:	e00b      	b.n	80063ba <HAL_TIM_IC_Start_IT+0x142>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d104      	bne.n	80063b2 <HAL_TIM_IC_Start_IT+0x13a>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063b0:	e003      	b.n	80063ba <HAL_TIM_IC_Start_IT+0x142>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b0c      	cmp	r3, #12
 80063be:	d841      	bhi.n	8006444 <HAL_TIM_IC_Start_IT+0x1cc>
 80063c0:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <HAL_TIM_IC_Start_IT+0x150>)
 80063c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	080063fd 	.word	0x080063fd
 80063cc:	08006445 	.word	0x08006445
 80063d0:	08006445 	.word	0x08006445
 80063d4:	08006445 	.word	0x08006445
 80063d8:	0800640f 	.word	0x0800640f
 80063dc:	08006445 	.word	0x08006445
 80063e0:	08006445 	.word	0x08006445
 80063e4:	08006445 	.word	0x08006445
 80063e8:	08006421 	.word	0x08006421
 80063ec:	08006445 	.word	0x08006445
 80063f0:	08006445 	.word	0x08006445
 80063f4:	08006445 	.word	0x08006445
 80063f8:	08006433 	.word	0x08006433
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0202 	orr.w	r2, r2, #2
 800640a:	60da      	str	r2, [r3, #12]
      break;
 800640c:	e01d      	b.n	800644a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0204 	orr.w	r2, r2, #4
 800641c:	60da      	str	r2, [r3, #12]
      break;
 800641e:	e014      	b.n	800644a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0208 	orr.w	r2, r2, #8
 800642e:	60da      	str	r2, [r3, #12]
      break;
 8006430:	e00b      	b.n	800644a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0210 	orr.w	r2, r2, #16
 8006440:	60da      	str	r2, [r3, #12]
      break;
 8006442:	e002      	b.n	800644a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	73fb      	strb	r3, [r7, #15]
      break;
 8006448:	bf00      	nop
  }

  if (status == HAL_OK)
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d14e      	bne.n	80064ee <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2201      	movs	r2, #1
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	4618      	mov	r0, r3
 800645a:	f001 faa7 	bl	80079ac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a25      	ldr	r2, [pc, #148]	; (80064f8 <HAL_TIM_IC_Start_IT+0x280>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_TIM_IC_Start_IT+0x236>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006470:	d01d      	beq.n	80064ae <HAL_TIM_IC_Start_IT+0x236>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a21      	ldr	r2, [pc, #132]	; (80064fc <HAL_TIM_IC_Start_IT+0x284>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_TIM_IC_Start_IT+0x236>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <HAL_TIM_IC_Start_IT+0x288>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_TIM_IC_Start_IT+0x236>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1e      	ldr	r2, [pc, #120]	; (8006504 <HAL_TIM_IC_Start_IT+0x28c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_TIM_IC_Start_IT+0x236>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1c      	ldr	r2, [pc, #112]	; (8006508 <HAL_TIM_IC_Start_IT+0x290>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_TIM_IC_Start_IT+0x236>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a1b      	ldr	r2, [pc, #108]	; (800650c <HAL_TIM_IC_Start_IT+0x294>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_TIM_IC_Start_IT+0x236>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a19      	ldr	r2, [pc, #100]	; (8006510 <HAL_TIM_IC_Start_IT+0x298>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d115      	bne.n	80064da <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	4b17      	ldr	r3, [pc, #92]	; (8006514 <HAL_TIM_IC_Start_IT+0x29c>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b06      	cmp	r3, #6
 80064be:	d015      	beq.n	80064ec <HAL_TIM_IC_Start_IT+0x274>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c6:	d011      	beq.n	80064ec <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d8:	e008      	b.n	80064ec <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0201 	orr.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e000      	b.n	80064ee <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40000c00 	.word	0x40000c00
 8006508:	40013400 	.word	0x40013400
 800650c:	40014000 	.word	0x40014000
 8006510:	40015000 	.word	0x40015000
 8006514:	00010007 	.word	0x00010007

08006518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b02      	cmp	r3, #2
 800652c:	d122      	bne.n	8006574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b02      	cmp	r3, #2
 800653a:	d11b      	bne.n	8006574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0202 	mvn.w	r2, #2
 8006544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fa fd08 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 8006560:	e005      	b.n	800656e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fc6c 	bl	8006e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fc73 	bl	8006e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b04      	cmp	r3, #4
 8006580:	d122      	bne.n	80065c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b04      	cmp	r3, #4
 800658e:	d11b      	bne.n	80065c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0204 	mvn.w	r2, #4
 8006598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fa fcde 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fc42 	bl	8006e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fc49 	bl	8006e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d122      	bne.n	800661c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d11b      	bne.n	800661c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0208 	mvn.w	r2, #8
 80065ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2204      	movs	r2, #4
 80065f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fa fcb4 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 8006608:	e005      	b.n	8006616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fc18 	bl	8006e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fc1f 	bl	8006e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0310 	and.w	r3, r3, #16
 8006626:	2b10      	cmp	r3, #16
 8006628:	d122      	bne.n	8006670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0310 	and.w	r3, r3, #16
 8006634:	2b10      	cmp	r3, #16
 8006636:	d11b      	bne.n	8006670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0210 	mvn.w	r2, #16
 8006640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2208      	movs	r2, #8
 8006646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fa fc8a 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fbee 	bl	8006e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fbf5 	bl	8006e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d10e      	bne.n	800669c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b01      	cmp	r3, #1
 800668a:	d107      	bne.n	800669c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0201 	mvn.w	r2, #1
 8006694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fbc8 	bl	8006e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b80      	cmp	r3, #128	; 0x80
 80066a8:	d10e      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b4:	2b80      	cmp	r3, #128	; 0x80
 80066b6:	d107      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 faea 	bl	8007c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d6:	d10e      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e2:	2b80      	cmp	r3, #128	; 0x80
 80066e4:	d107      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 fadd 	bl	8007cb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d10e      	bne.n	8006722 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b40      	cmp	r3, #64	; 0x40
 8006710:	d107      	bne.n	8006722 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800671a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fba3 	bl	8006e68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b20      	cmp	r3, #32
 800672e:	d10e      	bne.n	800674e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b20      	cmp	r3, #32
 800673c:	d107      	bne.n	800674e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f06f 0220 	mvn.w	r2, #32
 8006746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 fa9d 	bl	8007c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800675c:	d10f      	bne.n	800677e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800676c:	d107      	bne.n	800677e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 faa3 	bl	8007cc4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800678c:	d10f      	bne.n	80067ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800679c:	d107      	bne.n	80067ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80067a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 fa95 	bl	8007cd8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067bc:	d10f      	bne.n	80067de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067cc:	d107      	bne.n	80067de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80067d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fa87 	bl	8007cec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067ec:	d10f      	bne.n	800680e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067fc:	d107      	bne.n	800680e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 fa79 	bl	8007d00 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b086      	sub	sp, #24
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006830:	2302      	movs	r3, #2
 8006832:	e088      	b.n	8006946 <HAL_TIM_IC_ConfigChannel+0x130>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d11b      	bne.n	800687a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6819      	ldr	r1, [r3, #0]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f000 fee5 	bl	8007620 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699a      	ldr	r2, [r3, #24]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 020c 	bic.w	r2, r2, #12
 8006864:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6999      	ldr	r1, [r3, #24]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	619a      	str	r2, [r3, #24]
 8006878:	e060      	b.n	800693c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b04      	cmp	r3, #4
 800687e:	d11c      	bne.n	80068ba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	6819      	ldr	r1, [r3, #0]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f000 ff69 	bl	8007766 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068a2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6999      	ldr	r1, [r3, #24]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	021a      	lsls	r2, r3, #8
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	619a      	str	r2, [r3, #24]
 80068b8:	e040      	b.n	800693c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d11b      	bne.n	80068f8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	6819      	ldr	r1, [r3, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f000 ffb6 	bl	8007840 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	69da      	ldr	r2, [r3, #28]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 020c 	bic.w	r2, r2, #12
 80068e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69d9      	ldr	r1, [r3, #28]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	61da      	str	r2, [r3, #28]
 80068f6:	e021      	b.n	800693c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b0c      	cmp	r3, #12
 80068fc:	d11c      	bne.n	8006938 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6819      	ldr	r1, [r3, #0]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f000 ffd3 	bl	80078b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006920:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69d9      	ldr	r1, [r3, #28]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	021a      	lsls	r2, r3, #8
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	61da      	str	r2, [r3, #28]
 8006936:	e001      	b.n	800693c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800696a:	2302      	movs	r3, #2
 800696c:	e0ff      	b.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b14      	cmp	r3, #20
 800697a:	f200 80f0 	bhi.w	8006b5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800697e:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006984:	080069d9 	.word	0x080069d9
 8006988:	08006b5f 	.word	0x08006b5f
 800698c:	08006b5f 	.word	0x08006b5f
 8006990:	08006b5f 	.word	0x08006b5f
 8006994:	08006a19 	.word	0x08006a19
 8006998:	08006b5f 	.word	0x08006b5f
 800699c:	08006b5f 	.word	0x08006b5f
 80069a0:	08006b5f 	.word	0x08006b5f
 80069a4:	08006a5b 	.word	0x08006a5b
 80069a8:	08006b5f 	.word	0x08006b5f
 80069ac:	08006b5f 	.word	0x08006b5f
 80069b0:	08006b5f 	.word	0x08006b5f
 80069b4:	08006a9b 	.word	0x08006a9b
 80069b8:	08006b5f 	.word	0x08006b5f
 80069bc:	08006b5f 	.word	0x08006b5f
 80069c0:	08006b5f 	.word	0x08006b5f
 80069c4:	08006add 	.word	0x08006add
 80069c8:	08006b5f 	.word	0x08006b5f
 80069cc:	08006b5f 	.word	0x08006b5f
 80069d0:	08006b5f 	.word	0x08006b5f
 80069d4:	08006b1d 	.word	0x08006b1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68b9      	ldr	r1, [r7, #8]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 faf4 	bl	8006fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0208 	orr.w	r2, r2, #8
 80069f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0204 	bic.w	r2, r2, #4
 8006a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6999      	ldr	r1, [r3, #24]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	619a      	str	r2, [r3, #24]
      break;
 8006a16:	e0a5      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fb6e 	bl	8007100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699a      	ldr	r2, [r3, #24]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6999      	ldr	r1, [r3, #24]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	021a      	lsls	r2, r3, #8
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	619a      	str	r2, [r3, #24]
      break;
 8006a58:	e084      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fbe1 	bl	8007228 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69da      	ldr	r2, [r3, #28]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0208 	orr.w	r2, r2, #8
 8006a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0204 	bic.w	r2, r2, #4
 8006a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69d9      	ldr	r1, [r3, #28]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	61da      	str	r2, [r3, #28]
      break;
 8006a98:	e064      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fc53 	bl	800734c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69d9      	ldr	r1, [r3, #28]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	021a      	lsls	r2, r3, #8
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	61da      	str	r2, [r3, #28]
      break;
 8006ada:	e043      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fcc6 	bl	8007474 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0208 	orr.w	r2, r2, #8
 8006af6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0204 	bic.w	r2, r2, #4
 8006b06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006b1a:	e023      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fd10 	bl	8007548 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b46:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	021a      	lsls	r2, r3, #8
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006b5c:	e002      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	75fb      	strb	r3, [r7, #23]
      break;
 8006b62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop

08006b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIM_ConfigClockSource+0x1c>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e0f6      	b.n	8006d82 <HAL_TIM_ConfigClockSource+0x20a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006bb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a6f      	ldr	r2, [pc, #444]	; (8006d8c <HAL_TIM_ConfigClockSource+0x214>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	f000 80c1 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006bd4:	4a6d      	ldr	r2, [pc, #436]	; (8006d8c <HAL_TIM_ConfigClockSource+0x214>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	f200 80c6 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bdc:	4a6c      	ldr	r2, [pc, #432]	; (8006d90 <HAL_TIM_ConfigClockSource+0x218>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	f000 80b9 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006be4:	4a6a      	ldr	r2, [pc, #424]	; (8006d90 <HAL_TIM_ConfigClockSource+0x218>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	f200 80be 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bec:	4a69      	ldr	r2, [pc, #420]	; (8006d94 <HAL_TIM_ConfigClockSource+0x21c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	f000 80b1 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006bf4:	4a67      	ldr	r2, [pc, #412]	; (8006d94 <HAL_TIM_ConfigClockSource+0x21c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	f200 80b6 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bfc:	4a66      	ldr	r2, [pc, #408]	; (8006d98 <HAL_TIM_ConfigClockSource+0x220>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	f000 80a9 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006c04:	4a64      	ldr	r2, [pc, #400]	; (8006d98 <HAL_TIM_ConfigClockSource+0x220>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	f200 80ae 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c0c:	4a63      	ldr	r2, [pc, #396]	; (8006d9c <HAL_TIM_ConfigClockSource+0x224>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	f000 80a1 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006c14:	4a61      	ldr	r2, [pc, #388]	; (8006d9c <HAL_TIM_ConfigClockSource+0x224>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	f200 80a6 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c1c:	4a60      	ldr	r2, [pc, #384]	; (8006da0 <HAL_TIM_ConfigClockSource+0x228>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	f000 8099 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006c24:	4a5e      	ldr	r2, [pc, #376]	; (8006da0 <HAL_TIM_ConfigClockSource+0x228>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	f200 809e 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c30:	f000 8091 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006c34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c38:	f200 8096 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c40:	f000 8089 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c48:	f200 808e 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c50:	d03e      	beq.n	8006cd0 <HAL_TIM_ConfigClockSource+0x158>
 8006c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c56:	f200 8087 	bhi.w	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5e:	f000 8086 	beq.w	8006d6e <HAL_TIM_ConfigClockSource+0x1f6>
 8006c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c66:	d87f      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c68:	2b70      	cmp	r3, #112	; 0x70
 8006c6a:	d01a      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0x12a>
 8006c6c:	2b70      	cmp	r3, #112	; 0x70
 8006c6e:	d87b      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c70:	2b60      	cmp	r3, #96	; 0x60
 8006c72:	d050      	beq.n	8006d16 <HAL_TIM_ConfigClockSource+0x19e>
 8006c74:	2b60      	cmp	r3, #96	; 0x60
 8006c76:	d877      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c78:	2b50      	cmp	r3, #80	; 0x50
 8006c7a:	d03c      	beq.n	8006cf6 <HAL_TIM_ConfigClockSource+0x17e>
 8006c7c:	2b50      	cmp	r3, #80	; 0x50
 8006c7e:	d873      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d058      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0x1be>
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	d86f      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c88:	2b30      	cmp	r3, #48	; 0x30
 8006c8a:	d064      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006c8c:	2b30      	cmp	r3, #48	; 0x30
 8006c8e:	d86b      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d060      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	d867      	bhi.n	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d05c      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d05a      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x1de>
 8006ca0:	e062      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6818      	ldr	r0, [r3, #0]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	6899      	ldr	r1, [r3, #8]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f000 fe5b 	bl	800796c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	609a      	str	r2, [r3, #8]
      break;
 8006cce:	e04f      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	6899      	ldr	r1, [r3, #8]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f000 fe44 	bl	800796c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cf2:	609a      	str	r2, [r3, #8]
      break;
 8006cf4:	e03c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6859      	ldr	r1, [r3, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	461a      	mov	r2, r3
 8006d04:	f000 fd00 	bl	8007708 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2150      	movs	r1, #80	; 0x50
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fe0f 	bl	8007932 <TIM_ITRx_SetConfig>
      break;
 8006d14:	e02c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6859      	ldr	r1, [r3, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f000 fd5c 	bl	80077e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2160      	movs	r1, #96	; 0x60
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fdff 	bl	8007932 <TIM_ITRx_SetConfig>
      break;
 8006d34:	e01c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6859      	ldr	r1, [r3, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	461a      	mov	r2, r3
 8006d44:	f000 fce0 	bl	8007708 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2140      	movs	r1, #64	; 0x40
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fdef 	bl	8007932 <TIM_ITRx_SetConfig>
      break;
 8006d54:	e00c      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f000 fde6 	bl	8007932 <TIM_ITRx_SetConfig>
      break;
 8006d66:	e003      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6c:	e000      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	00100070 	.word	0x00100070
 8006d90:	00100060 	.word	0x00100060
 8006d94:	00100050 	.word	0x00100050
 8006d98:	00100040 	.word	0x00100040
 8006d9c:	00100030 	.word	0x00100030
 8006da0:	00100020 	.word	0x00100020

08006da4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b0c      	cmp	r3, #12
 8006db6:	d831      	bhi.n	8006e1c <HAL_TIM_ReadCapturedValue+0x78>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006df5 	.word	0x08006df5
 8006dc4:	08006e1d 	.word	0x08006e1d
 8006dc8:	08006e1d 	.word	0x08006e1d
 8006dcc:	08006e1d 	.word	0x08006e1d
 8006dd0:	08006dff 	.word	0x08006dff
 8006dd4:	08006e1d 	.word	0x08006e1d
 8006dd8:	08006e1d 	.word	0x08006e1d
 8006ddc:	08006e1d 	.word	0x08006e1d
 8006de0:	08006e09 	.word	0x08006e09
 8006de4:	08006e1d 	.word	0x08006e1d
 8006de8:	08006e1d 	.word	0x08006e1d
 8006dec:	08006e1d 	.word	0x08006e1d
 8006df0:	08006e13 	.word	0x08006e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfa:	60fb      	str	r3, [r7, #12]

      break;
 8006dfc:	e00f      	b.n	8006e1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	60fb      	str	r3, [r7, #12]

      break;
 8006e06:	e00a      	b.n	8006e1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0e:	60fb      	str	r3, [r7, #12]

      break;
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	60fb      	str	r3, [r7, #12]

      break;
 8006e1a:	e000      	b.n	8006e1e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006e1c:	bf00      	nop
  }

  return tmpreg;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a46      	ldr	r2, [pc, #280]	; (8006fa8 <TIM_Base_SetConfig+0x12c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d017      	beq.n	8006ec4 <TIM_Base_SetConfig+0x48>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d013      	beq.n	8006ec4 <TIM_Base_SetConfig+0x48>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a43      	ldr	r2, [pc, #268]	; (8006fac <TIM_Base_SetConfig+0x130>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00f      	beq.n	8006ec4 <TIM_Base_SetConfig+0x48>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a42      	ldr	r2, [pc, #264]	; (8006fb0 <TIM_Base_SetConfig+0x134>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00b      	beq.n	8006ec4 <TIM_Base_SetConfig+0x48>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a41      	ldr	r2, [pc, #260]	; (8006fb4 <TIM_Base_SetConfig+0x138>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d007      	beq.n	8006ec4 <TIM_Base_SetConfig+0x48>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a40      	ldr	r2, [pc, #256]	; (8006fb8 <TIM_Base_SetConfig+0x13c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d003      	beq.n	8006ec4 <TIM_Base_SetConfig+0x48>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a3f      	ldr	r2, [pc, #252]	; (8006fbc <TIM_Base_SetConfig+0x140>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d108      	bne.n	8006ed6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a33      	ldr	r2, [pc, #204]	; (8006fa8 <TIM_Base_SetConfig+0x12c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d023      	beq.n	8006f26 <TIM_Base_SetConfig+0xaa>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee4:	d01f      	beq.n	8006f26 <TIM_Base_SetConfig+0xaa>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a30      	ldr	r2, [pc, #192]	; (8006fac <TIM_Base_SetConfig+0x130>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d01b      	beq.n	8006f26 <TIM_Base_SetConfig+0xaa>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a2f      	ldr	r2, [pc, #188]	; (8006fb0 <TIM_Base_SetConfig+0x134>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d017      	beq.n	8006f26 <TIM_Base_SetConfig+0xaa>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a2e      	ldr	r2, [pc, #184]	; (8006fb4 <TIM_Base_SetConfig+0x138>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d013      	beq.n	8006f26 <TIM_Base_SetConfig+0xaa>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a2d      	ldr	r2, [pc, #180]	; (8006fb8 <TIM_Base_SetConfig+0x13c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00f      	beq.n	8006f26 <TIM_Base_SetConfig+0xaa>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a2d      	ldr	r2, [pc, #180]	; (8006fc0 <TIM_Base_SetConfig+0x144>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d00b      	beq.n	8006f26 <TIM_Base_SetConfig+0xaa>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a2c      	ldr	r2, [pc, #176]	; (8006fc4 <TIM_Base_SetConfig+0x148>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d007      	beq.n	8006f26 <TIM_Base_SetConfig+0xaa>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a2b      	ldr	r2, [pc, #172]	; (8006fc8 <TIM_Base_SetConfig+0x14c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d003      	beq.n	8006f26 <TIM_Base_SetConfig+0xaa>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a26      	ldr	r2, [pc, #152]	; (8006fbc <TIM_Base_SetConfig+0x140>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d108      	bne.n	8006f38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a12      	ldr	r2, [pc, #72]	; (8006fa8 <TIM_Base_SetConfig+0x12c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d013      	beq.n	8006f8c <TIM_Base_SetConfig+0x110>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a14      	ldr	r2, [pc, #80]	; (8006fb8 <TIM_Base_SetConfig+0x13c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00f      	beq.n	8006f8c <TIM_Base_SetConfig+0x110>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a14      	ldr	r2, [pc, #80]	; (8006fc0 <TIM_Base_SetConfig+0x144>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00b      	beq.n	8006f8c <TIM_Base_SetConfig+0x110>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a13      	ldr	r2, [pc, #76]	; (8006fc4 <TIM_Base_SetConfig+0x148>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d007      	beq.n	8006f8c <TIM_Base_SetConfig+0x110>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a12      	ldr	r2, [pc, #72]	; (8006fc8 <TIM_Base_SetConfig+0x14c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_Base_SetConfig+0x110>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a0d      	ldr	r2, [pc, #52]	; (8006fbc <TIM_Base_SetConfig+0x140>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d103      	bne.n	8006f94 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	615a      	str	r2, [r3, #20]
}
 8006f9a:	bf00      	nop
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	40012c00 	.word	0x40012c00
 8006fac:	40000400 	.word	0x40000400
 8006fb0:	40000800 	.word	0x40000800
 8006fb4:	40000c00 	.word	0x40000c00
 8006fb8:	40013400 	.word	0x40013400
 8006fbc:	40015000 	.word	0x40015000
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800

08006fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f023 0201 	bic.w	r2, r3, #1
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f023 0302 	bic.w	r3, r3, #2
 8007018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a30      	ldr	r2, [pc, #192]	; (80070e8 <TIM_OC1_SetConfig+0x11c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d013      	beq.n	8007054 <TIM_OC1_SetConfig+0x88>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a2f      	ldr	r2, [pc, #188]	; (80070ec <TIM_OC1_SetConfig+0x120>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00f      	beq.n	8007054 <TIM_OC1_SetConfig+0x88>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a2e      	ldr	r2, [pc, #184]	; (80070f0 <TIM_OC1_SetConfig+0x124>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00b      	beq.n	8007054 <TIM_OC1_SetConfig+0x88>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a2d      	ldr	r2, [pc, #180]	; (80070f4 <TIM_OC1_SetConfig+0x128>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d007      	beq.n	8007054 <TIM_OC1_SetConfig+0x88>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a2c      	ldr	r2, [pc, #176]	; (80070f8 <TIM_OC1_SetConfig+0x12c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_OC1_SetConfig+0x88>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a2b      	ldr	r2, [pc, #172]	; (80070fc <TIM_OC1_SetConfig+0x130>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d10c      	bne.n	800706e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f023 0308 	bic.w	r3, r3, #8
 800705a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f023 0304 	bic.w	r3, r3, #4
 800706c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a1d      	ldr	r2, [pc, #116]	; (80070e8 <TIM_OC1_SetConfig+0x11c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d013      	beq.n	800709e <TIM_OC1_SetConfig+0xd2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a1c      	ldr	r2, [pc, #112]	; (80070ec <TIM_OC1_SetConfig+0x120>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00f      	beq.n	800709e <TIM_OC1_SetConfig+0xd2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <TIM_OC1_SetConfig+0x124>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00b      	beq.n	800709e <TIM_OC1_SetConfig+0xd2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a1a      	ldr	r2, [pc, #104]	; (80070f4 <TIM_OC1_SetConfig+0x128>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d007      	beq.n	800709e <TIM_OC1_SetConfig+0xd2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a19      	ldr	r2, [pc, #100]	; (80070f8 <TIM_OC1_SetConfig+0x12c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d003      	beq.n	800709e <TIM_OC1_SetConfig+0xd2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a18      	ldr	r2, [pc, #96]	; (80070fc <TIM_OC1_SetConfig+0x130>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d111      	bne.n	80070c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	621a      	str	r2, [r3, #32]
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	40012c00 	.word	0x40012c00
 80070ec:	40013400 	.word	0x40013400
 80070f0:	40014000 	.word	0x40014000
 80070f4:	40014400 	.word	0x40014400
 80070f8:	40014800 	.word	0x40014800
 80070fc:	40015000 	.word	0x40015000

08007100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	f023 0210 	bic.w	r2, r3, #16
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800712e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f023 0320 	bic.w	r3, r3, #32
 800714e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a2c      	ldr	r2, [pc, #176]	; (8007210 <TIM_OC2_SetConfig+0x110>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d007      	beq.n	8007174 <TIM_OC2_SetConfig+0x74>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a2b      	ldr	r2, [pc, #172]	; (8007214 <TIM_OC2_SetConfig+0x114>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_OC2_SetConfig+0x74>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a2a      	ldr	r2, [pc, #168]	; (8007218 <TIM_OC2_SetConfig+0x118>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d10d      	bne.n	8007190 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800717a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800718e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a1f      	ldr	r2, [pc, #124]	; (8007210 <TIM_OC2_SetConfig+0x110>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <TIM_OC2_SetConfig+0xc0>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a1e      	ldr	r2, [pc, #120]	; (8007214 <TIM_OC2_SetConfig+0x114>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00f      	beq.n	80071c0 <TIM_OC2_SetConfig+0xc0>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a1e      	ldr	r2, [pc, #120]	; (800721c <TIM_OC2_SetConfig+0x11c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00b      	beq.n	80071c0 <TIM_OC2_SetConfig+0xc0>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a1d      	ldr	r2, [pc, #116]	; (8007220 <TIM_OC2_SetConfig+0x120>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d007      	beq.n	80071c0 <TIM_OC2_SetConfig+0xc0>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <TIM_OC2_SetConfig+0x124>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_OC2_SetConfig+0xc0>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a17      	ldr	r2, [pc, #92]	; (8007218 <TIM_OC2_SetConfig+0x118>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d113      	bne.n	80071e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	4313      	orrs	r3, r2
 80071da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40012c00 	.word	0x40012c00
 8007214:	40013400 	.word	0x40013400
 8007218:	40015000 	.word	0x40015000
 800721c:	40014000 	.word	0x40014000
 8007220:	40014400 	.word	0x40014400
 8007224:	40014800 	.word	0x40014800

08007228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0303 	bic.w	r3, r3, #3
 8007262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	021b      	lsls	r3, r3, #8
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a2b      	ldr	r2, [pc, #172]	; (8007334 <TIM_OC3_SetConfig+0x10c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d007      	beq.n	800729a <TIM_OC3_SetConfig+0x72>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a2a      	ldr	r2, [pc, #168]	; (8007338 <TIM_OC3_SetConfig+0x110>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d003      	beq.n	800729a <TIM_OC3_SetConfig+0x72>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a29      	ldr	r2, [pc, #164]	; (800733c <TIM_OC3_SetConfig+0x114>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d10d      	bne.n	80072b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a1e      	ldr	r2, [pc, #120]	; (8007334 <TIM_OC3_SetConfig+0x10c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <TIM_OC3_SetConfig+0xbe>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a1d      	ldr	r2, [pc, #116]	; (8007338 <TIM_OC3_SetConfig+0x110>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00f      	beq.n	80072e6 <TIM_OC3_SetConfig+0xbe>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a1d      	ldr	r2, [pc, #116]	; (8007340 <TIM_OC3_SetConfig+0x118>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00b      	beq.n	80072e6 <TIM_OC3_SetConfig+0xbe>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a1c      	ldr	r2, [pc, #112]	; (8007344 <TIM_OC3_SetConfig+0x11c>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d007      	beq.n	80072e6 <TIM_OC3_SetConfig+0xbe>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a1b      	ldr	r2, [pc, #108]	; (8007348 <TIM_OC3_SetConfig+0x120>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d003      	beq.n	80072e6 <TIM_OC3_SetConfig+0xbe>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a16      	ldr	r2, [pc, #88]	; (800733c <TIM_OC3_SetConfig+0x114>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d113      	bne.n	800730e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	621a      	str	r2, [r3, #32]
}
 8007328:	bf00      	nop
 800732a:	371c      	adds	r7, #28
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	40012c00 	.word	0x40012c00
 8007338:	40013400 	.word	0x40013400
 800733c:	40015000 	.word	0x40015000
 8007340:	40014000 	.word	0x40014000
 8007344:	40014400 	.word	0x40014400
 8007348:	40014800 	.word	0x40014800

0800734c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800737a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800739a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	031b      	lsls	r3, r3, #12
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a2c      	ldr	r2, [pc, #176]	; (800745c <TIM_OC4_SetConfig+0x110>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d007      	beq.n	80073c0 <TIM_OC4_SetConfig+0x74>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a2b      	ldr	r2, [pc, #172]	; (8007460 <TIM_OC4_SetConfig+0x114>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d003      	beq.n	80073c0 <TIM_OC4_SetConfig+0x74>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a2a      	ldr	r2, [pc, #168]	; (8007464 <TIM_OC4_SetConfig+0x118>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d10d      	bne.n	80073dc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	031b      	lsls	r3, r3, #12
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a1f      	ldr	r2, [pc, #124]	; (800745c <TIM_OC4_SetConfig+0x110>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d013      	beq.n	800740c <TIM_OC4_SetConfig+0xc0>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a1e      	ldr	r2, [pc, #120]	; (8007460 <TIM_OC4_SetConfig+0x114>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00f      	beq.n	800740c <TIM_OC4_SetConfig+0xc0>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a1e      	ldr	r2, [pc, #120]	; (8007468 <TIM_OC4_SetConfig+0x11c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00b      	beq.n	800740c <TIM_OC4_SetConfig+0xc0>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a1d      	ldr	r2, [pc, #116]	; (800746c <TIM_OC4_SetConfig+0x120>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d007      	beq.n	800740c <TIM_OC4_SetConfig+0xc0>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a1c      	ldr	r2, [pc, #112]	; (8007470 <TIM_OC4_SetConfig+0x124>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d003      	beq.n	800740c <TIM_OC4_SetConfig+0xc0>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a17      	ldr	r2, [pc, #92]	; (8007464 <TIM_OC4_SetConfig+0x118>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d113      	bne.n	8007434 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007412:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800741a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	019b      	lsls	r3, r3, #6
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	019b      	lsls	r3, r3, #6
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	621a      	str	r2, [r3, #32]
}
 800744e:	bf00      	nop
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40012c00 	.word	0x40012c00
 8007460:	40013400 	.word	0x40013400
 8007464:	40015000 	.word	0x40015000
 8007468:	40014000 	.word	0x40014000
 800746c:	40014400 	.word	0x40014400
 8007470:	40014800 	.word	0x40014800

08007474 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a19      	ldr	r2, [pc, #100]	; (8007530 <TIM_OC5_SetConfig+0xbc>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <TIM_OC5_SetConfig+0x82>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a18      	ldr	r2, [pc, #96]	; (8007534 <TIM_OC5_SetConfig+0xc0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00f      	beq.n	80074f6 <TIM_OC5_SetConfig+0x82>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a17      	ldr	r2, [pc, #92]	; (8007538 <TIM_OC5_SetConfig+0xc4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00b      	beq.n	80074f6 <TIM_OC5_SetConfig+0x82>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a16      	ldr	r2, [pc, #88]	; (800753c <TIM_OC5_SetConfig+0xc8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d007      	beq.n	80074f6 <TIM_OC5_SetConfig+0x82>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a15      	ldr	r2, [pc, #84]	; (8007540 <TIM_OC5_SetConfig+0xcc>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d003      	beq.n	80074f6 <TIM_OC5_SetConfig+0x82>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a14      	ldr	r2, [pc, #80]	; (8007544 <TIM_OC5_SetConfig+0xd0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d109      	bne.n	800750a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	021b      	lsls	r3, r3, #8
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	4313      	orrs	r3, r2
 8007508:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	621a      	str	r2, [r3, #32]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	40012c00 	.word	0x40012c00
 8007534:	40013400 	.word	0x40013400
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400
 8007540:	40014800 	.word	0x40014800
 8007544:	40015000 	.word	0x40015000

08007548 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800757a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	021b      	lsls	r3, r3, #8
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800758e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	051b      	lsls	r3, r3, #20
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4313      	orrs	r3, r2
 800759a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a1a      	ldr	r2, [pc, #104]	; (8007608 <TIM_OC6_SetConfig+0xc0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d013      	beq.n	80075cc <TIM_OC6_SetConfig+0x84>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a19      	ldr	r2, [pc, #100]	; (800760c <TIM_OC6_SetConfig+0xc4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00f      	beq.n	80075cc <TIM_OC6_SetConfig+0x84>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a18      	ldr	r2, [pc, #96]	; (8007610 <TIM_OC6_SetConfig+0xc8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00b      	beq.n	80075cc <TIM_OC6_SetConfig+0x84>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a17      	ldr	r2, [pc, #92]	; (8007614 <TIM_OC6_SetConfig+0xcc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d007      	beq.n	80075cc <TIM_OC6_SetConfig+0x84>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a16      	ldr	r2, [pc, #88]	; (8007618 <TIM_OC6_SetConfig+0xd0>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <TIM_OC6_SetConfig+0x84>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a15      	ldr	r2, [pc, #84]	; (800761c <TIM_OC6_SetConfig+0xd4>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d109      	bne.n	80075e0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	029b      	lsls	r3, r3, #10
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	621a      	str	r2, [r3, #32]
}
 80075fa:	bf00      	nop
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	40012c00 	.word	0x40012c00
 800760c:	40013400 	.word	0x40013400
 8007610:	40014000 	.word	0x40014000
 8007614:	40014400 	.word	0x40014400
 8007618:	40014800 	.word	0x40014800
 800761c:	40015000 	.word	0x40015000

08007620 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	f023 0201 	bic.w	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4a28      	ldr	r2, [pc, #160]	; (80076ec <TIM_TI1_SetConfig+0xcc>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d01b      	beq.n	8007686 <TIM_TI1_SetConfig+0x66>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007654:	d017      	beq.n	8007686 <TIM_TI1_SetConfig+0x66>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4a25      	ldr	r2, [pc, #148]	; (80076f0 <TIM_TI1_SetConfig+0xd0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d013      	beq.n	8007686 <TIM_TI1_SetConfig+0x66>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4a24      	ldr	r2, [pc, #144]	; (80076f4 <TIM_TI1_SetConfig+0xd4>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00f      	beq.n	8007686 <TIM_TI1_SetConfig+0x66>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4a23      	ldr	r2, [pc, #140]	; (80076f8 <TIM_TI1_SetConfig+0xd8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00b      	beq.n	8007686 <TIM_TI1_SetConfig+0x66>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4a22      	ldr	r2, [pc, #136]	; (80076fc <TIM_TI1_SetConfig+0xdc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d007      	beq.n	8007686 <TIM_TI1_SetConfig+0x66>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4a21      	ldr	r2, [pc, #132]	; (8007700 <TIM_TI1_SetConfig+0xe0>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d003      	beq.n	8007686 <TIM_TI1_SetConfig+0x66>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4a20      	ldr	r2, [pc, #128]	; (8007704 <TIM_TI1_SetConfig+0xe4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d101      	bne.n	800768a <TIM_TI1_SetConfig+0x6a>
 8007686:	2301      	movs	r3, #1
 8007688:	e000      	b.n	800768c <TIM_TI1_SetConfig+0x6c>
 800768a:	2300      	movs	r3, #0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d008      	beq.n	80076a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f023 0303 	bic.w	r3, r3, #3
 8007696:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	e003      	b.n	80076aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f043 0301 	orr.w	r3, r3, #1
 80076a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f023 030a 	bic.w	r3, r3, #10
 80076c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f003 030a 	and.w	r3, r3, #10
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	621a      	str	r2, [r3, #32]
}
 80076de:	bf00      	nop
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40012c00 	.word	0x40012c00
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	40013400 	.word	0x40013400
 8007700:	40014000 	.word	0x40014000
 8007704:	40015000 	.word	0x40015000

08007708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	f023 0201 	bic.w	r2, r3, #1
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f023 030a 	bic.w	r3, r3, #10
 8007744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	621a      	str	r2, [r3, #32]
}
 800775a:	bf00      	nop
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007766:	b480      	push	{r7}
 8007768:	b087      	sub	sp, #28
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	607a      	str	r2, [r7, #4]
 8007772:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	f023 0210 	bic.w	r2, r3, #16
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007792:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	031b      	lsls	r3, r3, #12
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	621a      	str	r2, [r3, #32]
}
 80077d4:	bf00      	nop
 80077d6:	371c      	adds	r7, #28
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	f023 0210 	bic.w	r2, r3, #16
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800780a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	031b      	lsls	r3, r3, #12
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800781c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	621a      	str	r2, [r3, #32]
}
 8007834:	bf00      	nop
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f023 0303 	bic.w	r3, r3, #3
 800786c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4313      	orrs	r3, r2
 8007874:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800787c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	b2db      	uxtb	r3, r3
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	4313      	orrs	r3, r2
 8007888:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007890:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	4313      	orrs	r3, r2
 800789e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	621a      	str	r2, [r3, #32]
}
 80078ac:	bf00      	nop
 80078ae:	371c      	adds	r7, #28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	031b      	lsls	r3, r3, #12
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800790a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	031b      	lsls	r3, r3, #12
 8007910:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	f043 0307 	orr.w	r3, r3, #7
 8007958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	609a      	str	r2, [r3, #8]
}
 8007960:	bf00      	nop
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	021a      	lsls	r2, r3, #8
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	431a      	orrs	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	4313      	orrs	r3, r2
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	609a      	str	r2, [r3, #8]
}
 80079a0:	bf00      	nop
 80079a2:	371c      	adds	r7, #28
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f003 031f 	and.w	r3, r3, #31
 80079be:	2201      	movs	r2, #1
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a1a      	ldr	r2, [r3, #32]
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	43db      	mvns	r3, r3
 80079ce:	401a      	ands	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a1a      	ldr	r2, [r3, #32]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f003 031f 	and.w	r3, r3, #31
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	fa01 f303 	lsl.w	r3, r1, r3
 80079e4:	431a      	orrs	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	621a      	str	r2, [r3, #32]
}
 80079ea:	bf00      	nop
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
	...

080079f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d101      	bne.n	8007a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e074      	b.n	8007afa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a34      	ldr	r2, [pc, #208]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d009      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a33      	ldr	r2, [pc, #204]	; (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d004      	beq.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a31      	ldr	r2, [pc, #196]	; (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d108      	bne.n	8007a60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a21      	ldr	r2, [pc, #132]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d022      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a90:	d01d      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a1f      	ldr	r2, [pc, #124]	; (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d018      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a1d      	ldr	r2, [pc, #116]	; (8007b18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d013      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00e      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a15      	ldr	r2, [pc, #84]	; (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d009      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a18      	ldr	r2, [pc, #96]	; (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d004      	beq.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a11      	ldr	r2, [pc, #68]	; (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d10c      	bne.n	8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40012c00 	.word	0x40012c00
 8007b0c:	40013400 	.word	0x40013400
 8007b10:	40015000 	.word	0x40015000
 8007b14:	40000400 	.word	0x40000400
 8007b18:	40000800 	.word	0x40000800
 8007b1c:	40000c00 	.word	0x40000c00
 8007b20:	40014000 	.word	0x40014000

08007b24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e096      	b.n	8007c6e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	041b      	lsls	r3, r3, #16
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a2f      	ldr	r2, [pc, #188]	; (8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d009      	beq.n	8007bd8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a2d      	ldr	r2, [pc, #180]	; (8007c80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d004      	beq.n	8007bd8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a2c      	ldr	r2, [pc, #176]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d106      	bne.n	8007be6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a24      	ldr	r2, [pc, #144]	; (8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d009      	beq.n	8007c04 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a22      	ldr	r2, [pc, #136]	; (8007c80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d004      	beq.n	8007c04 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a21      	ldr	r2, [pc, #132]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d12b      	bne.n	8007c5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	051b      	lsls	r3, r3, #20
 8007c10:	4313      	orrs	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a11      	ldr	r2, [pc, #68]	; (8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d009      	beq.n	8007c4e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a10      	ldr	r2, [pc, #64]	; (8007c80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d004      	beq.n	8007c4e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a0e      	ldr	r2, [pc, #56]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d106      	bne.n	8007c5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40012c00 	.word	0x40012c00
 8007c80:	40013400 	.word	0x40013400
 8007c84:	40015000 	.word	0x40015000

08007c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e042      	b.n	8007dac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d106      	bne.n	8007d3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7fc f8cf 	bl	8003edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2224      	movs	r2, #36	; 0x24
 8007d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0201 	bic.w	r2, r2, #1
 8007d54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f996 	bl	8008088 <UART_SetConfig>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d101      	bne.n	8007d66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e022      	b.n	8007dac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fc86 	bl	8008680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0201 	orr.w	r2, r2, #1
 8007da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fd0d 	bl	80087c4 <UART_CheckIdleState>
 8007daa:	4603      	mov	r3, r0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08a      	sub	sp, #40	; 0x28
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	f040 8083 	bne.w	8007ed6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <HAL_UART_Transmit+0x28>
 8007dd6:	88fb      	ldrh	r3, [r7, #6]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e07b      	b.n	8007ed8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d101      	bne.n	8007dee <HAL_UART_Transmit+0x3a>
 8007dea:	2302      	movs	r3, #2
 8007dec:	e074      	b.n	8007ed8 <HAL_UART_Transmit+0x124>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2221      	movs	r2, #33	; 0x21
 8007e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e06:	f7fc fcbf 	bl	8004788 <HAL_GetTick>
 8007e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	88fa      	ldrh	r2, [r7, #6]
 8007e10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	88fa      	ldrh	r2, [r7, #6]
 8007e18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e24:	d108      	bne.n	8007e38 <HAL_UART_Transmit+0x84>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	e003      	b.n	8007e40 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007e48:	e02c      	b.n	8007ea4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2200      	movs	r2, #0
 8007e52:	2180      	movs	r1, #128	; 0x80
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 fd00 	bl	800885a <UART_WaitOnFlagUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e039      	b.n	8007ed8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10b      	bne.n	8007e82 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	3302      	adds	r3, #2
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	e007      	b.n	8007e92 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1cc      	bne.n	8007e4a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2140      	movs	r1, #64	; 0x40
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fccd 	bl	800885a <UART_WaitOnFlagUntilTimeout>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e006      	b.n	8007ed8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e000      	b.n	8007ed8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007ed6:	2302      	movs	r3, #2
  }
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3720      	adds	r7, #32
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08a      	sub	sp, #40	; 0x28
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	4613      	mov	r3, r2
 8007eee:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	f040 80c0 	bne.w	800807c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <HAL_UART_Receive+0x28>
 8007f02:	88fb      	ldrh	r3, [r7, #6]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e0b8      	b.n	800807e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d101      	bne.n	8007f1a <HAL_UART_Receive+0x3a>
 8007f16:	2302      	movs	r3, #2
 8007f18:	e0b1      	b.n	800807e <HAL_UART_Receive+0x19e>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2222      	movs	r2, #34	; 0x22
 8007f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f38:	f7fc fc26 	bl	8004788 <HAL_GetTick>
 8007f3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	88fa      	ldrh	r2, [r7, #6]
 8007f42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	88fa      	ldrh	r2, [r7, #6]
 8007f4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f56:	d10e      	bne.n	8007f76 <HAL_UART_Receive+0x96>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d105      	bne.n	8007f6c <HAL_UART_Receive+0x8c>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007f66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f6a:	e02d      	b.n	8007fc8 <HAL_UART_Receive+0xe8>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	22ff      	movs	r2, #255	; 0xff
 8007f70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f74:	e028      	b.n	8007fc8 <HAL_UART_Receive+0xe8>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10d      	bne.n	8007f9a <HAL_UART_Receive+0xba>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <HAL_UART_Receive+0xb0>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	22ff      	movs	r2, #255	; 0xff
 8007f8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f8e:	e01b      	b.n	8007fc8 <HAL_UART_Receive+0xe8>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	227f      	movs	r2, #127	; 0x7f
 8007f94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f98:	e016      	b.n	8007fc8 <HAL_UART_Receive+0xe8>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fa2:	d10d      	bne.n	8007fc0 <HAL_UART_Receive+0xe0>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d104      	bne.n	8007fb6 <HAL_UART_Receive+0xd6>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	227f      	movs	r2, #127	; 0x7f
 8007fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fb4:	e008      	b.n	8007fc8 <HAL_UART_Receive+0xe8>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	223f      	movs	r2, #63	; 0x3f
 8007fba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fbe:	e003      	b.n	8007fc8 <HAL_UART_Receive+0xe8>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007fce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd8:	d108      	bne.n	8007fec <HAL_UART_Receive+0x10c>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	61bb      	str	r3, [r7, #24]
 8007fea:	e003      	b.n	8007ff4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007ffc:	e032      	b.n	8008064 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2200      	movs	r2, #0
 8008006:	2120      	movs	r1, #32
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 fc26 	bl	800885a <UART_WaitOnFlagUntilTimeout>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e032      	b.n	800807e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10c      	bne.n	8008038 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	b29a      	uxth	r2, r3
 8008026:	8a7b      	ldrh	r3, [r7, #18]
 8008028:	4013      	ands	r3, r2
 800802a:	b29a      	uxth	r2, r3
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	3302      	adds	r3, #2
 8008034:	61bb      	str	r3, [r7, #24]
 8008036:	e00c      	b.n	8008052 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	b2da      	uxtb	r2, r3
 8008040:	8a7b      	ldrh	r3, [r7, #18]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	4013      	ands	r3, r2
 8008046:	b2da      	uxtb	r2, r3
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	3301      	adds	r3, #1
 8008050:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008058:	b29b      	uxth	r3, r3
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800806a:	b29b      	uxth	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1c6      	bne.n	8007ffe <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2220      	movs	r2, #32
 8008074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	e000      	b.n	800807e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800807c:	2302      	movs	r3, #2
  }
}
 800807e:	4618      	mov	r0, r3
 8008080:	3720      	adds	r7, #32
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800808c:	b08c      	sub	sp, #48	; 0x30
 800808e:	af00      	add	r7, sp, #0
 8008090:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	431a      	orrs	r2, r3
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	431a      	orrs	r2, r3
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	4baa      	ldr	r3, [pc, #680]	; (8008360 <UART_SetConfig+0x2d8>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	6812      	ldr	r2, [r2, #0]
 80080be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080c0:	430b      	orrs	r3, r1
 80080c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	68da      	ldr	r2, [r3, #12]
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a9f      	ldr	r2, [pc, #636]	; (8008364 <UART_SetConfig+0x2dc>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d004      	beq.n	80080f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080f0:	4313      	orrs	r3, r2
 80080f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80080fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	6812      	ldr	r2, [r2, #0]
 8008106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008108:	430b      	orrs	r3, r1
 800810a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008112:	f023 010f 	bic.w	r1, r3, #15
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a90      	ldr	r2, [pc, #576]	; (8008368 <UART_SetConfig+0x2e0>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d125      	bne.n	8008178 <UART_SetConfig+0xf0>
 800812c:	4b8f      	ldr	r3, [pc, #572]	; (800836c <UART_SetConfig+0x2e4>)
 800812e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	2b03      	cmp	r3, #3
 8008138:	d81a      	bhi.n	8008170 <UART_SetConfig+0xe8>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <UART_SetConfig+0xb8>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008151 	.word	0x08008151
 8008144:	08008161 	.word	0x08008161
 8008148:	08008159 	.word	0x08008159
 800814c:	08008169 	.word	0x08008169
 8008150:	2301      	movs	r3, #1
 8008152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008156:	e116      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008158:	2302      	movs	r3, #2
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800815e:	e112      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008160:	2304      	movs	r3, #4
 8008162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008166:	e10e      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008168:	2308      	movs	r3, #8
 800816a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800816e:	e10a      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008170:	2310      	movs	r3, #16
 8008172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008176:	e106      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a7c      	ldr	r2, [pc, #496]	; (8008370 <UART_SetConfig+0x2e8>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d138      	bne.n	80081f4 <UART_SetConfig+0x16c>
 8008182:	4b7a      	ldr	r3, [pc, #488]	; (800836c <UART_SetConfig+0x2e4>)
 8008184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008188:	f003 030c 	and.w	r3, r3, #12
 800818c:	2b0c      	cmp	r3, #12
 800818e:	d82d      	bhi.n	80081ec <UART_SetConfig+0x164>
 8008190:	a201      	add	r2, pc, #4	; (adr r2, 8008198 <UART_SetConfig+0x110>)
 8008192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008196:	bf00      	nop
 8008198:	080081cd 	.word	0x080081cd
 800819c:	080081ed 	.word	0x080081ed
 80081a0:	080081ed 	.word	0x080081ed
 80081a4:	080081ed 	.word	0x080081ed
 80081a8:	080081dd 	.word	0x080081dd
 80081ac:	080081ed 	.word	0x080081ed
 80081b0:	080081ed 	.word	0x080081ed
 80081b4:	080081ed 	.word	0x080081ed
 80081b8:	080081d5 	.word	0x080081d5
 80081bc:	080081ed 	.word	0x080081ed
 80081c0:	080081ed 	.word	0x080081ed
 80081c4:	080081ed 	.word	0x080081ed
 80081c8:	080081e5 	.word	0x080081e5
 80081cc:	2300      	movs	r3, #0
 80081ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081d2:	e0d8      	b.n	8008386 <UART_SetConfig+0x2fe>
 80081d4:	2302      	movs	r3, #2
 80081d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081da:	e0d4      	b.n	8008386 <UART_SetConfig+0x2fe>
 80081dc:	2304      	movs	r3, #4
 80081de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e2:	e0d0      	b.n	8008386 <UART_SetConfig+0x2fe>
 80081e4:	2308      	movs	r3, #8
 80081e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ea:	e0cc      	b.n	8008386 <UART_SetConfig+0x2fe>
 80081ec:	2310      	movs	r3, #16
 80081ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f2:	e0c8      	b.n	8008386 <UART_SetConfig+0x2fe>
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a5e      	ldr	r2, [pc, #376]	; (8008374 <UART_SetConfig+0x2ec>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d125      	bne.n	800824a <UART_SetConfig+0x1c2>
 80081fe:	4b5b      	ldr	r3, [pc, #364]	; (800836c <UART_SetConfig+0x2e4>)
 8008200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008204:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008208:	2b30      	cmp	r3, #48	; 0x30
 800820a:	d016      	beq.n	800823a <UART_SetConfig+0x1b2>
 800820c:	2b30      	cmp	r3, #48	; 0x30
 800820e:	d818      	bhi.n	8008242 <UART_SetConfig+0x1ba>
 8008210:	2b20      	cmp	r3, #32
 8008212:	d00a      	beq.n	800822a <UART_SetConfig+0x1a2>
 8008214:	2b20      	cmp	r3, #32
 8008216:	d814      	bhi.n	8008242 <UART_SetConfig+0x1ba>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <UART_SetConfig+0x19a>
 800821c:	2b10      	cmp	r3, #16
 800821e:	d008      	beq.n	8008232 <UART_SetConfig+0x1aa>
 8008220:	e00f      	b.n	8008242 <UART_SetConfig+0x1ba>
 8008222:	2300      	movs	r3, #0
 8008224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008228:	e0ad      	b.n	8008386 <UART_SetConfig+0x2fe>
 800822a:	2302      	movs	r3, #2
 800822c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008230:	e0a9      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008232:	2304      	movs	r3, #4
 8008234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008238:	e0a5      	b.n	8008386 <UART_SetConfig+0x2fe>
 800823a:	2308      	movs	r3, #8
 800823c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008240:	e0a1      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008242:	2310      	movs	r3, #16
 8008244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008248:	e09d      	b.n	8008386 <UART_SetConfig+0x2fe>
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a4a      	ldr	r2, [pc, #296]	; (8008378 <UART_SetConfig+0x2f0>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d125      	bne.n	80082a0 <UART_SetConfig+0x218>
 8008254:	4b45      	ldr	r3, [pc, #276]	; (800836c <UART_SetConfig+0x2e4>)
 8008256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800825a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800825e:	2bc0      	cmp	r3, #192	; 0xc0
 8008260:	d016      	beq.n	8008290 <UART_SetConfig+0x208>
 8008262:	2bc0      	cmp	r3, #192	; 0xc0
 8008264:	d818      	bhi.n	8008298 <UART_SetConfig+0x210>
 8008266:	2b80      	cmp	r3, #128	; 0x80
 8008268:	d00a      	beq.n	8008280 <UART_SetConfig+0x1f8>
 800826a:	2b80      	cmp	r3, #128	; 0x80
 800826c:	d814      	bhi.n	8008298 <UART_SetConfig+0x210>
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <UART_SetConfig+0x1f0>
 8008272:	2b40      	cmp	r3, #64	; 0x40
 8008274:	d008      	beq.n	8008288 <UART_SetConfig+0x200>
 8008276:	e00f      	b.n	8008298 <UART_SetConfig+0x210>
 8008278:	2300      	movs	r3, #0
 800827a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800827e:	e082      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008280:	2302      	movs	r3, #2
 8008282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008286:	e07e      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008288:	2304      	movs	r3, #4
 800828a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800828e:	e07a      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008290:	2308      	movs	r3, #8
 8008292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008296:	e076      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008298:	2310      	movs	r3, #16
 800829a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800829e:	e072      	b.n	8008386 <UART_SetConfig+0x2fe>
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a35      	ldr	r2, [pc, #212]	; (800837c <UART_SetConfig+0x2f4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d12a      	bne.n	8008300 <UART_SetConfig+0x278>
 80082aa:	4b30      	ldr	r3, [pc, #192]	; (800836c <UART_SetConfig+0x2e4>)
 80082ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082b8:	d01a      	beq.n	80082f0 <UART_SetConfig+0x268>
 80082ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082be:	d81b      	bhi.n	80082f8 <UART_SetConfig+0x270>
 80082c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082c4:	d00c      	beq.n	80082e0 <UART_SetConfig+0x258>
 80082c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082ca:	d815      	bhi.n	80082f8 <UART_SetConfig+0x270>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <UART_SetConfig+0x250>
 80082d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d4:	d008      	beq.n	80082e8 <UART_SetConfig+0x260>
 80082d6:	e00f      	b.n	80082f8 <UART_SetConfig+0x270>
 80082d8:	2300      	movs	r3, #0
 80082da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082de:	e052      	b.n	8008386 <UART_SetConfig+0x2fe>
 80082e0:	2302      	movs	r3, #2
 80082e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e6:	e04e      	b.n	8008386 <UART_SetConfig+0x2fe>
 80082e8:	2304      	movs	r3, #4
 80082ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ee:	e04a      	b.n	8008386 <UART_SetConfig+0x2fe>
 80082f0:	2308      	movs	r3, #8
 80082f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f6:	e046      	b.n	8008386 <UART_SetConfig+0x2fe>
 80082f8:	2310      	movs	r3, #16
 80082fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fe:	e042      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a17      	ldr	r2, [pc, #92]	; (8008364 <UART_SetConfig+0x2dc>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d13a      	bne.n	8008380 <UART_SetConfig+0x2f8>
 800830a:	4b18      	ldr	r3, [pc, #96]	; (800836c <UART_SetConfig+0x2e4>)
 800830c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008310:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008318:	d01a      	beq.n	8008350 <UART_SetConfig+0x2c8>
 800831a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800831e:	d81b      	bhi.n	8008358 <UART_SetConfig+0x2d0>
 8008320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008324:	d00c      	beq.n	8008340 <UART_SetConfig+0x2b8>
 8008326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832a:	d815      	bhi.n	8008358 <UART_SetConfig+0x2d0>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <UART_SetConfig+0x2b0>
 8008330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008334:	d008      	beq.n	8008348 <UART_SetConfig+0x2c0>
 8008336:	e00f      	b.n	8008358 <UART_SetConfig+0x2d0>
 8008338:	2300      	movs	r3, #0
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800833e:	e022      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008340:	2302      	movs	r3, #2
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008346:	e01e      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008348:	2304      	movs	r3, #4
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800834e:	e01a      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008350:	2308      	movs	r3, #8
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008356:	e016      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008358:	2310      	movs	r3, #16
 800835a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800835e:	e012      	b.n	8008386 <UART_SetConfig+0x2fe>
 8008360:	cfff69f3 	.word	0xcfff69f3
 8008364:	40008000 	.word	0x40008000
 8008368:	40013800 	.word	0x40013800
 800836c:	40021000 	.word	0x40021000
 8008370:	40004400 	.word	0x40004400
 8008374:	40004800 	.word	0x40004800
 8008378:	40004c00 	.word	0x40004c00
 800837c:	40005000 	.word	0x40005000
 8008380:	2310      	movs	r3, #16
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4aae      	ldr	r2, [pc, #696]	; (8008644 <UART_SetConfig+0x5bc>)
 800838c:	4293      	cmp	r3, r2
 800838e:	f040 8097 	bne.w	80084c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008392:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008396:	2b08      	cmp	r3, #8
 8008398:	d823      	bhi.n	80083e2 <UART_SetConfig+0x35a>
 800839a:	a201      	add	r2, pc, #4	; (adr r2, 80083a0 <UART_SetConfig+0x318>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083e3 	.word	0x080083e3
 80083a8:	080083cd 	.word	0x080083cd
 80083ac:	080083e3 	.word	0x080083e3
 80083b0:	080083d3 	.word	0x080083d3
 80083b4:	080083e3 	.word	0x080083e3
 80083b8:	080083e3 	.word	0x080083e3
 80083bc:	080083e3 	.word	0x080083e3
 80083c0:	080083db 	.word	0x080083db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c4:	f7fd fa6c 	bl	80058a0 <HAL_RCC_GetPCLK1Freq>
 80083c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083ca:	e010      	b.n	80083ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083cc:	4b9e      	ldr	r3, [pc, #632]	; (8008648 <UART_SetConfig+0x5c0>)
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083d0:	e00d      	b.n	80083ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083d2:	f7fd f9f7 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 80083d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083d8:	e009      	b.n	80083ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083e0:	e005      	b.n	80083ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 8130 	beq.w	8008656 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	4a94      	ldr	r2, [pc, #592]	; (800864c <UART_SetConfig+0x5c4>)
 80083fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008400:	461a      	mov	r2, r3
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	fbb3 f3f2 	udiv	r3, r3, r2
 8008408:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	4613      	mov	r3, r2
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	4413      	add	r3, r2
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	429a      	cmp	r2, r3
 8008418:	d305      	bcc.n	8008426 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	429a      	cmp	r2, r3
 8008424:	d903      	bls.n	800842e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800842c:	e113      	b.n	8008656 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	2200      	movs	r2, #0
 8008432:	60bb      	str	r3, [r7, #8]
 8008434:	60fa      	str	r2, [r7, #12]
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843a:	4a84      	ldr	r2, [pc, #528]	; (800864c <UART_SetConfig+0x5c4>)
 800843c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008440:	b29b      	uxth	r3, r3
 8008442:	2200      	movs	r2, #0
 8008444:	603b      	str	r3, [r7, #0]
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800844c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008450:	f7f8 fbf2 	bl	8000c38 <__aeabi_uldivmod>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4610      	mov	r0, r2
 800845a:	4619      	mov	r1, r3
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	020b      	lsls	r3, r1, #8
 8008466:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800846a:	0202      	lsls	r2, r0, #8
 800846c:	6979      	ldr	r1, [r7, #20]
 800846e:	6849      	ldr	r1, [r1, #4]
 8008470:	0849      	lsrs	r1, r1, #1
 8008472:	2000      	movs	r0, #0
 8008474:	460c      	mov	r4, r1
 8008476:	4605      	mov	r5, r0
 8008478:	eb12 0804 	adds.w	r8, r2, r4
 800847c:	eb43 0905 	adc.w	r9, r3, r5
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	469a      	mov	sl, r3
 8008488:	4693      	mov	fp, r2
 800848a:	4652      	mov	r2, sl
 800848c:	465b      	mov	r3, fp
 800848e:	4640      	mov	r0, r8
 8008490:	4649      	mov	r1, r9
 8008492:	f7f8 fbd1 	bl	8000c38 <__aeabi_uldivmod>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4613      	mov	r3, r2
 800849c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084a4:	d308      	bcc.n	80084b8 <UART_SetConfig+0x430>
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ac:	d204      	bcs.n	80084b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6a3a      	ldr	r2, [r7, #32]
 80084b4:	60da      	str	r2, [r3, #12]
 80084b6:	e0ce      	b.n	8008656 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084be:	e0ca      	b.n	8008656 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084c8:	d166      	bne.n	8008598 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80084ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	d827      	bhi.n	8008522 <UART_SetConfig+0x49a>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <UART_SetConfig+0x450>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	08008505 	.word	0x08008505
 80084e0:	0800850d 	.word	0x0800850d
 80084e4:	08008523 	.word	0x08008523
 80084e8:	08008513 	.word	0x08008513
 80084ec:	08008523 	.word	0x08008523
 80084f0:	08008523 	.word	0x08008523
 80084f4:	08008523 	.word	0x08008523
 80084f8:	0800851b 	.word	0x0800851b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084fc:	f7fd f9d0 	bl	80058a0 <HAL_RCC_GetPCLK1Freq>
 8008500:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008502:	e014      	b.n	800852e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008504:	f7fd f9e2 	bl	80058cc <HAL_RCC_GetPCLK2Freq>
 8008508:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800850a:	e010      	b.n	800852e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800850c:	4b4e      	ldr	r3, [pc, #312]	; (8008648 <UART_SetConfig+0x5c0>)
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008510:	e00d      	b.n	800852e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008512:	f7fd f957 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8008516:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008518:	e009      	b.n	800852e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800851a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800851e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008520:	e005      	b.n	800852e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800852c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 8090 	beq.w	8008656 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	4a44      	ldr	r2, [pc, #272]	; (800864c <UART_SetConfig+0x5c4>)
 800853c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008540:	461a      	mov	r2, r3
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	fbb3 f3f2 	udiv	r3, r3, r2
 8008548:	005a      	lsls	r2, r3, #1
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	085b      	lsrs	r3, r3, #1
 8008550:	441a      	add	r2, r3
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	fbb2 f3f3 	udiv	r3, r2, r3
 800855a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	2b0f      	cmp	r3, #15
 8008560:	d916      	bls.n	8008590 <UART_SetConfig+0x508>
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008568:	d212      	bcs.n	8008590 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	b29b      	uxth	r3, r3
 800856e:	f023 030f 	bic.w	r3, r3, #15
 8008572:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	085b      	lsrs	r3, r3, #1
 8008578:	b29b      	uxth	r3, r3
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	b29a      	uxth	r2, r3
 8008580:	8bfb      	ldrh	r3, [r7, #30]
 8008582:	4313      	orrs	r3, r2
 8008584:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	8bfa      	ldrh	r2, [r7, #30]
 800858c:	60da      	str	r2, [r3, #12]
 800858e:	e062      	b.n	8008656 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008596:	e05e      	b.n	8008656 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008598:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800859c:	2b08      	cmp	r3, #8
 800859e:	d828      	bhi.n	80085f2 <UART_SetConfig+0x56a>
 80085a0:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <UART_SetConfig+0x520>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	080085cd 	.word	0x080085cd
 80085ac:	080085d5 	.word	0x080085d5
 80085b0:	080085dd 	.word	0x080085dd
 80085b4:	080085f3 	.word	0x080085f3
 80085b8:	080085e3 	.word	0x080085e3
 80085bc:	080085f3 	.word	0x080085f3
 80085c0:	080085f3 	.word	0x080085f3
 80085c4:	080085f3 	.word	0x080085f3
 80085c8:	080085eb 	.word	0x080085eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085cc:	f7fd f968 	bl	80058a0 <HAL_RCC_GetPCLK1Freq>
 80085d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085d2:	e014      	b.n	80085fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085d4:	f7fd f97a 	bl	80058cc <HAL_RCC_GetPCLK2Freq>
 80085d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085da:	e010      	b.n	80085fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085dc:	4b1a      	ldr	r3, [pc, #104]	; (8008648 <UART_SetConfig+0x5c0>)
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085e0:	e00d      	b.n	80085fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085e2:	f7fd f8ef 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 80085e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085e8:	e009      	b.n	80085fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085f0:	e005      	b.n	80085fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085fc:	bf00      	nop
    }

    if (pclk != 0U)
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	2b00      	cmp	r3, #0
 8008602:	d028      	beq.n	8008656 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	4a10      	ldr	r2, [pc, #64]	; (800864c <UART_SetConfig+0x5c4>)
 800860a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800860e:	461a      	mov	r2, r3
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	fbb3 f2f2 	udiv	r2, r3, r2
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	085b      	lsrs	r3, r3, #1
 800861c:	441a      	add	r2, r3
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	fbb2 f3f3 	udiv	r3, r2, r3
 8008626:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	2b0f      	cmp	r3, #15
 800862c:	d910      	bls.n	8008650 <UART_SetConfig+0x5c8>
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008634:	d20c      	bcs.n	8008650 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	b29a      	uxth	r2, r3
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	60da      	str	r2, [r3, #12]
 8008640:	e009      	b.n	8008656 <UART_SetConfig+0x5ce>
 8008642:	bf00      	nop
 8008644:	40008000 	.word	0x40008000
 8008648:	00f42400 	.word	0x00f42400
 800864c:	0800ba10 	.word	0x0800ba10
      }
      else
      {
        ret = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2201      	movs	r2, #1
 800865a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2201      	movs	r2, #1
 8008662:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2200      	movs	r2, #0
 800866a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2200      	movs	r2, #0
 8008670:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008672:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008676:	4618      	mov	r0, r3
 8008678:	3730      	adds	r7, #48	; 0x30
 800867a:	46bd      	mov	sp, r7
 800867c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	f003 0310 	and.w	r3, r3, #16
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875c:	2b00      	cmp	r3, #0
 800875e:	d01a      	beq.n	8008796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800877e:	d10a      	bne.n	8008796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	605a      	str	r2, [r3, #4]
  }
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af02      	add	r7, sp, #8
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087d4:	f7fb ffd8 	bl	8004788 <HAL_GetTick>
 80087d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0308 	and.w	r3, r3, #8
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	d10e      	bne.n	8008806 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f82f 	bl	800885a <UART_WaitOnFlagUntilTimeout>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e025      	b.n	8008852 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b04      	cmp	r3, #4
 8008812:	d10e      	bne.n	8008832 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f819 	bl	800885a <UART_WaitOnFlagUntilTimeout>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e00f      	b.n	8008852 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2220      	movs	r2, #32
 8008836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b09c      	sub	sp, #112	; 0x70
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	603b      	str	r3, [r7, #0]
 8008866:	4613      	mov	r3, r2
 8008868:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800886a:	e0a9      	b.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800886e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008872:	f000 80a5 	beq.w	80089c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008876:	f7fb ff87 	bl	8004788 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008882:	429a      	cmp	r2, r3
 8008884:	d302      	bcc.n	800888c <UART_WaitOnFlagUntilTimeout+0x32>
 8008886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008888:	2b00      	cmp	r3, #0
 800888a:	d140      	bne.n	800890e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800889a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800889c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088a0:	667b      	str	r3, [r7, #100]	; 0x64
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e6      	bne.n	800888c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3308      	adds	r3, #8
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c8:	e853 3f00 	ldrex	r3, [r3]
 80088cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	f023 0301 	bic.w	r3, r3, #1
 80088d4:	663b      	str	r3, [r7, #96]	; 0x60
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3308      	adds	r3, #8
 80088dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088de:	64ba      	str	r2, [r7, #72]	; 0x48
 80088e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088e6:	e841 2300 	strex	r3, r2, [r1]
 80088ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1e5      	bne.n	80088be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2220      	movs	r2, #32
 80088f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2220      	movs	r2, #32
 80088fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e069      	b.n	80089e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d051      	beq.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800892a:	d149      	bne.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008934:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800894a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	461a      	mov	r2, r3
 8008952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008954:	637b      	str	r3, [r7, #52]	; 0x34
 8008956:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800895a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e6      	bne.n	8008936 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3308      	adds	r3, #8
 800896e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	613b      	str	r3, [r7, #16]
   return(result);
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f023 0301 	bic.w	r3, r3, #1
 800897e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3308      	adds	r3, #8
 8008986:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008988:	623a      	str	r2, [r7, #32]
 800898a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	69f9      	ldr	r1, [r7, #28]
 800898e:	6a3a      	ldr	r2, [r7, #32]
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	61bb      	str	r3, [r7, #24]
   return(result);
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e5      	bne.n	8008968 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2220      	movs	r2, #32
 80089a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e010      	b.n	80089e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	69da      	ldr	r2, [r3, #28]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	4013      	ands	r3, r2
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	bf0c      	ite	eq
 80089d0:	2301      	moveq	r3, #1
 80089d2:	2300      	movne	r3, #0
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	461a      	mov	r2, r3
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	429a      	cmp	r2, r3
 80089dc:	f43f af46 	beq.w	800886c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3770      	adds	r7, #112	; 0x70
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b085      	sub	sp, #20
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d101      	bne.n	8008a00 <HAL_UARTEx_DisableFifoMode+0x16>
 80089fc:	2302      	movs	r3, #2
 80089fe:	e027      	b.n	8008a50 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2224      	movs	r2, #36	; 0x24
 8008a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0201 	bic.w	r2, r2, #1
 8008a26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e02d      	b.n	8008ad0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2224      	movs	r2, #36	; 0x24
 8008a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 0201 	bic.w	r2, r2, #1
 8008a9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f84f 	bl	8008b54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d101      	bne.n	8008af0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008aec:	2302      	movs	r3, #2
 8008aee:	e02d      	b.n	8008b4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2224      	movs	r2, #36	; 0x24
 8008afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0201 	bic.w	r2, r2, #1
 8008b16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f811 	bl	8008b54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2220      	movs	r2, #32
 8008b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d108      	bne.n	8008b76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b74:	e031      	b.n	8008bda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b76:	2308      	movs	r3, #8
 8008b78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b7a:	2308      	movs	r3, #8
 8008b7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	0e5b      	lsrs	r3, r3, #25
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	0f5b      	lsrs	r3, r3, #29
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ba0:	7b3a      	ldrb	r2, [r7, #12]
 8008ba2:	4911      	ldr	r1, [pc, #68]	; (8008be8 <UARTEx_SetNbDataToProcess+0x94>)
 8008ba4:	5c8a      	ldrb	r2, [r1, r2]
 8008ba6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008baa:	7b3a      	ldrb	r2, [r7, #12]
 8008bac:	490f      	ldr	r1, [pc, #60]	; (8008bec <UARTEx_SetNbDataToProcess+0x98>)
 8008bae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	7b7a      	ldrb	r2, [r7, #13]
 8008bc0:	4909      	ldr	r1, [pc, #36]	; (8008be8 <UARTEx_SetNbDataToProcess+0x94>)
 8008bc2:	5c8a      	ldrb	r2, [r1, r2]
 8008bc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bc8:	7b7a      	ldrb	r2, [r7, #13]
 8008bca:	4908      	ldr	r1, [pc, #32]	; (8008bec <UARTEx_SetNbDataToProcess+0x98>)
 8008bcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bce:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bda:	bf00      	nop
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	0800ba28 	.word	0x0800ba28
 8008bec:	0800ba30 	.word	0x0800ba30

08008bf0 <__errno>:
 8008bf0:	4b01      	ldr	r3, [pc, #4]	; (8008bf8 <__errno+0x8>)
 8008bf2:	6818      	ldr	r0, [r3, #0]
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	20000018 	.word	0x20000018

08008bfc <__libc_init_array>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	4d0d      	ldr	r5, [pc, #52]	; (8008c34 <__libc_init_array+0x38>)
 8008c00:	4c0d      	ldr	r4, [pc, #52]	; (8008c38 <__libc_init_array+0x3c>)
 8008c02:	1b64      	subs	r4, r4, r5
 8008c04:	10a4      	asrs	r4, r4, #2
 8008c06:	2600      	movs	r6, #0
 8008c08:	42a6      	cmp	r6, r4
 8008c0a:	d109      	bne.n	8008c20 <__libc_init_array+0x24>
 8008c0c:	4d0b      	ldr	r5, [pc, #44]	; (8008c3c <__libc_init_array+0x40>)
 8008c0e:	4c0c      	ldr	r4, [pc, #48]	; (8008c40 <__libc_init_array+0x44>)
 8008c10:	f002 fdc4 	bl	800b79c <_init>
 8008c14:	1b64      	subs	r4, r4, r5
 8008c16:	10a4      	asrs	r4, r4, #2
 8008c18:	2600      	movs	r6, #0
 8008c1a:	42a6      	cmp	r6, r4
 8008c1c:	d105      	bne.n	8008c2a <__libc_init_array+0x2e>
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c24:	4798      	blx	r3
 8008c26:	3601      	adds	r6, #1
 8008c28:	e7ee      	b.n	8008c08 <__libc_init_array+0xc>
 8008c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c2e:	4798      	blx	r3
 8008c30:	3601      	adds	r6, #1
 8008c32:	e7f2      	b.n	8008c1a <__libc_init_array+0x1e>
 8008c34:	0800be1c 	.word	0x0800be1c
 8008c38:	0800be1c 	.word	0x0800be1c
 8008c3c:	0800be1c 	.word	0x0800be1c
 8008c40:	0800be20 	.word	0x0800be20

08008c44 <memset>:
 8008c44:	4402      	add	r2, r0
 8008c46:	4603      	mov	r3, r0
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d100      	bne.n	8008c4e <memset+0xa>
 8008c4c:	4770      	bx	lr
 8008c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c52:	e7f9      	b.n	8008c48 <memset+0x4>

08008c54 <__cvt>:
 8008c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	ec55 4b10 	vmov	r4, r5, d0
 8008c5c:	2d00      	cmp	r5, #0
 8008c5e:	460e      	mov	r6, r1
 8008c60:	4619      	mov	r1, r3
 8008c62:	462b      	mov	r3, r5
 8008c64:	bfbb      	ittet	lt
 8008c66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008c6a:	461d      	movlt	r5, r3
 8008c6c:	2300      	movge	r3, #0
 8008c6e:	232d      	movlt	r3, #45	; 0x2d
 8008c70:	700b      	strb	r3, [r1, #0]
 8008c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008c78:	4691      	mov	r9, r2
 8008c7a:	f023 0820 	bic.w	r8, r3, #32
 8008c7e:	bfbc      	itt	lt
 8008c80:	4622      	movlt	r2, r4
 8008c82:	4614      	movlt	r4, r2
 8008c84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c88:	d005      	beq.n	8008c96 <__cvt+0x42>
 8008c8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c8e:	d100      	bne.n	8008c92 <__cvt+0x3e>
 8008c90:	3601      	adds	r6, #1
 8008c92:	2102      	movs	r1, #2
 8008c94:	e000      	b.n	8008c98 <__cvt+0x44>
 8008c96:	2103      	movs	r1, #3
 8008c98:	ab03      	add	r3, sp, #12
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	ab02      	add	r3, sp, #8
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	ec45 4b10 	vmov	d0, r4, r5
 8008ca4:	4653      	mov	r3, sl
 8008ca6:	4632      	mov	r2, r6
 8008ca8:	f000 fe1a 	bl	80098e0 <_dtoa_r>
 8008cac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008cb0:	4607      	mov	r7, r0
 8008cb2:	d102      	bne.n	8008cba <__cvt+0x66>
 8008cb4:	f019 0f01 	tst.w	r9, #1
 8008cb8:	d022      	beq.n	8008d00 <__cvt+0xac>
 8008cba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cbe:	eb07 0906 	add.w	r9, r7, r6
 8008cc2:	d110      	bne.n	8008ce6 <__cvt+0x92>
 8008cc4:	783b      	ldrb	r3, [r7, #0]
 8008cc6:	2b30      	cmp	r3, #48	; 0x30
 8008cc8:	d10a      	bne.n	8008ce0 <__cvt+0x8c>
 8008cca:	2200      	movs	r2, #0
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4620      	mov	r0, r4
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	f7f7 ff21 	bl	8000b18 <__aeabi_dcmpeq>
 8008cd6:	b918      	cbnz	r0, 8008ce0 <__cvt+0x8c>
 8008cd8:	f1c6 0601 	rsb	r6, r6, #1
 8008cdc:	f8ca 6000 	str.w	r6, [sl]
 8008ce0:	f8da 3000 	ldr.w	r3, [sl]
 8008ce4:	4499      	add	r9, r3
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4620      	mov	r0, r4
 8008cec:	4629      	mov	r1, r5
 8008cee:	f7f7 ff13 	bl	8000b18 <__aeabi_dcmpeq>
 8008cf2:	b108      	cbz	r0, 8008cf8 <__cvt+0xa4>
 8008cf4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008cf8:	2230      	movs	r2, #48	; 0x30
 8008cfa:	9b03      	ldr	r3, [sp, #12]
 8008cfc:	454b      	cmp	r3, r9
 8008cfe:	d307      	bcc.n	8008d10 <__cvt+0xbc>
 8008d00:	9b03      	ldr	r3, [sp, #12]
 8008d02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d04:	1bdb      	subs	r3, r3, r7
 8008d06:	4638      	mov	r0, r7
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	b004      	add	sp, #16
 8008d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d10:	1c59      	adds	r1, r3, #1
 8008d12:	9103      	str	r1, [sp, #12]
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	e7f0      	b.n	8008cfa <__cvt+0xa6>

08008d18 <__exponent>:
 8008d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2900      	cmp	r1, #0
 8008d1e:	bfb8      	it	lt
 8008d20:	4249      	neglt	r1, r1
 8008d22:	f803 2b02 	strb.w	r2, [r3], #2
 8008d26:	bfb4      	ite	lt
 8008d28:	222d      	movlt	r2, #45	; 0x2d
 8008d2a:	222b      	movge	r2, #43	; 0x2b
 8008d2c:	2909      	cmp	r1, #9
 8008d2e:	7042      	strb	r2, [r0, #1]
 8008d30:	dd2a      	ble.n	8008d88 <__exponent+0x70>
 8008d32:	f10d 0407 	add.w	r4, sp, #7
 8008d36:	46a4      	mov	ip, r4
 8008d38:	270a      	movs	r7, #10
 8008d3a:	46a6      	mov	lr, r4
 8008d3c:	460a      	mov	r2, r1
 8008d3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d42:	fb07 1516 	mls	r5, r7, r6, r1
 8008d46:	3530      	adds	r5, #48	; 0x30
 8008d48:	2a63      	cmp	r2, #99	; 0x63
 8008d4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008d4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d52:	4631      	mov	r1, r6
 8008d54:	dcf1      	bgt.n	8008d3a <__exponent+0x22>
 8008d56:	3130      	adds	r1, #48	; 0x30
 8008d58:	f1ae 0502 	sub.w	r5, lr, #2
 8008d5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008d60:	1c44      	adds	r4, r0, #1
 8008d62:	4629      	mov	r1, r5
 8008d64:	4561      	cmp	r1, ip
 8008d66:	d30a      	bcc.n	8008d7e <__exponent+0x66>
 8008d68:	f10d 0209 	add.w	r2, sp, #9
 8008d6c:	eba2 020e 	sub.w	r2, r2, lr
 8008d70:	4565      	cmp	r5, ip
 8008d72:	bf88      	it	hi
 8008d74:	2200      	movhi	r2, #0
 8008d76:	4413      	add	r3, r2
 8008d78:	1a18      	subs	r0, r3, r0
 8008d7a:	b003      	add	sp, #12
 8008d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d86:	e7ed      	b.n	8008d64 <__exponent+0x4c>
 8008d88:	2330      	movs	r3, #48	; 0x30
 8008d8a:	3130      	adds	r1, #48	; 0x30
 8008d8c:	7083      	strb	r3, [r0, #2]
 8008d8e:	70c1      	strb	r1, [r0, #3]
 8008d90:	1d03      	adds	r3, r0, #4
 8008d92:	e7f1      	b.n	8008d78 <__exponent+0x60>

08008d94 <_printf_float>:
 8008d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	ed2d 8b02 	vpush	{d8}
 8008d9c:	b08d      	sub	sp, #52	; 0x34
 8008d9e:	460c      	mov	r4, r1
 8008da0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008da4:	4616      	mov	r6, r2
 8008da6:	461f      	mov	r7, r3
 8008da8:	4605      	mov	r5, r0
 8008daa:	f001 fd3f 	bl	800a82c <_localeconv_r>
 8008dae:	f8d0 a000 	ldr.w	sl, [r0]
 8008db2:	4650      	mov	r0, sl
 8008db4:	f7f7 fa34 	bl	8000220 <strlen>
 8008db8:	2300      	movs	r3, #0
 8008dba:	930a      	str	r3, [sp, #40]	; 0x28
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	9305      	str	r3, [sp, #20]
 8008dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8008dc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008dc8:	3307      	adds	r3, #7
 8008dca:	f023 0307 	bic.w	r3, r3, #7
 8008dce:	f103 0208 	add.w	r2, r3, #8
 8008dd2:	f8c8 2000 	str.w	r2, [r8]
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008dde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008de2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008de6:	9307      	str	r3, [sp, #28]
 8008de8:	f8cd 8018 	str.w	r8, [sp, #24]
 8008dec:	ee08 0a10 	vmov	s16, r0
 8008df0:	4b9f      	ldr	r3, [pc, #636]	; (8009070 <_printf_float+0x2dc>)
 8008df2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008df6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfa:	f7f7 febf 	bl	8000b7c <__aeabi_dcmpun>
 8008dfe:	bb88      	cbnz	r0, 8008e64 <_printf_float+0xd0>
 8008e00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e04:	4b9a      	ldr	r3, [pc, #616]	; (8009070 <_printf_float+0x2dc>)
 8008e06:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0a:	f7f7 fe99 	bl	8000b40 <__aeabi_dcmple>
 8008e0e:	bb48      	cbnz	r0, 8008e64 <_printf_float+0xd0>
 8008e10:	2200      	movs	r2, #0
 8008e12:	2300      	movs	r3, #0
 8008e14:	4640      	mov	r0, r8
 8008e16:	4649      	mov	r1, r9
 8008e18:	f7f7 fe88 	bl	8000b2c <__aeabi_dcmplt>
 8008e1c:	b110      	cbz	r0, 8008e24 <_printf_float+0x90>
 8008e1e:	232d      	movs	r3, #45	; 0x2d
 8008e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e24:	4b93      	ldr	r3, [pc, #588]	; (8009074 <_printf_float+0x2e0>)
 8008e26:	4894      	ldr	r0, [pc, #592]	; (8009078 <_printf_float+0x2e4>)
 8008e28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e2c:	bf94      	ite	ls
 8008e2e:	4698      	movls	r8, r3
 8008e30:	4680      	movhi	r8, r0
 8008e32:	2303      	movs	r3, #3
 8008e34:	6123      	str	r3, [r4, #16]
 8008e36:	9b05      	ldr	r3, [sp, #20]
 8008e38:	f023 0204 	bic.w	r2, r3, #4
 8008e3c:	6022      	str	r2, [r4, #0]
 8008e3e:	f04f 0900 	mov.w	r9, #0
 8008e42:	9700      	str	r7, [sp, #0]
 8008e44:	4633      	mov	r3, r6
 8008e46:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f000 f9d8 	bl	8009200 <_printf_common>
 8008e50:	3001      	adds	r0, #1
 8008e52:	f040 8090 	bne.w	8008f76 <_printf_float+0x1e2>
 8008e56:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5a:	b00d      	add	sp, #52	; 0x34
 8008e5c:	ecbd 8b02 	vpop	{d8}
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e64:	4642      	mov	r2, r8
 8008e66:	464b      	mov	r3, r9
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	f7f7 fe86 	bl	8000b7c <__aeabi_dcmpun>
 8008e70:	b140      	cbz	r0, 8008e84 <_printf_float+0xf0>
 8008e72:	464b      	mov	r3, r9
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	bfbc      	itt	lt
 8008e78:	232d      	movlt	r3, #45	; 0x2d
 8008e7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e7e:	487f      	ldr	r0, [pc, #508]	; (800907c <_printf_float+0x2e8>)
 8008e80:	4b7f      	ldr	r3, [pc, #508]	; (8009080 <_printf_float+0x2ec>)
 8008e82:	e7d1      	b.n	8008e28 <_printf_float+0x94>
 8008e84:	6863      	ldr	r3, [r4, #4]
 8008e86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008e8a:	9206      	str	r2, [sp, #24]
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	d13f      	bne.n	8008f10 <_printf_float+0x17c>
 8008e90:	2306      	movs	r3, #6
 8008e92:	6063      	str	r3, [r4, #4]
 8008e94:	9b05      	ldr	r3, [sp, #20]
 8008e96:	6861      	ldr	r1, [r4, #4]
 8008e98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9303      	str	r3, [sp, #12]
 8008ea0:	ab0a      	add	r3, sp, #40	; 0x28
 8008ea2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008ea6:	ab09      	add	r3, sp, #36	; 0x24
 8008ea8:	ec49 8b10 	vmov	d0, r8, r9
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	6022      	str	r2, [r4, #0]
 8008eb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	f7ff fecd 	bl	8008c54 <__cvt>
 8008eba:	9b06      	ldr	r3, [sp, #24]
 8008ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ebe:	2b47      	cmp	r3, #71	; 0x47
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	d108      	bne.n	8008ed6 <_printf_float+0x142>
 8008ec4:	1cc8      	adds	r0, r1, #3
 8008ec6:	db02      	blt.n	8008ece <_printf_float+0x13a>
 8008ec8:	6863      	ldr	r3, [r4, #4]
 8008eca:	4299      	cmp	r1, r3
 8008ecc:	dd41      	ble.n	8008f52 <_printf_float+0x1be>
 8008ece:	f1ab 0b02 	sub.w	fp, fp, #2
 8008ed2:	fa5f fb8b 	uxtb.w	fp, fp
 8008ed6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008eda:	d820      	bhi.n	8008f1e <_printf_float+0x18a>
 8008edc:	3901      	subs	r1, #1
 8008ede:	465a      	mov	r2, fp
 8008ee0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ee4:	9109      	str	r1, [sp, #36]	; 0x24
 8008ee6:	f7ff ff17 	bl	8008d18 <__exponent>
 8008eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eec:	1813      	adds	r3, r2, r0
 8008eee:	2a01      	cmp	r2, #1
 8008ef0:	4681      	mov	r9, r0
 8008ef2:	6123      	str	r3, [r4, #16]
 8008ef4:	dc02      	bgt.n	8008efc <_printf_float+0x168>
 8008ef6:	6822      	ldr	r2, [r4, #0]
 8008ef8:	07d2      	lsls	r2, r2, #31
 8008efa:	d501      	bpl.n	8008f00 <_printf_float+0x16c>
 8008efc:	3301      	adds	r3, #1
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d09c      	beq.n	8008e42 <_printf_float+0xae>
 8008f08:	232d      	movs	r3, #45	; 0x2d
 8008f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f0e:	e798      	b.n	8008e42 <_printf_float+0xae>
 8008f10:	9a06      	ldr	r2, [sp, #24]
 8008f12:	2a47      	cmp	r2, #71	; 0x47
 8008f14:	d1be      	bne.n	8008e94 <_printf_float+0x100>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1bc      	bne.n	8008e94 <_printf_float+0x100>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e7b9      	b.n	8008e92 <_printf_float+0xfe>
 8008f1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f22:	d118      	bne.n	8008f56 <_printf_float+0x1c2>
 8008f24:	2900      	cmp	r1, #0
 8008f26:	6863      	ldr	r3, [r4, #4]
 8008f28:	dd0b      	ble.n	8008f42 <_printf_float+0x1ae>
 8008f2a:	6121      	str	r1, [r4, #16]
 8008f2c:	b913      	cbnz	r3, 8008f34 <_printf_float+0x1a0>
 8008f2e:	6822      	ldr	r2, [r4, #0]
 8008f30:	07d0      	lsls	r0, r2, #31
 8008f32:	d502      	bpl.n	8008f3a <_printf_float+0x1a6>
 8008f34:	3301      	adds	r3, #1
 8008f36:	440b      	add	r3, r1
 8008f38:	6123      	str	r3, [r4, #16]
 8008f3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f3c:	f04f 0900 	mov.w	r9, #0
 8008f40:	e7de      	b.n	8008f00 <_printf_float+0x16c>
 8008f42:	b913      	cbnz	r3, 8008f4a <_printf_float+0x1b6>
 8008f44:	6822      	ldr	r2, [r4, #0]
 8008f46:	07d2      	lsls	r2, r2, #31
 8008f48:	d501      	bpl.n	8008f4e <_printf_float+0x1ba>
 8008f4a:	3302      	adds	r3, #2
 8008f4c:	e7f4      	b.n	8008f38 <_printf_float+0x1a4>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e7f2      	b.n	8008f38 <_printf_float+0x1a4>
 8008f52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f58:	4299      	cmp	r1, r3
 8008f5a:	db05      	blt.n	8008f68 <_printf_float+0x1d4>
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	6121      	str	r1, [r4, #16]
 8008f60:	07d8      	lsls	r0, r3, #31
 8008f62:	d5ea      	bpl.n	8008f3a <_printf_float+0x1a6>
 8008f64:	1c4b      	adds	r3, r1, #1
 8008f66:	e7e7      	b.n	8008f38 <_printf_float+0x1a4>
 8008f68:	2900      	cmp	r1, #0
 8008f6a:	bfd4      	ite	le
 8008f6c:	f1c1 0202 	rsble	r2, r1, #2
 8008f70:	2201      	movgt	r2, #1
 8008f72:	4413      	add	r3, r2
 8008f74:	e7e0      	b.n	8008f38 <_printf_float+0x1a4>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	055a      	lsls	r2, r3, #21
 8008f7a:	d407      	bmi.n	8008f8c <_printf_float+0x1f8>
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	4642      	mov	r2, r8
 8008f80:	4631      	mov	r1, r6
 8008f82:	4628      	mov	r0, r5
 8008f84:	47b8      	blx	r7
 8008f86:	3001      	adds	r0, #1
 8008f88:	d12c      	bne.n	8008fe4 <_printf_float+0x250>
 8008f8a:	e764      	b.n	8008e56 <_printf_float+0xc2>
 8008f8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f90:	f240 80e0 	bls.w	8009154 <_printf_float+0x3c0>
 8008f94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f7f7 fdbc 	bl	8000b18 <__aeabi_dcmpeq>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d034      	beq.n	800900e <_printf_float+0x27a>
 8008fa4:	4a37      	ldr	r2, [pc, #220]	; (8009084 <_printf_float+0x2f0>)
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4628      	mov	r0, r5
 8008fac:	47b8      	blx	r7
 8008fae:	3001      	adds	r0, #1
 8008fb0:	f43f af51 	beq.w	8008e56 <_printf_float+0xc2>
 8008fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	db02      	blt.n	8008fc2 <_printf_float+0x22e>
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	07d8      	lsls	r0, r3, #31
 8008fc0:	d510      	bpl.n	8008fe4 <_printf_float+0x250>
 8008fc2:	ee18 3a10 	vmov	r3, s16
 8008fc6:	4652      	mov	r2, sl
 8008fc8:	4631      	mov	r1, r6
 8008fca:	4628      	mov	r0, r5
 8008fcc:	47b8      	blx	r7
 8008fce:	3001      	adds	r0, #1
 8008fd0:	f43f af41 	beq.w	8008e56 <_printf_float+0xc2>
 8008fd4:	f04f 0800 	mov.w	r8, #0
 8008fd8:	f104 091a 	add.w	r9, r4, #26
 8008fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	4543      	cmp	r3, r8
 8008fe2:	dc09      	bgt.n	8008ff8 <_printf_float+0x264>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	079b      	lsls	r3, r3, #30
 8008fe8:	f100 8105 	bmi.w	80091f6 <_printf_float+0x462>
 8008fec:	68e0      	ldr	r0, [r4, #12]
 8008fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ff0:	4298      	cmp	r0, r3
 8008ff2:	bfb8      	it	lt
 8008ff4:	4618      	movlt	r0, r3
 8008ff6:	e730      	b.n	8008e5a <_printf_float+0xc6>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	464a      	mov	r2, r9
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	4628      	mov	r0, r5
 8009000:	47b8      	blx	r7
 8009002:	3001      	adds	r0, #1
 8009004:	f43f af27 	beq.w	8008e56 <_printf_float+0xc2>
 8009008:	f108 0801 	add.w	r8, r8, #1
 800900c:	e7e6      	b.n	8008fdc <_printf_float+0x248>
 800900e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009010:	2b00      	cmp	r3, #0
 8009012:	dc39      	bgt.n	8009088 <_printf_float+0x2f4>
 8009014:	4a1b      	ldr	r2, [pc, #108]	; (8009084 <_printf_float+0x2f0>)
 8009016:	2301      	movs	r3, #1
 8009018:	4631      	mov	r1, r6
 800901a:	4628      	mov	r0, r5
 800901c:	47b8      	blx	r7
 800901e:	3001      	adds	r0, #1
 8009020:	f43f af19 	beq.w	8008e56 <_printf_float+0xc2>
 8009024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009028:	4313      	orrs	r3, r2
 800902a:	d102      	bne.n	8009032 <_printf_float+0x29e>
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	07d9      	lsls	r1, r3, #31
 8009030:	d5d8      	bpl.n	8008fe4 <_printf_float+0x250>
 8009032:	ee18 3a10 	vmov	r3, s16
 8009036:	4652      	mov	r2, sl
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	f43f af09 	beq.w	8008e56 <_printf_float+0xc2>
 8009044:	f04f 0900 	mov.w	r9, #0
 8009048:	f104 0a1a 	add.w	sl, r4, #26
 800904c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904e:	425b      	negs	r3, r3
 8009050:	454b      	cmp	r3, r9
 8009052:	dc01      	bgt.n	8009058 <_printf_float+0x2c4>
 8009054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009056:	e792      	b.n	8008f7e <_printf_float+0x1ea>
 8009058:	2301      	movs	r3, #1
 800905a:	4652      	mov	r2, sl
 800905c:	4631      	mov	r1, r6
 800905e:	4628      	mov	r0, r5
 8009060:	47b8      	blx	r7
 8009062:	3001      	adds	r0, #1
 8009064:	f43f aef7 	beq.w	8008e56 <_printf_float+0xc2>
 8009068:	f109 0901 	add.w	r9, r9, #1
 800906c:	e7ee      	b.n	800904c <_printf_float+0x2b8>
 800906e:	bf00      	nop
 8009070:	7fefffff 	.word	0x7fefffff
 8009074:	0800ba3c 	.word	0x0800ba3c
 8009078:	0800ba40 	.word	0x0800ba40
 800907c:	0800ba48 	.word	0x0800ba48
 8009080:	0800ba44 	.word	0x0800ba44
 8009084:	0800ba4c 	.word	0x0800ba4c
 8009088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800908a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800908c:	429a      	cmp	r2, r3
 800908e:	bfa8      	it	ge
 8009090:	461a      	movge	r2, r3
 8009092:	2a00      	cmp	r2, #0
 8009094:	4691      	mov	r9, r2
 8009096:	dc37      	bgt.n	8009108 <_printf_float+0x374>
 8009098:	f04f 0b00 	mov.w	fp, #0
 800909c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090a0:	f104 021a 	add.w	r2, r4, #26
 80090a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	eba3 0309 	sub.w	r3, r3, r9
 80090ac:	455b      	cmp	r3, fp
 80090ae:	dc33      	bgt.n	8009118 <_printf_float+0x384>
 80090b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090b4:	429a      	cmp	r2, r3
 80090b6:	db3b      	blt.n	8009130 <_printf_float+0x39c>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	07da      	lsls	r2, r3, #31
 80090bc:	d438      	bmi.n	8009130 <_printf_float+0x39c>
 80090be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c0:	9a05      	ldr	r2, [sp, #20]
 80090c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090c4:	1a9a      	subs	r2, r3, r2
 80090c6:	eba3 0901 	sub.w	r9, r3, r1
 80090ca:	4591      	cmp	r9, r2
 80090cc:	bfa8      	it	ge
 80090ce:	4691      	movge	r9, r2
 80090d0:	f1b9 0f00 	cmp.w	r9, #0
 80090d4:	dc35      	bgt.n	8009142 <_printf_float+0x3ae>
 80090d6:	f04f 0800 	mov.w	r8, #0
 80090da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090de:	f104 0a1a 	add.w	sl, r4, #26
 80090e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090e6:	1a9b      	subs	r3, r3, r2
 80090e8:	eba3 0309 	sub.w	r3, r3, r9
 80090ec:	4543      	cmp	r3, r8
 80090ee:	f77f af79 	ble.w	8008fe4 <_printf_float+0x250>
 80090f2:	2301      	movs	r3, #1
 80090f4:	4652      	mov	r2, sl
 80090f6:	4631      	mov	r1, r6
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b8      	blx	r7
 80090fc:	3001      	adds	r0, #1
 80090fe:	f43f aeaa 	beq.w	8008e56 <_printf_float+0xc2>
 8009102:	f108 0801 	add.w	r8, r8, #1
 8009106:	e7ec      	b.n	80090e2 <_printf_float+0x34e>
 8009108:	4613      	mov	r3, r2
 800910a:	4631      	mov	r1, r6
 800910c:	4642      	mov	r2, r8
 800910e:	4628      	mov	r0, r5
 8009110:	47b8      	blx	r7
 8009112:	3001      	adds	r0, #1
 8009114:	d1c0      	bne.n	8009098 <_printf_float+0x304>
 8009116:	e69e      	b.n	8008e56 <_printf_float+0xc2>
 8009118:	2301      	movs	r3, #1
 800911a:	4631      	mov	r1, r6
 800911c:	4628      	mov	r0, r5
 800911e:	9205      	str	r2, [sp, #20]
 8009120:	47b8      	blx	r7
 8009122:	3001      	adds	r0, #1
 8009124:	f43f ae97 	beq.w	8008e56 <_printf_float+0xc2>
 8009128:	9a05      	ldr	r2, [sp, #20]
 800912a:	f10b 0b01 	add.w	fp, fp, #1
 800912e:	e7b9      	b.n	80090a4 <_printf_float+0x310>
 8009130:	ee18 3a10 	vmov	r3, s16
 8009134:	4652      	mov	r2, sl
 8009136:	4631      	mov	r1, r6
 8009138:	4628      	mov	r0, r5
 800913a:	47b8      	blx	r7
 800913c:	3001      	adds	r0, #1
 800913e:	d1be      	bne.n	80090be <_printf_float+0x32a>
 8009140:	e689      	b.n	8008e56 <_printf_float+0xc2>
 8009142:	9a05      	ldr	r2, [sp, #20]
 8009144:	464b      	mov	r3, r9
 8009146:	4442      	add	r2, r8
 8009148:	4631      	mov	r1, r6
 800914a:	4628      	mov	r0, r5
 800914c:	47b8      	blx	r7
 800914e:	3001      	adds	r0, #1
 8009150:	d1c1      	bne.n	80090d6 <_printf_float+0x342>
 8009152:	e680      	b.n	8008e56 <_printf_float+0xc2>
 8009154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009156:	2a01      	cmp	r2, #1
 8009158:	dc01      	bgt.n	800915e <_printf_float+0x3ca>
 800915a:	07db      	lsls	r3, r3, #31
 800915c:	d538      	bpl.n	80091d0 <_printf_float+0x43c>
 800915e:	2301      	movs	r3, #1
 8009160:	4642      	mov	r2, r8
 8009162:	4631      	mov	r1, r6
 8009164:	4628      	mov	r0, r5
 8009166:	47b8      	blx	r7
 8009168:	3001      	adds	r0, #1
 800916a:	f43f ae74 	beq.w	8008e56 <_printf_float+0xc2>
 800916e:	ee18 3a10 	vmov	r3, s16
 8009172:	4652      	mov	r2, sl
 8009174:	4631      	mov	r1, r6
 8009176:	4628      	mov	r0, r5
 8009178:	47b8      	blx	r7
 800917a:	3001      	adds	r0, #1
 800917c:	f43f ae6b 	beq.w	8008e56 <_printf_float+0xc2>
 8009180:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009184:	2200      	movs	r2, #0
 8009186:	2300      	movs	r3, #0
 8009188:	f7f7 fcc6 	bl	8000b18 <__aeabi_dcmpeq>
 800918c:	b9d8      	cbnz	r0, 80091c6 <_printf_float+0x432>
 800918e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009190:	f108 0201 	add.w	r2, r8, #1
 8009194:	3b01      	subs	r3, #1
 8009196:	4631      	mov	r1, r6
 8009198:	4628      	mov	r0, r5
 800919a:	47b8      	blx	r7
 800919c:	3001      	adds	r0, #1
 800919e:	d10e      	bne.n	80091be <_printf_float+0x42a>
 80091a0:	e659      	b.n	8008e56 <_printf_float+0xc2>
 80091a2:	2301      	movs	r3, #1
 80091a4:	4652      	mov	r2, sl
 80091a6:	4631      	mov	r1, r6
 80091a8:	4628      	mov	r0, r5
 80091aa:	47b8      	blx	r7
 80091ac:	3001      	adds	r0, #1
 80091ae:	f43f ae52 	beq.w	8008e56 <_printf_float+0xc2>
 80091b2:	f108 0801 	add.w	r8, r8, #1
 80091b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b8:	3b01      	subs	r3, #1
 80091ba:	4543      	cmp	r3, r8
 80091bc:	dcf1      	bgt.n	80091a2 <_printf_float+0x40e>
 80091be:	464b      	mov	r3, r9
 80091c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091c4:	e6dc      	b.n	8008f80 <_printf_float+0x1ec>
 80091c6:	f04f 0800 	mov.w	r8, #0
 80091ca:	f104 0a1a 	add.w	sl, r4, #26
 80091ce:	e7f2      	b.n	80091b6 <_printf_float+0x422>
 80091d0:	2301      	movs	r3, #1
 80091d2:	4642      	mov	r2, r8
 80091d4:	e7df      	b.n	8009196 <_printf_float+0x402>
 80091d6:	2301      	movs	r3, #1
 80091d8:	464a      	mov	r2, r9
 80091da:	4631      	mov	r1, r6
 80091dc:	4628      	mov	r0, r5
 80091de:	47b8      	blx	r7
 80091e0:	3001      	adds	r0, #1
 80091e2:	f43f ae38 	beq.w	8008e56 <_printf_float+0xc2>
 80091e6:	f108 0801 	add.w	r8, r8, #1
 80091ea:	68e3      	ldr	r3, [r4, #12]
 80091ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091ee:	1a5b      	subs	r3, r3, r1
 80091f0:	4543      	cmp	r3, r8
 80091f2:	dcf0      	bgt.n	80091d6 <_printf_float+0x442>
 80091f4:	e6fa      	b.n	8008fec <_printf_float+0x258>
 80091f6:	f04f 0800 	mov.w	r8, #0
 80091fa:	f104 0919 	add.w	r9, r4, #25
 80091fe:	e7f4      	b.n	80091ea <_printf_float+0x456>

08009200 <_printf_common>:
 8009200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009204:	4616      	mov	r6, r2
 8009206:	4699      	mov	r9, r3
 8009208:	688a      	ldr	r2, [r1, #8]
 800920a:	690b      	ldr	r3, [r1, #16]
 800920c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009210:	4293      	cmp	r3, r2
 8009212:	bfb8      	it	lt
 8009214:	4613      	movlt	r3, r2
 8009216:	6033      	str	r3, [r6, #0]
 8009218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800921c:	4607      	mov	r7, r0
 800921e:	460c      	mov	r4, r1
 8009220:	b10a      	cbz	r2, 8009226 <_printf_common+0x26>
 8009222:	3301      	adds	r3, #1
 8009224:	6033      	str	r3, [r6, #0]
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	0699      	lsls	r1, r3, #26
 800922a:	bf42      	ittt	mi
 800922c:	6833      	ldrmi	r3, [r6, #0]
 800922e:	3302      	addmi	r3, #2
 8009230:	6033      	strmi	r3, [r6, #0]
 8009232:	6825      	ldr	r5, [r4, #0]
 8009234:	f015 0506 	ands.w	r5, r5, #6
 8009238:	d106      	bne.n	8009248 <_printf_common+0x48>
 800923a:	f104 0a19 	add.w	sl, r4, #25
 800923e:	68e3      	ldr	r3, [r4, #12]
 8009240:	6832      	ldr	r2, [r6, #0]
 8009242:	1a9b      	subs	r3, r3, r2
 8009244:	42ab      	cmp	r3, r5
 8009246:	dc26      	bgt.n	8009296 <_printf_common+0x96>
 8009248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800924c:	1e13      	subs	r3, r2, #0
 800924e:	6822      	ldr	r2, [r4, #0]
 8009250:	bf18      	it	ne
 8009252:	2301      	movne	r3, #1
 8009254:	0692      	lsls	r2, r2, #26
 8009256:	d42b      	bmi.n	80092b0 <_printf_common+0xb0>
 8009258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800925c:	4649      	mov	r1, r9
 800925e:	4638      	mov	r0, r7
 8009260:	47c0      	blx	r8
 8009262:	3001      	adds	r0, #1
 8009264:	d01e      	beq.n	80092a4 <_printf_common+0xa4>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	68e5      	ldr	r5, [r4, #12]
 800926a:	6832      	ldr	r2, [r6, #0]
 800926c:	f003 0306 	and.w	r3, r3, #6
 8009270:	2b04      	cmp	r3, #4
 8009272:	bf08      	it	eq
 8009274:	1aad      	subeq	r5, r5, r2
 8009276:	68a3      	ldr	r3, [r4, #8]
 8009278:	6922      	ldr	r2, [r4, #16]
 800927a:	bf0c      	ite	eq
 800927c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009280:	2500      	movne	r5, #0
 8009282:	4293      	cmp	r3, r2
 8009284:	bfc4      	itt	gt
 8009286:	1a9b      	subgt	r3, r3, r2
 8009288:	18ed      	addgt	r5, r5, r3
 800928a:	2600      	movs	r6, #0
 800928c:	341a      	adds	r4, #26
 800928e:	42b5      	cmp	r5, r6
 8009290:	d11a      	bne.n	80092c8 <_printf_common+0xc8>
 8009292:	2000      	movs	r0, #0
 8009294:	e008      	b.n	80092a8 <_printf_common+0xa8>
 8009296:	2301      	movs	r3, #1
 8009298:	4652      	mov	r2, sl
 800929a:	4649      	mov	r1, r9
 800929c:	4638      	mov	r0, r7
 800929e:	47c0      	blx	r8
 80092a0:	3001      	adds	r0, #1
 80092a2:	d103      	bne.n	80092ac <_printf_common+0xac>
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ac:	3501      	adds	r5, #1
 80092ae:	e7c6      	b.n	800923e <_printf_common+0x3e>
 80092b0:	18e1      	adds	r1, r4, r3
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	2030      	movs	r0, #48	; 0x30
 80092b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092ba:	4422      	add	r2, r4
 80092bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092c4:	3302      	adds	r3, #2
 80092c6:	e7c7      	b.n	8009258 <_printf_common+0x58>
 80092c8:	2301      	movs	r3, #1
 80092ca:	4622      	mov	r2, r4
 80092cc:	4649      	mov	r1, r9
 80092ce:	4638      	mov	r0, r7
 80092d0:	47c0      	blx	r8
 80092d2:	3001      	adds	r0, #1
 80092d4:	d0e6      	beq.n	80092a4 <_printf_common+0xa4>
 80092d6:	3601      	adds	r6, #1
 80092d8:	e7d9      	b.n	800928e <_printf_common+0x8e>
	...

080092dc <_printf_i>:
 80092dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092e0:	7e0f      	ldrb	r7, [r1, #24]
 80092e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092e4:	2f78      	cmp	r7, #120	; 0x78
 80092e6:	4691      	mov	r9, r2
 80092e8:	4680      	mov	r8, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	469a      	mov	sl, r3
 80092ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092f2:	d807      	bhi.n	8009304 <_printf_i+0x28>
 80092f4:	2f62      	cmp	r7, #98	; 0x62
 80092f6:	d80a      	bhi.n	800930e <_printf_i+0x32>
 80092f8:	2f00      	cmp	r7, #0
 80092fa:	f000 80d8 	beq.w	80094ae <_printf_i+0x1d2>
 80092fe:	2f58      	cmp	r7, #88	; 0x58
 8009300:	f000 80a3 	beq.w	800944a <_printf_i+0x16e>
 8009304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800930c:	e03a      	b.n	8009384 <_printf_i+0xa8>
 800930e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009312:	2b15      	cmp	r3, #21
 8009314:	d8f6      	bhi.n	8009304 <_printf_i+0x28>
 8009316:	a101      	add	r1, pc, #4	; (adr r1, 800931c <_printf_i+0x40>)
 8009318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800931c:	08009375 	.word	0x08009375
 8009320:	08009389 	.word	0x08009389
 8009324:	08009305 	.word	0x08009305
 8009328:	08009305 	.word	0x08009305
 800932c:	08009305 	.word	0x08009305
 8009330:	08009305 	.word	0x08009305
 8009334:	08009389 	.word	0x08009389
 8009338:	08009305 	.word	0x08009305
 800933c:	08009305 	.word	0x08009305
 8009340:	08009305 	.word	0x08009305
 8009344:	08009305 	.word	0x08009305
 8009348:	08009495 	.word	0x08009495
 800934c:	080093b9 	.word	0x080093b9
 8009350:	08009477 	.word	0x08009477
 8009354:	08009305 	.word	0x08009305
 8009358:	08009305 	.word	0x08009305
 800935c:	080094b7 	.word	0x080094b7
 8009360:	08009305 	.word	0x08009305
 8009364:	080093b9 	.word	0x080093b9
 8009368:	08009305 	.word	0x08009305
 800936c:	08009305 	.word	0x08009305
 8009370:	0800947f 	.word	0x0800947f
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	1d1a      	adds	r2, r3, #4
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	602a      	str	r2, [r5, #0]
 800937c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009384:	2301      	movs	r3, #1
 8009386:	e0a3      	b.n	80094d0 <_printf_i+0x1f4>
 8009388:	6820      	ldr	r0, [r4, #0]
 800938a:	6829      	ldr	r1, [r5, #0]
 800938c:	0606      	lsls	r6, r0, #24
 800938e:	f101 0304 	add.w	r3, r1, #4
 8009392:	d50a      	bpl.n	80093aa <_printf_i+0xce>
 8009394:	680e      	ldr	r6, [r1, #0]
 8009396:	602b      	str	r3, [r5, #0]
 8009398:	2e00      	cmp	r6, #0
 800939a:	da03      	bge.n	80093a4 <_printf_i+0xc8>
 800939c:	232d      	movs	r3, #45	; 0x2d
 800939e:	4276      	negs	r6, r6
 80093a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a4:	485e      	ldr	r0, [pc, #376]	; (8009520 <_printf_i+0x244>)
 80093a6:	230a      	movs	r3, #10
 80093a8:	e019      	b.n	80093de <_printf_i+0x102>
 80093aa:	680e      	ldr	r6, [r1, #0]
 80093ac:	602b      	str	r3, [r5, #0]
 80093ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093b2:	bf18      	it	ne
 80093b4:	b236      	sxthne	r6, r6
 80093b6:	e7ef      	b.n	8009398 <_printf_i+0xbc>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	6820      	ldr	r0, [r4, #0]
 80093bc:	1d19      	adds	r1, r3, #4
 80093be:	6029      	str	r1, [r5, #0]
 80093c0:	0601      	lsls	r1, r0, #24
 80093c2:	d501      	bpl.n	80093c8 <_printf_i+0xec>
 80093c4:	681e      	ldr	r6, [r3, #0]
 80093c6:	e002      	b.n	80093ce <_printf_i+0xf2>
 80093c8:	0646      	lsls	r6, r0, #25
 80093ca:	d5fb      	bpl.n	80093c4 <_printf_i+0xe8>
 80093cc:	881e      	ldrh	r6, [r3, #0]
 80093ce:	4854      	ldr	r0, [pc, #336]	; (8009520 <_printf_i+0x244>)
 80093d0:	2f6f      	cmp	r7, #111	; 0x6f
 80093d2:	bf0c      	ite	eq
 80093d4:	2308      	moveq	r3, #8
 80093d6:	230a      	movne	r3, #10
 80093d8:	2100      	movs	r1, #0
 80093da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093de:	6865      	ldr	r5, [r4, #4]
 80093e0:	60a5      	str	r5, [r4, #8]
 80093e2:	2d00      	cmp	r5, #0
 80093e4:	bfa2      	ittt	ge
 80093e6:	6821      	ldrge	r1, [r4, #0]
 80093e8:	f021 0104 	bicge.w	r1, r1, #4
 80093ec:	6021      	strge	r1, [r4, #0]
 80093ee:	b90e      	cbnz	r6, 80093f4 <_printf_i+0x118>
 80093f0:	2d00      	cmp	r5, #0
 80093f2:	d04d      	beq.n	8009490 <_printf_i+0x1b4>
 80093f4:	4615      	mov	r5, r2
 80093f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80093fa:	fb03 6711 	mls	r7, r3, r1, r6
 80093fe:	5dc7      	ldrb	r7, [r0, r7]
 8009400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009404:	4637      	mov	r7, r6
 8009406:	42bb      	cmp	r3, r7
 8009408:	460e      	mov	r6, r1
 800940a:	d9f4      	bls.n	80093f6 <_printf_i+0x11a>
 800940c:	2b08      	cmp	r3, #8
 800940e:	d10b      	bne.n	8009428 <_printf_i+0x14c>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	07de      	lsls	r6, r3, #31
 8009414:	d508      	bpl.n	8009428 <_printf_i+0x14c>
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	6861      	ldr	r1, [r4, #4]
 800941a:	4299      	cmp	r1, r3
 800941c:	bfde      	ittt	le
 800941e:	2330      	movle	r3, #48	; 0x30
 8009420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009424:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009428:	1b52      	subs	r2, r2, r5
 800942a:	6122      	str	r2, [r4, #16]
 800942c:	f8cd a000 	str.w	sl, [sp]
 8009430:	464b      	mov	r3, r9
 8009432:	aa03      	add	r2, sp, #12
 8009434:	4621      	mov	r1, r4
 8009436:	4640      	mov	r0, r8
 8009438:	f7ff fee2 	bl	8009200 <_printf_common>
 800943c:	3001      	adds	r0, #1
 800943e:	d14c      	bne.n	80094da <_printf_i+0x1fe>
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	b004      	add	sp, #16
 8009446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944a:	4835      	ldr	r0, [pc, #212]	; (8009520 <_printf_i+0x244>)
 800944c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009450:	6829      	ldr	r1, [r5, #0]
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	f851 6b04 	ldr.w	r6, [r1], #4
 8009458:	6029      	str	r1, [r5, #0]
 800945a:	061d      	lsls	r5, r3, #24
 800945c:	d514      	bpl.n	8009488 <_printf_i+0x1ac>
 800945e:	07df      	lsls	r7, r3, #31
 8009460:	bf44      	itt	mi
 8009462:	f043 0320 	orrmi.w	r3, r3, #32
 8009466:	6023      	strmi	r3, [r4, #0]
 8009468:	b91e      	cbnz	r6, 8009472 <_printf_i+0x196>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	f023 0320 	bic.w	r3, r3, #32
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	2310      	movs	r3, #16
 8009474:	e7b0      	b.n	80093d8 <_printf_i+0xfc>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	f043 0320 	orr.w	r3, r3, #32
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	2378      	movs	r3, #120	; 0x78
 8009480:	4828      	ldr	r0, [pc, #160]	; (8009524 <_printf_i+0x248>)
 8009482:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009486:	e7e3      	b.n	8009450 <_printf_i+0x174>
 8009488:	0659      	lsls	r1, r3, #25
 800948a:	bf48      	it	mi
 800948c:	b2b6      	uxthmi	r6, r6
 800948e:	e7e6      	b.n	800945e <_printf_i+0x182>
 8009490:	4615      	mov	r5, r2
 8009492:	e7bb      	b.n	800940c <_printf_i+0x130>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	6826      	ldr	r6, [r4, #0]
 8009498:	6961      	ldr	r1, [r4, #20]
 800949a:	1d18      	adds	r0, r3, #4
 800949c:	6028      	str	r0, [r5, #0]
 800949e:	0635      	lsls	r5, r6, #24
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	d501      	bpl.n	80094a8 <_printf_i+0x1cc>
 80094a4:	6019      	str	r1, [r3, #0]
 80094a6:	e002      	b.n	80094ae <_printf_i+0x1d2>
 80094a8:	0670      	lsls	r0, r6, #25
 80094aa:	d5fb      	bpl.n	80094a4 <_printf_i+0x1c8>
 80094ac:	8019      	strh	r1, [r3, #0]
 80094ae:	2300      	movs	r3, #0
 80094b0:	6123      	str	r3, [r4, #16]
 80094b2:	4615      	mov	r5, r2
 80094b4:	e7ba      	b.n	800942c <_printf_i+0x150>
 80094b6:	682b      	ldr	r3, [r5, #0]
 80094b8:	1d1a      	adds	r2, r3, #4
 80094ba:	602a      	str	r2, [r5, #0]
 80094bc:	681d      	ldr	r5, [r3, #0]
 80094be:	6862      	ldr	r2, [r4, #4]
 80094c0:	2100      	movs	r1, #0
 80094c2:	4628      	mov	r0, r5
 80094c4:	f7f6 feb4 	bl	8000230 <memchr>
 80094c8:	b108      	cbz	r0, 80094ce <_printf_i+0x1f2>
 80094ca:	1b40      	subs	r0, r0, r5
 80094cc:	6060      	str	r0, [r4, #4]
 80094ce:	6863      	ldr	r3, [r4, #4]
 80094d0:	6123      	str	r3, [r4, #16]
 80094d2:	2300      	movs	r3, #0
 80094d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094d8:	e7a8      	b.n	800942c <_printf_i+0x150>
 80094da:	6923      	ldr	r3, [r4, #16]
 80094dc:	462a      	mov	r2, r5
 80094de:	4649      	mov	r1, r9
 80094e0:	4640      	mov	r0, r8
 80094e2:	47d0      	blx	sl
 80094e4:	3001      	adds	r0, #1
 80094e6:	d0ab      	beq.n	8009440 <_printf_i+0x164>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	079b      	lsls	r3, r3, #30
 80094ec:	d413      	bmi.n	8009516 <_printf_i+0x23a>
 80094ee:	68e0      	ldr	r0, [r4, #12]
 80094f0:	9b03      	ldr	r3, [sp, #12]
 80094f2:	4298      	cmp	r0, r3
 80094f4:	bfb8      	it	lt
 80094f6:	4618      	movlt	r0, r3
 80094f8:	e7a4      	b.n	8009444 <_printf_i+0x168>
 80094fa:	2301      	movs	r3, #1
 80094fc:	4632      	mov	r2, r6
 80094fe:	4649      	mov	r1, r9
 8009500:	4640      	mov	r0, r8
 8009502:	47d0      	blx	sl
 8009504:	3001      	adds	r0, #1
 8009506:	d09b      	beq.n	8009440 <_printf_i+0x164>
 8009508:	3501      	adds	r5, #1
 800950a:	68e3      	ldr	r3, [r4, #12]
 800950c:	9903      	ldr	r1, [sp, #12]
 800950e:	1a5b      	subs	r3, r3, r1
 8009510:	42ab      	cmp	r3, r5
 8009512:	dcf2      	bgt.n	80094fa <_printf_i+0x21e>
 8009514:	e7eb      	b.n	80094ee <_printf_i+0x212>
 8009516:	2500      	movs	r5, #0
 8009518:	f104 0619 	add.w	r6, r4, #25
 800951c:	e7f5      	b.n	800950a <_printf_i+0x22e>
 800951e:	bf00      	nop
 8009520:	0800ba4e 	.word	0x0800ba4e
 8009524:	0800ba5f 	.word	0x0800ba5f

08009528 <iprintf>:
 8009528:	b40f      	push	{r0, r1, r2, r3}
 800952a:	4b0a      	ldr	r3, [pc, #40]	; (8009554 <iprintf+0x2c>)
 800952c:	b513      	push	{r0, r1, r4, lr}
 800952e:	681c      	ldr	r4, [r3, #0]
 8009530:	b124      	cbz	r4, 800953c <iprintf+0x14>
 8009532:	69a3      	ldr	r3, [r4, #24]
 8009534:	b913      	cbnz	r3, 800953c <iprintf+0x14>
 8009536:	4620      	mov	r0, r4
 8009538:	f001 f8da 	bl	800a6f0 <__sinit>
 800953c:	ab05      	add	r3, sp, #20
 800953e:	9a04      	ldr	r2, [sp, #16]
 8009540:	68a1      	ldr	r1, [r4, #8]
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	4620      	mov	r0, r4
 8009546:	f001 fe97 	bl	800b278 <_vfiprintf_r>
 800954a:	b002      	add	sp, #8
 800954c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009550:	b004      	add	sp, #16
 8009552:	4770      	bx	lr
 8009554:	20000018 	.word	0x20000018

08009558 <_puts_r>:
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	460e      	mov	r6, r1
 800955c:	4605      	mov	r5, r0
 800955e:	b118      	cbz	r0, 8009568 <_puts_r+0x10>
 8009560:	6983      	ldr	r3, [r0, #24]
 8009562:	b90b      	cbnz	r3, 8009568 <_puts_r+0x10>
 8009564:	f001 f8c4 	bl	800a6f0 <__sinit>
 8009568:	69ab      	ldr	r3, [r5, #24]
 800956a:	68ac      	ldr	r4, [r5, #8]
 800956c:	b913      	cbnz	r3, 8009574 <_puts_r+0x1c>
 800956e:	4628      	mov	r0, r5
 8009570:	f001 f8be 	bl	800a6f0 <__sinit>
 8009574:	4b2c      	ldr	r3, [pc, #176]	; (8009628 <_puts_r+0xd0>)
 8009576:	429c      	cmp	r4, r3
 8009578:	d120      	bne.n	80095bc <_puts_r+0x64>
 800957a:	686c      	ldr	r4, [r5, #4]
 800957c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800957e:	07db      	lsls	r3, r3, #31
 8009580:	d405      	bmi.n	800958e <_puts_r+0x36>
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	0598      	lsls	r0, r3, #22
 8009586:	d402      	bmi.n	800958e <_puts_r+0x36>
 8009588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800958a:	f001 f954 	bl	800a836 <__retarget_lock_acquire_recursive>
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	0719      	lsls	r1, r3, #28
 8009592:	d51d      	bpl.n	80095d0 <_puts_r+0x78>
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	b1db      	cbz	r3, 80095d0 <_puts_r+0x78>
 8009598:	3e01      	subs	r6, #1
 800959a:	68a3      	ldr	r3, [r4, #8]
 800959c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095a0:	3b01      	subs	r3, #1
 80095a2:	60a3      	str	r3, [r4, #8]
 80095a4:	bb39      	cbnz	r1, 80095f6 <_puts_r+0x9e>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	da38      	bge.n	800961c <_puts_r+0xc4>
 80095aa:	4622      	mov	r2, r4
 80095ac:	210a      	movs	r1, #10
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f848 	bl	8009644 <__swbuf_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d011      	beq.n	80095dc <_puts_r+0x84>
 80095b8:	250a      	movs	r5, #10
 80095ba:	e011      	b.n	80095e0 <_puts_r+0x88>
 80095bc:	4b1b      	ldr	r3, [pc, #108]	; (800962c <_puts_r+0xd4>)
 80095be:	429c      	cmp	r4, r3
 80095c0:	d101      	bne.n	80095c6 <_puts_r+0x6e>
 80095c2:	68ac      	ldr	r4, [r5, #8]
 80095c4:	e7da      	b.n	800957c <_puts_r+0x24>
 80095c6:	4b1a      	ldr	r3, [pc, #104]	; (8009630 <_puts_r+0xd8>)
 80095c8:	429c      	cmp	r4, r3
 80095ca:	bf08      	it	eq
 80095cc:	68ec      	ldreq	r4, [r5, #12]
 80095ce:	e7d5      	b.n	800957c <_puts_r+0x24>
 80095d0:	4621      	mov	r1, r4
 80095d2:	4628      	mov	r0, r5
 80095d4:	f000 f888 	bl	80096e8 <__swsetup_r>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d0dd      	beq.n	8009598 <_puts_r+0x40>
 80095dc:	f04f 35ff 	mov.w	r5, #4294967295
 80095e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095e2:	07da      	lsls	r2, r3, #31
 80095e4:	d405      	bmi.n	80095f2 <_puts_r+0x9a>
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	059b      	lsls	r3, r3, #22
 80095ea:	d402      	bmi.n	80095f2 <_puts_r+0x9a>
 80095ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095ee:	f001 f923 	bl	800a838 <__retarget_lock_release_recursive>
 80095f2:	4628      	mov	r0, r5
 80095f4:	bd70      	pop	{r4, r5, r6, pc}
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	da04      	bge.n	8009604 <_puts_r+0xac>
 80095fa:	69a2      	ldr	r2, [r4, #24]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	dc06      	bgt.n	800960e <_puts_r+0xb6>
 8009600:	290a      	cmp	r1, #10
 8009602:	d004      	beq.n	800960e <_puts_r+0xb6>
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	1c5a      	adds	r2, r3, #1
 8009608:	6022      	str	r2, [r4, #0]
 800960a:	7019      	strb	r1, [r3, #0]
 800960c:	e7c5      	b.n	800959a <_puts_r+0x42>
 800960e:	4622      	mov	r2, r4
 8009610:	4628      	mov	r0, r5
 8009612:	f000 f817 	bl	8009644 <__swbuf_r>
 8009616:	3001      	adds	r0, #1
 8009618:	d1bf      	bne.n	800959a <_puts_r+0x42>
 800961a:	e7df      	b.n	80095dc <_puts_r+0x84>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	250a      	movs	r5, #10
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	6022      	str	r2, [r4, #0]
 8009624:	701d      	strb	r5, [r3, #0]
 8009626:	e7db      	b.n	80095e0 <_puts_r+0x88>
 8009628:	0800bb20 	.word	0x0800bb20
 800962c:	0800bb40 	.word	0x0800bb40
 8009630:	0800bb00 	.word	0x0800bb00

08009634 <puts>:
 8009634:	4b02      	ldr	r3, [pc, #8]	; (8009640 <puts+0xc>)
 8009636:	4601      	mov	r1, r0
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	f7ff bf8d 	b.w	8009558 <_puts_r>
 800963e:	bf00      	nop
 8009640:	20000018 	.word	0x20000018

08009644 <__swbuf_r>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	460e      	mov	r6, r1
 8009648:	4614      	mov	r4, r2
 800964a:	4605      	mov	r5, r0
 800964c:	b118      	cbz	r0, 8009656 <__swbuf_r+0x12>
 800964e:	6983      	ldr	r3, [r0, #24]
 8009650:	b90b      	cbnz	r3, 8009656 <__swbuf_r+0x12>
 8009652:	f001 f84d 	bl	800a6f0 <__sinit>
 8009656:	4b21      	ldr	r3, [pc, #132]	; (80096dc <__swbuf_r+0x98>)
 8009658:	429c      	cmp	r4, r3
 800965a:	d12b      	bne.n	80096b4 <__swbuf_r+0x70>
 800965c:	686c      	ldr	r4, [r5, #4]
 800965e:	69a3      	ldr	r3, [r4, #24]
 8009660:	60a3      	str	r3, [r4, #8]
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	071a      	lsls	r2, r3, #28
 8009666:	d52f      	bpl.n	80096c8 <__swbuf_r+0x84>
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	b36b      	cbz	r3, 80096c8 <__swbuf_r+0x84>
 800966c:	6923      	ldr	r3, [r4, #16]
 800966e:	6820      	ldr	r0, [r4, #0]
 8009670:	1ac0      	subs	r0, r0, r3
 8009672:	6963      	ldr	r3, [r4, #20]
 8009674:	b2f6      	uxtb	r6, r6
 8009676:	4283      	cmp	r3, r0
 8009678:	4637      	mov	r7, r6
 800967a:	dc04      	bgt.n	8009686 <__swbuf_r+0x42>
 800967c:	4621      	mov	r1, r4
 800967e:	4628      	mov	r0, r5
 8009680:	f000 ffa2 	bl	800a5c8 <_fflush_r>
 8009684:	bb30      	cbnz	r0, 80096d4 <__swbuf_r+0x90>
 8009686:	68a3      	ldr	r3, [r4, #8]
 8009688:	3b01      	subs	r3, #1
 800968a:	60a3      	str	r3, [r4, #8]
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	6022      	str	r2, [r4, #0]
 8009692:	701e      	strb	r6, [r3, #0]
 8009694:	6963      	ldr	r3, [r4, #20]
 8009696:	3001      	adds	r0, #1
 8009698:	4283      	cmp	r3, r0
 800969a:	d004      	beq.n	80096a6 <__swbuf_r+0x62>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	07db      	lsls	r3, r3, #31
 80096a0:	d506      	bpl.n	80096b0 <__swbuf_r+0x6c>
 80096a2:	2e0a      	cmp	r6, #10
 80096a4:	d104      	bne.n	80096b0 <__swbuf_r+0x6c>
 80096a6:	4621      	mov	r1, r4
 80096a8:	4628      	mov	r0, r5
 80096aa:	f000 ff8d 	bl	800a5c8 <_fflush_r>
 80096ae:	b988      	cbnz	r0, 80096d4 <__swbuf_r+0x90>
 80096b0:	4638      	mov	r0, r7
 80096b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b4:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <__swbuf_r+0x9c>)
 80096b6:	429c      	cmp	r4, r3
 80096b8:	d101      	bne.n	80096be <__swbuf_r+0x7a>
 80096ba:	68ac      	ldr	r4, [r5, #8]
 80096bc:	e7cf      	b.n	800965e <__swbuf_r+0x1a>
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <__swbuf_r+0xa0>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	bf08      	it	eq
 80096c4:	68ec      	ldreq	r4, [r5, #12]
 80096c6:	e7ca      	b.n	800965e <__swbuf_r+0x1a>
 80096c8:	4621      	mov	r1, r4
 80096ca:	4628      	mov	r0, r5
 80096cc:	f000 f80c 	bl	80096e8 <__swsetup_r>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d0cb      	beq.n	800966c <__swbuf_r+0x28>
 80096d4:	f04f 37ff 	mov.w	r7, #4294967295
 80096d8:	e7ea      	b.n	80096b0 <__swbuf_r+0x6c>
 80096da:	bf00      	nop
 80096dc:	0800bb20 	.word	0x0800bb20
 80096e0:	0800bb40 	.word	0x0800bb40
 80096e4:	0800bb00 	.word	0x0800bb00

080096e8 <__swsetup_r>:
 80096e8:	4b32      	ldr	r3, [pc, #200]	; (80097b4 <__swsetup_r+0xcc>)
 80096ea:	b570      	push	{r4, r5, r6, lr}
 80096ec:	681d      	ldr	r5, [r3, #0]
 80096ee:	4606      	mov	r6, r0
 80096f0:	460c      	mov	r4, r1
 80096f2:	b125      	cbz	r5, 80096fe <__swsetup_r+0x16>
 80096f4:	69ab      	ldr	r3, [r5, #24]
 80096f6:	b913      	cbnz	r3, 80096fe <__swsetup_r+0x16>
 80096f8:	4628      	mov	r0, r5
 80096fa:	f000 fff9 	bl	800a6f0 <__sinit>
 80096fe:	4b2e      	ldr	r3, [pc, #184]	; (80097b8 <__swsetup_r+0xd0>)
 8009700:	429c      	cmp	r4, r3
 8009702:	d10f      	bne.n	8009724 <__swsetup_r+0x3c>
 8009704:	686c      	ldr	r4, [r5, #4]
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800970c:	0719      	lsls	r1, r3, #28
 800970e:	d42c      	bmi.n	800976a <__swsetup_r+0x82>
 8009710:	06dd      	lsls	r5, r3, #27
 8009712:	d411      	bmi.n	8009738 <__swsetup_r+0x50>
 8009714:	2309      	movs	r3, #9
 8009716:	6033      	str	r3, [r6, #0]
 8009718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800971c:	81a3      	strh	r3, [r4, #12]
 800971e:	f04f 30ff 	mov.w	r0, #4294967295
 8009722:	e03e      	b.n	80097a2 <__swsetup_r+0xba>
 8009724:	4b25      	ldr	r3, [pc, #148]	; (80097bc <__swsetup_r+0xd4>)
 8009726:	429c      	cmp	r4, r3
 8009728:	d101      	bne.n	800972e <__swsetup_r+0x46>
 800972a:	68ac      	ldr	r4, [r5, #8]
 800972c:	e7eb      	b.n	8009706 <__swsetup_r+0x1e>
 800972e:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <__swsetup_r+0xd8>)
 8009730:	429c      	cmp	r4, r3
 8009732:	bf08      	it	eq
 8009734:	68ec      	ldreq	r4, [r5, #12]
 8009736:	e7e6      	b.n	8009706 <__swsetup_r+0x1e>
 8009738:	0758      	lsls	r0, r3, #29
 800973a:	d512      	bpl.n	8009762 <__swsetup_r+0x7a>
 800973c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800973e:	b141      	cbz	r1, 8009752 <__swsetup_r+0x6a>
 8009740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009744:	4299      	cmp	r1, r3
 8009746:	d002      	beq.n	800974e <__swsetup_r+0x66>
 8009748:	4630      	mov	r0, r6
 800974a:	f001 fc8b 	bl	800b064 <_free_r>
 800974e:	2300      	movs	r3, #0
 8009750:	6363      	str	r3, [r4, #52]	; 0x34
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	2300      	movs	r3, #0
 800975c:	6063      	str	r3, [r4, #4]
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f043 0308 	orr.w	r3, r3, #8
 8009768:	81a3      	strh	r3, [r4, #12]
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	b94b      	cbnz	r3, 8009782 <__swsetup_r+0x9a>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009778:	d003      	beq.n	8009782 <__swsetup_r+0x9a>
 800977a:	4621      	mov	r1, r4
 800977c:	4630      	mov	r0, r6
 800977e:	f001 f881 	bl	800a884 <__smakebuf_r>
 8009782:	89a0      	ldrh	r0, [r4, #12]
 8009784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009788:	f010 0301 	ands.w	r3, r0, #1
 800978c:	d00a      	beq.n	80097a4 <__swsetup_r+0xbc>
 800978e:	2300      	movs	r3, #0
 8009790:	60a3      	str	r3, [r4, #8]
 8009792:	6963      	ldr	r3, [r4, #20]
 8009794:	425b      	negs	r3, r3
 8009796:	61a3      	str	r3, [r4, #24]
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	b943      	cbnz	r3, 80097ae <__swsetup_r+0xc6>
 800979c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097a0:	d1ba      	bne.n	8009718 <__swsetup_r+0x30>
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	0781      	lsls	r1, r0, #30
 80097a6:	bf58      	it	pl
 80097a8:	6963      	ldrpl	r3, [r4, #20]
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	e7f4      	b.n	8009798 <__swsetup_r+0xb0>
 80097ae:	2000      	movs	r0, #0
 80097b0:	e7f7      	b.n	80097a2 <__swsetup_r+0xba>
 80097b2:	bf00      	nop
 80097b4:	20000018 	.word	0x20000018
 80097b8:	0800bb20 	.word	0x0800bb20
 80097bc:	0800bb40 	.word	0x0800bb40
 80097c0:	0800bb00 	.word	0x0800bb00

080097c4 <quorem>:
 80097c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	6903      	ldr	r3, [r0, #16]
 80097ca:	690c      	ldr	r4, [r1, #16]
 80097cc:	42a3      	cmp	r3, r4
 80097ce:	4607      	mov	r7, r0
 80097d0:	f2c0 8081 	blt.w	80098d6 <quorem+0x112>
 80097d4:	3c01      	subs	r4, #1
 80097d6:	f101 0814 	add.w	r8, r1, #20
 80097da:	f100 0514 	add.w	r5, r0, #20
 80097de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097ec:	3301      	adds	r3, #1
 80097ee:	429a      	cmp	r2, r3
 80097f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80097f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80097fc:	d331      	bcc.n	8009862 <quorem+0x9e>
 80097fe:	f04f 0e00 	mov.w	lr, #0
 8009802:	4640      	mov	r0, r8
 8009804:	46ac      	mov	ip, r5
 8009806:	46f2      	mov	sl, lr
 8009808:	f850 2b04 	ldr.w	r2, [r0], #4
 800980c:	b293      	uxth	r3, r2
 800980e:	fb06 e303 	mla	r3, r6, r3, lr
 8009812:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009816:	b29b      	uxth	r3, r3
 8009818:	ebaa 0303 	sub.w	r3, sl, r3
 800981c:	f8dc a000 	ldr.w	sl, [ip]
 8009820:	0c12      	lsrs	r2, r2, #16
 8009822:	fa13 f38a 	uxtah	r3, r3, sl
 8009826:	fb06 e202 	mla	r2, r6, r2, lr
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	9b00      	ldr	r3, [sp, #0]
 800982e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009832:	b292      	uxth	r2, r2
 8009834:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009838:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800983c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009840:	4581      	cmp	r9, r0
 8009842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009846:	f84c 3b04 	str.w	r3, [ip], #4
 800984a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800984e:	d2db      	bcs.n	8009808 <quorem+0x44>
 8009850:	f855 300b 	ldr.w	r3, [r5, fp]
 8009854:	b92b      	cbnz	r3, 8009862 <quorem+0x9e>
 8009856:	9b01      	ldr	r3, [sp, #4]
 8009858:	3b04      	subs	r3, #4
 800985a:	429d      	cmp	r5, r3
 800985c:	461a      	mov	r2, r3
 800985e:	d32e      	bcc.n	80098be <quorem+0xfa>
 8009860:	613c      	str	r4, [r7, #16]
 8009862:	4638      	mov	r0, r7
 8009864:	f001 fae6 	bl	800ae34 <__mcmp>
 8009868:	2800      	cmp	r0, #0
 800986a:	db24      	blt.n	80098b6 <quorem+0xf2>
 800986c:	3601      	adds	r6, #1
 800986e:	4628      	mov	r0, r5
 8009870:	f04f 0c00 	mov.w	ip, #0
 8009874:	f858 2b04 	ldr.w	r2, [r8], #4
 8009878:	f8d0 e000 	ldr.w	lr, [r0]
 800987c:	b293      	uxth	r3, r2
 800987e:	ebac 0303 	sub.w	r3, ip, r3
 8009882:	0c12      	lsrs	r2, r2, #16
 8009884:	fa13 f38e 	uxtah	r3, r3, lr
 8009888:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800988c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009890:	b29b      	uxth	r3, r3
 8009892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009896:	45c1      	cmp	r9, r8
 8009898:	f840 3b04 	str.w	r3, [r0], #4
 800989c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098a0:	d2e8      	bcs.n	8009874 <quorem+0xb0>
 80098a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098aa:	b922      	cbnz	r2, 80098b6 <quorem+0xf2>
 80098ac:	3b04      	subs	r3, #4
 80098ae:	429d      	cmp	r5, r3
 80098b0:	461a      	mov	r2, r3
 80098b2:	d30a      	bcc.n	80098ca <quorem+0x106>
 80098b4:	613c      	str	r4, [r7, #16]
 80098b6:	4630      	mov	r0, r6
 80098b8:	b003      	add	sp, #12
 80098ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098be:	6812      	ldr	r2, [r2, #0]
 80098c0:	3b04      	subs	r3, #4
 80098c2:	2a00      	cmp	r2, #0
 80098c4:	d1cc      	bne.n	8009860 <quorem+0x9c>
 80098c6:	3c01      	subs	r4, #1
 80098c8:	e7c7      	b.n	800985a <quorem+0x96>
 80098ca:	6812      	ldr	r2, [r2, #0]
 80098cc:	3b04      	subs	r3, #4
 80098ce:	2a00      	cmp	r2, #0
 80098d0:	d1f0      	bne.n	80098b4 <quorem+0xf0>
 80098d2:	3c01      	subs	r4, #1
 80098d4:	e7eb      	b.n	80098ae <quorem+0xea>
 80098d6:	2000      	movs	r0, #0
 80098d8:	e7ee      	b.n	80098b8 <quorem+0xf4>
 80098da:	0000      	movs	r0, r0
 80098dc:	0000      	movs	r0, r0
	...

080098e0 <_dtoa_r>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	ed2d 8b04 	vpush	{d8-d9}
 80098e8:	ec57 6b10 	vmov	r6, r7, d0
 80098ec:	b093      	sub	sp, #76	; 0x4c
 80098ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80098f4:	9106      	str	r1, [sp, #24]
 80098f6:	ee10 aa10 	vmov	sl, s0
 80098fa:	4604      	mov	r4, r0
 80098fc:	9209      	str	r2, [sp, #36]	; 0x24
 80098fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009900:	46bb      	mov	fp, r7
 8009902:	b975      	cbnz	r5, 8009922 <_dtoa_r+0x42>
 8009904:	2010      	movs	r0, #16
 8009906:	f000 fffd 	bl	800a904 <malloc>
 800990a:	4602      	mov	r2, r0
 800990c:	6260      	str	r0, [r4, #36]	; 0x24
 800990e:	b920      	cbnz	r0, 800991a <_dtoa_r+0x3a>
 8009910:	4ba7      	ldr	r3, [pc, #668]	; (8009bb0 <_dtoa_r+0x2d0>)
 8009912:	21ea      	movs	r1, #234	; 0xea
 8009914:	48a7      	ldr	r0, [pc, #668]	; (8009bb4 <_dtoa_r+0x2d4>)
 8009916:	f001 fe45 	bl	800b5a4 <__assert_func>
 800991a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800991e:	6005      	str	r5, [r0, #0]
 8009920:	60c5      	str	r5, [r0, #12]
 8009922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009924:	6819      	ldr	r1, [r3, #0]
 8009926:	b151      	cbz	r1, 800993e <_dtoa_r+0x5e>
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	604a      	str	r2, [r1, #4]
 800992c:	2301      	movs	r3, #1
 800992e:	4093      	lsls	r3, r2
 8009930:	608b      	str	r3, [r1, #8]
 8009932:	4620      	mov	r0, r4
 8009934:	f001 f83c 	bl	800a9b0 <_Bfree>
 8009938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800993a:	2200      	movs	r2, #0
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	1e3b      	subs	r3, r7, #0
 8009940:	bfaa      	itet	ge
 8009942:	2300      	movge	r3, #0
 8009944:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009948:	f8c8 3000 	strge.w	r3, [r8]
 800994c:	4b9a      	ldr	r3, [pc, #616]	; (8009bb8 <_dtoa_r+0x2d8>)
 800994e:	bfbc      	itt	lt
 8009950:	2201      	movlt	r2, #1
 8009952:	f8c8 2000 	strlt.w	r2, [r8]
 8009956:	ea33 030b 	bics.w	r3, r3, fp
 800995a:	d11b      	bne.n	8009994 <_dtoa_r+0xb4>
 800995c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800995e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009968:	4333      	orrs	r3, r6
 800996a:	f000 8592 	beq.w	800a492 <_dtoa_r+0xbb2>
 800996e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009970:	b963      	cbnz	r3, 800998c <_dtoa_r+0xac>
 8009972:	4b92      	ldr	r3, [pc, #584]	; (8009bbc <_dtoa_r+0x2dc>)
 8009974:	e022      	b.n	80099bc <_dtoa_r+0xdc>
 8009976:	4b92      	ldr	r3, [pc, #584]	; (8009bc0 <_dtoa_r+0x2e0>)
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	3308      	adds	r3, #8
 800997c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	9801      	ldr	r0, [sp, #4]
 8009982:	b013      	add	sp, #76	; 0x4c
 8009984:	ecbd 8b04 	vpop	{d8-d9}
 8009988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998c:	4b8b      	ldr	r3, [pc, #556]	; (8009bbc <_dtoa_r+0x2dc>)
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	3303      	adds	r3, #3
 8009992:	e7f3      	b.n	800997c <_dtoa_r+0x9c>
 8009994:	2200      	movs	r2, #0
 8009996:	2300      	movs	r3, #0
 8009998:	4650      	mov	r0, sl
 800999a:	4659      	mov	r1, fp
 800999c:	f7f7 f8bc 	bl	8000b18 <__aeabi_dcmpeq>
 80099a0:	ec4b ab19 	vmov	d9, sl, fp
 80099a4:	4680      	mov	r8, r0
 80099a6:	b158      	cbz	r0, 80099c0 <_dtoa_r+0xe0>
 80099a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099aa:	2301      	movs	r3, #1
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 856b 	beq.w	800a48c <_dtoa_r+0xbac>
 80099b6:	4883      	ldr	r0, [pc, #524]	; (8009bc4 <_dtoa_r+0x2e4>)
 80099b8:	6018      	str	r0, [r3, #0]
 80099ba:	1e43      	subs	r3, r0, #1
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	e7df      	b.n	8009980 <_dtoa_r+0xa0>
 80099c0:	ec4b ab10 	vmov	d0, sl, fp
 80099c4:	aa10      	add	r2, sp, #64	; 0x40
 80099c6:	a911      	add	r1, sp, #68	; 0x44
 80099c8:	4620      	mov	r0, r4
 80099ca:	f001 fad9 	bl	800af80 <__d2b>
 80099ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80099d2:	ee08 0a10 	vmov	s16, r0
 80099d6:	2d00      	cmp	r5, #0
 80099d8:	f000 8084 	beq.w	8009ae4 <_dtoa_r+0x204>
 80099dc:	ee19 3a90 	vmov	r3, s19
 80099e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80099e8:	4656      	mov	r6, sl
 80099ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80099ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80099f6:	4b74      	ldr	r3, [pc, #464]	; (8009bc8 <_dtoa_r+0x2e8>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f6 fc6b 	bl	80002d8 <__aeabi_dsub>
 8009a02:	a365      	add	r3, pc, #404	; (adr r3, 8009b98 <_dtoa_r+0x2b8>)
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f7f6 fe1e 	bl	8000648 <__aeabi_dmul>
 8009a0c:	a364      	add	r3, pc, #400	; (adr r3, 8009ba0 <_dtoa_r+0x2c0>)
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	f7f6 fc63 	bl	80002dc <__adddf3>
 8009a16:	4606      	mov	r6, r0
 8009a18:	4628      	mov	r0, r5
 8009a1a:	460f      	mov	r7, r1
 8009a1c:	f7f6 fdaa 	bl	8000574 <__aeabi_i2d>
 8009a20:	a361      	add	r3, pc, #388	; (adr r3, 8009ba8 <_dtoa_r+0x2c8>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	f7f6 fe0f 	bl	8000648 <__aeabi_dmul>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4630      	mov	r0, r6
 8009a30:	4639      	mov	r1, r7
 8009a32:	f7f6 fc53 	bl	80002dc <__adddf3>
 8009a36:	4606      	mov	r6, r0
 8009a38:	460f      	mov	r7, r1
 8009a3a:	f7f7 f8b5 	bl	8000ba8 <__aeabi_d2iz>
 8009a3e:	2200      	movs	r2, #0
 8009a40:	9000      	str	r0, [sp, #0]
 8009a42:	2300      	movs	r3, #0
 8009a44:	4630      	mov	r0, r6
 8009a46:	4639      	mov	r1, r7
 8009a48:	f7f7 f870 	bl	8000b2c <__aeabi_dcmplt>
 8009a4c:	b150      	cbz	r0, 8009a64 <_dtoa_r+0x184>
 8009a4e:	9800      	ldr	r0, [sp, #0]
 8009a50:	f7f6 fd90 	bl	8000574 <__aeabi_i2d>
 8009a54:	4632      	mov	r2, r6
 8009a56:	463b      	mov	r3, r7
 8009a58:	f7f7 f85e 	bl	8000b18 <__aeabi_dcmpeq>
 8009a5c:	b910      	cbnz	r0, 8009a64 <_dtoa_r+0x184>
 8009a5e:	9b00      	ldr	r3, [sp, #0]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	9b00      	ldr	r3, [sp, #0]
 8009a66:	2b16      	cmp	r3, #22
 8009a68:	d85a      	bhi.n	8009b20 <_dtoa_r+0x240>
 8009a6a:	9a00      	ldr	r2, [sp, #0]
 8009a6c:	4b57      	ldr	r3, [pc, #348]	; (8009bcc <_dtoa_r+0x2ec>)
 8009a6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	ec51 0b19 	vmov	r0, r1, d9
 8009a7a:	f7f7 f857 	bl	8000b2c <__aeabi_dcmplt>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d050      	beq.n	8009b24 <_dtoa_r+0x244>
 8009a82:	9b00      	ldr	r3, [sp, #0]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a8e:	1b5d      	subs	r5, r3, r5
 8009a90:	1e6b      	subs	r3, r5, #1
 8009a92:	9305      	str	r3, [sp, #20]
 8009a94:	bf45      	ittet	mi
 8009a96:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a9a:	9304      	strmi	r3, [sp, #16]
 8009a9c:	2300      	movpl	r3, #0
 8009a9e:	2300      	movmi	r3, #0
 8009aa0:	bf4c      	ite	mi
 8009aa2:	9305      	strmi	r3, [sp, #20]
 8009aa4:	9304      	strpl	r3, [sp, #16]
 8009aa6:	9b00      	ldr	r3, [sp, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	db3d      	blt.n	8009b28 <_dtoa_r+0x248>
 8009aac:	9b05      	ldr	r3, [sp, #20]
 8009aae:	9a00      	ldr	r2, [sp, #0]
 8009ab0:	920a      	str	r2, [sp, #40]	; 0x28
 8009ab2:	4413      	add	r3, r2
 8009ab4:	9305      	str	r3, [sp, #20]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	9307      	str	r3, [sp, #28]
 8009aba:	9b06      	ldr	r3, [sp, #24]
 8009abc:	2b09      	cmp	r3, #9
 8009abe:	f200 8089 	bhi.w	8009bd4 <_dtoa_r+0x2f4>
 8009ac2:	2b05      	cmp	r3, #5
 8009ac4:	bfc4      	itt	gt
 8009ac6:	3b04      	subgt	r3, #4
 8009ac8:	9306      	strgt	r3, [sp, #24]
 8009aca:	9b06      	ldr	r3, [sp, #24]
 8009acc:	f1a3 0302 	sub.w	r3, r3, #2
 8009ad0:	bfcc      	ite	gt
 8009ad2:	2500      	movgt	r5, #0
 8009ad4:	2501      	movle	r5, #1
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	f200 8087 	bhi.w	8009bea <_dtoa_r+0x30a>
 8009adc:	e8df f003 	tbb	[pc, r3]
 8009ae0:	59383a2d 	.word	0x59383a2d
 8009ae4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009ae8:	441d      	add	r5, r3
 8009aea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009aee:	2b20      	cmp	r3, #32
 8009af0:	bfc1      	itttt	gt
 8009af2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009af6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009afa:	fa0b f303 	lslgt.w	r3, fp, r3
 8009afe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b02:	bfda      	itte	le
 8009b04:	f1c3 0320 	rsble	r3, r3, #32
 8009b08:	fa06 f003 	lslle.w	r0, r6, r3
 8009b0c:	4318      	orrgt	r0, r3
 8009b0e:	f7f6 fd21 	bl	8000554 <__aeabi_ui2d>
 8009b12:	2301      	movs	r3, #1
 8009b14:	4606      	mov	r6, r0
 8009b16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b1a:	3d01      	subs	r5, #1
 8009b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b1e:	e76a      	b.n	80099f6 <_dtoa_r+0x116>
 8009b20:	2301      	movs	r3, #1
 8009b22:	e7b2      	b.n	8009a8a <_dtoa_r+0x1aa>
 8009b24:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b26:	e7b1      	b.n	8009a8c <_dtoa_r+0x1ac>
 8009b28:	9b04      	ldr	r3, [sp, #16]
 8009b2a:	9a00      	ldr	r2, [sp, #0]
 8009b2c:	1a9b      	subs	r3, r3, r2
 8009b2e:	9304      	str	r3, [sp, #16]
 8009b30:	4253      	negs	r3, r2
 8009b32:	9307      	str	r3, [sp, #28]
 8009b34:	2300      	movs	r3, #0
 8009b36:	930a      	str	r3, [sp, #40]	; 0x28
 8009b38:	e7bf      	b.n	8009aba <_dtoa_r+0x1da>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	9308      	str	r3, [sp, #32]
 8009b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dc55      	bgt.n	8009bf0 <_dtoa_r+0x310>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b4e:	e00c      	b.n	8009b6a <_dtoa_r+0x28a>
 8009b50:	2301      	movs	r3, #1
 8009b52:	e7f3      	b.n	8009b3c <_dtoa_r+0x25c>
 8009b54:	2300      	movs	r3, #0
 8009b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b58:	9308      	str	r3, [sp, #32]
 8009b5a:	9b00      	ldr	r3, [sp, #0]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	9302      	str	r3, [sp, #8]
 8009b60:	3301      	adds	r3, #1
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	9303      	str	r3, [sp, #12]
 8009b66:	bfb8      	it	lt
 8009b68:	2301      	movlt	r3, #1
 8009b6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	6042      	str	r2, [r0, #4]
 8009b70:	2204      	movs	r2, #4
 8009b72:	f102 0614 	add.w	r6, r2, #20
 8009b76:	429e      	cmp	r6, r3
 8009b78:	6841      	ldr	r1, [r0, #4]
 8009b7a:	d93d      	bls.n	8009bf8 <_dtoa_r+0x318>
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f000 fed7 	bl	800a930 <_Balloc>
 8009b82:	9001      	str	r0, [sp, #4]
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d13b      	bne.n	8009c00 <_dtoa_r+0x320>
 8009b88:	4b11      	ldr	r3, [pc, #68]	; (8009bd0 <_dtoa_r+0x2f0>)
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b90:	e6c0      	b.n	8009914 <_dtoa_r+0x34>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e7df      	b.n	8009b56 <_dtoa_r+0x276>
 8009b96:	bf00      	nop
 8009b98:	636f4361 	.word	0x636f4361
 8009b9c:	3fd287a7 	.word	0x3fd287a7
 8009ba0:	8b60c8b3 	.word	0x8b60c8b3
 8009ba4:	3fc68a28 	.word	0x3fc68a28
 8009ba8:	509f79fb 	.word	0x509f79fb
 8009bac:	3fd34413 	.word	0x3fd34413
 8009bb0:	0800ba7d 	.word	0x0800ba7d
 8009bb4:	0800ba94 	.word	0x0800ba94
 8009bb8:	7ff00000 	.word	0x7ff00000
 8009bbc:	0800ba79 	.word	0x0800ba79
 8009bc0:	0800ba70 	.word	0x0800ba70
 8009bc4:	0800ba4d 	.word	0x0800ba4d
 8009bc8:	3ff80000 	.word	0x3ff80000
 8009bcc:	0800bbe8 	.word	0x0800bbe8
 8009bd0:	0800baef 	.word	0x0800baef
 8009bd4:	2501      	movs	r5, #1
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9306      	str	r3, [sp, #24]
 8009bda:	9508      	str	r5, [sp, #32]
 8009bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8009be0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009be4:	2200      	movs	r2, #0
 8009be6:	2312      	movs	r3, #18
 8009be8:	e7b0      	b.n	8009b4c <_dtoa_r+0x26c>
 8009bea:	2301      	movs	r3, #1
 8009bec:	9308      	str	r3, [sp, #32]
 8009bee:	e7f5      	b.n	8009bdc <_dtoa_r+0x2fc>
 8009bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bf6:	e7b8      	b.n	8009b6a <_dtoa_r+0x28a>
 8009bf8:	3101      	adds	r1, #1
 8009bfa:	6041      	str	r1, [r0, #4]
 8009bfc:	0052      	lsls	r2, r2, #1
 8009bfe:	e7b8      	b.n	8009b72 <_dtoa_r+0x292>
 8009c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c02:	9a01      	ldr	r2, [sp, #4]
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	2b0e      	cmp	r3, #14
 8009c0a:	f200 809d 	bhi.w	8009d48 <_dtoa_r+0x468>
 8009c0e:	2d00      	cmp	r5, #0
 8009c10:	f000 809a 	beq.w	8009d48 <_dtoa_r+0x468>
 8009c14:	9b00      	ldr	r3, [sp, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	dd32      	ble.n	8009c80 <_dtoa_r+0x3a0>
 8009c1a:	4ab7      	ldr	r2, [pc, #732]	; (8009ef8 <_dtoa_r+0x618>)
 8009c1c:	f003 030f 	and.w	r3, r3, #15
 8009c20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c28:	9b00      	ldr	r3, [sp, #0]
 8009c2a:	05d8      	lsls	r0, r3, #23
 8009c2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009c30:	d516      	bpl.n	8009c60 <_dtoa_r+0x380>
 8009c32:	4bb2      	ldr	r3, [pc, #712]	; (8009efc <_dtoa_r+0x61c>)
 8009c34:	ec51 0b19 	vmov	r0, r1, d9
 8009c38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c3c:	f7f6 fe2e 	bl	800089c <__aeabi_ddiv>
 8009c40:	f007 070f 	and.w	r7, r7, #15
 8009c44:	4682      	mov	sl, r0
 8009c46:	468b      	mov	fp, r1
 8009c48:	2503      	movs	r5, #3
 8009c4a:	4eac      	ldr	r6, [pc, #688]	; (8009efc <_dtoa_r+0x61c>)
 8009c4c:	b957      	cbnz	r7, 8009c64 <_dtoa_r+0x384>
 8009c4e:	4642      	mov	r2, r8
 8009c50:	464b      	mov	r3, r9
 8009c52:	4650      	mov	r0, sl
 8009c54:	4659      	mov	r1, fp
 8009c56:	f7f6 fe21 	bl	800089c <__aeabi_ddiv>
 8009c5a:	4682      	mov	sl, r0
 8009c5c:	468b      	mov	fp, r1
 8009c5e:	e028      	b.n	8009cb2 <_dtoa_r+0x3d2>
 8009c60:	2502      	movs	r5, #2
 8009c62:	e7f2      	b.n	8009c4a <_dtoa_r+0x36a>
 8009c64:	07f9      	lsls	r1, r7, #31
 8009c66:	d508      	bpl.n	8009c7a <_dtoa_r+0x39a>
 8009c68:	4640      	mov	r0, r8
 8009c6a:	4649      	mov	r1, r9
 8009c6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c70:	f7f6 fcea 	bl	8000648 <__aeabi_dmul>
 8009c74:	3501      	adds	r5, #1
 8009c76:	4680      	mov	r8, r0
 8009c78:	4689      	mov	r9, r1
 8009c7a:	107f      	asrs	r7, r7, #1
 8009c7c:	3608      	adds	r6, #8
 8009c7e:	e7e5      	b.n	8009c4c <_dtoa_r+0x36c>
 8009c80:	f000 809b 	beq.w	8009dba <_dtoa_r+0x4da>
 8009c84:	9b00      	ldr	r3, [sp, #0]
 8009c86:	4f9d      	ldr	r7, [pc, #628]	; (8009efc <_dtoa_r+0x61c>)
 8009c88:	425e      	negs	r6, r3
 8009c8a:	4b9b      	ldr	r3, [pc, #620]	; (8009ef8 <_dtoa_r+0x618>)
 8009c8c:	f006 020f 	and.w	r2, r6, #15
 8009c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	ec51 0b19 	vmov	r0, r1, d9
 8009c9c:	f7f6 fcd4 	bl	8000648 <__aeabi_dmul>
 8009ca0:	1136      	asrs	r6, r6, #4
 8009ca2:	4682      	mov	sl, r0
 8009ca4:	468b      	mov	fp, r1
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	2502      	movs	r5, #2
 8009caa:	2e00      	cmp	r6, #0
 8009cac:	d17a      	bne.n	8009da4 <_dtoa_r+0x4c4>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1d3      	bne.n	8009c5a <_dtoa_r+0x37a>
 8009cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 8082 	beq.w	8009dbe <_dtoa_r+0x4de>
 8009cba:	4b91      	ldr	r3, [pc, #580]	; (8009f00 <_dtoa_r+0x620>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4650      	mov	r0, sl
 8009cc0:	4659      	mov	r1, fp
 8009cc2:	f7f6 ff33 	bl	8000b2c <__aeabi_dcmplt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d079      	beq.n	8009dbe <_dtoa_r+0x4de>
 8009cca:	9b03      	ldr	r3, [sp, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d076      	beq.n	8009dbe <_dtoa_r+0x4de>
 8009cd0:	9b02      	ldr	r3, [sp, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	dd36      	ble.n	8009d44 <_dtoa_r+0x464>
 8009cd6:	9b00      	ldr	r3, [sp, #0]
 8009cd8:	4650      	mov	r0, sl
 8009cda:	4659      	mov	r1, fp
 8009cdc:	1e5f      	subs	r7, r3, #1
 8009cde:	2200      	movs	r2, #0
 8009ce0:	4b88      	ldr	r3, [pc, #544]	; (8009f04 <_dtoa_r+0x624>)
 8009ce2:	f7f6 fcb1 	bl	8000648 <__aeabi_dmul>
 8009ce6:	9e02      	ldr	r6, [sp, #8]
 8009ce8:	4682      	mov	sl, r0
 8009cea:	468b      	mov	fp, r1
 8009cec:	3501      	adds	r5, #1
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f7f6 fc40 	bl	8000574 <__aeabi_i2d>
 8009cf4:	4652      	mov	r2, sl
 8009cf6:	465b      	mov	r3, fp
 8009cf8:	f7f6 fca6 	bl	8000648 <__aeabi_dmul>
 8009cfc:	4b82      	ldr	r3, [pc, #520]	; (8009f08 <_dtoa_r+0x628>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f7f6 faec 	bl	80002dc <__adddf3>
 8009d04:	46d0      	mov	r8, sl
 8009d06:	46d9      	mov	r9, fp
 8009d08:	4682      	mov	sl, r0
 8009d0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009d0e:	2e00      	cmp	r6, #0
 8009d10:	d158      	bne.n	8009dc4 <_dtoa_r+0x4e4>
 8009d12:	4b7e      	ldr	r3, [pc, #504]	; (8009f0c <_dtoa_r+0x62c>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	4640      	mov	r0, r8
 8009d18:	4649      	mov	r1, r9
 8009d1a:	f7f6 fadd 	bl	80002d8 <__aeabi_dsub>
 8009d1e:	4652      	mov	r2, sl
 8009d20:	465b      	mov	r3, fp
 8009d22:	4680      	mov	r8, r0
 8009d24:	4689      	mov	r9, r1
 8009d26:	f7f6 ff1f 	bl	8000b68 <__aeabi_dcmpgt>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	f040 8295 	bne.w	800a25a <_dtoa_r+0x97a>
 8009d30:	4652      	mov	r2, sl
 8009d32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d36:	4640      	mov	r0, r8
 8009d38:	4649      	mov	r1, r9
 8009d3a:	f7f6 fef7 	bl	8000b2c <__aeabi_dcmplt>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f040 8289 	bne.w	800a256 <_dtoa_r+0x976>
 8009d44:	ec5b ab19 	vmov	sl, fp, d9
 8009d48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f2c0 8148 	blt.w	8009fe0 <_dtoa_r+0x700>
 8009d50:	9a00      	ldr	r2, [sp, #0]
 8009d52:	2a0e      	cmp	r2, #14
 8009d54:	f300 8144 	bgt.w	8009fe0 <_dtoa_r+0x700>
 8009d58:	4b67      	ldr	r3, [pc, #412]	; (8009ef8 <_dtoa_r+0x618>)
 8009d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f280 80d5 	bge.w	8009f14 <_dtoa_r+0x634>
 8009d6a:	9b03      	ldr	r3, [sp, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f300 80d1 	bgt.w	8009f14 <_dtoa_r+0x634>
 8009d72:	f040 826f 	bne.w	800a254 <_dtoa_r+0x974>
 8009d76:	4b65      	ldr	r3, [pc, #404]	; (8009f0c <_dtoa_r+0x62c>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	f7f6 fc63 	bl	8000648 <__aeabi_dmul>
 8009d82:	4652      	mov	r2, sl
 8009d84:	465b      	mov	r3, fp
 8009d86:	f7f6 fee5 	bl	8000b54 <__aeabi_dcmpge>
 8009d8a:	9e03      	ldr	r6, [sp, #12]
 8009d8c:	4637      	mov	r7, r6
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f040 8245 	bne.w	800a21e <_dtoa_r+0x93e>
 8009d94:	9d01      	ldr	r5, [sp, #4]
 8009d96:	2331      	movs	r3, #49	; 0x31
 8009d98:	f805 3b01 	strb.w	r3, [r5], #1
 8009d9c:	9b00      	ldr	r3, [sp, #0]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	e240      	b.n	800a226 <_dtoa_r+0x946>
 8009da4:	07f2      	lsls	r2, r6, #31
 8009da6:	d505      	bpl.n	8009db4 <_dtoa_r+0x4d4>
 8009da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dac:	f7f6 fc4c 	bl	8000648 <__aeabi_dmul>
 8009db0:	3501      	adds	r5, #1
 8009db2:	2301      	movs	r3, #1
 8009db4:	1076      	asrs	r6, r6, #1
 8009db6:	3708      	adds	r7, #8
 8009db8:	e777      	b.n	8009caa <_dtoa_r+0x3ca>
 8009dba:	2502      	movs	r5, #2
 8009dbc:	e779      	b.n	8009cb2 <_dtoa_r+0x3d2>
 8009dbe:	9f00      	ldr	r7, [sp, #0]
 8009dc0:	9e03      	ldr	r6, [sp, #12]
 8009dc2:	e794      	b.n	8009cee <_dtoa_r+0x40e>
 8009dc4:	9901      	ldr	r1, [sp, #4]
 8009dc6:	4b4c      	ldr	r3, [pc, #304]	; (8009ef8 <_dtoa_r+0x618>)
 8009dc8:	4431      	add	r1, r6
 8009dca:	910d      	str	r1, [sp, #52]	; 0x34
 8009dcc:	9908      	ldr	r1, [sp, #32]
 8009dce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009dd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009dd6:	2900      	cmp	r1, #0
 8009dd8:	d043      	beq.n	8009e62 <_dtoa_r+0x582>
 8009dda:	494d      	ldr	r1, [pc, #308]	; (8009f10 <_dtoa_r+0x630>)
 8009ddc:	2000      	movs	r0, #0
 8009dde:	f7f6 fd5d 	bl	800089c <__aeabi_ddiv>
 8009de2:	4652      	mov	r2, sl
 8009de4:	465b      	mov	r3, fp
 8009de6:	f7f6 fa77 	bl	80002d8 <__aeabi_dsub>
 8009dea:	9d01      	ldr	r5, [sp, #4]
 8009dec:	4682      	mov	sl, r0
 8009dee:	468b      	mov	fp, r1
 8009df0:	4649      	mov	r1, r9
 8009df2:	4640      	mov	r0, r8
 8009df4:	f7f6 fed8 	bl	8000ba8 <__aeabi_d2iz>
 8009df8:	4606      	mov	r6, r0
 8009dfa:	f7f6 fbbb 	bl	8000574 <__aeabi_i2d>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	4640      	mov	r0, r8
 8009e04:	4649      	mov	r1, r9
 8009e06:	f7f6 fa67 	bl	80002d8 <__aeabi_dsub>
 8009e0a:	3630      	adds	r6, #48	; 0x30
 8009e0c:	f805 6b01 	strb.w	r6, [r5], #1
 8009e10:	4652      	mov	r2, sl
 8009e12:	465b      	mov	r3, fp
 8009e14:	4680      	mov	r8, r0
 8009e16:	4689      	mov	r9, r1
 8009e18:	f7f6 fe88 	bl	8000b2c <__aeabi_dcmplt>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d163      	bne.n	8009ee8 <_dtoa_r+0x608>
 8009e20:	4642      	mov	r2, r8
 8009e22:	464b      	mov	r3, r9
 8009e24:	4936      	ldr	r1, [pc, #216]	; (8009f00 <_dtoa_r+0x620>)
 8009e26:	2000      	movs	r0, #0
 8009e28:	f7f6 fa56 	bl	80002d8 <__aeabi_dsub>
 8009e2c:	4652      	mov	r2, sl
 8009e2e:	465b      	mov	r3, fp
 8009e30:	f7f6 fe7c 	bl	8000b2c <__aeabi_dcmplt>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	f040 80b5 	bne.w	8009fa4 <_dtoa_r+0x6c4>
 8009e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e3c:	429d      	cmp	r5, r3
 8009e3e:	d081      	beq.n	8009d44 <_dtoa_r+0x464>
 8009e40:	4b30      	ldr	r3, [pc, #192]	; (8009f04 <_dtoa_r+0x624>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	4650      	mov	r0, sl
 8009e46:	4659      	mov	r1, fp
 8009e48:	f7f6 fbfe 	bl	8000648 <__aeabi_dmul>
 8009e4c:	4b2d      	ldr	r3, [pc, #180]	; (8009f04 <_dtoa_r+0x624>)
 8009e4e:	4682      	mov	sl, r0
 8009e50:	468b      	mov	fp, r1
 8009e52:	4640      	mov	r0, r8
 8009e54:	4649      	mov	r1, r9
 8009e56:	2200      	movs	r2, #0
 8009e58:	f7f6 fbf6 	bl	8000648 <__aeabi_dmul>
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	4689      	mov	r9, r1
 8009e60:	e7c6      	b.n	8009df0 <_dtoa_r+0x510>
 8009e62:	4650      	mov	r0, sl
 8009e64:	4659      	mov	r1, fp
 8009e66:	f7f6 fbef 	bl	8000648 <__aeabi_dmul>
 8009e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e6c:	9d01      	ldr	r5, [sp, #4]
 8009e6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e70:	4682      	mov	sl, r0
 8009e72:	468b      	mov	fp, r1
 8009e74:	4649      	mov	r1, r9
 8009e76:	4640      	mov	r0, r8
 8009e78:	f7f6 fe96 	bl	8000ba8 <__aeabi_d2iz>
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	f7f6 fb79 	bl	8000574 <__aeabi_i2d>
 8009e82:	3630      	adds	r6, #48	; 0x30
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4640      	mov	r0, r8
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	f7f6 fa24 	bl	80002d8 <__aeabi_dsub>
 8009e90:	f805 6b01 	strb.w	r6, [r5], #1
 8009e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e96:	429d      	cmp	r5, r3
 8009e98:	4680      	mov	r8, r0
 8009e9a:	4689      	mov	r9, r1
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	d124      	bne.n	8009eec <_dtoa_r+0x60c>
 8009ea2:	4b1b      	ldr	r3, [pc, #108]	; (8009f10 <_dtoa_r+0x630>)
 8009ea4:	4650      	mov	r0, sl
 8009ea6:	4659      	mov	r1, fp
 8009ea8:	f7f6 fa18 	bl	80002dc <__adddf3>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	f7f6 fe58 	bl	8000b68 <__aeabi_dcmpgt>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d173      	bne.n	8009fa4 <_dtoa_r+0x6c4>
 8009ebc:	4652      	mov	r2, sl
 8009ebe:	465b      	mov	r3, fp
 8009ec0:	4913      	ldr	r1, [pc, #76]	; (8009f10 <_dtoa_r+0x630>)
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	f7f6 fa08 	bl	80002d8 <__aeabi_dsub>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4640      	mov	r0, r8
 8009ece:	4649      	mov	r1, r9
 8009ed0:	f7f6 fe2c 	bl	8000b2c <__aeabi_dcmplt>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f43f af35 	beq.w	8009d44 <_dtoa_r+0x464>
 8009eda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009edc:	1e6b      	subs	r3, r5, #1
 8009ede:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ee0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ee4:	2b30      	cmp	r3, #48	; 0x30
 8009ee6:	d0f8      	beq.n	8009eda <_dtoa_r+0x5fa>
 8009ee8:	9700      	str	r7, [sp, #0]
 8009eea:	e049      	b.n	8009f80 <_dtoa_r+0x6a0>
 8009eec:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <_dtoa_r+0x624>)
 8009eee:	f7f6 fbab 	bl	8000648 <__aeabi_dmul>
 8009ef2:	4680      	mov	r8, r0
 8009ef4:	4689      	mov	r9, r1
 8009ef6:	e7bd      	b.n	8009e74 <_dtoa_r+0x594>
 8009ef8:	0800bbe8 	.word	0x0800bbe8
 8009efc:	0800bbc0 	.word	0x0800bbc0
 8009f00:	3ff00000 	.word	0x3ff00000
 8009f04:	40240000 	.word	0x40240000
 8009f08:	401c0000 	.word	0x401c0000
 8009f0c:	40140000 	.word	0x40140000
 8009f10:	3fe00000 	.word	0x3fe00000
 8009f14:	9d01      	ldr	r5, [sp, #4]
 8009f16:	4656      	mov	r6, sl
 8009f18:	465f      	mov	r7, fp
 8009f1a:	4642      	mov	r2, r8
 8009f1c:	464b      	mov	r3, r9
 8009f1e:	4630      	mov	r0, r6
 8009f20:	4639      	mov	r1, r7
 8009f22:	f7f6 fcbb 	bl	800089c <__aeabi_ddiv>
 8009f26:	f7f6 fe3f 	bl	8000ba8 <__aeabi_d2iz>
 8009f2a:	4682      	mov	sl, r0
 8009f2c:	f7f6 fb22 	bl	8000574 <__aeabi_i2d>
 8009f30:	4642      	mov	r2, r8
 8009f32:	464b      	mov	r3, r9
 8009f34:	f7f6 fb88 	bl	8000648 <__aeabi_dmul>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	4639      	mov	r1, r7
 8009f40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009f44:	f7f6 f9c8 	bl	80002d8 <__aeabi_dsub>
 8009f48:	f805 6b01 	strb.w	r6, [r5], #1
 8009f4c:	9e01      	ldr	r6, [sp, #4]
 8009f4e:	9f03      	ldr	r7, [sp, #12]
 8009f50:	1bae      	subs	r6, r5, r6
 8009f52:	42b7      	cmp	r7, r6
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	d135      	bne.n	8009fc6 <_dtoa_r+0x6e6>
 8009f5a:	f7f6 f9bf 	bl	80002dc <__adddf3>
 8009f5e:	4642      	mov	r2, r8
 8009f60:	464b      	mov	r3, r9
 8009f62:	4606      	mov	r6, r0
 8009f64:	460f      	mov	r7, r1
 8009f66:	f7f6 fdff 	bl	8000b68 <__aeabi_dcmpgt>
 8009f6a:	b9d0      	cbnz	r0, 8009fa2 <_dtoa_r+0x6c2>
 8009f6c:	4642      	mov	r2, r8
 8009f6e:	464b      	mov	r3, r9
 8009f70:	4630      	mov	r0, r6
 8009f72:	4639      	mov	r1, r7
 8009f74:	f7f6 fdd0 	bl	8000b18 <__aeabi_dcmpeq>
 8009f78:	b110      	cbz	r0, 8009f80 <_dtoa_r+0x6a0>
 8009f7a:	f01a 0f01 	tst.w	sl, #1
 8009f7e:	d110      	bne.n	8009fa2 <_dtoa_r+0x6c2>
 8009f80:	4620      	mov	r0, r4
 8009f82:	ee18 1a10 	vmov	r1, s16
 8009f86:	f000 fd13 	bl	800a9b0 <_Bfree>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	9800      	ldr	r0, [sp, #0]
 8009f8e:	702b      	strb	r3, [r5, #0]
 8009f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f92:	3001      	adds	r0, #1
 8009f94:	6018      	str	r0, [r3, #0]
 8009f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f43f acf1 	beq.w	8009980 <_dtoa_r+0xa0>
 8009f9e:	601d      	str	r5, [r3, #0]
 8009fa0:	e4ee      	b.n	8009980 <_dtoa_r+0xa0>
 8009fa2:	9f00      	ldr	r7, [sp, #0]
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	461d      	mov	r5, r3
 8009fa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fac:	2a39      	cmp	r2, #57	; 0x39
 8009fae:	d106      	bne.n	8009fbe <_dtoa_r+0x6de>
 8009fb0:	9a01      	ldr	r2, [sp, #4]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d1f7      	bne.n	8009fa6 <_dtoa_r+0x6c6>
 8009fb6:	9901      	ldr	r1, [sp, #4]
 8009fb8:	2230      	movs	r2, #48	; 0x30
 8009fba:	3701      	adds	r7, #1
 8009fbc:	700a      	strb	r2, [r1, #0]
 8009fbe:	781a      	ldrb	r2, [r3, #0]
 8009fc0:	3201      	adds	r2, #1
 8009fc2:	701a      	strb	r2, [r3, #0]
 8009fc4:	e790      	b.n	8009ee8 <_dtoa_r+0x608>
 8009fc6:	4ba6      	ldr	r3, [pc, #664]	; (800a260 <_dtoa_r+0x980>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f7f6 fb3d 	bl	8000648 <__aeabi_dmul>
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	460f      	mov	r7, r1
 8009fd6:	f7f6 fd9f 	bl	8000b18 <__aeabi_dcmpeq>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d09d      	beq.n	8009f1a <_dtoa_r+0x63a>
 8009fde:	e7cf      	b.n	8009f80 <_dtoa_r+0x6a0>
 8009fe0:	9a08      	ldr	r2, [sp, #32]
 8009fe2:	2a00      	cmp	r2, #0
 8009fe4:	f000 80d7 	beq.w	800a196 <_dtoa_r+0x8b6>
 8009fe8:	9a06      	ldr	r2, [sp, #24]
 8009fea:	2a01      	cmp	r2, #1
 8009fec:	f300 80ba 	bgt.w	800a164 <_dtoa_r+0x884>
 8009ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ff2:	2a00      	cmp	r2, #0
 8009ff4:	f000 80b2 	beq.w	800a15c <_dtoa_r+0x87c>
 8009ff8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ffc:	9e07      	ldr	r6, [sp, #28]
 8009ffe:	9d04      	ldr	r5, [sp, #16]
 800a000:	9a04      	ldr	r2, [sp, #16]
 800a002:	441a      	add	r2, r3
 800a004:	9204      	str	r2, [sp, #16]
 800a006:	9a05      	ldr	r2, [sp, #20]
 800a008:	2101      	movs	r1, #1
 800a00a:	441a      	add	r2, r3
 800a00c:	4620      	mov	r0, r4
 800a00e:	9205      	str	r2, [sp, #20]
 800a010:	f000 fd86 	bl	800ab20 <__i2b>
 800a014:	4607      	mov	r7, r0
 800a016:	2d00      	cmp	r5, #0
 800a018:	dd0c      	ble.n	800a034 <_dtoa_r+0x754>
 800a01a:	9b05      	ldr	r3, [sp, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	dd09      	ble.n	800a034 <_dtoa_r+0x754>
 800a020:	42ab      	cmp	r3, r5
 800a022:	9a04      	ldr	r2, [sp, #16]
 800a024:	bfa8      	it	ge
 800a026:	462b      	movge	r3, r5
 800a028:	1ad2      	subs	r2, r2, r3
 800a02a:	9204      	str	r2, [sp, #16]
 800a02c:	9a05      	ldr	r2, [sp, #20]
 800a02e:	1aed      	subs	r5, r5, r3
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	9305      	str	r3, [sp, #20]
 800a034:	9b07      	ldr	r3, [sp, #28]
 800a036:	b31b      	cbz	r3, 800a080 <_dtoa_r+0x7a0>
 800a038:	9b08      	ldr	r3, [sp, #32]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 80af 	beq.w	800a19e <_dtoa_r+0x8be>
 800a040:	2e00      	cmp	r6, #0
 800a042:	dd13      	ble.n	800a06c <_dtoa_r+0x78c>
 800a044:	4639      	mov	r1, r7
 800a046:	4632      	mov	r2, r6
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fe29 	bl	800aca0 <__pow5mult>
 800a04e:	ee18 2a10 	vmov	r2, s16
 800a052:	4601      	mov	r1, r0
 800a054:	4607      	mov	r7, r0
 800a056:	4620      	mov	r0, r4
 800a058:	f000 fd78 	bl	800ab4c <__multiply>
 800a05c:	ee18 1a10 	vmov	r1, s16
 800a060:	4680      	mov	r8, r0
 800a062:	4620      	mov	r0, r4
 800a064:	f000 fca4 	bl	800a9b0 <_Bfree>
 800a068:	ee08 8a10 	vmov	s16, r8
 800a06c:	9b07      	ldr	r3, [sp, #28]
 800a06e:	1b9a      	subs	r2, r3, r6
 800a070:	d006      	beq.n	800a080 <_dtoa_r+0x7a0>
 800a072:	ee18 1a10 	vmov	r1, s16
 800a076:	4620      	mov	r0, r4
 800a078:	f000 fe12 	bl	800aca0 <__pow5mult>
 800a07c:	ee08 0a10 	vmov	s16, r0
 800a080:	2101      	movs	r1, #1
 800a082:	4620      	mov	r0, r4
 800a084:	f000 fd4c 	bl	800ab20 <__i2b>
 800a088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	4606      	mov	r6, r0
 800a08e:	f340 8088 	ble.w	800a1a2 <_dtoa_r+0x8c2>
 800a092:	461a      	mov	r2, r3
 800a094:	4601      	mov	r1, r0
 800a096:	4620      	mov	r0, r4
 800a098:	f000 fe02 	bl	800aca0 <__pow5mult>
 800a09c:	9b06      	ldr	r3, [sp, #24]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	f340 8081 	ble.w	800a1a8 <_dtoa_r+0x8c8>
 800a0a6:	f04f 0800 	mov.w	r8, #0
 800a0aa:	6933      	ldr	r3, [r6, #16]
 800a0ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a0b0:	6918      	ldr	r0, [r3, #16]
 800a0b2:	f000 fce5 	bl	800aa80 <__hi0bits>
 800a0b6:	f1c0 0020 	rsb	r0, r0, #32
 800a0ba:	9b05      	ldr	r3, [sp, #20]
 800a0bc:	4418      	add	r0, r3
 800a0be:	f010 001f 	ands.w	r0, r0, #31
 800a0c2:	f000 8092 	beq.w	800a1ea <_dtoa_r+0x90a>
 800a0c6:	f1c0 0320 	rsb	r3, r0, #32
 800a0ca:	2b04      	cmp	r3, #4
 800a0cc:	f340 808a 	ble.w	800a1e4 <_dtoa_r+0x904>
 800a0d0:	f1c0 001c 	rsb	r0, r0, #28
 800a0d4:	9b04      	ldr	r3, [sp, #16]
 800a0d6:	4403      	add	r3, r0
 800a0d8:	9304      	str	r3, [sp, #16]
 800a0da:	9b05      	ldr	r3, [sp, #20]
 800a0dc:	4403      	add	r3, r0
 800a0de:	4405      	add	r5, r0
 800a0e0:	9305      	str	r3, [sp, #20]
 800a0e2:	9b04      	ldr	r3, [sp, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dd07      	ble.n	800a0f8 <_dtoa_r+0x818>
 800a0e8:	ee18 1a10 	vmov	r1, s16
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 fe30 	bl	800ad54 <__lshift>
 800a0f4:	ee08 0a10 	vmov	s16, r0
 800a0f8:	9b05      	ldr	r3, [sp, #20]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	dd05      	ble.n	800a10a <_dtoa_r+0x82a>
 800a0fe:	4631      	mov	r1, r6
 800a100:	461a      	mov	r2, r3
 800a102:	4620      	mov	r0, r4
 800a104:	f000 fe26 	bl	800ad54 <__lshift>
 800a108:	4606      	mov	r6, r0
 800a10a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d06e      	beq.n	800a1ee <_dtoa_r+0x90e>
 800a110:	ee18 0a10 	vmov	r0, s16
 800a114:	4631      	mov	r1, r6
 800a116:	f000 fe8d 	bl	800ae34 <__mcmp>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	da67      	bge.n	800a1ee <_dtoa_r+0x90e>
 800a11e:	9b00      	ldr	r3, [sp, #0]
 800a120:	3b01      	subs	r3, #1
 800a122:	ee18 1a10 	vmov	r1, s16
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	220a      	movs	r2, #10
 800a12a:	2300      	movs	r3, #0
 800a12c:	4620      	mov	r0, r4
 800a12e:	f000 fc61 	bl	800a9f4 <__multadd>
 800a132:	9b08      	ldr	r3, [sp, #32]
 800a134:	ee08 0a10 	vmov	s16, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 81b1 	beq.w	800a4a0 <_dtoa_r+0xbc0>
 800a13e:	2300      	movs	r3, #0
 800a140:	4639      	mov	r1, r7
 800a142:	220a      	movs	r2, #10
 800a144:	4620      	mov	r0, r4
 800a146:	f000 fc55 	bl	800a9f4 <__multadd>
 800a14a:	9b02      	ldr	r3, [sp, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	4607      	mov	r7, r0
 800a150:	f300 808e 	bgt.w	800a270 <_dtoa_r+0x990>
 800a154:	9b06      	ldr	r3, [sp, #24]
 800a156:	2b02      	cmp	r3, #2
 800a158:	dc51      	bgt.n	800a1fe <_dtoa_r+0x91e>
 800a15a:	e089      	b.n	800a270 <_dtoa_r+0x990>
 800a15c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a15e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a162:	e74b      	b.n	8009ffc <_dtoa_r+0x71c>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	1e5e      	subs	r6, r3, #1
 800a168:	9b07      	ldr	r3, [sp, #28]
 800a16a:	42b3      	cmp	r3, r6
 800a16c:	bfbf      	itttt	lt
 800a16e:	9b07      	ldrlt	r3, [sp, #28]
 800a170:	9607      	strlt	r6, [sp, #28]
 800a172:	1af2      	sublt	r2, r6, r3
 800a174:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a176:	bfb6      	itet	lt
 800a178:	189b      	addlt	r3, r3, r2
 800a17a:	1b9e      	subge	r6, r3, r6
 800a17c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	bfb8      	it	lt
 800a182:	2600      	movlt	r6, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	bfb7      	itett	lt
 800a188:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a18c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a190:	1a9d      	sublt	r5, r3, r2
 800a192:	2300      	movlt	r3, #0
 800a194:	e734      	b.n	800a000 <_dtoa_r+0x720>
 800a196:	9e07      	ldr	r6, [sp, #28]
 800a198:	9d04      	ldr	r5, [sp, #16]
 800a19a:	9f08      	ldr	r7, [sp, #32]
 800a19c:	e73b      	b.n	800a016 <_dtoa_r+0x736>
 800a19e:	9a07      	ldr	r2, [sp, #28]
 800a1a0:	e767      	b.n	800a072 <_dtoa_r+0x792>
 800a1a2:	9b06      	ldr	r3, [sp, #24]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	dc18      	bgt.n	800a1da <_dtoa_r+0x8fa>
 800a1a8:	f1ba 0f00 	cmp.w	sl, #0
 800a1ac:	d115      	bne.n	800a1da <_dtoa_r+0x8fa>
 800a1ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1b2:	b993      	cbnz	r3, 800a1da <_dtoa_r+0x8fa>
 800a1b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1b8:	0d1b      	lsrs	r3, r3, #20
 800a1ba:	051b      	lsls	r3, r3, #20
 800a1bc:	b183      	cbz	r3, 800a1e0 <_dtoa_r+0x900>
 800a1be:	9b04      	ldr	r3, [sp, #16]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	9304      	str	r3, [sp, #16]
 800a1c4:	9b05      	ldr	r3, [sp, #20]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	9305      	str	r3, [sp, #20]
 800a1ca:	f04f 0801 	mov.w	r8, #1
 800a1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f47f af6a 	bne.w	800a0aa <_dtoa_r+0x7ca>
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	e76f      	b.n	800a0ba <_dtoa_r+0x7da>
 800a1da:	f04f 0800 	mov.w	r8, #0
 800a1de:	e7f6      	b.n	800a1ce <_dtoa_r+0x8ee>
 800a1e0:	4698      	mov	r8, r3
 800a1e2:	e7f4      	b.n	800a1ce <_dtoa_r+0x8ee>
 800a1e4:	f43f af7d 	beq.w	800a0e2 <_dtoa_r+0x802>
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	301c      	adds	r0, #28
 800a1ec:	e772      	b.n	800a0d4 <_dtoa_r+0x7f4>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	dc37      	bgt.n	800a264 <_dtoa_r+0x984>
 800a1f4:	9b06      	ldr	r3, [sp, #24]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	dd34      	ble.n	800a264 <_dtoa_r+0x984>
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	9302      	str	r3, [sp, #8]
 800a1fe:	9b02      	ldr	r3, [sp, #8]
 800a200:	b96b      	cbnz	r3, 800a21e <_dtoa_r+0x93e>
 800a202:	4631      	mov	r1, r6
 800a204:	2205      	movs	r2, #5
 800a206:	4620      	mov	r0, r4
 800a208:	f000 fbf4 	bl	800a9f4 <__multadd>
 800a20c:	4601      	mov	r1, r0
 800a20e:	4606      	mov	r6, r0
 800a210:	ee18 0a10 	vmov	r0, s16
 800a214:	f000 fe0e 	bl	800ae34 <__mcmp>
 800a218:	2800      	cmp	r0, #0
 800a21a:	f73f adbb 	bgt.w	8009d94 <_dtoa_r+0x4b4>
 800a21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a220:	9d01      	ldr	r5, [sp, #4]
 800a222:	43db      	mvns	r3, r3
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	f04f 0800 	mov.w	r8, #0
 800a22a:	4631      	mov	r1, r6
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 fbbf 	bl	800a9b0 <_Bfree>
 800a232:	2f00      	cmp	r7, #0
 800a234:	f43f aea4 	beq.w	8009f80 <_dtoa_r+0x6a0>
 800a238:	f1b8 0f00 	cmp.w	r8, #0
 800a23c:	d005      	beq.n	800a24a <_dtoa_r+0x96a>
 800a23e:	45b8      	cmp	r8, r7
 800a240:	d003      	beq.n	800a24a <_dtoa_r+0x96a>
 800a242:	4641      	mov	r1, r8
 800a244:	4620      	mov	r0, r4
 800a246:	f000 fbb3 	bl	800a9b0 <_Bfree>
 800a24a:	4639      	mov	r1, r7
 800a24c:	4620      	mov	r0, r4
 800a24e:	f000 fbaf 	bl	800a9b0 <_Bfree>
 800a252:	e695      	b.n	8009f80 <_dtoa_r+0x6a0>
 800a254:	2600      	movs	r6, #0
 800a256:	4637      	mov	r7, r6
 800a258:	e7e1      	b.n	800a21e <_dtoa_r+0x93e>
 800a25a:	9700      	str	r7, [sp, #0]
 800a25c:	4637      	mov	r7, r6
 800a25e:	e599      	b.n	8009d94 <_dtoa_r+0x4b4>
 800a260:	40240000 	.word	0x40240000
 800a264:	9b08      	ldr	r3, [sp, #32]
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 80ca 	beq.w	800a400 <_dtoa_r+0xb20>
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	9302      	str	r3, [sp, #8]
 800a270:	2d00      	cmp	r5, #0
 800a272:	dd05      	ble.n	800a280 <_dtoa_r+0x9a0>
 800a274:	4639      	mov	r1, r7
 800a276:	462a      	mov	r2, r5
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 fd6b 	bl	800ad54 <__lshift>
 800a27e:	4607      	mov	r7, r0
 800a280:	f1b8 0f00 	cmp.w	r8, #0
 800a284:	d05b      	beq.n	800a33e <_dtoa_r+0xa5e>
 800a286:	6879      	ldr	r1, [r7, #4]
 800a288:	4620      	mov	r0, r4
 800a28a:	f000 fb51 	bl	800a930 <_Balloc>
 800a28e:	4605      	mov	r5, r0
 800a290:	b928      	cbnz	r0, 800a29e <_dtoa_r+0x9be>
 800a292:	4b87      	ldr	r3, [pc, #540]	; (800a4b0 <_dtoa_r+0xbd0>)
 800a294:	4602      	mov	r2, r0
 800a296:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a29a:	f7ff bb3b 	b.w	8009914 <_dtoa_r+0x34>
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	3202      	adds	r2, #2
 800a2a2:	0092      	lsls	r2, r2, #2
 800a2a4:	f107 010c 	add.w	r1, r7, #12
 800a2a8:	300c      	adds	r0, #12
 800a2aa:	f000 fb33 	bl	800a914 <memcpy>
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 fd4e 	bl	800ad54 <__lshift>
 800a2b8:	9b01      	ldr	r3, [sp, #4]
 800a2ba:	f103 0901 	add.w	r9, r3, #1
 800a2be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	9305      	str	r3, [sp, #20]
 800a2c6:	f00a 0301 	and.w	r3, sl, #1
 800a2ca:	46b8      	mov	r8, r7
 800a2cc:	9304      	str	r3, [sp, #16]
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	ee18 0a10 	vmov	r0, s16
 800a2d6:	f7ff fa75 	bl	80097c4 <quorem>
 800a2da:	4641      	mov	r1, r8
 800a2dc:	9002      	str	r0, [sp, #8]
 800a2de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a2e2:	ee18 0a10 	vmov	r0, s16
 800a2e6:	f000 fda5 	bl	800ae34 <__mcmp>
 800a2ea:	463a      	mov	r2, r7
 800a2ec:	9003      	str	r0, [sp, #12]
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 fdbb 	bl	800ae6c <__mdiff>
 800a2f6:	68c2      	ldr	r2, [r0, #12]
 800a2f8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	bb02      	cbnz	r2, 800a342 <_dtoa_r+0xa62>
 800a300:	4601      	mov	r1, r0
 800a302:	ee18 0a10 	vmov	r0, s16
 800a306:	f000 fd95 	bl	800ae34 <__mcmp>
 800a30a:	4602      	mov	r2, r0
 800a30c:	4629      	mov	r1, r5
 800a30e:	4620      	mov	r0, r4
 800a310:	9207      	str	r2, [sp, #28]
 800a312:	f000 fb4d 	bl	800a9b0 <_Bfree>
 800a316:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a31a:	ea43 0102 	orr.w	r1, r3, r2
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	430b      	orrs	r3, r1
 800a322:	464d      	mov	r5, r9
 800a324:	d10f      	bne.n	800a346 <_dtoa_r+0xa66>
 800a326:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a32a:	d02a      	beq.n	800a382 <_dtoa_r+0xaa2>
 800a32c:	9b03      	ldr	r3, [sp, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	dd02      	ble.n	800a338 <_dtoa_r+0xa58>
 800a332:	9b02      	ldr	r3, [sp, #8]
 800a334:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a338:	f88b a000 	strb.w	sl, [fp]
 800a33c:	e775      	b.n	800a22a <_dtoa_r+0x94a>
 800a33e:	4638      	mov	r0, r7
 800a340:	e7ba      	b.n	800a2b8 <_dtoa_r+0x9d8>
 800a342:	2201      	movs	r2, #1
 800a344:	e7e2      	b.n	800a30c <_dtoa_r+0xa2c>
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	db04      	blt.n	800a356 <_dtoa_r+0xa76>
 800a34c:	9906      	ldr	r1, [sp, #24]
 800a34e:	430b      	orrs	r3, r1
 800a350:	9904      	ldr	r1, [sp, #16]
 800a352:	430b      	orrs	r3, r1
 800a354:	d122      	bne.n	800a39c <_dtoa_r+0xabc>
 800a356:	2a00      	cmp	r2, #0
 800a358:	ddee      	ble.n	800a338 <_dtoa_r+0xa58>
 800a35a:	ee18 1a10 	vmov	r1, s16
 800a35e:	2201      	movs	r2, #1
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fcf7 	bl	800ad54 <__lshift>
 800a366:	4631      	mov	r1, r6
 800a368:	ee08 0a10 	vmov	s16, r0
 800a36c:	f000 fd62 	bl	800ae34 <__mcmp>
 800a370:	2800      	cmp	r0, #0
 800a372:	dc03      	bgt.n	800a37c <_dtoa_r+0xa9c>
 800a374:	d1e0      	bne.n	800a338 <_dtoa_r+0xa58>
 800a376:	f01a 0f01 	tst.w	sl, #1
 800a37a:	d0dd      	beq.n	800a338 <_dtoa_r+0xa58>
 800a37c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a380:	d1d7      	bne.n	800a332 <_dtoa_r+0xa52>
 800a382:	2339      	movs	r3, #57	; 0x39
 800a384:	f88b 3000 	strb.w	r3, [fp]
 800a388:	462b      	mov	r3, r5
 800a38a:	461d      	mov	r5, r3
 800a38c:	3b01      	subs	r3, #1
 800a38e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a392:	2a39      	cmp	r2, #57	; 0x39
 800a394:	d071      	beq.n	800a47a <_dtoa_r+0xb9a>
 800a396:	3201      	adds	r2, #1
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	e746      	b.n	800a22a <_dtoa_r+0x94a>
 800a39c:	2a00      	cmp	r2, #0
 800a39e:	dd07      	ble.n	800a3b0 <_dtoa_r+0xad0>
 800a3a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3a4:	d0ed      	beq.n	800a382 <_dtoa_r+0xaa2>
 800a3a6:	f10a 0301 	add.w	r3, sl, #1
 800a3aa:	f88b 3000 	strb.w	r3, [fp]
 800a3ae:	e73c      	b.n	800a22a <_dtoa_r+0x94a>
 800a3b0:	9b05      	ldr	r3, [sp, #20]
 800a3b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a3b6:	4599      	cmp	r9, r3
 800a3b8:	d047      	beq.n	800a44a <_dtoa_r+0xb6a>
 800a3ba:	ee18 1a10 	vmov	r1, s16
 800a3be:	2300      	movs	r3, #0
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f000 fb16 	bl	800a9f4 <__multadd>
 800a3c8:	45b8      	cmp	r8, r7
 800a3ca:	ee08 0a10 	vmov	s16, r0
 800a3ce:	f04f 0300 	mov.w	r3, #0
 800a3d2:	f04f 020a 	mov.w	r2, #10
 800a3d6:	4641      	mov	r1, r8
 800a3d8:	4620      	mov	r0, r4
 800a3da:	d106      	bne.n	800a3ea <_dtoa_r+0xb0a>
 800a3dc:	f000 fb0a 	bl	800a9f4 <__multadd>
 800a3e0:	4680      	mov	r8, r0
 800a3e2:	4607      	mov	r7, r0
 800a3e4:	f109 0901 	add.w	r9, r9, #1
 800a3e8:	e772      	b.n	800a2d0 <_dtoa_r+0x9f0>
 800a3ea:	f000 fb03 	bl	800a9f4 <__multadd>
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	4680      	mov	r8, r0
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	220a      	movs	r2, #10
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f000 fafc 	bl	800a9f4 <__multadd>
 800a3fc:	4607      	mov	r7, r0
 800a3fe:	e7f1      	b.n	800a3e4 <_dtoa_r+0xb04>
 800a400:	9b03      	ldr	r3, [sp, #12]
 800a402:	9302      	str	r3, [sp, #8]
 800a404:	9d01      	ldr	r5, [sp, #4]
 800a406:	ee18 0a10 	vmov	r0, s16
 800a40a:	4631      	mov	r1, r6
 800a40c:	f7ff f9da 	bl	80097c4 <quorem>
 800a410:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	f805 ab01 	strb.w	sl, [r5], #1
 800a41a:	1aea      	subs	r2, r5, r3
 800a41c:	9b02      	ldr	r3, [sp, #8]
 800a41e:	4293      	cmp	r3, r2
 800a420:	dd09      	ble.n	800a436 <_dtoa_r+0xb56>
 800a422:	ee18 1a10 	vmov	r1, s16
 800a426:	2300      	movs	r3, #0
 800a428:	220a      	movs	r2, #10
 800a42a:	4620      	mov	r0, r4
 800a42c:	f000 fae2 	bl	800a9f4 <__multadd>
 800a430:	ee08 0a10 	vmov	s16, r0
 800a434:	e7e7      	b.n	800a406 <_dtoa_r+0xb26>
 800a436:	9b02      	ldr	r3, [sp, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	bfc8      	it	gt
 800a43c:	461d      	movgt	r5, r3
 800a43e:	9b01      	ldr	r3, [sp, #4]
 800a440:	bfd8      	it	le
 800a442:	2501      	movle	r5, #1
 800a444:	441d      	add	r5, r3
 800a446:	f04f 0800 	mov.w	r8, #0
 800a44a:	ee18 1a10 	vmov	r1, s16
 800a44e:	2201      	movs	r2, #1
 800a450:	4620      	mov	r0, r4
 800a452:	f000 fc7f 	bl	800ad54 <__lshift>
 800a456:	4631      	mov	r1, r6
 800a458:	ee08 0a10 	vmov	s16, r0
 800a45c:	f000 fcea 	bl	800ae34 <__mcmp>
 800a460:	2800      	cmp	r0, #0
 800a462:	dc91      	bgt.n	800a388 <_dtoa_r+0xaa8>
 800a464:	d102      	bne.n	800a46c <_dtoa_r+0xb8c>
 800a466:	f01a 0f01 	tst.w	sl, #1
 800a46a:	d18d      	bne.n	800a388 <_dtoa_r+0xaa8>
 800a46c:	462b      	mov	r3, r5
 800a46e:	461d      	mov	r5, r3
 800a470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a474:	2a30      	cmp	r2, #48	; 0x30
 800a476:	d0fa      	beq.n	800a46e <_dtoa_r+0xb8e>
 800a478:	e6d7      	b.n	800a22a <_dtoa_r+0x94a>
 800a47a:	9a01      	ldr	r2, [sp, #4]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d184      	bne.n	800a38a <_dtoa_r+0xaaa>
 800a480:	9b00      	ldr	r3, [sp, #0]
 800a482:	3301      	adds	r3, #1
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	2331      	movs	r3, #49	; 0x31
 800a488:	7013      	strb	r3, [r2, #0]
 800a48a:	e6ce      	b.n	800a22a <_dtoa_r+0x94a>
 800a48c:	4b09      	ldr	r3, [pc, #36]	; (800a4b4 <_dtoa_r+0xbd4>)
 800a48e:	f7ff ba95 	b.w	80099bc <_dtoa_r+0xdc>
 800a492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a494:	2b00      	cmp	r3, #0
 800a496:	f47f aa6e 	bne.w	8009976 <_dtoa_r+0x96>
 800a49a:	4b07      	ldr	r3, [pc, #28]	; (800a4b8 <_dtoa_r+0xbd8>)
 800a49c:	f7ff ba8e 	b.w	80099bc <_dtoa_r+0xdc>
 800a4a0:	9b02      	ldr	r3, [sp, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dcae      	bgt.n	800a404 <_dtoa_r+0xb24>
 800a4a6:	9b06      	ldr	r3, [sp, #24]
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	f73f aea8 	bgt.w	800a1fe <_dtoa_r+0x91e>
 800a4ae:	e7a9      	b.n	800a404 <_dtoa_r+0xb24>
 800a4b0:	0800baef 	.word	0x0800baef
 800a4b4:	0800ba4c 	.word	0x0800ba4c
 800a4b8:	0800ba70 	.word	0x0800ba70

0800a4bc <__sflush_r>:
 800a4bc:	898a      	ldrh	r2, [r1, #12]
 800a4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	0710      	lsls	r0, r2, #28
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	d458      	bmi.n	800a57c <__sflush_r+0xc0>
 800a4ca:	684b      	ldr	r3, [r1, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	dc05      	bgt.n	800a4dc <__sflush_r+0x20>
 800a4d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	dc02      	bgt.n	800a4dc <__sflush_r+0x20>
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4de:	2e00      	cmp	r6, #0
 800a4e0:	d0f9      	beq.n	800a4d6 <__sflush_r+0x1a>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4e8:	682f      	ldr	r7, [r5, #0]
 800a4ea:	602b      	str	r3, [r5, #0]
 800a4ec:	d032      	beq.n	800a554 <__sflush_r+0x98>
 800a4ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4f0:	89a3      	ldrh	r3, [r4, #12]
 800a4f2:	075a      	lsls	r2, r3, #29
 800a4f4:	d505      	bpl.n	800a502 <__sflush_r+0x46>
 800a4f6:	6863      	ldr	r3, [r4, #4]
 800a4f8:	1ac0      	subs	r0, r0, r3
 800a4fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4fc:	b10b      	cbz	r3, 800a502 <__sflush_r+0x46>
 800a4fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a500:	1ac0      	subs	r0, r0, r3
 800a502:	2300      	movs	r3, #0
 800a504:	4602      	mov	r2, r0
 800a506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a508:	6a21      	ldr	r1, [r4, #32]
 800a50a:	4628      	mov	r0, r5
 800a50c:	47b0      	blx	r6
 800a50e:	1c43      	adds	r3, r0, #1
 800a510:	89a3      	ldrh	r3, [r4, #12]
 800a512:	d106      	bne.n	800a522 <__sflush_r+0x66>
 800a514:	6829      	ldr	r1, [r5, #0]
 800a516:	291d      	cmp	r1, #29
 800a518:	d82c      	bhi.n	800a574 <__sflush_r+0xb8>
 800a51a:	4a2a      	ldr	r2, [pc, #168]	; (800a5c4 <__sflush_r+0x108>)
 800a51c:	40ca      	lsrs	r2, r1
 800a51e:	07d6      	lsls	r6, r2, #31
 800a520:	d528      	bpl.n	800a574 <__sflush_r+0xb8>
 800a522:	2200      	movs	r2, #0
 800a524:	6062      	str	r2, [r4, #4]
 800a526:	04d9      	lsls	r1, r3, #19
 800a528:	6922      	ldr	r2, [r4, #16]
 800a52a:	6022      	str	r2, [r4, #0]
 800a52c:	d504      	bpl.n	800a538 <__sflush_r+0x7c>
 800a52e:	1c42      	adds	r2, r0, #1
 800a530:	d101      	bne.n	800a536 <__sflush_r+0x7a>
 800a532:	682b      	ldr	r3, [r5, #0]
 800a534:	b903      	cbnz	r3, 800a538 <__sflush_r+0x7c>
 800a536:	6560      	str	r0, [r4, #84]	; 0x54
 800a538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a53a:	602f      	str	r7, [r5, #0]
 800a53c:	2900      	cmp	r1, #0
 800a53e:	d0ca      	beq.n	800a4d6 <__sflush_r+0x1a>
 800a540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a544:	4299      	cmp	r1, r3
 800a546:	d002      	beq.n	800a54e <__sflush_r+0x92>
 800a548:	4628      	mov	r0, r5
 800a54a:	f000 fd8b 	bl	800b064 <_free_r>
 800a54e:	2000      	movs	r0, #0
 800a550:	6360      	str	r0, [r4, #52]	; 0x34
 800a552:	e7c1      	b.n	800a4d8 <__sflush_r+0x1c>
 800a554:	6a21      	ldr	r1, [r4, #32]
 800a556:	2301      	movs	r3, #1
 800a558:	4628      	mov	r0, r5
 800a55a:	47b0      	blx	r6
 800a55c:	1c41      	adds	r1, r0, #1
 800a55e:	d1c7      	bne.n	800a4f0 <__sflush_r+0x34>
 800a560:	682b      	ldr	r3, [r5, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0c4      	beq.n	800a4f0 <__sflush_r+0x34>
 800a566:	2b1d      	cmp	r3, #29
 800a568:	d001      	beq.n	800a56e <__sflush_r+0xb2>
 800a56a:	2b16      	cmp	r3, #22
 800a56c:	d101      	bne.n	800a572 <__sflush_r+0xb6>
 800a56e:	602f      	str	r7, [r5, #0]
 800a570:	e7b1      	b.n	800a4d6 <__sflush_r+0x1a>
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a578:	81a3      	strh	r3, [r4, #12]
 800a57a:	e7ad      	b.n	800a4d8 <__sflush_r+0x1c>
 800a57c:	690f      	ldr	r7, [r1, #16]
 800a57e:	2f00      	cmp	r7, #0
 800a580:	d0a9      	beq.n	800a4d6 <__sflush_r+0x1a>
 800a582:	0793      	lsls	r3, r2, #30
 800a584:	680e      	ldr	r6, [r1, #0]
 800a586:	bf08      	it	eq
 800a588:	694b      	ldreq	r3, [r1, #20]
 800a58a:	600f      	str	r7, [r1, #0]
 800a58c:	bf18      	it	ne
 800a58e:	2300      	movne	r3, #0
 800a590:	eba6 0807 	sub.w	r8, r6, r7
 800a594:	608b      	str	r3, [r1, #8]
 800a596:	f1b8 0f00 	cmp.w	r8, #0
 800a59a:	dd9c      	ble.n	800a4d6 <__sflush_r+0x1a>
 800a59c:	6a21      	ldr	r1, [r4, #32]
 800a59e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5a0:	4643      	mov	r3, r8
 800a5a2:	463a      	mov	r2, r7
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	47b0      	blx	r6
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	dc06      	bgt.n	800a5ba <__sflush_r+0xfe>
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5b2:	81a3      	strh	r3, [r4, #12]
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b8:	e78e      	b.n	800a4d8 <__sflush_r+0x1c>
 800a5ba:	4407      	add	r7, r0
 800a5bc:	eba8 0800 	sub.w	r8, r8, r0
 800a5c0:	e7e9      	b.n	800a596 <__sflush_r+0xda>
 800a5c2:	bf00      	nop
 800a5c4:	20400001 	.word	0x20400001

0800a5c8 <_fflush_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	690b      	ldr	r3, [r1, #16]
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	460c      	mov	r4, r1
 800a5d0:	b913      	cbnz	r3, 800a5d8 <_fflush_r+0x10>
 800a5d2:	2500      	movs	r5, #0
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
 800a5d8:	b118      	cbz	r0, 800a5e2 <_fflush_r+0x1a>
 800a5da:	6983      	ldr	r3, [r0, #24]
 800a5dc:	b90b      	cbnz	r3, 800a5e2 <_fflush_r+0x1a>
 800a5de:	f000 f887 	bl	800a6f0 <__sinit>
 800a5e2:	4b14      	ldr	r3, [pc, #80]	; (800a634 <_fflush_r+0x6c>)
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	d11b      	bne.n	800a620 <_fflush_r+0x58>
 800a5e8:	686c      	ldr	r4, [r5, #4]
 800a5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0ef      	beq.n	800a5d2 <_fflush_r+0xa>
 800a5f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5f4:	07d0      	lsls	r0, r2, #31
 800a5f6:	d404      	bmi.n	800a602 <_fflush_r+0x3a>
 800a5f8:	0599      	lsls	r1, r3, #22
 800a5fa:	d402      	bmi.n	800a602 <_fflush_r+0x3a>
 800a5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5fe:	f000 f91a 	bl	800a836 <__retarget_lock_acquire_recursive>
 800a602:	4628      	mov	r0, r5
 800a604:	4621      	mov	r1, r4
 800a606:	f7ff ff59 	bl	800a4bc <__sflush_r>
 800a60a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a60c:	07da      	lsls	r2, r3, #31
 800a60e:	4605      	mov	r5, r0
 800a610:	d4e0      	bmi.n	800a5d4 <_fflush_r+0xc>
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	059b      	lsls	r3, r3, #22
 800a616:	d4dd      	bmi.n	800a5d4 <_fflush_r+0xc>
 800a618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a61a:	f000 f90d 	bl	800a838 <__retarget_lock_release_recursive>
 800a61e:	e7d9      	b.n	800a5d4 <_fflush_r+0xc>
 800a620:	4b05      	ldr	r3, [pc, #20]	; (800a638 <_fflush_r+0x70>)
 800a622:	429c      	cmp	r4, r3
 800a624:	d101      	bne.n	800a62a <_fflush_r+0x62>
 800a626:	68ac      	ldr	r4, [r5, #8]
 800a628:	e7df      	b.n	800a5ea <_fflush_r+0x22>
 800a62a:	4b04      	ldr	r3, [pc, #16]	; (800a63c <_fflush_r+0x74>)
 800a62c:	429c      	cmp	r4, r3
 800a62e:	bf08      	it	eq
 800a630:	68ec      	ldreq	r4, [r5, #12]
 800a632:	e7da      	b.n	800a5ea <_fflush_r+0x22>
 800a634:	0800bb20 	.word	0x0800bb20
 800a638:	0800bb40 	.word	0x0800bb40
 800a63c:	0800bb00 	.word	0x0800bb00

0800a640 <std>:
 800a640:	2300      	movs	r3, #0
 800a642:	b510      	push	{r4, lr}
 800a644:	4604      	mov	r4, r0
 800a646:	e9c0 3300 	strd	r3, r3, [r0]
 800a64a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a64e:	6083      	str	r3, [r0, #8]
 800a650:	8181      	strh	r1, [r0, #12]
 800a652:	6643      	str	r3, [r0, #100]	; 0x64
 800a654:	81c2      	strh	r2, [r0, #14]
 800a656:	6183      	str	r3, [r0, #24]
 800a658:	4619      	mov	r1, r3
 800a65a:	2208      	movs	r2, #8
 800a65c:	305c      	adds	r0, #92	; 0x5c
 800a65e:	f7fe faf1 	bl	8008c44 <memset>
 800a662:	4b05      	ldr	r3, [pc, #20]	; (800a678 <std+0x38>)
 800a664:	6263      	str	r3, [r4, #36]	; 0x24
 800a666:	4b05      	ldr	r3, [pc, #20]	; (800a67c <std+0x3c>)
 800a668:	62a3      	str	r3, [r4, #40]	; 0x28
 800a66a:	4b05      	ldr	r3, [pc, #20]	; (800a680 <std+0x40>)
 800a66c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a66e:	4b05      	ldr	r3, [pc, #20]	; (800a684 <std+0x44>)
 800a670:	6224      	str	r4, [r4, #32]
 800a672:	6323      	str	r3, [r4, #48]	; 0x30
 800a674:	bd10      	pop	{r4, pc}
 800a676:	bf00      	nop
 800a678:	0800b4f9 	.word	0x0800b4f9
 800a67c:	0800b51b 	.word	0x0800b51b
 800a680:	0800b553 	.word	0x0800b553
 800a684:	0800b577 	.word	0x0800b577

0800a688 <_cleanup_r>:
 800a688:	4901      	ldr	r1, [pc, #4]	; (800a690 <_cleanup_r+0x8>)
 800a68a:	f000 b8af 	b.w	800a7ec <_fwalk_reent>
 800a68e:	bf00      	nop
 800a690:	0800a5c9 	.word	0x0800a5c9

0800a694 <__sfmoreglue>:
 800a694:	b570      	push	{r4, r5, r6, lr}
 800a696:	2268      	movs	r2, #104	; 0x68
 800a698:	1e4d      	subs	r5, r1, #1
 800a69a:	4355      	muls	r5, r2
 800a69c:	460e      	mov	r6, r1
 800a69e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6a2:	f000 fd4b 	bl	800b13c <_malloc_r>
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	b140      	cbz	r0, 800a6bc <__sfmoreglue+0x28>
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	e9c0 1600 	strd	r1, r6, [r0]
 800a6b0:	300c      	adds	r0, #12
 800a6b2:	60a0      	str	r0, [r4, #8]
 800a6b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6b8:	f7fe fac4 	bl	8008c44 <memset>
 800a6bc:	4620      	mov	r0, r4
 800a6be:	bd70      	pop	{r4, r5, r6, pc}

0800a6c0 <__sfp_lock_acquire>:
 800a6c0:	4801      	ldr	r0, [pc, #4]	; (800a6c8 <__sfp_lock_acquire+0x8>)
 800a6c2:	f000 b8b8 	b.w	800a836 <__retarget_lock_acquire_recursive>
 800a6c6:	bf00      	nop
 800a6c8:	200008ad 	.word	0x200008ad

0800a6cc <__sfp_lock_release>:
 800a6cc:	4801      	ldr	r0, [pc, #4]	; (800a6d4 <__sfp_lock_release+0x8>)
 800a6ce:	f000 b8b3 	b.w	800a838 <__retarget_lock_release_recursive>
 800a6d2:	bf00      	nop
 800a6d4:	200008ad 	.word	0x200008ad

0800a6d8 <__sinit_lock_acquire>:
 800a6d8:	4801      	ldr	r0, [pc, #4]	; (800a6e0 <__sinit_lock_acquire+0x8>)
 800a6da:	f000 b8ac 	b.w	800a836 <__retarget_lock_acquire_recursive>
 800a6de:	bf00      	nop
 800a6e0:	200008ae 	.word	0x200008ae

0800a6e4 <__sinit_lock_release>:
 800a6e4:	4801      	ldr	r0, [pc, #4]	; (800a6ec <__sinit_lock_release+0x8>)
 800a6e6:	f000 b8a7 	b.w	800a838 <__retarget_lock_release_recursive>
 800a6ea:	bf00      	nop
 800a6ec:	200008ae 	.word	0x200008ae

0800a6f0 <__sinit>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	f7ff fff0 	bl	800a6d8 <__sinit_lock_acquire>
 800a6f8:	69a3      	ldr	r3, [r4, #24]
 800a6fa:	b11b      	cbz	r3, 800a704 <__sinit+0x14>
 800a6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a700:	f7ff bff0 	b.w	800a6e4 <__sinit_lock_release>
 800a704:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a708:	6523      	str	r3, [r4, #80]	; 0x50
 800a70a:	4b13      	ldr	r3, [pc, #76]	; (800a758 <__sinit+0x68>)
 800a70c:	4a13      	ldr	r2, [pc, #76]	; (800a75c <__sinit+0x6c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	62a2      	str	r2, [r4, #40]	; 0x28
 800a712:	42a3      	cmp	r3, r4
 800a714:	bf04      	itt	eq
 800a716:	2301      	moveq	r3, #1
 800a718:	61a3      	streq	r3, [r4, #24]
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 f820 	bl	800a760 <__sfp>
 800a720:	6060      	str	r0, [r4, #4]
 800a722:	4620      	mov	r0, r4
 800a724:	f000 f81c 	bl	800a760 <__sfp>
 800a728:	60a0      	str	r0, [r4, #8]
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 f818 	bl	800a760 <__sfp>
 800a730:	2200      	movs	r2, #0
 800a732:	60e0      	str	r0, [r4, #12]
 800a734:	2104      	movs	r1, #4
 800a736:	6860      	ldr	r0, [r4, #4]
 800a738:	f7ff ff82 	bl	800a640 <std>
 800a73c:	68a0      	ldr	r0, [r4, #8]
 800a73e:	2201      	movs	r2, #1
 800a740:	2109      	movs	r1, #9
 800a742:	f7ff ff7d 	bl	800a640 <std>
 800a746:	68e0      	ldr	r0, [r4, #12]
 800a748:	2202      	movs	r2, #2
 800a74a:	2112      	movs	r1, #18
 800a74c:	f7ff ff78 	bl	800a640 <std>
 800a750:	2301      	movs	r3, #1
 800a752:	61a3      	str	r3, [r4, #24]
 800a754:	e7d2      	b.n	800a6fc <__sinit+0xc>
 800a756:	bf00      	nop
 800a758:	0800ba38 	.word	0x0800ba38
 800a75c:	0800a689 	.word	0x0800a689

0800a760 <__sfp>:
 800a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a762:	4607      	mov	r7, r0
 800a764:	f7ff ffac 	bl	800a6c0 <__sfp_lock_acquire>
 800a768:	4b1e      	ldr	r3, [pc, #120]	; (800a7e4 <__sfp+0x84>)
 800a76a:	681e      	ldr	r6, [r3, #0]
 800a76c:	69b3      	ldr	r3, [r6, #24]
 800a76e:	b913      	cbnz	r3, 800a776 <__sfp+0x16>
 800a770:	4630      	mov	r0, r6
 800a772:	f7ff ffbd 	bl	800a6f0 <__sinit>
 800a776:	3648      	adds	r6, #72	; 0x48
 800a778:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a77c:	3b01      	subs	r3, #1
 800a77e:	d503      	bpl.n	800a788 <__sfp+0x28>
 800a780:	6833      	ldr	r3, [r6, #0]
 800a782:	b30b      	cbz	r3, 800a7c8 <__sfp+0x68>
 800a784:	6836      	ldr	r6, [r6, #0]
 800a786:	e7f7      	b.n	800a778 <__sfp+0x18>
 800a788:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a78c:	b9d5      	cbnz	r5, 800a7c4 <__sfp+0x64>
 800a78e:	4b16      	ldr	r3, [pc, #88]	; (800a7e8 <__sfp+0x88>)
 800a790:	60e3      	str	r3, [r4, #12]
 800a792:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a796:	6665      	str	r5, [r4, #100]	; 0x64
 800a798:	f000 f84c 	bl	800a834 <__retarget_lock_init_recursive>
 800a79c:	f7ff ff96 	bl	800a6cc <__sfp_lock_release>
 800a7a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7a8:	6025      	str	r5, [r4, #0]
 800a7aa:	61a5      	str	r5, [r4, #24]
 800a7ac:	2208      	movs	r2, #8
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7b4:	f7fe fa46 	bl	8008c44 <memset>
 800a7b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7c4:	3468      	adds	r4, #104	; 0x68
 800a7c6:	e7d9      	b.n	800a77c <__sfp+0x1c>
 800a7c8:	2104      	movs	r1, #4
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	f7ff ff62 	bl	800a694 <__sfmoreglue>
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	6030      	str	r0, [r6, #0]
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d1d5      	bne.n	800a784 <__sfp+0x24>
 800a7d8:	f7ff ff78 	bl	800a6cc <__sfp_lock_release>
 800a7dc:	230c      	movs	r3, #12
 800a7de:	603b      	str	r3, [r7, #0]
 800a7e0:	e7ee      	b.n	800a7c0 <__sfp+0x60>
 800a7e2:	bf00      	nop
 800a7e4:	0800ba38 	.word	0x0800ba38
 800a7e8:	ffff0001 	.word	0xffff0001

0800a7ec <_fwalk_reent>:
 800a7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	4688      	mov	r8, r1
 800a7f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7f8:	2700      	movs	r7, #0
 800a7fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7fe:	f1b9 0901 	subs.w	r9, r9, #1
 800a802:	d505      	bpl.n	800a810 <_fwalk_reent+0x24>
 800a804:	6824      	ldr	r4, [r4, #0]
 800a806:	2c00      	cmp	r4, #0
 800a808:	d1f7      	bne.n	800a7fa <_fwalk_reent+0xe>
 800a80a:	4638      	mov	r0, r7
 800a80c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a810:	89ab      	ldrh	r3, [r5, #12]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d907      	bls.n	800a826 <_fwalk_reent+0x3a>
 800a816:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a81a:	3301      	adds	r3, #1
 800a81c:	d003      	beq.n	800a826 <_fwalk_reent+0x3a>
 800a81e:	4629      	mov	r1, r5
 800a820:	4630      	mov	r0, r6
 800a822:	47c0      	blx	r8
 800a824:	4307      	orrs	r7, r0
 800a826:	3568      	adds	r5, #104	; 0x68
 800a828:	e7e9      	b.n	800a7fe <_fwalk_reent+0x12>
	...

0800a82c <_localeconv_r>:
 800a82c:	4800      	ldr	r0, [pc, #0]	; (800a830 <_localeconv_r+0x4>)
 800a82e:	4770      	bx	lr
 800a830:	2000016c 	.word	0x2000016c

0800a834 <__retarget_lock_init_recursive>:
 800a834:	4770      	bx	lr

0800a836 <__retarget_lock_acquire_recursive>:
 800a836:	4770      	bx	lr

0800a838 <__retarget_lock_release_recursive>:
 800a838:	4770      	bx	lr

0800a83a <__swhatbuf_r>:
 800a83a:	b570      	push	{r4, r5, r6, lr}
 800a83c:	460e      	mov	r6, r1
 800a83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a842:	2900      	cmp	r1, #0
 800a844:	b096      	sub	sp, #88	; 0x58
 800a846:	4614      	mov	r4, r2
 800a848:	461d      	mov	r5, r3
 800a84a:	da08      	bge.n	800a85e <__swhatbuf_r+0x24>
 800a84c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	602a      	str	r2, [r5, #0]
 800a854:	061a      	lsls	r2, r3, #24
 800a856:	d410      	bmi.n	800a87a <__swhatbuf_r+0x40>
 800a858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a85c:	e00e      	b.n	800a87c <__swhatbuf_r+0x42>
 800a85e:	466a      	mov	r2, sp
 800a860:	f000 fee0 	bl	800b624 <_fstat_r>
 800a864:	2800      	cmp	r0, #0
 800a866:	dbf1      	blt.n	800a84c <__swhatbuf_r+0x12>
 800a868:	9a01      	ldr	r2, [sp, #4]
 800a86a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a86e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a872:	425a      	negs	r2, r3
 800a874:	415a      	adcs	r2, r3
 800a876:	602a      	str	r2, [r5, #0]
 800a878:	e7ee      	b.n	800a858 <__swhatbuf_r+0x1e>
 800a87a:	2340      	movs	r3, #64	; 0x40
 800a87c:	2000      	movs	r0, #0
 800a87e:	6023      	str	r3, [r4, #0]
 800a880:	b016      	add	sp, #88	; 0x58
 800a882:	bd70      	pop	{r4, r5, r6, pc}

0800a884 <__smakebuf_r>:
 800a884:	898b      	ldrh	r3, [r1, #12]
 800a886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a888:	079d      	lsls	r5, r3, #30
 800a88a:	4606      	mov	r6, r0
 800a88c:	460c      	mov	r4, r1
 800a88e:	d507      	bpl.n	800a8a0 <__smakebuf_r+0x1c>
 800a890:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	6123      	str	r3, [r4, #16]
 800a898:	2301      	movs	r3, #1
 800a89a:	6163      	str	r3, [r4, #20]
 800a89c:	b002      	add	sp, #8
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	ab01      	add	r3, sp, #4
 800a8a2:	466a      	mov	r2, sp
 800a8a4:	f7ff ffc9 	bl	800a83a <__swhatbuf_r>
 800a8a8:	9900      	ldr	r1, [sp, #0]
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f000 fc45 	bl	800b13c <_malloc_r>
 800a8b2:	b948      	cbnz	r0, 800a8c8 <__smakebuf_r+0x44>
 800a8b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8b8:	059a      	lsls	r2, r3, #22
 800a8ba:	d4ef      	bmi.n	800a89c <__smakebuf_r+0x18>
 800a8bc:	f023 0303 	bic.w	r3, r3, #3
 800a8c0:	f043 0302 	orr.w	r3, r3, #2
 800a8c4:	81a3      	strh	r3, [r4, #12]
 800a8c6:	e7e3      	b.n	800a890 <__smakebuf_r+0xc>
 800a8c8:	4b0d      	ldr	r3, [pc, #52]	; (800a900 <__smakebuf_r+0x7c>)
 800a8ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	6020      	str	r0, [r4, #0]
 800a8d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d4:	81a3      	strh	r3, [r4, #12]
 800a8d6:	9b00      	ldr	r3, [sp, #0]
 800a8d8:	6163      	str	r3, [r4, #20]
 800a8da:	9b01      	ldr	r3, [sp, #4]
 800a8dc:	6120      	str	r0, [r4, #16]
 800a8de:	b15b      	cbz	r3, 800a8f8 <__smakebuf_r+0x74>
 800a8e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	f000 feaf 	bl	800b648 <_isatty_r>
 800a8ea:	b128      	cbz	r0, 800a8f8 <__smakebuf_r+0x74>
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	f023 0303 	bic.w	r3, r3, #3
 800a8f2:	f043 0301 	orr.w	r3, r3, #1
 800a8f6:	81a3      	strh	r3, [r4, #12]
 800a8f8:	89a0      	ldrh	r0, [r4, #12]
 800a8fa:	4305      	orrs	r5, r0
 800a8fc:	81a5      	strh	r5, [r4, #12]
 800a8fe:	e7cd      	b.n	800a89c <__smakebuf_r+0x18>
 800a900:	0800a689 	.word	0x0800a689

0800a904 <malloc>:
 800a904:	4b02      	ldr	r3, [pc, #8]	; (800a910 <malloc+0xc>)
 800a906:	4601      	mov	r1, r0
 800a908:	6818      	ldr	r0, [r3, #0]
 800a90a:	f000 bc17 	b.w	800b13c <_malloc_r>
 800a90e:	bf00      	nop
 800a910:	20000018 	.word	0x20000018

0800a914 <memcpy>:
 800a914:	440a      	add	r2, r1
 800a916:	4291      	cmp	r1, r2
 800a918:	f100 33ff 	add.w	r3, r0, #4294967295
 800a91c:	d100      	bne.n	800a920 <memcpy+0xc>
 800a91e:	4770      	bx	lr
 800a920:	b510      	push	{r4, lr}
 800a922:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a92a:	4291      	cmp	r1, r2
 800a92c:	d1f9      	bne.n	800a922 <memcpy+0xe>
 800a92e:	bd10      	pop	{r4, pc}

0800a930 <_Balloc>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a934:	4604      	mov	r4, r0
 800a936:	460d      	mov	r5, r1
 800a938:	b976      	cbnz	r6, 800a958 <_Balloc+0x28>
 800a93a:	2010      	movs	r0, #16
 800a93c:	f7ff ffe2 	bl	800a904 <malloc>
 800a940:	4602      	mov	r2, r0
 800a942:	6260      	str	r0, [r4, #36]	; 0x24
 800a944:	b920      	cbnz	r0, 800a950 <_Balloc+0x20>
 800a946:	4b18      	ldr	r3, [pc, #96]	; (800a9a8 <_Balloc+0x78>)
 800a948:	4818      	ldr	r0, [pc, #96]	; (800a9ac <_Balloc+0x7c>)
 800a94a:	2166      	movs	r1, #102	; 0x66
 800a94c:	f000 fe2a 	bl	800b5a4 <__assert_func>
 800a950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a954:	6006      	str	r6, [r0, #0]
 800a956:	60c6      	str	r6, [r0, #12]
 800a958:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a95a:	68f3      	ldr	r3, [r6, #12]
 800a95c:	b183      	cbz	r3, 800a980 <_Balloc+0x50>
 800a95e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a966:	b9b8      	cbnz	r0, 800a998 <_Balloc+0x68>
 800a968:	2101      	movs	r1, #1
 800a96a:	fa01 f605 	lsl.w	r6, r1, r5
 800a96e:	1d72      	adds	r2, r6, #5
 800a970:	0092      	lsls	r2, r2, #2
 800a972:	4620      	mov	r0, r4
 800a974:	f000 fb60 	bl	800b038 <_calloc_r>
 800a978:	b160      	cbz	r0, 800a994 <_Balloc+0x64>
 800a97a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a97e:	e00e      	b.n	800a99e <_Balloc+0x6e>
 800a980:	2221      	movs	r2, #33	; 0x21
 800a982:	2104      	movs	r1, #4
 800a984:	4620      	mov	r0, r4
 800a986:	f000 fb57 	bl	800b038 <_calloc_r>
 800a98a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a98c:	60f0      	str	r0, [r6, #12]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1e4      	bne.n	800a95e <_Balloc+0x2e>
 800a994:	2000      	movs	r0, #0
 800a996:	bd70      	pop	{r4, r5, r6, pc}
 800a998:	6802      	ldr	r2, [r0, #0]
 800a99a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9a4:	e7f7      	b.n	800a996 <_Balloc+0x66>
 800a9a6:	bf00      	nop
 800a9a8:	0800ba7d 	.word	0x0800ba7d
 800a9ac:	0800bb60 	.word	0x0800bb60

0800a9b0 <_Bfree>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	b976      	cbnz	r6, 800a9d8 <_Bfree+0x28>
 800a9ba:	2010      	movs	r0, #16
 800a9bc:	f7ff ffa2 	bl	800a904 <malloc>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	6268      	str	r0, [r5, #36]	; 0x24
 800a9c4:	b920      	cbnz	r0, 800a9d0 <_Bfree+0x20>
 800a9c6:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <_Bfree+0x3c>)
 800a9c8:	4809      	ldr	r0, [pc, #36]	; (800a9f0 <_Bfree+0x40>)
 800a9ca:	218a      	movs	r1, #138	; 0x8a
 800a9cc:	f000 fdea 	bl	800b5a4 <__assert_func>
 800a9d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9d4:	6006      	str	r6, [r0, #0]
 800a9d6:	60c6      	str	r6, [r0, #12]
 800a9d8:	b13c      	cbz	r4, 800a9ea <_Bfree+0x3a>
 800a9da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9dc:	6862      	ldr	r2, [r4, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9e4:	6021      	str	r1, [r4, #0]
 800a9e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
 800a9ec:	0800ba7d 	.word	0x0800ba7d
 800a9f0:	0800bb60 	.word	0x0800bb60

0800a9f4 <__multadd>:
 800a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	690d      	ldr	r5, [r1, #16]
 800a9fa:	4607      	mov	r7, r0
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	461e      	mov	r6, r3
 800aa00:	f101 0c14 	add.w	ip, r1, #20
 800aa04:	2000      	movs	r0, #0
 800aa06:	f8dc 3000 	ldr.w	r3, [ip]
 800aa0a:	b299      	uxth	r1, r3
 800aa0c:	fb02 6101 	mla	r1, r2, r1, r6
 800aa10:	0c1e      	lsrs	r6, r3, #16
 800aa12:	0c0b      	lsrs	r3, r1, #16
 800aa14:	fb02 3306 	mla	r3, r2, r6, r3
 800aa18:	b289      	uxth	r1, r1
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa20:	4285      	cmp	r5, r0
 800aa22:	f84c 1b04 	str.w	r1, [ip], #4
 800aa26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa2a:	dcec      	bgt.n	800aa06 <__multadd+0x12>
 800aa2c:	b30e      	cbz	r6, 800aa72 <__multadd+0x7e>
 800aa2e:	68a3      	ldr	r3, [r4, #8]
 800aa30:	42ab      	cmp	r3, r5
 800aa32:	dc19      	bgt.n	800aa68 <__multadd+0x74>
 800aa34:	6861      	ldr	r1, [r4, #4]
 800aa36:	4638      	mov	r0, r7
 800aa38:	3101      	adds	r1, #1
 800aa3a:	f7ff ff79 	bl	800a930 <_Balloc>
 800aa3e:	4680      	mov	r8, r0
 800aa40:	b928      	cbnz	r0, 800aa4e <__multadd+0x5a>
 800aa42:	4602      	mov	r2, r0
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <__multadd+0x84>)
 800aa46:	480d      	ldr	r0, [pc, #52]	; (800aa7c <__multadd+0x88>)
 800aa48:	21b5      	movs	r1, #181	; 0xb5
 800aa4a:	f000 fdab 	bl	800b5a4 <__assert_func>
 800aa4e:	6922      	ldr	r2, [r4, #16]
 800aa50:	3202      	adds	r2, #2
 800aa52:	f104 010c 	add.w	r1, r4, #12
 800aa56:	0092      	lsls	r2, r2, #2
 800aa58:	300c      	adds	r0, #12
 800aa5a:	f7ff ff5b 	bl	800a914 <memcpy>
 800aa5e:	4621      	mov	r1, r4
 800aa60:	4638      	mov	r0, r7
 800aa62:	f7ff ffa5 	bl	800a9b0 <_Bfree>
 800aa66:	4644      	mov	r4, r8
 800aa68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	615e      	str	r6, [r3, #20]
 800aa70:	6125      	str	r5, [r4, #16]
 800aa72:	4620      	mov	r0, r4
 800aa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa78:	0800baef 	.word	0x0800baef
 800aa7c:	0800bb60 	.word	0x0800bb60

0800aa80 <__hi0bits>:
 800aa80:	0c03      	lsrs	r3, r0, #16
 800aa82:	041b      	lsls	r3, r3, #16
 800aa84:	b9d3      	cbnz	r3, 800aabc <__hi0bits+0x3c>
 800aa86:	0400      	lsls	r0, r0, #16
 800aa88:	2310      	movs	r3, #16
 800aa8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aa8e:	bf04      	itt	eq
 800aa90:	0200      	lsleq	r0, r0, #8
 800aa92:	3308      	addeq	r3, #8
 800aa94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa98:	bf04      	itt	eq
 800aa9a:	0100      	lsleq	r0, r0, #4
 800aa9c:	3304      	addeq	r3, #4
 800aa9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aaa2:	bf04      	itt	eq
 800aaa4:	0080      	lsleq	r0, r0, #2
 800aaa6:	3302      	addeq	r3, #2
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	db05      	blt.n	800aab8 <__hi0bits+0x38>
 800aaac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aab0:	f103 0301 	add.w	r3, r3, #1
 800aab4:	bf08      	it	eq
 800aab6:	2320      	moveq	r3, #32
 800aab8:	4618      	mov	r0, r3
 800aaba:	4770      	bx	lr
 800aabc:	2300      	movs	r3, #0
 800aabe:	e7e4      	b.n	800aa8a <__hi0bits+0xa>

0800aac0 <__lo0bits>:
 800aac0:	6803      	ldr	r3, [r0, #0]
 800aac2:	f013 0207 	ands.w	r2, r3, #7
 800aac6:	4601      	mov	r1, r0
 800aac8:	d00b      	beq.n	800aae2 <__lo0bits+0x22>
 800aaca:	07da      	lsls	r2, r3, #31
 800aacc:	d423      	bmi.n	800ab16 <__lo0bits+0x56>
 800aace:	0798      	lsls	r0, r3, #30
 800aad0:	bf49      	itett	mi
 800aad2:	085b      	lsrmi	r3, r3, #1
 800aad4:	089b      	lsrpl	r3, r3, #2
 800aad6:	2001      	movmi	r0, #1
 800aad8:	600b      	strmi	r3, [r1, #0]
 800aada:	bf5c      	itt	pl
 800aadc:	600b      	strpl	r3, [r1, #0]
 800aade:	2002      	movpl	r0, #2
 800aae0:	4770      	bx	lr
 800aae2:	b298      	uxth	r0, r3
 800aae4:	b9a8      	cbnz	r0, 800ab12 <__lo0bits+0x52>
 800aae6:	0c1b      	lsrs	r3, r3, #16
 800aae8:	2010      	movs	r0, #16
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	b90a      	cbnz	r2, 800aaf2 <__lo0bits+0x32>
 800aaee:	3008      	adds	r0, #8
 800aaf0:	0a1b      	lsrs	r3, r3, #8
 800aaf2:	071a      	lsls	r2, r3, #28
 800aaf4:	bf04      	itt	eq
 800aaf6:	091b      	lsreq	r3, r3, #4
 800aaf8:	3004      	addeq	r0, #4
 800aafa:	079a      	lsls	r2, r3, #30
 800aafc:	bf04      	itt	eq
 800aafe:	089b      	lsreq	r3, r3, #2
 800ab00:	3002      	addeq	r0, #2
 800ab02:	07da      	lsls	r2, r3, #31
 800ab04:	d403      	bmi.n	800ab0e <__lo0bits+0x4e>
 800ab06:	085b      	lsrs	r3, r3, #1
 800ab08:	f100 0001 	add.w	r0, r0, #1
 800ab0c:	d005      	beq.n	800ab1a <__lo0bits+0x5a>
 800ab0e:	600b      	str	r3, [r1, #0]
 800ab10:	4770      	bx	lr
 800ab12:	4610      	mov	r0, r2
 800ab14:	e7e9      	b.n	800aaea <__lo0bits+0x2a>
 800ab16:	2000      	movs	r0, #0
 800ab18:	4770      	bx	lr
 800ab1a:	2020      	movs	r0, #32
 800ab1c:	4770      	bx	lr
	...

0800ab20 <__i2b>:
 800ab20:	b510      	push	{r4, lr}
 800ab22:	460c      	mov	r4, r1
 800ab24:	2101      	movs	r1, #1
 800ab26:	f7ff ff03 	bl	800a930 <_Balloc>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	b928      	cbnz	r0, 800ab3a <__i2b+0x1a>
 800ab2e:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <__i2b+0x24>)
 800ab30:	4805      	ldr	r0, [pc, #20]	; (800ab48 <__i2b+0x28>)
 800ab32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab36:	f000 fd35 	bl	800b5a4 <__assert_func>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	6144      	str	r4, [r0, #20]
 800ab3e:	6103      	str	r3, [r0, #16]
 800ab40:	bd10      	pop	{r4, pc}
 800ab42:	bf00      	nop
 800ab44:	0800baef 	.word	0x0800baef
 800ab48:	0800bb60 	.word	0x0800bb60

0800ab4c <__multiply>:
 800ab4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab50:	4691      	mov	r9, r2
 800ab52:	690a      	ldr	r2, [r1, #16]
 800ab54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	bfb8      	it	lt
 800ab5c:	460b      	movlt	r3, r1
 800ab5e:	460c      	mov	r4, r1
 800ab60:	bfbc      	itt	lt
 800ab62:	464c      	movlt	r4, r9
 800ab64:	4699      	movlt	r9, r3
 800ab66:	6927      	ldr	r7, [r4, #16]
 800ab68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab6c:	68a3      	ldr	r3, [r4, #8]
 800ab6e:	6861      	ldr	r1, [r4, #4]
 800ab70:	eb07 060a 	add.w	r6, r7, sl
 800ab74:	42b3      	cmp	r3, r6
 800ab76:	b085      	sub	sp, #20
 800ab78:	bfb8      	it	lt
 800ab7a:	3101      	addlt	r1, #1
 800ab7c:	f7ff fed8 	bl	800a930 <_Balloc>
 800ab80:	b930      	cbnz	r0, 800ab90 <__multiply+0x44>
 800ab82:	4602      	mov	r2, r0
 800ab84:	4b44      	ldr	r3, [pc, #272]	; (800ac98 <__multiply+0x14c>)
 800ab86:	4845      	ldr	r0, [pc, #276]	; (800ac9c <__multiply+0x150>)
 800ab88:	f240 115d 	movw	r1, #349	; 0x15d
 800ab8c:	f000 fd0a 	bl	800b5a4 <__assert_func>
 800ab90:	f100 0514 	add.w	r5, r0, #20
 800ab94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab98:	462b      	mov	r3, r5
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	4543      	cmp	r3, r8
 800ab9e:	d321      	bcc.n	800abe4 <__multiply+0x98>
 800aba0:	f104 0314 	add.w	r3, r4, #20
 800aba4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aba8:	f109 0314 	add.w	r3, r9, #20
 800abac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800abb0:	9202      	str	r2, [sp, #8]
 800abb2:	1b3a      	subs	r2, r7, r4
 800abb4:	3a15      	subs	r2, #21
 800abb6:	f022 0203 	bic.w	r2, r2, #3
 800abba:	3204      	adds	r2, #4
 800abbc:	f104 0115 	add.w	r1, r4, #21
 800abc0:	428f      	cmp	r7, r1
 800abc2:	bf38      	it	cc
 800abc4:	2204      	movcc	r2, #4
 800abc6:	9201      	str	r2, [sp, #4]
 800abc8:	9a02      	ldr	r2, [sp, #8]
 800abca:	9303      	str	r3, [sp, #12]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d80c      	bhi.n	800abea <__multiply+0x9e>
 800abd0:	2e00      	cmp	r6, #0
 800abd2:	dd03      	ble.n	800abdc <__multiply+0x90>
 800abd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d05a      	beq.n	800ac92 <__multiply+0x146>
 800abdc:	6106      	str	r6, [r0, #16]
 800abde:	b005      	add	sp, #20
 800abe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe4:	f843 2b04 	str.w	r2, [r3], #4
 800abe8:	e7d8      	b.n	800ab9c <__multiply+0x50>
 800abea:	f8b3 a000 	ldrh.w	sl, [r3]
 800abee:	f1ba 0f00 	cmp.w	sl, #0
 800abf2:	d024      	beq.n	800ac3e <__multiply+0xf2>
 800abf4:	f104 0e14 	add.w	lr, r4, #20
 800abf8:	46a9      	mov	r9, r5
 800abfa:	f04f 0c00 	mov.w	ip, #0
 800abfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ac02:	f8d9 1000 	ldr.w	r1, [r9]
 800ac06:	fa1f fb82 	uxth.w	fp, r2
 800ac0a:	b289      	uxth	r1, r1
 800ac0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ac14:	f8d9 2000 	ldr.w	r2, [r9]
 800ac18:	4461      	add	r1, ip
 800ac1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ac22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac26:	b289      	uxth	r1, r1
 800ac28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac2c:	4577      	cmp	r7, lr
 800ac2e:	f849 1b04 	str.w	r1, [r9], #4
 800ac32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac36:	d8e2      	bhi.n	800abfe <__multiply+0xb2>
 800ac38:	9a01      	ldr	r2, [sp, #4]
 800ac3a:	f845 c002 	str.w	ip, [r5, r2]
 800ac3e:	9a03      	ldr	r2, [sp, #12]
 800ac40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac44:	3304      	adds	r3, #4
 800ac46:	f1b9 0f00 	cmp.w	r9, #0
 800ac4a:	d020      	beq.n	800ac8e <__multiply+0x142>
 800ac4c:	6829      	ldr	r1, [r5, #0]
 800ac4e:	f104 0c14 	add.w	ip, r4, #20
 800ac52:	46ae      	mov	lr, r5
 800ac54:	f04f 0a00 	mov.w	sl, #0
 800ac58:	f8bc b000 	ldrh.w	fp, [ip]
 800ac5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ac60:	fb09 220b 	mla	r2, r9, fp, r2
 800ac64:	4492      	add	sl, r2
 800ac66:	b289      	uxth	r1, r1
 800ac68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ac6c:	f84e 1b04 	str.w	r1, [lr], #4
 800ac70:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac74:	f8be 1000 	ldrh.w	r1, [lr]
 800ac78:	0c12      	lsrs	r2, r2, #16
 800ac7a:	fb09 1102 	mla	r1, r9, r2, r1
 800ac7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ac82:	4567      	cmp	r7, ip
 800ac84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac88:	d8e6      	bhi.n	800ac58 <__multiply+0x10c>
 800ac8a:	9a01      	ldr	r2, [sp, #4]
 800ac8c:	50a9      	str	r1, [r5, r2]
 800ac8e:	3504      	adds	r5, #4
 800ac90:	e79a      	b.n	800abc8 <__multiply+0x7c>
 800ac92:	3e01      	subs	r6, #1
 800ac94:	e79c      	b.n	800abd0 <__multiply+0x84>
 800ac96:	bf00      	nop
 800ac98:	0800baef 	.word	0x0800baef
 800ac9c:	0800bb60 	.word	0x0800bb60

0800aca0 <__pow5mult>:
 800aca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca4:	4615      	mov	r5, r2
 800aca6:	f012 0203 	ands.w	r2, r2, #3
 800acaa:	4606      	mov	r6, r0
 800acac:	460f      	mov	r7, r1
 800acae:	d007      	beq.n	800acc0 <__pow5mult+0x20>
 800acb0:	4c25      	ldr	r4, [pc, #148]	; (800ad48 <__pow5mult+0xa8>)
 800acb2:	3a01      	subs	r2, #1
 800acb4:	2300      	movs	r3, #0
 800acb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acba:	f7ff fe9b 	bl	800a9f4 <__multadd>
 800acbe:	4607      	mov	r7, r0
 800acc0:	10ad      	asrs	r5, r5, #2
 800acc2:	d03d      	beq.n	800ad40 <__pow5mult+0xa0>
 800acc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acc6:	b97c      	cbnz	r4, 800ace8 <__pow5mult+0x48>
 800acc8:	2010      	movs	r0, #16
 800acca:	f7ff fe1b 	bl	800a904 <malloc>
 800acce:	4602      	mov	r2, r0
 800acd0:	6270      	str	r0, [r6, #36]	; 0x24
 800acd2:	b928      	cbnz	r0, 800ace0 <__pow5mult+0x40>
 800acd4:	4b1d      	ldr	r3, [pc, #116]	; (800ad4c <__pow5mult+0xac>)
 800acd6:	481e      	ldr	r0, [pc, #120]	; (800ad50 <__pow5mult+0xb0>)
 800acd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800acdc:	f000 fc62 	bl	800b5a4 <__assert_func>
 800ace0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ace4:	6004      	str	r4, [r0, #0]
 800ace6:	60c4      	str	r4, [r0, #12]
 800ace8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800acec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acf0:	b94c      	cbnz	r4, 800ad06 <__pow5mult+0x66>
 800acf2:	f240 2171 	movw	r1, #625	; 0x271
 800acf6:	4630      	mov	r0, r6
 800acf8:	f7ff ff12 	bl	800ab20 <__i2b>
 800acfc:	2300      	movs	r3, #0
 800acfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad02:	4604      	mov	r4, r0
 800ad04:	6003      	str	r3, [r0, #0]
 800ad06:	f04f 0900 	mov.w	r9, #0
 800ad0a:	07eb      	lsls	r3, r5, #31
 800ad0c:	d50a      	bpl.n	800ad24 <__pow5mult+0x84>
 800ad0e:	4639      	mov	r1, r7
 800ad10:	4622      	mov	r2, r4
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7ff ff1a 	bl	800ab4c <__multiply>
 800ad18:	4639      	mov	r1, r7
 800ad1a:	4680      	mov	r8, r0
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f7ff fe47 	bl	800a9b0 <_Bfree>
 800ad22:	4647      	mov	r7, r8
 800ad24:	106d      	asrs	r5, r5, #1
 800ad26:	d00b      	beq.n	800ad40 <__pow5mult+0xa0>
 800ad28:	6820      	ldr	r0, [r4, #0]
 800ad2a:	b938      	cbnz	r0, 800ad3c <__pow5mult+0x9c>
 800ad2c:	4622      	mov	r2, r4
 800ad2e:	4621      	mov	r1, r4
 800ad30:	4630      	mov	r0, r6
 800ad32:	f7ff ff0b 	bl	800ab4c <__multiply>
 800ad36:	6020      	str	r0, [r4, #0]
 800ad38:	f8c0 9000 	str.w	r9, [r0]
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	e7e4      	b.n	800ad0a <__pow5mult+0x6a>
 800ad40:	4638      	mov	r0, r7
 800ad42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad46:	bf00      	nop
 800ad48:	0800bcb0 	.word	0x0800bcb0
 800ad4c:	0800ba7d 	.word	0x0800ba7d
 800ad50:	0800bb60 	.word	0x0800bb60

0800ad54 <__lshift>:
 800ad54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad58:	460c      	mov	r4, r1
 800ad5a:	6849      	ldr	r1, [r1, #4]
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad62:	68a3      	ldr	r3, [r4, #8]
 800ad64:	4607      	mov	r7, r0
 800ad66:	4691      	mov	r9, r2
 800ad68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad6c:	f108 0601 	add.w	r6, r8, #1
 800ad70:	42b3      	cmp	r3, r6
 800ad72:	db0b      	blt.n	800ad8c <__lshift+0x38>
 800ad74:	4638      	mov	r0, r7
 800ad76:	f7ff fddb 	bl	800a930 <_Balloc>
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	b948      	cbnz	r0, 800ad92 <__lshift+0x3e>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	4b2a      	ldr	r3, [pc, #168]	; (800ae2c <__lshift+0xd8>)
 800ad82:	482b      	ldr	r0, [pc, #172]	; (800ae30 <__lshift+0xdc>)
 800ad84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad88:	f000 fc0c 	bl	800b5a4 <__assert_func>
 800ad8c:	3101      	adds	r1, #1
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	e7ee      	b.n	800ad70 <__lshift+0x1c>
 800ad92:	2300      	movs	r3, #0
 800ad94:	f100 0114 	add.w	r1, r0, #20
 800ad98:	f100 0210 	add.w	r2, r0, #16
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	4553      	cmp	r3, sl
 800ada0:	db37      	blt.n	800ae12 <__lshift+0xbe>
 800ada2:	6920      	ldr	r0, [r4, #16]
 800ada4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ada8:	f104 0314 	add.w	r3, r4, #20
 800adac:	f019 091f 	ands.w	r9, r9, #31
 800adb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800adb8:	d02f      	beq.n	800ae1a <__lshift+0xc6>
 800adba:	f1c9 0e20 	rsb	lr, r9, #32
 800adbe:	468a      	mov	sl, r1
 800adc0:	f04f 0c00 	mov.w	ip, #0
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	fa02 f209 	lsl.w	r2, r2, r9
 800adca:	ea42 020c 	orr.w	r2, r2, ip
 800adce:	f84a 2b04 	str.w	r2, [sl], #4
 800add2:	f853 2b04 	ldr.w	r2, [r3], #4
 800add6:	4298      	cmp	r0, r3
 800add8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800addc:	d8f2      	bhi.n	800adc4 <__lshift+0x70>
 800adde:	1b03      	subs	r3, r0, r4
 800ade0:	3b15      	subs	r3, #21
 800ade2:	f023 0303 	bic.w	r3, r3, #3
 800ade6:	3304      	adds	r3, #4
 800ade8:	f104 0215 	add.w	r2, r4, #21
 800adec:	4290      	cmp	r0, r2
 800adee:	bf38      	it	cc
 800adf0:	2304      	movcc	r3, #4
 800adf2:	f841 c003 	str.w	ip, [r1, r3]
 800adf6:	f1bc 0f00 	cmp.w	ip, #0
 800adfa:	d001      	beq.n	800ae00 <__lshift+0xac>
 800adfc:	f108 0602 	add.w	r6, r8, #2
 800ae00:	3e01      	subs	r6, #1
 800ae02:	4638      	mov	r0, r7
 800ae04:	612e      	str	r6, [r5, #16]
 800ae06:	4621      	mov	r1, r4
 800ae08:	f7ff fdd2 	bl	800a9b0 <_Bfree>
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae12:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae16:	3301      	adds	r3, #1
 800ae18:	e7c1      	b.n	800ad9e <__lshift+0x4a>
 800ae1a:	3904      	subs	r1, #4
 800ae1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae20:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae24:	4298      	cmp	r0, r3
 800ae26:	d8f9      	bhi.n	800ae1c <__lshift+0xc8>
 800ae28:	e7ea      	b.n	800ae00 <__lshift+0xac>
 800ae2a:	bf00      	nop
 800ae2c:	0800baef 	.word	0x0800baef
 800ae30:	0800bb60 	.word	0x0800bb60

0800ae34 <__mcmp>:
 800ae34:	b530      	push	{r4, r5, lr}
 800ae36:	6902      	ldr	r2, [r0, #16]
 800ae38:	690c      	ldr	r4, [r1, #16]
 800ae3a:	1b12      	subs	r2, r2, r4
 800ae3c:	d10e      	bne.n	800ae5c <__mcmp+0x28>
 800ae3e:	f100 0314 	add.w	r3, r0, #20
 800ae42:	3114      	adds	r1, #20
 800ae44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae54:	42a5      	cmp	r5, r4
 800ae56:	d003      	beq.n	800ae60 <__mcmp+0x2c>
 800ae58:	d305      	bcc.n	800ae66 <__mcmp+0x32>
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	bd30      	pop	{r4, r5, pc}
 800ae60:	4283      	cmp	r3, r0
 800ae62:	d3f3      	bcc.n	800ae4c <__mcmp+0x18>
 800ae64:	e7fa      	b.n	800ae5c <__mcmp+0x28>
 800ae66:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6a:	e7f7      	b.n	800ae5c <__mcmp+0x28>

0800ae6c <__mdiff>:
 800ae6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae70:	460c      	mov	r4, r1
 800ae72:	4606      	mov	r6, r0
 800ae74:	4611      	mov	r1, r2
 800ae76:	4620      	mov	r0, r4
 800ae78:	4690      	mov	r8, r2
 800ae7a:	f7ff ffdb 	bl	800ae34 <__mcmp>
 800ae7e:	1e05      	subs	r5, r0, #0
 800ae80:	d110      	bne.n	800aea4 <__mdiff+0x38>
 800ae82:	4629      	mov	r1, r5
 800ae84:	4630      	mov	r0, r6
 800ae86:	f7ff fd53 	bl	800a930 <_Balloc>
 800ae8a:	b930      	cbnz	r0, 800ae9a <__mdiff+0x2e>
 800ae8c:	4b3a      	ldr	r3, [pc, #232]	; (800af78 <__mdiff+0x10c>)
 800ae8e:	4602      	mov	r2, r0
 800ae90:	f240 2132 	movw	r1, #562	; 0x232
 800ae94:	4839      	ldr	r0, [pc, #228]	; (800af7c <__mdiff+0x110>)
 800ae96:	f000 fb85 	bl	800b5a4 <__assert_func>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea4:	bfa4      	itt	ge
 800aea6:	4643      	movge	r3, r8
 800aea8:	46a0      	movge	r8, r4
 800aeaa:	4630      	mov	r0, r6
 800aeac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aeb0:	bfa6      	itte	ge
 800aeb2:	461c      	movge	r4, r3
 800aeb4:	2500      	movge	r5, #0
 800aeb6:	2501      	movlt	r5, #1
 800aeb8:	f7ff fd3a 	bl	800a930 <_Balloc>
 800aebc:	b920      	cbnz	r0, 800aec8 <__mdiff+0x5c>
 800aebe:	4b2e      	ldr	r3, [pc, #184]	; (800af78 <__mdiff+0x10c>)
 800aec0:	4602      	mov	r2, r0
 800aec2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aec6:	e7e5      	b.n	800ae94 <__mdiff+0x28>
 800aec8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aecc:	6926      	ldr	r6, [r4, #16]
 800aece:	60c5      	str	r5, [r0, #12]
 800aed0:	f104 0914 	add.w	r9, r4, #20
 800aed4:	f108 0514 	add.w	r5, r8, #20
 800aed8:	f100 0e14 	add.w	lr, r0, #20
 800aedc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aee0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aee4:	f108 0210 	add.w	r2, r8, #16
 800aee8:	46f2      	mov	sl, lr
 800aeea:	2100      	movs	r1, #0
 800aeec:	f859 3b04 	ldr.w	r3, [r9], #4
 800aef0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aef4:	fa1f f883 	uxth.w	r8, r3
 800aef8:	fa11 f18b 	uxtah	r1, r1, fp
 800aefc:	0c1b      	lsrs	r3, r3, #16
 800aefe:	eba1 0808 	sub.w	r8, r1, r8
 800af02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af0a:	fa1f f888 	uxth.w	r8, r8
 800af0e:	1419      	asrs	r1, r3, #16
 800af10:	454e      	cmp	r6, r9
 800af12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af16:	f84a 3b04 	str.w	r3, [sl], #4
 800af1a:	d8e7      	bhi.n	800aeec <__mdiff+0x80>
 800af1c:	1b33      	subs	r3, r6, r4
 800af1e:	3b15      	subs	r3, #21
 800af20:	f023 0303 	bic.w	r3, r3, #3
 800af24:	3304      	adds	r3, #4
 800af26:	3415      	adds	r4, #21
 800af28:	42a6      	cmp	r6, r4
 800af2a:	bf38      	it	cc
 800af2c:	2304      	movcc	r3, #4
 800af2e:	441d      	add	r5, r3
 800af30:	4473      	add	r3, lr
 800af32:	469e      	mov	lr, r3
 800af34:	462e      	mov	r6, r5
 800af36:	4566      	cmp	r6, ip
 800af38:	d30e      	bcc.n	800af58 <__mdiff+0xec>
 800af3a:	f10c 0203 	add.w	r2, ip, #3
 800af3e:	1b52      	subs	r2, r2, r5
 800af40:	f022 0203 	bic.w	r2, r2, #3
 800af44:	3d03      	subs	r5, #3
 800af46:	45ac      	cmp	ip, r5
 800af48:	bf38      	it	cc
 800af4a:	2200      	movcc	r2, #0
 800af4c:	441a      	add	r2, r3
 800af4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800af52:	b17b      	cbz	r3, 800af74 <__mdiff+0x108>
 800af54:	6107      	str	r7, [r0, #16]
 800af56:	e7a3      	b.n	800aea0 <__mdiff+0x34>
 800af58:	f856 8b04 	ldr.w	r8, [r6], #4
 800af5c:	fa11 f288 	uxtah	r2, r1, r8
 800af60:	1414      	asrs	r4, r2, #16
 800af62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800af66:	b292      	uxth	r2, r2
 800af68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800af6c:	f84e 2b04 	str.w	r2, [lr], #4
 800af70:	1421      	asrs	r1, r4, #16
 800af72:	e7e0      	b.n	800af36 <__mdiff+0xca>
 800af74:	3f01      	subs	r7, #1
 800af76:	e7ea      	b.n	800af4e <__mdiff+0xe2>
 800af78:	0800baef 	.word	0x0800baef
 800af7c:	0800bb60 	.word	0x0800bb60

0800af80 <__d2b>:
 800af80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af84:	4689      	mov	r9, r1
 800af86:	2101      	movs	r1, #1
 800af88:	ec57 6b10 	vmov	r6, r7, d0
 800af8c:	4690      	mov	r8, r2
 800af8e:	f7ff fccf 	bl	800a930 <_Balloc>
 800af92:	4604      	mov	r4, r0
 800af94:	b930      	cbnz	r0, 800afa4 <__d2b+0x24>
 800af96:	4602      	mov	r2, r0
 800af98:	4b25      	ldr	r3, [pc, #148]	; (800b030 <__d2b+0xb0>)
 800af9a:	4826      	ldr	r0, [pc, #152]	; (800b034 <__d2b+0xb4>)
 800af9c:	f240 310a 	movw	r1, #778	; 0x30a
 800afa0:	f000 fb00 	bl	800b5a4 <__assert_func>
 800afa4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800afa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afac:	bb35      	cbnz	r5, 800affc <__d2b+0x7c>
 800afae:	2e00      	cmp	r6, #0
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	d028      	beq.n	800b006 <__d2b+0x86>
 800afb4:	4668      	mov	r0, sp
 800afb6:	9600      	str	r6, [sp, #0]
 800afb8:	f7ff fd82 	bl	800aac0 <__lo0bits>
 800afbc:	9900      	ldr	r1, [sp, #0]
 800afbe:	b300      	cbz	r0, 800b002 <__d2b+0x82>
 800afc0:	9a01      	ldr	r2, [sp, #4]
 800afc2:	f1c0 0320 	rsb	r3, r0, #32
 800afc6:	fa02 f303 	lsl.w	r3, r2, r3
 800afca:	430b      	orrs	r3, r1
 800afcc:	40c2      	lsrs	r2, r0
 800afce:	6163      	str	r3, [r4, #20]
 800afd0:	9201      	str	r2, [sp, #4]
 800afd2:	9b01      	ldr	r3, [sp, #4]
 800afd4:	61a3      	str	r3, [r4, #24]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	bf14      	ite	ne
 800afda:	2202      	movne	r2, #2
 800afdc:	2201      	moveq	r2, #1
 800afde:	6122      	str	r2, [r4, #16]
 800afe0:	b1d5      	cbz	r5, 800b018 <__d2b+0x98>
 800afe2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800afe6:	4405      	add	r5, r0
 800afe8:	f8c9 5000 	str.w	r5, [r9]
 800afec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aff0:	f8c8 0000 	str.w	r0, [r8]
 800aff4:	4620      	mov	r0, r4
 800aff6:	b003      	add	sp, #12
 800aff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800affc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b000:	e7d5      	b.n	800afae <__d2b+0x2e>
 800b002:	6161      	str	r1, [r4, #20]
 800b004:	e7e5      	b.n	800afd2 <__d2b+0x52>
 800b006:	a801      	add	r0, sp, #4
 800b008:	f7ff fd5a 	bl	800aac0 <__lo0bits>
 800b00c:	9b01      	ldr	r3, [sp, #4]
 800b00e:	6163      	str	r3, [r4, #20]
 800b010:	2201      	movs	r2, #1
 800b012:	6122      	str	r2, [r4, #16]
 800b014:	3020      	adds	r0, #32
 800b016:	e7e3      	b.n	800afe0 <__d2b+0x60>
 800b018:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b01c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b020:	f8c9 0000 	str.w	r0, [r9]
 800b024:	6918      	ldr	r0, [r3, #16]
 800b026:	f7ff fd2b 	bl	800aa80 <__hi0bits>
 800b02a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b02e:	e7df      	b.n	800aff0 <__d2b+0x70>
 800b030:	0800baef 	.word	0x0800baef
 800b034:	0800bb60 	.word	0x0800bb60

0800b038 <_calloc_r>:
 800b038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b03a:	fba1 2402 	umull	r2, r4, r1, r2
 800b03e:	b94c      	cbnz	r4, 800b054 <_calloc_r+0x1c>
 800b040:	4611      	mov	r1, r2
 800b042:	9201      	str	r2, [sp, #4]
 800b044:	f000 f87a 	bl	800b13c <_malloc_r>
 800b048:	9a01      	ldr	r2, [sp, #4]
 800b04a:	4605      	mov	r5, r0
 800b04c:	b930      	cbnz	r0, 800b05c <_calloc_r+0x24>
 800b04e:	4628      	mov	r0, r5
 800b050:	b003      	add	sp, #12
 800b052:	bd30      	pop	{r4, r5, pc}
 800b054:	220c      	movs	r2, #12
 800b056:	6002      	str	r2, [r0, #0]
 800b058:	2500      	movs	r5, #0
 800b05a:	e7f8      	b.n	800b04e <_calloc_r+0x16>
 800b05c:	4621      	mov	r1, r4
 800b05e:	f7fd fdf1 	bl	8008c44 <memset>
 800b062:	e7f4      	b.n	800b04e <_calloc_r+0x16>

0800b064 <_free_r>:
 800b064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b066:	2900      	cmp	r1, #0
 800b068:	d044      	beq.n	800b0f4 <_free_r+0x90>
 800b06a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b06e:	9001      	str	r0, [sp, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	f1a1 0404 	sub.w	r4, r1, #4
 800b076:	bfb8      	it	lt
 800b078:	18e4      	addlt	r4, r4, r3
 800b07a:	f000 fb19 	bl	800b6b0 <__malloc_lock>
 800b07e:	4a1e      	ldr	r2, [pc, #120]	; (800b0f8 <_free_r+0x94>)
 800b080:	9801      	ldr	r0, [sp, #4]
 800b082:	6813      	ldr	r3, [r2, #0]
 800b084:	b933      	cbnz	r3, 800b094 <_free_r+0x30>
 800b086:	6063      	str	r3, [r4, #4]
 800b088:	6014      	str	r4, [r2, #0]
 800b08a:	b003      	add	sp, #12
 800b08c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b090:	f000 bb14 	b.w	800b6bc <__malloc_unlock>
 800b094:	42a3      	cmp	r3, r4
 800b096:	d908      	bls.n	800b0aa <_free_r+0x46>
 800b098:	6825      	ldr	r5, [r4, #0]
 800b09a:	1961      	adds	r1, r4, r5
 800b09c:	428b      	cmp	r3, r1
 800b09e:	bf01      	itttt	eq
 800b0a0:	6819      	ldreq	r1, [r3, #0]
 800b0a2:	685b      	ldreq	r3, [r3, #4]
 800b0a4:	1949      	addeq	r1, r1, r5
 800b0a6:	6021      	streq	r1, [r4, #0]
 800b0a8:	e7ed      	b.n	800b086 <_free_r+0x22>
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	b10b      	cbz	r3, 800b0b4 <_free_r+0x50>
 800b0b0:	42a3      	cmp	r3, r4
 800b0b2:	d9fa      	bls.n	800b0aa <_free_r+0x46>
 800b0b4:	6811      	ldr	r1, [r2, #0]
 800b0b6:	1855      	adds	r5, r2, r1
 800b0b8:	42a5      	cmp	r5, r4
 800b0ba:	d10b      	bne.n	800b0d4 <_free_r+0x70>
 800b0bc:	6824      	ldr	r4, [r4, #0]
 800b0be:	4421      	add	r1, r4
 800b0c0:	1854      	adds	r4, r2, r1
 800b0c2:	42a3      	cmp	r3, r4
 800b0c4:	6011      	str	r1, [r2, #0]
 800b0c6:	d1e0      	bne.n	800b08a <_free_r+0x26>
 800b0c8:	681c      	ldr	r4, [r3, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	6053      	str	r3, [r2, #4]
 800b0ce:	4421      	add	r1, r4
 800b0d0:	6011      	str	r1, [r2, #0]
 800b0d2:	e7da      	b.n	800b08a <_free_r+0x26>
 800b0d4:	d902      	bls.n	800b0dc <_free_r+0x78>
 800b0d6:	230c      	movs	r3, #12
 800b0d8:	6003      	str	r3, [r0, #0]
 800b0da:	e7d6      	b.n	800b08a <_free_r+0x26>
 800b0dc:	6825      	ldr	r5, [r4, #0]
 800b0de:	1961      	adds	r1, r4, r5
 800b0e0:	428b      	cmp	r3, r1
 800b0e2:	bf04      	itt	eq
 800b0e4:	6819      	ldreq	r1, [r3, #0]
 800b0e6:	685b      	ldreq	r3, [r3, #4]
 800b0e8:	6063      	str	r3, [r4, #4]
 800b0ea:	bf04      	itt	eq
 800b0ec:	1949      	addeq	r1, r1, r5
 800b0ee:	6021      	streq	r1, [r4, #0]
 800b0f0:	6054      	str	r4, [r2, #4]
 800b0f2:	e7ca      	b.n	800b08a <_free_r+0x26>
 800b0f4:	b003      	add	sp, #12
 800b0f6:	bd30      	pop	{r4, r5, pc}
 800b0f8:	200008b0 	.word	0x200008b0

0800b0fc <sbrk_aligned>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	4e0e      	ldr	r6, [pc, #56]	; (800b138 <sbrk_aligned+0x3c>)
 800b100:	460c      	mov	r4, r1
 800b102:	6831      	ldr	r1, [r6, #0]
 800b104:	4605      	mov	r5, r0
 800b106:	b911      	cbnz	r1, 800b10e <sbrk_aligned+0x12>
 800b108:	f000 f9e6 	bl	800b4d8 <_sbrk_r>
 800b10c:	6030      	str	r0, [r6, #0]
 800b10e:	4621      	mov	r1, r4
 800b110:	4628      	mov	r0, r5
 800b112:	f000 f9e1 	bl	800b4d8 <_sbrk_r>
 800b116:	1c43      	adds	r3, r0, #1
 800b118:	d00a      	beq.n	800b130 <sbrk_aligned+0x34>
 800b11a:	1cc4      	adds	r4, r0, #3
 800b11c:	f024 0403 	bic.w	r4, r4, #3
 800b120:	42a0      	cmp	r0, r4
 800b122:	d007      	beq.n	800b134 <sbrk_aligned+0x38>
 800b124:	1a21      	subs	r1, r4, r0
 800b126:	4628      	mov	r0, r5
 800b128:	f000 f9d6 	bl	800b4d8 <_sbrk_r>
 800b12c:	3001      	adds	r0, #1
 800b12e:	d101      	bne.n	800b134 <sbrk_aligned+0x38>
 800b130:	f04f 34ff 	mov.w	r4, #4294967295
 800b134:	4620      	mov	r0, r4
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	200008b4 	.word	0x200008b4

0800b13c <_malloc_r>:
 800b13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b140:	1ccd      	adds	r5, r1, #3
 800b142:	f025 0503 	bic.w	r5, r5, #3
 800b146:	3508      	adds	r5, #8
 800b148:	2d0c      	cmp	r5, #12
 800b14a:	bf38      	it	cc
 800b14c:	250c      	movcc	r5, #12
 800b14e:	2d00      	cmp	r5, #0
 800b150:	4607      	mov	r7, r0
 800b152:	db01      	blt.n	800b158 <_malloc_r+0x1c>
 800b154:	42a9      	cmp	r1, r5
 800b156:	d905      	bls.n	800b164 <_malloc_r+0x28>
 800b158:	230c      	movs	r3, #12
 800b15a:	603b      	str	r3, [r7, #0]
 800b15c:	2600      	movs	r6, #0
 800b15e:	4630      	mov	r0, r6
 800b160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b164:	4e2e      	ldr	r6, [pc, #184]	; (800b220 <_malloc_r+0xe4>)
 800b166:	f000 faa3 	bl	800b6b0 <__malloc_lock>
 800b16a:	6833      	ldr	r3, [r6, #0]
 800b16c:	461c      	mov	r4, r3
 800b16e:	bb34      	cbnz	r4, 800b1be <_malloc_r+0x82>
 800b170:	4629      	mov	r1, r5
 800b172:	4638      	mov	r0, r7
 800b174:	f7ff ffc2 	bl	800b0fc <sbrk_aligned>
 800b178:	1c43      	adds	r3, r0, #1
 800b17a:	4604      	mov	r4, r0
 800b17c:	d14d      	bne.n	800b21a <_malloc_r+0xde>
 800b17e:	6834      	ldr	r4, [r6, #0]
 800b180:	4626      	mov	r6, r4
 800b182:	2e00      	cmp	r6, #0
 800b184:	d140      	bne.n	800b208 <_malloc_r+0xcc>
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	4631      	mov	r1, r6
 800b18a:	4638      	mov	r0, r7
 800b18c:	eb04 0803 	add.w	r8, r4, r3
 800b190:	f000 f9a2 	bl	800b4d8 <_sbrk_r>
 800b194:	4580      	cmp	r8, r0
 800b196:	d13a      	bne.n	800b20e <_malloc_r+0xd2>
 800b198:	6821      	ldr	r1, [r4, #0]
 800b19a:	3503      	adds	r5, #3
 800b19c:	1a6d      	subs	r5, r5, r1
 800b19e:	f025 0503 	bic.w	r5, r5, #3
 800b1a2:	3508      	adds	r5, #8
 800b1a4:	2d0c      	cmp	r5, #12
 800b1a6:	bf38      	it	cc
 800b1a8:	250c      	movcc	r5, #12
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	f7ff ffa5 	bl	800b0fc <sbrk_aligned>
 800b1b2:	3001      	adds	r0, #1
 800b1b4:	d02b      	beq.n	800b20e <_malloc_r+0xd2>
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	442b      	add	r3, r5
 800b1ba:	6023      	str	r3, [r4, #0]
 800b1bc:	e00e      	b.n	800b1dc <_malloc_r+0xa0>
 800b1be:	6822      	ldr	r2, [r4, #0]
 800b1c0:	1b52      	subs	r2, r2, r5
 800b1c2:	d41e      	bmi.n	800b202 <_malloc_r+0xc6>
 800b1c4:	2a0b      	cmp	r2, #11
 800b1c6:	d916      	bls.n	800b1f6 <_malloc_r+0xba>
 800b1c8:	1961      	adds	r1, r4, r5
 800b1ca:	42a3      	cmp	r3, r4
 800b1cc:	6025      	str	r5, [r4, #0]
 800b1ce:	bf18      	it	ne
 800b1d0:	6059      	strne	r1, [r3, #4]
 800b1d2:	6863      	ldr	r3, [r4, #4]
 800b1d4:	bf08      	it	eq
 800b1d6:	6031      	streq	r1, [r6, #0]
 800b1d8:	5162      	str	r2, [r4, r5]
 800b1da:	604b      	str	r3, [r1, #4]
 800b1dc:	4638      	mov	r0, r7
 800b1de:	f104 060b 	add.w	r6, r4, #11
 800b1e2:	f000 fa6b 	bl	800b6bc <__malloc_unlock>
 800b1e6:	f026 0607 	bic.w	r6, r6, #7
 800b1ea:	1d23      	adds	r3, r4, #4
 800b1ec:	1af2      	subs	r2, r6, r3
 800b1ee:	d0b6      	beq.n	800b15e <_malloc_r+0x22>
 800b1f0:	1b9b      	subs	r3, r3, r6
 800b1f2:	50a3      	str	r3, [r4, r2]
 800b1f4:	e7b3      	b.n	800b15e <_malloc_r+0x22>
 800b1f6:	6862      	ldr	r2, [r4, #4]
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	bf0c      	ite	eq
 800b1fc:	6032      	streq	r2, [r6, #0]
 800b1fe:	605a      	strne	r2, [r3, #4]
 800b200:	e7ec      	b.n	800b1dc <_malloc_r+0xa0>
 800b202:	4623      	mov	r3, r4
 800b204:	6864      	ldr	r4, [r4, #4]
 800b206:	e7b2      	b.n	800b16e <_malloc_r+0x32>
 800b208:	4634      	mov	r4, r6
 800b20a:	6876      	ldr	r6, [r6, #4]
 800b20c:	e7b9      	b.n	800b182 <_malloc_r+0x46>
 800b20e:	230c      	movs	r3, #12
 800b210:	603b      	str	r3, [r7, #0]
 800b212:	4638      	mov	r0, r7
 800b214:	f000 fa52 	bl	800b6bc <__malloc_unlock>
 800b218:	e7a1      	b.n	800b15e <_malloc_r+0x22>
 800b21a:	6025      	str	r5, [r4, #0]
 800b21c:	e7de      	b.n	800b1dc <_malloc_r+0xa0>
 800b21e:	bf00      	nop
 800b220:	200008b0 	.word	0x200008b0

0800b224 <__sfputc_r>:
 800b224:	6893      	ldr	r3, [r2, #8]
 800b226:	3b01      	subs	r3, #1
 800b228:	2b00      	cmp	r3, #0
 800b22a:	b410      	push	{r4}
 800b22c:	6093      	str	r3, [r2, #8]
 800b22e:	da08      	bge.n	800b242 <__sfputc_r+0x1e>
 800b230:	6994      	ldr	r4, [r2, #24]
 800b232:	42a3      	cmp	r3, r4
 800b234:	db01      	blt.n	800b23a <__sfputc_r+0x16>
 800b236:	290a      	cmp	r1, #10
 800b238:	d103      	bne.n	800b242 <__sfputc_r+0x1e>
 800b23a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b23e:	f7fe ba01 	b.w	8009644 <__swbuf_r>
 800b242:	6813      	ldr	r3, [r2, #0]
 800b244:	1c58      	adds	r0, r3, #1
 800b246:	6010      	str	r0, [r2, #0]
 800b248:	7019      	strb	r1, [r3, #0]
 800b24a:	4608      	mov	r0, r1
 800b24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b250:	4770      	bx	lr

0800b252 <__sfputs_r>:
 800b252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b254:	4606      	mov	r6, r0
 800b256:	460f      	mov	r7, r1
 800b258:	4614      	mov	r4, r2
 800b25a:	18d5      	adds	r5, r2, r3
 800b25c:	42ac      	cmp	r4, r5
 800b25e:	d101      	bne.n	800b264 <__sfputs_r+0x12>
 800b260:	2000      	movs	r0, #0
 800b262:	e007      	b.n	800b274 <__sfputs_r+0x22>
 800b264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b268:	463a      	mov	r2, r7
 800b26a:	4630      	mov	r0, r6
 800b26c:	f7ff ffda 	bl	800b224 <__sfputc_r>
 800b270:	1c43      	adds	r3, r0, #1
 800b272:	d1f3      	bne.n	800b25c <__sfputs_r+0xa>
 800b274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b278 <_vfiprintf_r>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	460d      	mov	r5, r1
 800b27e:	b09d      	sub	sp, #116	; 0x74
 800b280:	4614      	mov	r4, r2
 800b282:	4698      	mov	r8, r3
 800b284:	4606      	mov	r6, r0
 800b286:	b118      	cbz	r0, 800b290 <_vfiprintf_r+0x18>
 800b288:	6983      	ldr	r3, [r0, #24]
 800b28a:	b90b      	cbnz	r3, 800b290 <_vfiprintf_r+0x18>
 800b28c:	f7ff fa30 	bl	800a6f0 <__sinit>
 800b290:	4b89      	ldr	r3, [pc, #548]	; (800b4b8 <_vfiprintf_r+0x240>)
 800b292:	429d      	cmp	r5, r3
 800b294:	d11b      	bne.n	800b2ce <_vfiprintf_r+0x56>
 800b296:	6875      	ldr	r5, [r6, #4]
 800b298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b29a:	07d9      	lsls	r1, r3, #31
 800b29c:	d405      	bmi.n	800b2aa <_vfiprintf_r+0x32>
 800b29e:	89ab      	ldrh	r3, [r5, #12]
 800b2a0:	059a      	lsls	r2, r3, #22
 800b2a2:	d402      	bmi.n	800b2aa <_vfiprintf_r+0x32>
 800b2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2a6:	f7ff fac6 	bl	800a836 <__retarget_lock_acquire_recursive>
 800b2aa:	89ab      	ldrh	r3, [r5, #12]
 800b2ac:	071b      	lsls	r3, r3, #28
 800b2ae:	d501      	bpl.n	800b2b4 <_vfiprintf_r+0x3c>
 800b2b0:	692b      	ldr	r3, [r5, #16]
 800b2b2:	b9eb      	cbnz	r3, 800b2f0 <_vfiprintf_r+0x78>
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f7fe fa16 	bl	80096e8 <__swsetup_r>
 800b2bc:	b1c0      	cbz	r0, 800b2f0 <_vfiprintf_r+0x78>
 800b2be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2c0:	07dc      	lsls	r4, r3, #31
 800b2c2:	d50e      	bpl.n	800b2e2 <_vfiprintf_r+0x6a>
 800b2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c8:	b01d      	add	sp, #116	; 0x74
 800b2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ce:	4b7b      	ldr	r3, [pc, #492]	; (800b4bc <_vfiprintf_r+0x244>)
 800b2d0:	429d      	cmp	r5, r3
 800b2d2:	d101      	bne.n	800b2d8 <_vfiprintf_r+0x60>
 800b2d4:	68b5      	ldr	r5, [r6, #8]
 800b2d6:	e7df      	b.n	800b298 <_vfiprintf_r+0x20>
 800b2d8:	4b79      	ldr	r3, [pc, #484]	; (800b4c0 <_vfiprintf_r+0x248>)
 800b2da:	429d      	cmp	r5, r3
 800b2dc:	bf08      	it	eq
 800b2de:	68f5      	ldreq	r5, [r6, #12]
 800b2e0:	e7da      	b.n	800b298 <_vfiprintf_r+0x20>
 800b2e2:	89ab      	ldrh	r3, [r5, #12]
 800b2e4:	0598      	lsls	r0, r3, #22
 800b2e6:	d4ed      	bmi.n	800b2c4 <_vfiprintf_r+0x4c>
 800b2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ea:	f7ff faa5 	bl	800a838 <__retarget_lock_release_recursive>
 800b2ee:	e7e9      	b.n	800b2c4 <_vfiprintf_r+0x4c>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f4:	2320      	movs	r3, #32
 800b2f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2fe:	2330      	movs	r3, #48	; 0x30
 800b300:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b4c4 <_vfiprintf_r+0x24c>
 800b304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b308:	f04f 0901 	mov.w	r9, #1
 800b30c:	4623      	mov	r3, r4
 800b30e:	469a      	mov	sl, r3
 800b310:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b314:	b10a      	cbz	r2, 800b31a <_vfiprintf_r+0xa2>
 800b316:	2a25      	cmp	r2, #37	; 0x25
 800b318:	d1f9      	bne.n	800b30e <_vfiprintf_r+0x96>
 800b31a:	ebba 0b04 	subs.w	fp, sl, r4
 800b31e:	d00b      	beq.n	800b338 <_vfiprintf_r+0xc0>
 800b320:	465b      	mov	r3, fp
 800b322:	4622      	mov	r2, r4
 800b324:	4629      	mov	r1, r5
 800b326:	4630      	mov	r0, r6
 800b328:	f7ff ff93 	bl	800b252 <__sfputs_r>
 800b32c:	3001      	adds	r0, #1
 800b32e:	f000 80aa 	beq.w	800b486 <_vfiprintf_r+0x20e>
 800b332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b334:	445a      	add	r2, fp
 800b336:	9209      	str	r2, [sp, #36]	; 0x24
 800b338:	f89a 3000 	ldrb.w	r3, [sl]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f000 80a2 	beq.w	800b486 <_vfiprintf_r+0x20e>
 800b342:	2300      	movs	r3, #0
 800b344:	f04f 32ff 	mov.w	r2, #4294967295
 800b348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b34c:	f10a 0a01 	add.w	sl, sl, #1
 800b350:	9304      	str	r3, [sp, #16]
 800b352:	9307      	str	r3, [sp, #28]
 800b354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b358:	931a      	str	r3, [sp, #104]	; 0x68
 800b35a:	4654      	mov	r4, sl
 800b35c:	2205      	movs	r2, #5
 800b35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b362:	4858      	ldr	r0, [pc, #352]	; (800b4c4 <_vfiprintf_r+0x24c>)
 800b364:	f7f4 ff64 	bl	8000230 <memchr>
 800b368:	9a04      	ldr	r2, [sp, #16]
 800b36a:	b9d8      	cbnz	r0, 800b3a4 <_vfiprintf_r+0x12c>
 800b36c:	06d1      	lsls	r1, r2, #27
 800b36e:	bf44      	itt	mi
 800b370:	2320      	movmi	r3, #32
 800b372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b376:	0713      	lsls	r3, r2, #28
 800b378:	bf44      	itt	mi
 800b37a:	232b      	movmi	r3, #43	; 0x2b
 800b37c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b380:	f89a 3000 	ldrb.w	r3, [sl]
 800b384:	2b2a      	cmp	r3, #42	; 0x2a
 800b386:	d015      	beq.n	800b3b4 <_vfiprintf_r+0x13c>
 800b388:	9a07      	ldr	r2, [sp, #28]
 800b38a:	4654      	mov	r4, sl
 800b38c:	2000      	movs	r0, #0
 800b38e:	f04f 0c0a 	mov.w	ip, #10
 800b392:	4621      	mov	r1, r4
 800b394:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b398:	3b30      	subs	r3, #48	; 0x30
 800b39a:	2b09      	cmp	r3, #9
 800b39c:	d94e      	bls.n	800b43c <_vfiprintf_r+0x1c4>
 800b39e:	b1b0      	cbz	r0, 800b3ce <_vfiprintf_r+0x156>
 800b3a0:	9207      	str	r2, [sp, #28]
 800b3a2:	e014      	b.n	800b3ce <_vfiprintf_r+0x156>
 800b3a4:	eba0 0308 	sub.w	r3, r0, r8
 800b3a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	46a2      	mov	sl, r4
 800b3b2:	e7d2      	b.n	800b35a <_vfiprintf_r+0xe2>
 800b3b4:	9b03      	ldr	r3, [sp, #12]
 800b3b6:	1d19      	adds	r1, r3, #4
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	9103      	str	r1, [sp, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	bfbb      	ittet	lt
 800b3c0:	425b      	neglt	r3, r3
 800b3c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b3c6:	9307      	strge	r3, [sp, #28]
 800b3c8:	9307      	strlt	r3, [sp, #28]
 800b3ca:	bfb8      	it	lt
 800b3cc:	9204      	strlt	r2, [sp, #16]
 800b3ce:	7823      	ldrb	r3, [r4, #0]
 800b3d0:	2b2e      	cmp	r3, #46	; 0x2e
 800b3d2:	d10c      	bne.n	800b3ee <_vfiprintf_r+0x176>
 800b3d4:	7863      	ldrb	r3, [r4, #1]
 800b3d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b3d8:	d135      	bne.n	800b446 <_vfiprintf_r+0x1ce>
 800b3da:	9b03      	ldr	r3, [sp, #12]
 800b3dc:	1d1a      	adds	r2, r3, #4
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	9203      	str	r2, [sp, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	bfb8      	it	lt
 800b3e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3ea:	3402      	adds	r4, #2
 800b3ec:	9305      	str	r3, [sp, #20]
 800b3ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4d4 <_vfiprintf_r+0x25c>
 800b3f2:	7821      	ldrb	r1, [r4, #0]
 800b3f4:	2203      	movs	r2, #3
 800b3f6:	4650      	mov	r0, sl
 800b3f8:	f7f4 ff1a 	bl	8000230 <memchr>
 800b3fc:	b140      	cbz	r0, 800b410 <_vfiprintf_r+0x198>
 800b3fe:	2340      	movs	r3, #64	; 0x40
 800b400:	eba0 000a 	sub.w	r0, r0, sl
 800b404:	fa03 f000 	lsl.w	r0, r3, r0
 800b408:	9b04      	ldr	r3, [sp, #16]
 800b40a:	4303      	orrs	r3, r0
 800b40c:	3401      	adds	r4, #1
 800b40e:	9304      	str	r3, [sp, #16]
 800b410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b414:	482c      	ldr	r0, [pc, #176]	; (800b4c8 <_vfiprintf_r+0x250>)
 800b416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b41a:	2206      	movs	r2, #6
 800b41c:	f7f4 ff08 	bl	8000230 <memchr>
 800b420:	2800      	cmp	r0, #0
 800b422:	d03f      	beq.n	800b4a4 <_vfiprintf_r+0x22c>
 800b424:	4b29      	ldr	r3, [pc, #164]	; (800b4cc <_vfiprintf_r+0x254>)
 800b426:	bb1b      	cbnz	r3, 800b470 <_vfiprintf_r+0x1f8>
 800b428:	9b03      	ldr	r3, [sp, #12]
 800b42a:	3307      	adds	r3, #7
 800b42c:	f023 0307 	bic.w	r3, r3, #7
 800b430:	3308      	adds	r3, #8
 800b432:	9303      	str	r3, [sp, #12]
 800b434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b436:	443b      	add	r3, r7
 800b438:	9309      	str	r3, [sp, #36]	; 0x24
 800b43a:	e767      	b.n	800b30c <_vfiprintf_r+0x94>
 800b43c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b440:	460c      	mov	r4, r1
 800b442:	2001      	movs	r0, #1
 800b444:	e7a5      	b.n	800b392 <_vfiprintf_r+0x11a>
 800b446:	2300      	movs	r3, #0
 800b448:	3401      	adds	r4, #1
 800b44a:	9305      	str	r3, [sp, #20]
 800b44c:	4619      	mov	r1, r3
 800b44e:	f04f 0c0a 	mov.w	ip, #10
 800b452:	4620      	mov	r0, r4
 800b454:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b458:	3a30      	subs	r2, #48	; 0x30
 800b45a:	2a09      	cmp	r2, #9
 800b45c:	d903      	bls.n	800b466 <_vfiprintf_r+0x1ee>
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d0c5      	beq.n	800b3ee <_vfiprintf_r+0x176>
 800b462:	9105      	str	r1, [sp, #20]
 800b464:	e7c3      	b.n	800b3ee <_vfiprintf_r+0x176>
 800b466:	fb0c 2101 	mla	r1, ip, r1, r2
 800b46a:	4604      	mov	r4, r0
 800b46c:	2301      	movs	r3, #1
 800b46e:	e7f0      	b.n	800b452 <_vfiprintf_r+0x1da>
 800b470:	ab03      	add	r3, sp, #12
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	462a      	mov	r2, r5
 800b476:	4b16      	ldr	r3, [pc, #88]	; (800b4d0 <_vfiprintf_r+0x258>)
 800b478:	a904      	add	r1, sp, #16
 800b47a:	4630      	mov	r0, r6
 800b47c:	f7fd fc8a 	bl	8008d94 <_printf_float>
 800b480:	4607      	mov	r7, r0
 800b482:	1c78      	adds	r0, r7, #1
 800b484:	d1d6      	bne.n	800b434 <_vfiprintf_r+0x1bc>
 800b486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b488:	07d9      	lsls	r1, r3, #31
 800b48a:	d405      	bmi.n	800b498 <_vfiprintf_r+0x220>
 800b48c:	89ab      	ldrh	r3, [r5, #12]
 800b48e:	059a      	lsls	r2, r3, #22
 800b490:	d402      	bmi.n	800b498 <_vfiprintf_r+0x220>
 800b492:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b494:	f7ff f9d0 	bl	800a838 <__retarget_lock_release_recursive>
 800b498:	89ab      	ldrh	r3, [r5, #12]
 800b49a:	065b      	lsls	r3, r3, #25
 800b49c:	f53f af12 	bmi.w	800b2c4 <_vfiprintf_r+0x4c>
 800b4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4a2:	e711      	b.n	800b2c8 <_vfiprintf_r+0x50>
 800b4a4:	ab03      	add	r3, sp, #12
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	462a      	mov	r2, r5
 800b4aa:	4b09      	ldr	r3, [pc, #36]	; (800b4d0 <_vfiprintf_r+0x258>)
 800b4ac:	a904      	add	r1, sp, #16
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	f7fd ff14 	bl	80092dc <_printf_i>
 800b4b4:	e7e4      	b.n	800b480 <_vfiprintf_r+0x208>
 800b4b6:	bf00      	nop
 800b4b8:	0800bb20 	.word	0x0800bb20
 800b4bc:	0800bb40 	.word	0x0800bb40
 800b4c0:	0800bb00 	.word	0x0800bb00
 800b4c4:	0800bcbc 	.word	0x0800bcbc
 800b4c8:	0800bcc6 	.word	0x0800bcc6
 800b4cc:	08008d95 	.word	0x08008d95
 800b4d0:	0800b253 	.word	0x0800b253
 800b4d4:	0800bcc2 	.word	0x0800bcc2

0800b4d8 <_sbrk_r>:
 800b4d8:	b538      	push	{r3, r4, r5, lr}
 800b4da:	4d06      	ldr	r5, [pc, #24]	; (800b4f4 <_sbrk_r+0x1c>)
 800b4dc:	2300      	movs	r3, #0
 800b4de:	4604      	mov	r4, r0
 800b4e0:	4608      	mov	r0, r1
 800b4e2:	602b      	str	r3, [r5, #0]
 800b4e4:	f7f9 f87a 	bl	80045dc <_sbrk>
 800b4e8:	1c43      	adds	r3, r0, #1
 800b4ea:	d102      	bne.n	800b4f2 <_sbrk_r+0x1a>
 800b4ec:	682b      	ldr	r3, [r5, #0]
 800b4ee:	b103      	cbz	r3, 800b4f2 <_sbrk_r+0x1a>
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	200008b8 	.word	0x200008b8

0800b4f8 <__sread>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b500:	f000 f8e2 	bl	800b6c8 <_read_r>
 800b504:	2800      	cmp	r0, #0
 800b506:	bfab      	itete	ge
 800b508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b50a:	89a3      	ldrhlt	r3, [r4, #12]
 800b50c:	181b      	addge	r3, r3, r0
 800b50e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b512:	bfac      	ite	ge
 800b514:	6563      	strge	r3, [r4, #84]	; 0x54
 800b516:	81a3      	strhlt	r3, [r4, #12]
 800b518:	bd10      	pop	{r4, pc}

0800b51a <__swrite>:
 800b51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b51e:	461f      	mov	r7, r3
 800b520:	898b      	ldrh	r3, [r1, #12]
 800b522:	05db      	lsls	r3, r3, #23
 800b524:	4605      	mov	r5, r0
 800b526:	460c      	mov	r4, r1
 800b528:	4616      	mov	r6, r2
 800b52a:	d505      	bpl.n	800b538 <__swrite+0x1e>
 800b52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b530:	2302      	movs	r3, #2
 800b532:	2200      	movs	r2, #0
 800b534:	f000 f898 	bl	800b668 <_lseek_r>
 800b538:	89a3      	ldrh	r3, [r4, #12]
 800b53a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b53e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b542:	81a3      	strh	r3, [r4, #12]
 800b544:	4632      	mov	r2, r6
 800b546:	463b      	mov	r3, r7
 800b548:	4628      	mov	r0, r5
 800b54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b54e:	f000 b817 	b.w	800b580 <_write_r>

0800b552 <__sseek>:
 800b552:	b510      	push	{r4, lr}
 800b554:	460c      	mov	r4, r1
 800b556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55a:	f000 f885 	bl	800b668 <_lseek_r>
 800b55e:	1c43      	adds	r3, r0, #1
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	bf15      	itete	ne
 800b564:	6560      	strne	r0, [r4, #84]	; 0x54
 800b566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b56a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b56e:	81a3      	strheq	r3, [r4, #12]
 800b570:	bf18      	it	ne
 800b572:	81a3      	strhne	r3, [r4, #12]
 800b574:	bd10      	pop	{r4, pc}

0800b576 <__sclose>:
 800b576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57a:	f000 b831 	b.w	800b5e0 <_close_r>
	...

0800b580 <_write_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	4d07      	ldr	r5, [pc, #28]	; (800b5a0 <_write_r+0x20>)
 800b584:	4604      	mov	r4, r0
 800b586:	4608      	mov	r0, r1
 800b588:	4611      	mov	r1, r2
 800b58a:	2200      	movs	r2, #0
 800b58c:	602a      	str	r2, [r5, #0]
 800b58e:	461a      	mov	r2, r3
 800b590:	f7f8 ffd3 	bl	800453a <_write>
 800b594:	1c43      	adds	r3, r0, #1
 800b596:	d102      	bne.n	800b59e <_write_r+0x1e>
 800b598:	682b      	ldr	r3, [r5, #0]
 800b59a:	b103      	cbz	r3, 800b59e <_write_r+0x1e>
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	bd38      	pop	{r3, r4, r5, pc}
 800b5a0:	200008b8 	.word	0x200008b8

0800b5a4 <__assert_func>:
 800b5a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5a6:	4614      	mov	r4, r2
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <__assert_func+0x2c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4605      	mov	r5, r0
 800b5b0:	68d8      	ldr	r0, [r3, #12]
 800b5b2:	b14c      	cbz	r4, 800b5c8 <__assert_func+0x24>
 800b5b4:	4b07      	ldr	r3, [pc, #28]	; (800b5d4 <__assert_func+0x30>)
 800b5b6:	9100      	str	r1, [sp, #0]
 800b5b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5bc:	4906      	ldr	r1, [pc, #24]	; (800b5d8 <__assert_func+0x34>)
 800b5be:	462b      	mov	r3, r5
 800b5c0:	f000 f81e 	bl	800b600 <fiprintf>
 800b5c4:	f000 f89f 	bl	800b706 <abort>
 800b5c8:	4b04      	ldr	r3, [pc, #16]	; (800b5dc <__assert_func+0x38>)
 800b5ca:	461c      	mov	r4, r3
 800b5cc:	e7f3      	b.n	800b5b6 <__assert_func+0x12>
 800b5ce:	bf00      	nop
 800b5d0:	20000018 	.word	0x20000018
 800b5d4:	0800bccd 	.word	0x0800bccd
 800b5d8:	0800bcda 	.word	0x0800bcda
 800b5dc:	0800bd08 	.word	0x0800bd08

0800b5e0 <_close_r>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	4d06      	ldr	r5, [pc, #24]	; (800b5fc <_close_r+0x1c>)
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	4608      	mov	r0, r1
 800b5ea:	602b      	str	r3, [r5, #0]
 800b5ec:	f7f8 ffc1 	bl	8004572 <_close>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_close_r+0x1a>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_close_r+0x1a>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	200008b8 	.word	0x200008b8

0800b600 <fiprintf>:
 800b600:	b40e      	push	{r1, r2, r3}
 800b602:	b503      	push	{r0, r1, lr}
 800b604:	4601      	mov	r1, r0
 800b606:	ab03      	add	r3, sp, #12
 800b608:	4805      	ldr	r0, [pc, #20]	; (800b620 <fiprintf+0x20>)
 800b60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b60e:	6800      	ldr	r0, [r0, #0]
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	f7ff fe31 	bl	800b278 <_vfiprintf_r>
 800b616:	b002      	add	sp, #8
 800b618:	f85d eb04 	ldr.w	lr, [sp], #4
 800b61c:	b003      	add	sp, #12
 800b61e:	4770      	bx	lr
 800b620:	20000018 	.word	0x20000018

0800b624 <_fstat_r>:
 800b624:	b538      	push	{r3, r4, r5, lr}
 800b626:	4d07      	ldr	r5, [pc, #28]	; (800b644 <_fstat_r+0x20>)
 800b628:	2300      	movs	r3, #0
 800b62a:	4604      	mov	r4, r0
 800b62c:	4608      	mov	r0, r1
 800b62e:	4611      	mov	r1, r2
 800b630:	602b      	str	r3, [r5, #0]
 800b632:	f7f8 ffaa 	bl	800458a <_fstat>
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	d102      	bne.n	800b640 <_fstat_r+0x1c>
 800b63a:	682b      	ldr	r3, [r5, #0]
 800b63c:	b103      	cbz	r3, 800b640 <_fstat_r+0x1c>
 800b63e:	6023      	str	r3, [r4, #0]
 800b640:	bd38      	pop	{r3, r4, r5, pc}
 800b642:	bf00      	nop
 800b644:	200008b8 	.word	0x200008b8

0800b648 <_isatty_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4d06      	ldr	r5, [pc, #24]	; (800b664 <_isatty_r+0x1c>)
 800b64c:	2300      	movs	r3, #0
 800b64e:	4604      	mov	r4, r0
 800b650:	4608      	mov	r0, r1
 800b652:	602b      	str	r3, [r5, #0]
 800b654:	f7f8 ffa9 	bl	80045aa <_isatty>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	d102      	bne.n	800b662 <_isatty_r+0x1a>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	b103      	cbz	r3, 800b662 <_isatty_r+0x1a>
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	200008b8 	.word	0x200008b8

0800b668 <_lseek_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4d07      	ldr	r5, [pc, #28]	; (800b688 <_lseek_r+0x20>)
 800b66c:	4604      	mov	r4, r0
 800b66e:	4608      	mov	r0, r1
 800b670:	4611      	mov	r1, r2
 800b672:	2200      	movs	r2, #0
 800b674:	602a      	str	r2, [r5, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	f7f8 ffa2 	bl	80045c0 <_lseek>
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	d102      	bne.n	800b686 <_lseek_r+0x1e>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	b103      	cbz	r3, 800b686 <_lseek_r+0x1e>
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	200008b8 	.word	0x200008b8

0800b68c <__ascii_mbtowc>:
 800b68c:	b082      	sub	sp, #8
 800b68e:	b901      	cbnz	r1, 800b692 <__ascii_mbtowc+0x6>
 800b690:	a901      	add	r1, sp, #4
 800b692:	b142      	cbz	r2, 800b6a6 <__ascii_mbtowc+0x1a>
 800b694:	b14b      	cbz	r3, 800b6aa <__ascii_mbtowc+0x1e>
 800b696:	7813      	ldrb	r3, [r2, #0]
 800b698:	600b      	str	r3, [r1, #0]
 800b69a:	7812      	ldrb	r2, [r2, #0]
 800b69c:	1e10      	subs	r0, r2, #0
 800b69e:	bf18      	it	ne
 800b6a0:	2001      	movne	r0, #1
 800b6a2:	b002      	add	sp, #8
 800b6a4:	4770      	bx	lr
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	e7fb      	b.n	800b6a2 <__ascii_mbtowc+0x16>
 800b6aa:	f06f 0001 	mvn.w	r0, #1
 800b6ae:	e7f8      	b.n	800b6a2 <__ascii_mbtowc+0x16>

0800b6b0 <__malloc_lock>:
 800b6b0:	4801      	ldr	r0, [pc, #4]	; (800b6b8 <__malloc_lock+0x8>)
 800b6b2:	f7ff b8c0 	b.w	800a836 <__retarget_lock_acquire_recursive>
 800b6b6:	bf00      	nop
 800b6b8:	200008ac 	.word	0x200008ac

0800b6bc <__malloc_unlock>:
 800b6bc:	4801      	ldr	r0, [pc, #4]	; (800b6c4 <__malloc_unlock+0x8>)
 800b6be:	f7ff b8bb 	b.w	800a838 <__retarget_lock_release_recursive>
 800b6c2:	bf00      	nop
 800b6c4:	200008ac 	.word	0x200008ac

0800b6c8 <_read_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	4d07      	ldr	r5, [pc, #28]	; (800b6e8 <_read_r+0x20>)
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	4608      	mov	r0, r1
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	602a      	str	r2, [r5, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f7f8 ff12 	bl	8004500 <_read>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_read_r+0x1e>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_read_r+0x1e>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	200008b8 	.word	0x200008b8

0800b6ec <__ascii_wctomb>:
 800b6ec:	b149      	cbz	r1, 800b702 <__ascii_wctomb+0x16>
 800b6ee:	2aff      	cmp	r2, #255	; 0xff
 800b6f0:	bf85      	ittet	hi
 800b6f2:	238a      	movhi	r3, #138	; 0x8a
 800b6f4:	6003      	strhi	r3, [r0, #0]
 800b6f6:	700a      	strbls	r2, [r1, #0]
 800b6f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b6fc:	bf98      	it	ls
 800b6fe:	2001      	movls	r0, #1
 800b700:	4770      	bx	lr
 800b702:	4608      	mov	r0, r1
 800b704:	4770      	bx	lr

0800b706 <abort>:
 800b706:	b508      	push	{r3, lr}
 800b708:	2006      	movs	r0, #6
 800b70a:	f000 f82b 	bl	800b764 <raise>
 800b70e:	2001      	movs	r0, #1
 800b710:	f7f8 feec 	bl	80044ec <_exit>

0800b714 <_raise_r>:
 800b714:	291f      	cmp	r1, #31
 800b716:	b538      	push	{r3, r4, r5, lr}
 800b718:	4604      	mov	r4, r0
 800b71a:	460d      	mov	r5, r1
 800b71c:	d904      	bls.n	800b728 <_raise_r+0x14>
 800b71e:	2316      	movs	r3, #22
 800b720:	6003      	str	r3, [r0, #0]
 800b722:	f04f 30ff 	mov.w	r0, #4294967295
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b72a:	b112      	cbz	r2, 800b732 <_raise_r+0x1e>
 800b72c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b730:	b94b      	cbnz	r3, 800b746 <_raise_r+0x32>
 800b732:	4620      	mov	r0, r4
 800b734:	f000 f830 	bl	800b798 <_getpid_r>
 800b738:	462a      	mov	r2, r5
 800b73a:	4601      	mov	r1, r0
 800b73c:	4620      	mov	r0, r4
 800b73e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b742:	f000 b817 	b.w	800b774 <_kill_r>
 800b746:	2b01      	cmp	r3, #1
 800b748:	d00a      	beq.n	800b760 <_raise_r+0x4c>
 800b74a:	1c59      	adds	r1, r3, #1
 800b74c:	d103      	bne.n	800b756 <_raise_r+0x42>
 800b74e:	2316      	movs	r3, #22
 800b750:	6003      	str	r3, [r0, #0]
 800b752:	2001      	movs	r0, #1
 800b754:	e7e7      	b.n	800b726 <_raise_r+0x12>
 800b756:	2400      	movs	r4, #0
 800b758:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b75c:	4628      	mov	r0, r5
 800b75e:	4798      	blx	r3
 800b760:	2000      	movs	r0, #0
 800b762:	e7e0      	b.n	800b726 <_raise_r+0x12>

0800b764 <raise>:
 800b764:	4b02      	ldr	r3, [pc, #8]	; (800b770 <raise+0xc>)
 800b766:	4601      	mov	r1, r0
 800b768:	6818      	ldr	r0, [r3, #0]
 800b76a:	f7ff bfd3 	b.w	800b714 <_raise_r>
 800b76e:	bf00      	nop
 800b770:	20000018 	.word	0x20000018

0800b774 <_kill_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4d07      	ldr	r5, [pc, #28]	; (800b794 <_kill_r+0x20>)
 800b778:	2300      	movs	r3, #0
 800b77a:	4604      	mov	r4, r0
 800b77c:	4608      	mov	r0, r1
 800b77e:	4611      	mov	r1, r2
 800b780:	602b      	str	r3, [r5, #0]
 800b782:	f7f8 fea3 	bl	80044cc <_kill>
 800b786:	1c43      	adds	r3, r0, #1
 800b788:	d102      	bne.n	800b790 <_kill_r+0x1c>
 800b78a:	682b      	ldr	r3, [r5, #0]
 800b78c:	b103      	cbz	r3, 800b790 <_kill_r+0x1c>
 800b78e:	6023      	str	r3, [r4, #0]
 800b790:	bd38      	pop	{r3, r4, r5, pc}
 800b792:	bf00      	nop
 800b794:	200008b8 	.word	0x200008b8

0800b798 <_getpid_r>:
 800b798:	f7f8 be90 	b.w	80044bc <_getpid>

0800b79c <_init>:
 800b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79e:	bf00      	nop
 800b7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7a2:	bc08      	pop	{r3}
 800b7a4:	469e      	mov	lr, r3
 800b7a6:	4770      	bx	lr

0800b7a8 <_fini>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	bf00      	nop
 800b7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ae:	bc08      	pop	{r3}
 800b7b0:	469e      	mov	lr, r3
 800b7b2:	4770      	bx	lr
